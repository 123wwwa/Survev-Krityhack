import { v as v2, C as Constants, D as DamageType, G as GameConfig, H as HasteType, m as math, a as api, l as loadout$2, h as helpers, u as util, p as proxy, $, P as PingDefs, d as device, E as EmoteSlot, b as Container, c as EmotesDefs, T as Texture, S as Sprite, e as GameObjectDefs, I as Input, f as coldet, g as Graphics, M as MapObjectDefs, i as collider, j as assert, k as MapDefs, n as TextStyle, o as Text, R as RenderTexture, q as SCALE_MODES, r as Point, B as BulletDefs, s as ExplosionDefs, A as Anim, t as Action, w as GasMode, x as TeamMode, y as RoleDefs, z as SCOPE_LEVELS, F as GEAR_TYPES, J as PickupMsgType, K as MsgType, L as MsgStream, N as RENDERER_TYPE, W as WeaponSlot, U as UpdatePassMsg, O as getDefaultExportFromCjs, Q as BasePrepare, V as Spritesheet, X as TeamModeToString, Y as CrosshairDefs, Z as Rarity, _ as EmoteCategory, a0 as PassDefs, a1 as QuestDefs, a2 as ConfigManager, a3 as Localization, a4 as PRECISION, a5 as settings, a6 as Application$1 } from"./WmzmwJVW.js";
class AliveCountsMsg {
  teamAliveCounts = [];
  serialize(s) {
    const count = this.teamAliveCounts.length;
    s.writeUint8(count);
    for (let i2 = 0; i2 < count; i2++) {
      s.writeUint8(this.teamAliveCounts[i2]);
    }
  }
  deserialize(s) {
    const count = s.readUint8();
    for (let i2 = 0; i2 < count; i2++) {
      const alive = s.readUint8();
      this.teamAliveCounts.push(alive);
    }
  }
}
class DisconnectMsg {
  reason = "";
  serialize(s) {
    s.writeString(this.reason);
  }
  deserialize(s) {
    this.reason = s.readString();
  }
}
class DropItemMsg {
  item = "";
  weapIdx = 0;
  serialize(s) {
    s.writeGameType(this.item);
    s.writeUint8(this.weapIdx);
    s.writeBits(0, 6);
  }
  deserialize(s) {
    this.item = s.readGameType();
    this.weapIdx = s.readUint8();
    s.readBits(6);
  }
}
class EmoteMsg {
  pos = v2.create(0, 0);
  type = "";
  isPing = false;
  serialize(s) {
    s.writeVec(this.pos, 0, 0, 1024, 1024, 16);
    s.writeGameType(this.type);
    s.writeBoolean(this.isPing);
    s.writeBits(0, 5);
  }
  deserialize(s) {
    this.pos = s.readVec(0, 0, 1024, 1024, 16);
    this.type = s.readGameType();
    this.isPing = s.readBoolean();
    s.readBits(5);
  }
}
class PlayerStatsMsg {
  playerStats = {
    playerId: 0,
    timeAlive: 0,
    kills: 0,
    dead: false,
    damageDealt: 0,
    damageTaken: 0
  };
  serialize(s) {
    s.writeUint16(this.playerStats.playerId);
    s.writeUint16(this.playerStats.timeAlive);
    s.writeUint8(this.playerStats.kills);
    s.writeUint8(this.playerStats.dead);
    s.writeUint16(Math.round(this.playerStats.damageDealt));
    s.writeUint16(Math.round(this.playerStats.damageTaken));
  }
  deserialize(s) {
    const playerStats = {};
    playerStats.playerId = s.readUint16();
    playerStats.timeAlive = s.readUint16();
    playerStats.kills = s.readUint8();
    playerStats.dead = s.readUint8();
    playerStats.damageDealt = s.readUint16();
    playerStats.damageTaken = s.readUint16();
    this.playerStats = playerStats;
  }
}
class GameOverMsg {
  teamId = 0;
  teamRank = 0;
  gameOver = false;
  winningTeamId = 0;
  playerStats = [];
  serialize(s) {
    s.writeUint8(this.teamId);
    s.writeUint8(this.teamRank);
    s.writeUint8(+this.gameOver);
    s.writeUint8(this.winningTeamId);
    s.writeUint8(this.playerStats.length);
    for (let i2 = 0; i2 < this.playerStats.length; i2++) {
      const stats = this.playerStats[i2];
      const statsMsg = new PlayerStatsMsg();
      statsMsg.playerStats = stats;
      statsMsg.serialize(s);
    }
  }
  deserialize(s) {
    this.teamId = s.readUint8();
    this.teamRank = s.readUint8();
    this.gameOver = s.readUint8();
    this.winningTeamId = s.readUint8();
    for (let count = s.readUint8(), i2 = 0; i2 < count; i2++) {
      const statsMsg = new PlayerStatsMsg();
      statsMsg.deserialize(s);
      this.playerStats.push(statsMsg.playerStats);
    }
  }
}
class InputMsg {
  seq = 0;
  moveLeft = false;
  moveRight = false;
  moveUp = false;
  moveDown = false;
  shootStart = false;
  shootHold = false;
  portrait = false;
  touchMoveActive = false;
  touchMoveDir = v2.create(1, 0);
  touchMoveLen = 255;
  toMouseDir = v2.create(1, 0);
  toMouseLen = 0;
  inputs = [];
  useItem = "";
  addInput(input) {
    if (this.inputs.length < 7 && !this.inputs.includes(input)) {
      this.inputs.push(input);
    }
  }
  serialize(s) {
    s.writeUint8(this.seq);
    s.writeBoolean(this.moveLeft);
    s.writeBoolean(this.moveRight);
    s.writeBoolean(this.moveUp);
    s.writeBoolean(this.moveDown);
    s.writeBoolean(this.shootStart);
    s.writeBoolean(this.shootHold);
    s.writeBoolean(this.portrait);
    s.writeBoolean(this.touchMoveActive);
    if (this.touchMoveActive) {
      s.writeUnitVec(this.touchMoveDir, 8);
      s.writeUint8(this.touchMoveLen);
    }
    s.writeUnitVec(this.toMouseDir, 10);
    s.writeFloat(this.toMouseLen, 0, Constants.MouseMaxDist, 8);
    s.writeBits(this.inputs.length, 4);
    for (let i2 = 0; i2 < this.inputs.length; i2++) {
      s.writeUint8(this.inputs[i2]);
    }
    s.writeGameType(this.useItem);
    s.writeBits(0, 6);
  }
  deserialize(s) {
    this.seq = s.readUint8();
    this.moveLeft = s.readBoolean();
    this.moveRight = s.readBoolean();
    this.moveUp = s.readBoolean();
    this.moveDown = s.readBoolean();
    this.shootStart = s.readBoolean();
    this.shootHold = s.readBoolean();
    this.portrait = s.readBoolean();
    this.touchMoveActive = s.readBoolean();
    if (this.touchMoveActive) {
      this.touchMoveDir = s.readUnitVec(8);
      this.touchMoveLen = s.readUint8();
    }
    this.toMouseDir = s.readUnitVec(10);
    this.toMouseLen = s.readFloat(0, Constants.MouseMaxDist, 8);
    const length = s.readBits(4);
    for (let i2 = 0; i2 < length; i2++) {
      this.inputs.push(s.readUint8());
    }
    this.useItem = s.readGameType();
    s.readBits(6);
  }
}
class JoinedMsg {
  teamMode;
  playerId = 0;
  started = false;
  emotes = [];
  serialize(s) {
    s.writeUint8(this.teamMode);
    s.writeUint16(this.playerId);
    s.writeBoolean(this.started);
    s.writeUint8(this.emotes.length);
    for (let i2 = 0; i2 < this.emotes.length; i2++) {
      s.writeGameType(this.emotes[i2]);
    }
    s.writeAlignToNextByte();
  }
  deserialize(s) {
    this.teamMode = s.readUint8();
    this.playerId = s.readUint16();
    this.started = s.readBoolean();
    const count = s.readUint8();
    for (let i2 = 0; i2 < count; i2++) {
      const emote = s.readGameType();
      this.emotes.push(emote);
    }
    s.readAlignToNextByte();
  }
}
class JoinMsg {
  protocol = 0;
  matchPriv = "";
  loadoutPriv = "";
  questPriv = "";
  name = "";
  useTouch = false;
  isMobile = false;
  bot = false;
  loadout = {
    outfit: "",
    melee: "",
    heal: "",
    boost: "",
    emotes: []
  };
  deserialize(s) {
    this.protocol = s.readUint32();
    this.matchPriv = s.readString();
    this.loadoutPriv = s.readString();
    this.questPriv = s.readString();
    this.name = s.readString(Constants.PlayerNameMaxLen);
    this.useTouch = s.readBoolean();
    this.isMobile = s.readBoolean();
    this.bot = s.readBoolean();
    this.loadout.outfit = s.readGameType();
    this.loadout.melee = s.readGameType();
    this.loadout.heal = s.readGameType();
    this.loadout.boost = s.readGameType();
    this.loadout.emotes = [];
    const count = s.readUint8();
    for (let i2 = 0; i2 < count; i2++) {
      const emote = s.readGameType();
      this.loadout.emotes.push(emote);
    }
    s.readAlignToNextByte();
  }
  serialize(s) {
    s.writeUint32(this.protocol);
    s.writeString(this.matchPriv);
    s.writeString(this.loadoutPriv);
    s.writeString(this.questPriv);
    s.writeString(this.name, Constants.PlayerNameMaxLen);
    s.writeBoolean(this.useTouch);
    s.writeBoolean(this.isMobile);
    s.writeBoolean(this.bot);
    s.writeGameType(this.loadout.outfit);
    s.writeGameType(this.loadout.melee);
    s.writeGameType(this.loadout.heal);
    s.writeGameType(this.loadout.boost);
    s.writeUint8(this.loadout.emotes.length);
    for (const emote of this.loadout.emotes) {
      s.writeGameType(emote);
    }
    s.writeAlignToNextByte();
  }
}
class KillMsg {
  itemSourceType = "";
  mapSourceType = "";
  damageType = DamageType.Player;
  targetId = 0;
  killerId = 0;
  killCreditId = 0;
  killerKills = 0;
  downed = false;
  killed = false;
  serialize(s) {
    s.writeUint8(this.damageType);
    s.writeGameType(this.itemSourceType);
    s.writeMapType(this.mapSourceType);
    s.writeUint16(this.targetId);
    s.writeUint16(this.killerId);
    s.writeUint16(this.killCreditId);
    s.writeUint8(this.killerKills);
    s.writeBoolean(this.downed);
    s.writeBoolean(this.killed);
    s.writeAlignToNextByte();
  }
  deserialize(s) {
    this.damageType = s.readUint8();
    this.itemSourceType = s.readGameType();
    this.mapSourceType = s.readMapType();
    this.targetId = s.readUint16();
    this.killerId = s.readUint16();
    this.killCreditId = s.readUint16();
    this.killerKills = s.readUint8();
    this.downed = s.readBoolean();
    this.killed = s.readBoolean();
    s.readAlignToNextByte();
  }
}
function serializeMapRiver(s, data) {
  s.writeFloat32(data.width);
  s.writeUint8(data.looped);
  s.writeUint8(data.points.length);
  for (const point of data.points) {
    s.writeVec(point, 0, 0, 1024, 1024, 16);
  }
}
function deserializeMapRiver(s, data) {
  data.width = s.readFloat32();
  data.looped = s.readUint8();
  data.points = [];
  const count = s.readUint8();
  for (let i2 = 0; i2 < count; i2++) {
    const pos = s.readVec(0, 0, 1024, 1024, 16);
    data.points.push(pos);
  }
}
function serializeMapPlace(s, place) {
  s.writeString(place.name);
  s.writeVec(place.pos, 0, 0, 1024, 1024, 16);
}
function deserializeMapPlaces(s, place) {
  place.name = s.readString();
  place.pos = s.readVec(0, 0, 1024, 1024, 16);
}
function serializeMapGroundPatch(s, patch) {
  s.writeVec(patch.min, 0, 0, 1024, 1024, 16);
  s.writeVec(patch.max, 0, 0, 1024, 1024, 16);
  s.writeUint32(patch.color);
  s.writeFloat32(patch.roughness);
  s.writeFloat32(patch.offsetDist);
  s.writeBits(patch.order, 7);
  s.writeBoolean(patch.useAsMapShape);
}
function deserializeMapGroundPatch(s, patch) {
  patch.min = s.readVec(0, 0, 1024, 1024, 16);
  patch.max = s.readVec(0, 0, 1024, 1024, 16);
  patch.color = s.readUint32();
  patch.roughness = s.readFloat32();
  patch.offsetDist = s.readFloat32();
  patch.order = s.readBits(7);
  patch.useAsMapShape = s.readBoolean();
}
function serializeMapObj(s, obj) {
  s.writeVec(obj.pos, 0, 0, 1024, 1024, 16);
  s.writeFloat(obj.scale, Constants.MapObjectMinScale, Constants.MapObjectMaxScale, 8);
  s.writeMapType(obj.type);
  s.writeBits(obj.ori, 2);
  s.writeBits(0, 2);
}
function deserializeMapObj(s, data) {
  data.pos = s.readVec(0, 0, 1024, 1024, 16);
  data.scale = s.readFloat(Constants.MapObjectMinScale, Constants.MapObjectMaxScale, 8);
  data.type = s.readMapType();
  data.ori = s.readBits(2);
  s.readBits(2);
}
class MapMsg {
  mapName = "";
  seed = 0;
  width = 0;
  height = 0;
  shoreInset = 0;
  grassInset = 0;
  rivers = [];
  places = [];
  objects = [];
  groundPatches = [];
  serialize(s) {
    s.writeString(this.mapName, Constants.MapNameMaxLen);
    s.writeUint32(this.seed);
    s.writeUint16(this.width);
    s.writeUint16(this.height);
    s.writeUint16(this.shoreInset);
    s.writeUint16(this.grassInset);
    s.writeUint8(this.rivers.length);
    for (let i2 = 0; i2 < this.rivers.length; i2++) {
      serializeMapRiver(s, this.rivers[i2]);
    }
    s.writeUint8(this.places.length);
    for (let i2 = 0; i2 < this.places.length; i2++) {
      serializeMapPlace(s, this.places[i2]);
    }
    s.writeUint16(this.objects.length);
    for (let i2 = 0; i2 < this.objects.length; i2++) {
      serializeMapObj(s, this.objects[i2]);
    }
    s.writeUint8(this.groundPatches.length);
    for (let i2 = 0; i2 < this.groundPatches.length; i2++) {
      serializeMapGroundPatch(s, this.groundPatches[i2]);
    }
  }
  deserialize(s) {
    this.mapName = s.readString(Constants.MapNameMaxLen);
    this.seed = s.readUint32();
    this.width = s.readUint16();
    this.height = s.readUint16();
    this.shoreInset = s.readUint16();
    this.grassInset = s.readUint16();
    const riverCount = s.readUint8();
    for (let i2 = 0; i2 < riverCount; i2++) {
      const river = {};
      deserializeMapRiver(s, river);
      this.rivers.push(river);
    }
    const placeCount = s.readUint8();
    for (let i2 = 0; i2 < placeCount; i2++) {
      const place = {};
      deserializeMapPlaces(s, place);
      this.places.push(place);
    }
    const objCount = s.readUint16();
    for (let i2 = 0; i2 < objCount; i2++) {
      const obj = {};
      deserializeMapObj(s, obj);
      this.objects.push(obj);
    }
    const patchCount = s.readUint8();
    for (let i2 = 0; i2 < patchCount; i2++) {
      const patch = {};
      deserializeMapGroundPatch(s, patch);
      this.groundPatches.push(patch);
    }
  }
}
class PerkModeRoleSelectMsg {
  role = "";
  serialize(s) {
    s.writeGameType(this.role);
    s.writeBits(0, 6);
  }
  deserialize(s) {
    this.role = s.readGameType();
    s.readBits(6);
  }
}
class PickupMsg {
  type = 0;
  item = "";
  count = 0;
  serialize(s) {
    s.writeUint8(this.type);
    s.writeGameType(this.item);
    s.writeUint8(this.count);
    s.writeBits(0, 6);
  }
  deserialize(s) {
    this.type = s.readUint8();
    this.item = s.readGameType();
    this.count = s.readUint8();
    s.readBits(6);
  }
}
class RoleAnnouncementMsg {
  playerId = 0;
  killerId = 0;
  role = "";
  assigned = false;
  killed = false;
  serialize(s) {
    s.writeUint16(this.playerId);
    s.writeUint16(this.killerId);
    s.writeGameType(this.role);
    s.writeBoolean(this.assigned);
    s.writeBoolean(this.killed);
    s.writeAlignToNextByte();
  }
  deserialize(s) {
    this.playerId = s.readUint16();
    this.killerId = s.readUint16();
    this.role = s.readGameType();
    this.assigned = s.readBoolean();
    this.killed = s.readBoolean();
    s.readAlignToNextByte();
  }
}
class SpectateMsg {
  specBegin = false;
  specNext = false;
  specPrev = false;
  specForce = false;
  serialize(s) {
    s.writeBoolean(this.specBegin);
    s.writeBoolean(this.specNext);
    s.writeBoolean(this.specPrev);
    s.writeBoolean(this.specForce);
    s.writeBits(0, 4);
  }
  deserialize(s) {
    this.specBegin = s.readBoolean();
    this.specNext = s.readBoolean();
    this.specPrev = s.readBoolean();
    this.specForce = s.readBoolean();
    s.readBits(4);
  }
}
var ObjectType = /* @__PURE__ */ ((ObjectType2) => {
  ObjectType2[ObjectType2["Invalid"] = 0] = "Invalid";
  ObjectType2[ObjectType2["Player"] = 1] = "Player";
  ObjectType2[ObjectType2["Obstacle"] = 2] = "Obstacle";
  ObjectType2[ObjectType2["Loot"] = 3] = "Loot";
  ObjectType2[ObjectType2["LootSpawner"] = 4] = "LootSpawner";
  ObjectType2[ObjectType2["DeadBody"] = 5] = "DeadBody";
  ObjectType2[ObjectType2["Building"] = 6] = "Building";
  ObjectType2[ObjectType2["Structure"] = 7] = "Structure";
  ObjectType2[ObjectType2["Decal"] = 8] = "Decal";
  ObjectType2[ObjectType2["Projectile"] = 9] = "Projectile";
  ObjectType2[ObjectType2["Smoke"] = 10] = "Smoke";
  ObjectType2[ObjectType2["Airdrop"] = 11] = "Airdrop";
  return ObjectType2;
})(ObjectType || {});
const ObjectSerializeFns = {
  [
    1
    /* Player */
  ]: {
    serializedFullSize: 32,
    serializePart: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
      s.writeUnitVec(data.dir, 8);
    },
    serializeFull: (s, data) => {
      s.writeGameType(data.outfit);
      s.writeGameType(data.backpack);
      s.writeGameType(data.helmet);
      s.writeGameType(data.chest);
      s.writeGameType(data.activeWeapon);
      s.writeBits(data.layer, 2);
      s.writeBoolean(data.dead);
      s.writeBoolean(data.downed);
      s.writeBits(data.animType, 3);
      s.writeBits(data.animSeq, 3);
      s.writeBits(data.actionType, 3);
      s.writeBits(data.actionSeq, 3);
      s.writeBoolean(data.wearingPan);
      s.writeBoolean(data.healEffect);
      s.writeBoolean(data.frozen);
      s.writeBits(data.frozenOri, 2);
      s.writeBoolean(data.hasteType !== HasteType.None);
      if (data.hasteType !== HasteType.None) {
        s.writeBits(data.hasteType, 3);
        s.writeBits(data.hasteSeq, 3);
      }
      s.writeBoolean(data.actionItem !== "");
      if (data.actionItem !== "") {
        s.writeGameType(data.actionItem);
      }
      s.writeBoolean(data.hasScale);
      if (data.hasScale) {
        s.writeFloat(
          data.scale,
          Constants.PlayerMinScale,
          Constants.PlayerMaxScale,
          8
        );
      }
      s.writeBoolean(data.role !== "");
      if (data.role !== "") {
        s.writeGameType(data.role);
      }
      s.writeBoolean(data.hasPerks);
      if (data.hasPerks) {
        const perkAmount = math.min(data.perks.length, Constants.MaxPerks - 1);
        s.writeBits(perkAmount, 3);
        for (let i2 = 0; i2 < perkAmount; i2++) {
          const perk = data.perks[i2];
          s.writeGameType(perk.type);
          s.writeBoolean(perk.droppable);
        }
      }
      s.writeAlignToNextByte();
    },
    deserializePart: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
      data.dir = s.readUnitVec(8);
    },
    deserializeFull(s, data) {
      data.outfit = s.readGameType();
      data.backpack = s.readGameType();
      data.helmet = s.readGameType();
      data.chest = s.readGameType();
      data.activeWeapon = s.readGameType();
      data.layer = s.readBits(2);
      data.dead = s.readBoolean();
      data.downed = s.readBoolean();
      data.animType = s.readBits(3);
      data.animSeq = s.readBits(3);
      data.actionType = s.readBits(3);
      data.actionSeq = s.readBits(3);
      data.wearingPan = s.readBoolean();
      data.healEffect = s.readBoolean();
      data.frozen = s.readBoolean();
      data.frozenOri = s.readBits(2);
      data.hasteType = 0;
      data.hasteSeq = -1;
      if (s.readBoolean()) {
        data.hasteType = s.readBits(3);
        data.hasteSeq = s.readBits(3);
      }
      const hasActionItem = s.readBoolean();
      data.actionItem = hasActionItem ? s.readGameType() : "";
      const hasScale = s.readBoolean();
      data.scale = hasScale ? s.readFloat(Constants.PlayerMinScale, Constants.PlayerMaxScale, 8) : 1;
      const hasRole = s.readBoolean();
      data.role = hasRole ? s.readGameType() : "";
      data.perks = [];
      const hasPerks = s.readBoolean();
      if (hasPerks) {
        const perkCount = s.readBits(3);
        for (let i2 = 0; i2 < perkCount; i2++) {
          const type = s.readGameType();
          const droppable = s.readBoolean();
          data.perks.push({
            type,
            droppable
          });
        }
      }
      s.readAlignToNextByte();
    }
  },
  [
    2
    /* Obstacle */
  ]: {
    serializedFullSize: 0,
    serializePart: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
      s.writeBits(data.ori, 2);
      s.writeFloat(
        data.scale,
        Constants.MapObjectMinScale,
        Constants.MapObjectMaxScale,
        8
      );
      s.writeBits(0, 6);
    },
    serializeFull: (s, data) => {
      s.writeFloat(data.healthT, 0, 1, 8);
      s.writeMapType(data.type);
      s.writeBits(data.layer, 2);
      s.writeBoolean(data.dead);
      s.writeBoolean(data.isDoor);
      if (data.isDoor) {
        s.writeBoolean(data.door.open);
        s.writeBoolean(data.door.canUse);
        s.writeBoolean(data.door.locked);
        s.writeBits(data.door.seq, 5);
      }
      s.writeBoolean(data.isButton);
      if (data.isButton) {
        s.writeBoolean(data.button.onOff);
        s.writeBoolean(data.button.canUse);
        s.writeBits(data.button.seq, 6);
      }
      s.writeBoolean(data.isPuzzlePiece);
      if (data.isPuzzlePiece) s.writeUint16(data.parentBuildingId);
      s.writeBoolean(data.isSkin);
      if (data.isSkin) s.writeUint16(data.skinPlayerId);
      s.writeBits(0, 5);
    },
    deserializePart: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
      data.ori = s.readBits(2);
      data.scale = s.readFloat(
        Constants.MapObjectMinScale,
        Constants.MapObjectMaxScale,
        8
      );
      s.readBits(6);
    },
    deserializeFull: (s, data) => {
      data.healthT = s.readFloat(0, 1, 8);
      data.type = s.readMapType();
      data.layer = s.readBits(2);
      data.dead = s.readBoolean();
      data.isDoor = s.readBoolean();
      if (data.isDoor) {
        data.door = {};
        data.door.open = s.readBoolean();
        data.door.canUse = s.readBoolean();
        data.door.locked = s.readBoolean();
        data.door.seq = s.readBits(5);
      }
      data.isButton = s.readBoolean();
      if (data.isButton) {
        data.button = {};
        data.button.onOff = s.readBoolean();
        data.button.canUse = s.readBoolean();
        data.button.seq = s.readBits(6);
      }
      data.isPuzzlePiece = s.readBoolean();
      if (data.isPuzzlePiece) {
        data.parentBuildingId = s.readUint16();
      }
      data.isSkin = s.readBoolean();
      if (data.isSkin) {
        data.skinPlayerId = s.readUint16();
      }
      s.readBits(5);
    }
  },
  [
    6
    /* Building */
  ]: {
    serializedFullSize: 0,
    serializePart: (s, data) => {
      s.writeBoolean(data.ceilingDead);
      s.writeBoolean(data.occupied);
      s.writeBoolean(data.ceilingDamaged);
      s.writeBoolean(data.hasPuzzle);
      if (data.hasPuzzle) {
        s.writeBoolean(data.puzzleSolved);
        s.writeBits(data.puzzleErrSeq, 7);
      }
      s.writeBits(0, 4);
    },
    serializeFull: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
      s.writeMapType(data.type);
      s.writeBits(data.ori, 2);
      s.writeBits(data.layer, 2);
    },
    deserializePart: (s, data) => {
      data.ceilingDead = s.readBoolean();
      data.occupied = s.readBoolean();
      data.ceilingDamaged = s.readBoolean();
      data.hasPuzzle = s.readBoolean();
      if (data.hasPuzzle) {
        data.puzzleSolved = s.readBoolean();
        data.puzzleErrSeq = s.readBits(7);
      }
      s.readBits(4);
    },
    deserializeFull: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
      data.type = s.readMapType();
      data.ori = s.readBits(2);
      data.layer = s.readBits(2);
    }
  },
  [
    7
    /* Structure */
  ]: {
    serializedFullSize: 0,
    serializePart: () => {
    },
    serializeFull: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
      s.writeMapType(data.type);
      s.writeBits(data.ori, 2);
      s.writeBoolean(data.interiorSoundEnabled);
      s.writeBoolean(data.interiorSoundAlt);
      for (let r = 0; r < GameConfig.structureLayerCount; r++) {
        s.writeUint16(data.layerObjIds[r]);
      }
    },
    deserializePart: () => {
    },
    deserializeFull: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
      data.type = s.readMapType();
      data.ori = s.readBits(2);
      data.interiorSoundEnabled = s.readBoolean();
      data.interiorSoundAlt = s.readBoolean();
      data.layerObjIds = [];
      for (let r = 0; r < GameConfig.structureLayerCount; r++) {
        const a = s.readUint16();
        data.layerObjIds.push(a);
      }
    }
  },
  [
    4
    /* LootSpawner */
  ]: {
    serializedFullSize: 0,
    serializePart: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
      s.writeMapType(data.type);
      s.writeBits(data.layer, 2);
      s.writeBits(0, 2);
    },
    serializeFull: () => {
    },
    deserializePart: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
      data.type = s.readMapType();
      data.layer = s.readBits(2);
      s.readBits(2);
    },
    deserializeFull: () => {
    }
  },
  [
    3
    /* Loot */
  ]: {
    serializedFullSize: 5,
    serializePart: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
    },
    serializeFull: (s, data) => {
      s.writeGameType(data.type);
      s.writeUint8(data.count);
      s.writeBits(data.layer, 2);
      s.writeBoolean(data.isOld);
      s.writeBoolean(data.isPreloadedGun);
      s.writeBoolean(data.ownerId != 0);
      if (data.ownerId != 0) {
        s.writeUint16(data.ownerId);
      }
      s.writeBits(0, 1);
    },
    deserializePart: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
    },
    deserializeFull: (s, data) => {
      data.type = s.readGameType();
      data.count = s.readUint8();
      data.layer = s.readBits(2);
      data.isOld = s.readBoolean();
      data.isPreloadedGun = s.readBoolean();
      data.hasOwner = s.readBoolean();
      if (data.hasOwner) {
        data.ownerId = s.readUint16();
      }
      s.readBits(1);
    }
  },
  [
    5
    /* DeadBody */
  ]: {
    serializedFullSize: 0,
    serializePart: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
    },
    serializeFull: (s, data) => {
      s.writeUint8(data.layer);
      s.writeUint16(data.playerId);
    },
    deserializePart: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
    },
    deserializeFull: (s, data) => {
      data.layer = s.readUint8();
      data.playerId = s.readUint16();
    }
  },
  [
    8
    /* Decal */
  ]: {
    serializedFullSize: 0,
    serializePart: () => {
    },
    serializeFull: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
      s.writeFloat(
        data.scale,
        Constants.MapObjectMinScale,
        Constants.MapObjectMaxScale,
        8
      );
      s.writeMapType(data.type);
      s.writeBits(data.ori, 2);
      s.writeBits(data.layer, 2);
      s.writeUint8(data.goreKills);
    },
    deserializePart: () => {
    },
    deserializeFull: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
      data.scale = s.readFloat(
        Constants.MapObjectMinScale,
        Constants.MapObjectMaxScale,
        8
      );
      data.type = s.readMapType();
      data.ori = s.readBits(2);
      data.layer = s.readBits(2);
      data.goreKills = s.readUint8();
    }
  },
  [
    9
    /* Projectile */
  ]: {
    serializedFullSize: 0,
    serializePart: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
      s.writeFloat(data.posZ, 0, GameConfig.projectile.maxHeight, 10);
      s.writeUnitVec(data.dir, 7);
    },
    serializeFull: (s, data) => {
      s.writeGameType(data.type);
      s.writeBits(data.layer, 2);
      s.writeBits(0, 4);
    },
    deserializePart: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
      data.posZ = s.readFloat(0, GameConfig.projectile.maxHeight, 10);
      data.dir = s.readUnitVec(7);
    },
    deserializeFull: (s, data) => {
      data.type = s.readGameType();
      data.layer = s.readBits(2);
      s.readBits(4);
    }
  },
  [
    10
    /* Smoke */
  ]: {
    serializedFullSize: 0,
    serializePart: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
      s.writeFloat(data.rad, 0, Constants.SmokeMaxRad, 8);
    },
    serializeFull: (s, data) => {
      s.writeBits(data.layer, 2);
      s.writeBits(data.interior, 6);
    },
    deserializePart: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
      data.rad = s.readFloat(0, Constants.SmokeMaxRad, 8);
    },
    deserializeFull: (s, data) => {
      data.layer = s.readBits(2);
      data.interior = s.readBits(6);
    }
  },
  [
    11
    /* Airdrop */
  ]: {
    serializedFullSize: 0,
    serializePart: (s, data) => {
      s.writeFloat(data.fallT, 0, 1, 7);
      s.writeBoolean(data.landed);
    },
    serializeFull: (s, data) => {
      s.writeVec(data.pos, 0, 0, 1024, 1024, 16);
    },
    deserializePart: (s, data) => {
      data.fallT = s.readFloat(0, 1, 7);
      data.landed = s.readBoolean();
    },
    deserializeFull: (s, data) => {
      data.pos = s.readVec(0, 0, 1024, 1024, 16);
    }
  },
  // * to please ts
  [
    0
    /* Invalid */
  ]: {
    serializedFullSize: 0,
    deserializeFull: () => {
    },
    deserializePart: () => {
    },
    serializeFull: () => {
    },
    serializePart: () => {
    }
  }
};
function serializeActivePlayer(s, data) {
  s.writeBoolean(data.healthDirty);
  if (data.healthDirty) s.writeFloat(data.health, 0, 100, 8);
  s.writeBoolean(data.boostDirty);
  if (data.boostDirty) s.writeFloat(data.boost, 0, 100, 8);
  s.writeBoolean(data.zoomDirty);
  if (data.zoomDirty) s.writeUint8(data.zoom);
  s.writeBoolean(data.actionDirty);
  if (data.actionDirty) {
    s.writeFloat(data.action.time, 0, Constants.ActionMaxDuration, 8);
    s.writeFloat(data.action.duration, 0, Constants.ActionMaxDuration, 8);
    s.writeUint16(data.action.targetId);
  }
  s.writeBoolean(data.inventoryDirty);
  if (data.inventoryDirty) {
    s.writeGameType(data.scope);
    for (const key of Object.keys(GameConfig.bagSizes)) {
      const hasItem = data.inventory[key] > 0;
      s.writeBoolean(hasItem);
      if (hasItem) s.writeBits(data.inventory[key], 9);
    }
  }
  s.writeBoolean(data.weapsDirty);
  if (data.weapsDirty) {
    s.writeBits(data.curWeapIdx, 2);
    for (let i2 = 0; i2 < GameConfig.WeaponSlot.Count; i2++) {
      s.writeGameType(data.weapons[i2].type);
      s.writeUint8(data.weapons[i2].ammo);
    }
  }
  s.writeBoolean(data.spectatorCountDirty);
  if (data.spectatorCountDirty) {
    s.writeUint8(data.spectatorCount);
  }
  s.writeAlignToNextByte();
}
function deserializeActivePlayer(s, data) {
  data.healthDirty = s.readBoolean();
  if (data.healthDirty) {
    data.health = s.readFloat(0, 100, 8);
  }
  data.boostDirty = s.readBoolean();
  if (data.boostDirty) {
    data.boost = s.readFloat(0, 100, 8);
  }
  data.zoomDirty = s.readBoolean();
  if (data.zoomDirty) {
    data.zoom = s.readUint8();
  }
  data.actionDirty = s.readBoolean();
  if (data.actionDirty) {
    data.action = {};
    data.action.time = s.readFloat(0, Constants.ActionMaxDuration, 8);
    data.action.duration = s.readFloat(0, Constants.ActionMaxDuration, 8);
    data.action.targetId = s.readUint16();
  }
  data.inventoryDirty = s.readBoolean();
  if (data.inventoryDirty) {
    data.scope = s.readGameType();
    data.inventory = {};
    const inventoryKeys = Object.keys(GameConfig.bagSizes);
    for (let i2 = 0; i2 < inventoryKeys.length; i2++) {
      const item = inventoryKeys[i2];
      let count = 0;
      if (s.readBoolean()) {
        count = s.readBits(9);
      }
      data.inventory[item] = count;
    }
  }
  data.weapsDirty = s.readBoolean();
  if (data.weapsDirty) {
    data.curWeapIdx = s.readBits(2);
    data.weapons = [];
    for (let i2 = 0; i2 < GameConfig.WeaponSlot.Count; i2++) {
      data.weapons.push({
        type: s.readGameType(),
        ammo: s.readUint8()
      });
    }
  }
  data.spectatorCountDirty = s.readBoolean();
  if (data.spectatorCountDirty) {
    data.spectatorCount = s.readUint8();
  }
  s.readAlignToNextByte();
}
function serializePlayerStatus(s, data) {
  s.writeUint8(data.players.length);
  for (let i2 = 0; i2 < data.players.length; i2++) {
    const info = data.players[i2];
    s.writeBoolean(info.hasData);
    if (info.hasData) {
      s.writeVec(info.pos, 0, 0, 1024, 1024, 11);
      s.writeBoolean(info.visible);
      s.writeBoolean(info.dead);
      s.writeBoolean(info.downed);
      s.writeBoolean(info.role !== "");
      if (info.role !== "") {
        s.writeGameType(info.role);
      }
    }
  }
  s.writeAlignToNextByte();
}
function deserializePlayerStatus(s, data) {
  data.players = [];
  const count = s.readUint8();
  for (let i2 = 0; i2 < count; i2++) {
    const p = {};
    p.hasData = s.readBoolean();
    if (p.hasData) {
      p.pos = s.readVec(0, 0, 1024, 1024, 11);
      p.visible = s.readBoolean();
      p.dead = s.readBoolean();
      p.downed = s.readBoolean();
      p.role = "";
      if (s.readBoolean()) {
        p.role = s.readGameType();
      }
    }
    data.players.push(p);
  }
  s.readAlignToNextByte();
}
function serializeGroupStatus(s, data) {
  s.writeUint8(data.players.length);
  for (let i2 = 0; i2 < data.players.length; i2++) {
    const status = data.players[i2];
    s.writeFloat(status.health, 0, 100, 7);
    s.writeBoolean(status.disconnected);
  }
}
function deserializeGroupStatus(s, data) {
  data.players = [];
  const count = s.readUint8();
  for (let i2 = 0; i2 < count; i2++) {
    const p = {};
    p.health = s.readFloat(0, 100, 7);
    p.disconnected = s.readBoolean();
    data.players.push(p);
  }
}
function serializePlayerInfo(s, data) {
  s.writeUint16(data.playerId);
  s.writeUint8(data.teamId);
  s.writeUint8(data.groupId);
  s.writeString(data.name);
  s.writeGameType(data.loadout.heal);
  s.writeGameType(data.loadout.boost);
  s.writeAlignToNextByte();
}
function deserializePlayerInfo(s, data) {
  data.playerId = s.readUint16();
  data.teamId = s.readUint8();
  data.groupId = s.readUint8();
  data.name = s.readString();
  data.loadout = {};
  data.loadout.heal = s.readGameType();
  data.loadout.boost = s.readGameType();
  s.readAlignToNextByte();
}
function serializeGasData(s, data) {
  s.writeUint8(data.mode);
  s.writeFloat32(data.duration);
  s.writeVec(data.posOld, 0, 0, 1024, 1024, 16);
  s.writeVec(data.posNew, 0, 0, 1024, 1024, 16);
  s.writeFloat(data.radOld, 0, 2048, 16);
  s.writeFloat(data.radNew, 0, 2048, 16);
}
function deserializeGasData(s, data) {
  data.mode = s.readUint8();
  data.duration = s.readFloat32();
  data.posOld = s.readVec(0, 0, 1024, 1024, 16);
  data.posNew = s.readVec(0, 0, 1024, 1024, 16);
  data.radOld = s.readFloat(0, 2048, 16);
  data.radNew = s.readFloat(0, 2048, 16);
}
const UpdateExtFlags = {
  DeletedObjects: 1 << 0,
  FullObjects: 1 << 1,
  ActivePlayerId: 1 << 2,
  Gas: 1 << 3,
  GasCircle: 1 << 4,
  PlayerInfos: 1 << 5,
  DeletePlayerIds: 1 << 6,
  PlayerStatus: 1 << 7,
  GroupStatus: 1 << 8,
  Bullets: 1 << 9,
  Explosions: 1 << 10,
  Emotes: 1 << 11,
  Planes: 1 << 12,
  AirstrikeZones: 1 << 13,
  MapIndicators: 1 << 14,
  KillLeader: 1 << 15
};
class UpdateMsg {
  delObjIds = [];
  fullObjects = [];
  partObjects = [];
  activePlayerId = 0;
  activePlayerIdDirty = false;
  activePlayerData;
  gasData;
  gasDirty = false;
  gasT = 0;
  gasTDirty = false;
  playerInfos = [];
  deletedPlayerIds = [];
  playerStatus = { players: [] };
  playerStatusDirty = false;
  groupStatus = { players: [] };
  groupStatusDirty = false;
  bullets = [];
  explosions = [];
  emotes = [];
  planes = [];
  airstrikeZones = [];
  mapIndicators = [];
  killLeaderId = 0;
  killLeaderKills = 0;
  killLeaderDirty = false;
  ack = 0;
  serialize(s) {
    let flags = 0;
    const flagsIdx = s.byteIndex;
    s.writeUint16(flags);
    if (this.delObjIds.length) {
      s.writeUint16(this.delObjIds.length);
      for (let i2 = 0; i2 < this.delObjIds.length; i2++) {
        s.writeUint16(this.delObjIds[i2]);
      }
      flags |= UpdateExtFlags.DeletedObjects;
    }
    if (this.fullObjects.length) {
      s.writeUint16(this.fullObjects.length);
      for (let i2 = 0; i2 < this.fullObjects.length; i2++) {
        const obj = this.fullObjects[i2];
        s.writeUint8(obj.__type);
        s.writeBytes(obj.partialStream, 0, obj.partialStream.byteIndex);
        s.writeBytes(obj.fullStream, 0, obj.fullStream.byteIndex);
      }
      flags |= UpdateExtFlags.FullObjects;
    }
    s.writeUint16(this.partObjects.length);
    for (let i2 = 0; i2 < this.partObjects.length; i2++) {
      const obj = this.partObjects[i2];
      s.writeBytes(obj.partialStream, 0, obj.partialStream.byteIndex);
    }
    if (this.activePlayerIdDirty) {
      s.writeUint16(this.activePlayerId);
      flags |= UpdateExtFlags.ActivePlayerId;
    }
    serializeActivePlayer(s, this.activePlayerData);
    if (this.gasDirty) {
      serializeGasData(s, this.gasData);
      flags |= UpdateExtFlags.Gas;
    }
    if (this.gasTDirty) {
      s.writeFloat(this.gasT, 0, 1, 16);
      flags |= UpdateExtFlags.GasCircle;
    }
    if (this.playerInfos.length) {
      s.writeUint8(this.playerInfos.length);
      for (let i2 = 0; i2 < this.playerInfos.length; i2++) {
        serializePlayerInfo(s, this.playerInfos[i2]);
      }
      flags |= UpdateExtFlags.PlayerInfos;
    }
    if (this.deletedPlayerIds.length) {
      s.writeUint8(this.deletedPlayerIds.length);
      for (let i2 = 0; i2 < this.deletedPlayerIds.length; i2++) {
        s.writeUint16(this.deletedPlayerIds[i2]);
      }
      flags |= UpdateExtFlags.DeletePlayerIds;
    }
    if (this.playerStatusDirty) {
      serializePlayerStatus(s, this.playerStatus);
      flags |= UpdateExtFlags.PlayerStatus;
    }
    if (this.groupStatusDirty) {
      serializeGroupStatus(s, this.groupStatus);
      flags |= UpdateExtFlags.GroupStatus;
    }
    if (this.bullets.length) {
      s.writeUint8(this.bullets.length);
      for (let i2 = 0; i2 < this.bullets.length; i2++) {
        const bullet = this.bullets[i2];
        s.writeUint16(bullet.playerId);
        s.writeVec(bullet.startPos, 0, 0, 1024, 1024, 16);
        s.writeUnitVec(bullet.dir, 8);
        s.writeGameType(bullet.bulletType);
        s.writeBits(bullet.layer, 2);
        s.writeFloat(bullet.varianceT, 0, 1, 4);
        s.writeBits(bullet.distAdjIdx, 4);
        s.writeBoolean(bullet.clipDistance);
        if (bullet.clipDistance) {
          s.writeFloat(bullet.distance, 0, 1024, 16);
        }
        s.writeBoolean(bullet.shotFx);
        if (bullet.shotFx) {
          s.writeGameType(bullet.shotSourceType);
          s.writeBoolean(bullet.shotOffhand);
          s.writeBoolean(bullet.lastShot);
        }
        s.writeBoolean(bullet.reflectCount > 0);
        if (bullet.reflectCount > 0) {
          s.writeBits(bullet.reflectCount, 2);
          s.writeUint16(bullet.reflectObjId);
        }
        s.writeBoolean(bullet.hasSpecialFx);
        if (bullet.hasSpecialFx) {
          s.writeBoolean(bullet.shotAlt);
          s.writeBoolean(bullet.splinter);
          s.writeBoolean(bullet.trailSaturated);
          s.writeBoolean(bullet.apRounds);
          s.writeBoolean(bullet.trailSmall);
          s.writeBoolean(bullet.trailThick);
        }
      }
      s.writeAlignToNextByte();
      flags |= UpdateExtFlags.Bullets;
    }
    if (this.explosions.length) {
      s.writeUint8(this.explosions.length);
      for (let i2 = 0; i2 < this.explosions.length; i2++) {
        const explosion = this.explosions[i2];
        s.writeVec(explosion.pos, 0, 0, 1024, 1024, 16);
        s.writeGameType(explosion.type);
        s.writeBits(explosion.layer, 2);
        s.writeAlignToNextByte();
      }
      flags |= UpdateExtFlags.Explosions;
    }
    if (this.emotes.length) {
      s.writeUint8(this.emotes.length);
      for (let i2 = 0; i2 < this.emotes.length; i2++) {
        const emote = this.emotes[i2];
        s.writeUint16(emote.playerId);
        s.writeGameType(emote.type);
        s.writeGameType(emote.itemType);
        s.writeBoolean(emote.isPing);
        if (emote.isPing) {
          s.writeVec(emote.pos, 0, 0, 1024, 1024, 16);
        }
        s.writeAlignToNextByte();
      }
      flags |= UpdateExtFlags.Emotes;
    }
    if (this.planes.length) {
      s.writeUint8(this.planes.length);
      for (let i2 = 0; i2 < this.planes.length; i2++) {
        const plane = this.planes[i2];
        s.writeUint8(plane.id);
        s.writeVec(v2.add(plane.pos, v2.create(512, 512)), 0, 0, 2048, 2048, 10);
        s.writeUnitVec(plane.planeDir, 8);
        s.writeBoolean(plane.actionComplete);
        s.writeBits(plane.action, 3);
      }
      flags |= UpdateExtFlags.Planes;
    }
    if (this.airstrikeZones.length) {
      s.writeUint8(this.airstrikeZones.length);
      for (let i2 = 0; i2 < this.airstrikeZones.length; i2++) {
        const zone = this.airstrikeZones[i2];
        s.writeVec(zone.pos, 0, 0, 1024, 1024, 12);
        s.writeFloat(zone.rad, 0, Constants.AirstrikeZoneMaxRad, 8);
        s.writeFloat(zone.duration, 0, Constants.AirstrikeZoneMaxDuration, 8);
      }
      flags |= UpdateExtFlags.AirstrikeZones;
    }
    if (this.mapIndicators.length) {
      s.writeUint8(this.mapIndicators.length);
      for (let i2 = 0; i2 < this.mapIndicators.length; i2++) {
        const indicator = this.mapIndicators[i2];
        s.writeBits(indicator.id, 4);
        s.writeBoolean(indicator.dead);
        s.writeBoolean(indicator.equipped);
        s.writeGameType(indicator.type);
        s.writeVec(indicator.pos, 0, 0, 1024, 1024, 16);
      }
      s.writeAlignToNextByte();
      flags |= UpdateExtFlags.MapIndicators;
    }
    if (this.killLeaderDirty) {
      s.writeUint16(this.killLeaderId);
      s.writeUint8(this.killLeaderKills);
      flags |= UpdateExtFlags.KillLeader;
    }
    s.writeUint8(this.ack);
    const idx = s.byteIndex;
    s.byteIndex = flagsIdx;
    s.writeUint16(flags);
    s.byteIndex = idx;
  }
  // @ts-expect-error deserialize only accept one argument for now
  deserialize(s, objectCreator) {
    const flags = s.readUint16();
    if ((flags & UpdateExtFlags.DeletedObjects) != 0) {
      const count = s.readUint16();
      for (let i2 = 0; i2 < count; i2++) {
        this.delObjIds.push(s.readUint16());
      }
    }
    if ((flags & UpdateExtFlags.FullObjects) != 0) {
      const count = s.readUint16();
      for (let i2 = 0; i2 < count; i2++) {
        const data = {};
        data.__type = s.readUint8();
        data.__id = s.readUint16();
        ObjectSerializeFns[data.__type].deserializePart(s, data);
        ObjectSerializeFns[data.__type].deserializeFull(s, data);
        this.fullObjects.push(data);
      }
    }
    for (let count = s.readUint16(), i2 = 0; i2 < count; i2++) {
      const data = {};
      data.__id = s.readUint16();
      const type = objectCreator.m_getTypeById(data.__id, s);
      ObjectSerializeFns[type].deserializePart(s, data);
      this.partObjects.push(data);
    }
    if ((flags & UpdateExtFlags.ActivePlayerId) != 0) {
      this.activePlayerId = s.readUint16();
      this.activePlayerIdDirty = true;
    }
    const activePlayerData = {};
    deserializeActivePlayer(s, activePlayerData);
    this.activePlayerData = activePlayerData;
    if ((flags & UpdateExtFlags.Gas) != 0) {
      const gasData = {};
      deserializeGasData(s, gasData);
      this.gasData = gasData;
      this.gasDirty = true;
    }
    if ((flags & UpdateExtFlags.GasCircle) != 0) {
      this.gasT = s.readFloat(0, 1, 16);
      this.gasTDirty = true;
    }
    if ((flags & UpdateExtFlags.PlayerInfos) != 0) {
      const count = s.readUint8();
      for (let i2 = 0; i2 < count; i2++) {
        const x = {};
        deserializePlayerInfo(s, x);
        this.playerInfos.push(x);
      }
    }
    if ((flags & UpdateExtFlags.DeletePlayerIds) != 0) {
      const count = s.readUint8();
      for (let i2 = 0; i2 < count; i2++) {
        const id = s.readUint16();
        this.deletedPlayerIds.push(id);
      }
    }
    if ((flags & UpdateExtFlags.PlayerStatus) != 0) {
      const playerStatus = {};
      deserializePlayerStatus(s, playerStatus);
      this.playerStatus = playerStatus;
      this.playerStatusDirty = true;
    }
    if ((flags & UpdateExtFlags.GroupStatus) != 0) {
      const groupStatus = {};
      deserializeGroupStatus(s, groupStatus);
      this.groupStatus = groupStatus;
      this.groupStatusDirty = true;
    }
    if ((flags & UpdateExtFlags.Bullets) != 0) {
      for (let count = s.readUint8(), i2 = 0; i2 < count; i2++) {
        const bullet = {};
        bullet.playerId = s.readUint16();
        bullet.pos = s.readVec(0, 0, 1024, 1024, 16);
        bullet.dir = s.readUnitVec(8);
        bullet.bulletType = s.readGameType();
        bullet.layer = s.readBits(2);
        bullet.varianceT = s.readFloat(0, 1, 4);
        bullet.distAdjIdx = s.readBits(4);
        bullet.clipDistance = s.readBoolean();
        if (bullet.clipDistance) {
          bullet.distance = s.readFloat(0, 1024, 16);
        }
        bullet.shotFx = s.readBoolean();
        if (bullet.shotFx) {
          bullet.shotSourceType = s.readGameType();
          bullet.shotOffhand = s.readBoolean();
          bullet.lastShot = s.readBoolean();
        }
        bullet.reflectCount = 0;
        bullet.reflectObjId = 0;
        if (s.readBoolean()) {
          bullet.reflectCount = s.readBits(2);
          bullet.reflectObjId = s.readUint16();
        }
        bullet.hasSpecialFx = s.readBoolean();
        if (bullet.hasSpecialFx) {
          bullet.shotAlt = s.readBoolean();
          bullet.splinter = s.readBoolean();
          bullet.trailSaturated = s.readBoolean();
          bullet.apRounds = s.readBoolean();
          bullet.trailSmall = s.readBoolean();
          bullet.trailThick = s.readBoolean();
        }
        this.bullets.push(bullet);
      }
      s.readAlignToNextByte();
    }
    if ((flags & UpdateExtFlags.Explosions) != 0) {
      const count = s.readUint8();
      for (let i2 = 0; i2 < count; i2++) {
        const explosion = {};
        explosion.pos = s.readVec(0, 0, 1024, 1024, 16);
        explosion.type = s.readGameType();
        explosion.layer = s.readBits(2);
        s.readAlignToNextByte();
        this.explosions.push(explosion);
      }
    }
    if ((flags & UpdateExtFlags.Emotes) != 0) {
      for (let count = s.readUint8(), i2 = 0; i2 < count; i2++) {
        const emote = {};
        emote.playerId = s.readUint16();
        emote.type = s.readGameType();
        emote.itemType = s.readGameType();
        emote.isPing = s.readBoolean();
        if (emote.isPing) {
          emote.pos = s.readVec(0, 0, 1024, 1024, 16);
        }
        s.readBits(3);
        this.emotes.push(emote);
      }
    }
    if ((flags & UpdateExtFlags.Planes) != 0) {
      for (let count = s.readUint8(), i2 = 0; i2 < count; i2++) {
        const plane = {};
        plane.id = s.readUint8();
        const pos = s.readVec(0, 0, 2048, 2048, 10);
        plane.pos = v2.create(pos.x - 512, pos.y - 512);
        plane.planeDir = s.readUnitVec(8);
        plane.actionComplete = s.readBoolean();
        plane.action = s.readBits(3);
        this.planes.push(plane);
      }
    }
    if ((flags & UpdateExtFlags.AirstrikeZones) != 0) {
      for (let count = s.readUint8(), i2 = 0; i2 < count; i2++) {
        const airStrikeZone = {};
        airStrikeZone.pos = s.readVec(0, 0, 1024, 1024, 12);
        airStrikeZone.rad = s.readFloat(0, Constants.AirstrikeZoneMaxRad, 8);
        airStrikeZone.duration = s.readFloat(
          0,
          Constants.AirstrikeZoneMaxDuration,
          8
        );
        this.airstrikeZones.push(airStrikeZone);
      }
    }
    if ((flags & UpdateExtFlags.MapIndicators) != 0) {
      for (let count = s.readUint8(), i2 = 0; i2 < count; i2++) {
        const mapIndicator = {};
        mapIndicator.id = s.readBits(4);
        mapIndicator.dead = s.readBoolean();
        mapIndicator.equipped = s.readBoolean();
        mapIndicator.type = s.readGameType();
        mapIndicator.pos = s.readVec(0, 0, 1024, 1024, 16);
        this.mapIndicators.push(mapIndicator);
      }
      s.readAlignToNextByte();
    }
    if ((flags & UpdateExtFlags.KillLeader) != 0) {
      this.killLeaderId = s.readUint16();
      this.killLeaderKills = s.readUint8();
      this.killLeaderDirty = true;
    }
    this.ack = s.readUint8();
  }
}
function getPlayerStatusUpdateRate(factionMode) {
  if (factionMode) {
    return 0.5;
  }
  return 0.25;
}
class ErrorLog {
  requests = 0;
  enabled = true;
  throttle = false;
  throttleTimeout = 0;
  errorLogCount = 0;
  update() {
    const time = (/* @__PURE__ */ new Date()).getTime();
    if (this.throttle) {
      if (time > this.throttleTimeout) {
        this.throttle = false;
        this.requests = 0;
      }
    } else {
      this.requests = Math.max(this.requests - 1, 0);
    }
  }
  sample() {
    return Math.random() <= 0.01;
  }
  store(loc, data) {
    if (!this.enabled) return;
    this.requests++;
    if (this.requests > 5) {
      this.throttleTimeout = (/* @__PURE__ */ new Date()).getTime() + 180 * 1e3;
      this.throttle = true;
      return;
    }
    fetch(api.resolveUrl("/api/report_error"), {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        loc,
        ...data
      })
    });
  }
  storeGeneric(parent, child) {
    if (this.sample()) {
      this.store("storeGeneric", {
        parent,
        child
      });
    }
  }
  logWindowOnError(error) {
    if (this.errorLogCount < 2) {
      this.store("windowOnError", { error: JSON.stringify(error) });
      this.errorLogCount++;
    }
  }
  logError(error) {
    this.store("errorLog", { error });
  }
}
const errorLogManager = new ErrorLog();
setInterval(() => {
  errorLogManager.update();
}, 1e3);
function ajaxRequest(url, data, cb) {
  if (typeof data === "function") {
    cb = data;
    data = null;
  }
  const opts = {
    url: api.resolveUrl(url),
    type: "POST",
    timeout: 10 * 1e3,
    xhrFields: {
      withCredentials: proxy.anyLoginSupported()
    },
    headers: {
      // Set a header to guard against CSRF attacks.
      //
      // JQuery does this automatically, however we'll add it here explicitly
      // so the intent is clear incase of refactoring in the future.
      "X-Requested-With": "XMLHttpRequest"
    }
  };
  if (data) {
    opts.contentType = "application/json; charset=utf-8";
    opts.data = JSON.stringify(data);
  }
  $.ajax(opts).done((res) => {
    cb(null, res);
  }).fail((e) => {
    cb(e);
  });
}
class Account {
  constructor(config) {
    this.config = config;
    window.login = () => {
      this.login();
    };
    window.deleteAccount = () => {
      this.deleteAccount();
    };
    window.deleteItems = () => {
      this.ajaxRequest("/api/user/delete_items", {}, (_err, _data) => {
        this.loadProfile();
      });
    };
    window.unlock = (type) => {
      console.log(`Unlocking ${type}`);
      this.unlock(type);
    };
    window.setQuest = (questType, idx = 0) => {
      this.setQuest({ questType, idx });
    };
    window.refreshQuest = (idx) => {
      this.refreshQuest(idx);
    };
    window.setPassUnlock = (unlockType) => {
      this.setPassUnlock(unlockType);
    };
  }
  events = {};
  requestsInFlight = 0;
  loggingIn = false;
  loggedIn = false;
  profile = {
    linkedGoogle: false,
    linkedTwitch: false,
    linkedDiscord: false,
    usernameSet: false,
    username: "",
    slug: "",
    usernameChangeTime: 0
  };
  loadout = loadout$2.defaultLoadout();
  loadoutPriv = "";
  items = [];
  quests = [];
  questPriv = "";
  pass = {};
  ajaxRequest(url, data, cb) {
    if (typeof data === "function") {
      cb = data;
      data = null;
    }
    this.requestsInFlight++;
    this.emit("request", this);
    ajaxRequest(url, data, (err, res) => {
      cb(err, res);
      this.requestsInFlight--;
      this.emit("request", this);
      if (this.requestsInFlight == 0) {
        this.emit("requestsComplete");
      }
    });
  }
  addEventListener(event, callback) {
    this.events[event] = this.events[event] || [];
    this.events[event].push(callback);
  }
  removeEventListener(event, callback) {
    const listeners = this.events[event] || [];
    for (let i2 = listeners.length - 1; i2 >= 0; i2--) {
      if (listeners[i2] == callback) {
        listeners.splice(i2, 1);
      }
    }
  }
  emit(event, ...args) {
    const listenersCopy = (this.events[event] || []).slice(0);
    for (let i2 = 0; i2 < listenersCopy.length; i2++) {
      listenersCopy[i2](...args);
    }
  }
  init() {
    if (this.config.get("sessionCookie")) {
      this.setSessionCookies();
    }
    if (helpers.getCookie("app-data")) {
      this.login();
      return;
    }
    this.emit("request", this);
    this.emit("items", []);
    const storedLoadout = this.config.get("loadout");
    this.loadout = util.mergeDeep({}, loadout$2.defaultLoadout(), storedLoadout);
    this.emit("loadout", this.loadout);
  }
  setSessionCookies() {
    this.clearSessionCookies();
    document.cookie = this.config.get("sessionCookie");
    document.cookie = `app-data=${Date.now()}`;
  }
  clearSessionCookies() {
    document.cookie = "app-sid=;expires=Thu, 01 Jan 1970 00:00:01 GMT;";
    document.cookie = "app-data=;expires=Thu, 01 Jan 1970 00:00:01 GMT;";
  }
  loginWithAccessToken(authUrl, requestTokenFn, extractTokenFn) {
    requestTokenFn((err, data) => {
      if (err) {
        this.emit("error", "login_failed");
        return;
      }
      const token = extractTokenFn(data);
      this.ajaxRequest(`${authUrl}?access_token=${token}`, (err2, res) => {
        if (err2) {
          this.emit("error", "login_failed");
        } else {
          this.config.set("sessionCookie", res.cookie);
          this.setSessionCookies();
          this.login();
        }
      });
    });
  }
  login() {
    if (helpers.getCookie("app-data")) {
      this.loadProfile();
      this.getPass(true);
    }
  }
  logout() {
    this.config.set("profile", null);
    this.config.set("sessionCookie", null);
    this.config.set("loadout", loadout$2.defaultLoadout());
    this.ajaxRequest("/api/user/logout", () => {
      window.location.reload();
    });
  }
  loadProfile() {
    this.loggingIn = !this.loggedIn;
    this.ajaxRequest("/api/user/profile", (err, data) => {
      const a = this.loggingIn;
      this.loggingIn = false;
      this.loggedIn = false;
      this.profile = {};
      this.loadoutPriv = "";
      this.items = [];
      if (err) {
        errorLogManager.storeGeneric("account", "load_profile_error");
      } else if (data.banned) {
        this.emit("error", "account_banned", data.reason);
      } else if (data.success) {
        this.loggedIn = true;
        this.profile = data.profile;
        this.loadoutPriv = data.loadoutPriv;
        this.items = data.items;
        this.loadout = data.loadout;
        const profile = this.config.get("profile") || { slug: "" };
        profile.slug = data.profile.slug;
        this.config.set("profile", profile);
      }
      if (!this.loggedIn) {
        this.config.set("sessionCookie", null);
      }
      if (a && this.loggedIn) {
        this.emit("login", this);
      }
      this.emit("items", this.items);
      this.emit("loadout", this.loadout);
    });
  }
  resetStats() {
    this.ajaxRequest("/api/user/reset_stats", (err) => {
      if (err) {
        errorLogManager.storeGeneric("account", "reset_stats_error");
        this.emit("error", "server_error");
      }
    });
  }
  deleteAccount() {
    this.ajaxRequest("/api/user/delete", (err) => {
      if (err) {
        errorLogManager.storeGeneric("account", "delete_error");
        this.emit("error", "server_error");
        return;
      }
      this.config.set("profile", null);
      this.config.set("sessionCookie", null);
      window.location.reload();
    });
  }
  setUsername(username, callback) {
    const args = {
      username
    };
    this.ajaxRequest("/api/user/username", args, (err, res) => {
      if (err) {
        errorLogManager.storeGeneric("account", "set_username_error");
        callback(err);
        return;
      }
      if (res.result == "success") {
        this.loadProfile();
        callback();
      } else {
        callback(res.result);
      }
    });
  }
  setLoadout(loadout2) {
    const loadoutPrev = this.loadout;
    this.loadout = loadout2;
    this.emit("loadout", this.loadout);
    this.config.set("loadout", loadout2);
    if (!helpers.getCookie("app-data")) return;
    const args = {
      loadout: loadout2
    };
    this.ajaxRequest("/api/user/loadout", args, (err, res) => {
      if (err) {
        errorLogManager.storeGeneric("account", "set_loadout_error");
        this.emit("error", "server_error");
      }
      if (err || !res.loadout) {
        this.loadout = loadoutPrev;
      } else {
        this.loadout = res.loadout;
        this.loadoutPriv = res.loadoutPriv;
      }
      this.emit("loadout", this.loadout);
    });
  }
  setItemStatus(status, itemTypes) {
    if (itemTypes.length != 0) {
      for (let i2 = 0; i2 < itemTypes.length; i2++) {
        const item = this.items.find((x) => {
          return x.type == itemTypes[i2];
        });
        if (item) {
          item.status = Math.max(item.status, status);
        }
      }
      const args = {
        status,
        itemTypes
      };
      this.emit("items", this.items);
      this.ajaxRequest("/api/user/set_item_status", args, (err) => {
        if (err) {
          errorLogManager.storeGeneric("account", "set_item_status_error");
        }
      });
    }
  }
  unlock(unlockType) {
    return;
  }
  setQuest(args) {
    this.ajaxRequest("/api/user/set_quest", args, () => {
      this.getPass(false);
    });
  }
  getPass(tryRefreshQuests) {
    return;
  }
  setPassUnlock(unlockType) {
    const args = {
      unlockType
    };
    this.ajaxRequest(
      "/api/user/set_pass_unlock",
      args,
      (err, res) => {
        if (err || !res.success) {
          errorLogManager.storeGeneric("account", "set_pass_unlock_error");
        } else {
          this.getPass(false);
        }
      }
    );
  }
  refreshQuest(idx) {
    const args = {
      idx
    };
    this.ajaxRequest(
      "/api/user/refresh_quest",
      args,
      (err, res) => {
        if (err) {
          errorLogManager.storeGeneric("account", "refresh_quest_error");
          return;
        }
        if (res.success) {
          this.getPass(false);
        } else {
          this.emit("pass", this.pass, this.quests, false);
        }
      }
    );
  }
}
class Ambiance {
  introMusic = true;
  soundUpdateThrottle = 0;
  tracks;
  trackToIdx;
  initTime;
  constructor() {
    this.tracks = [];
    this.trackToIdx = {};
    const addTrack = (name, sound, channel, immediateMode) => {
      this.tracks.push({
        name,
        sound,
        channel,
        immediateMode,
        inst: null,
        instSound: "",
        filter: "",
        weight: 0,
        volume: 0
      });
      this.trackToIdx[name] = this.tracks.length - 1;
    };
    addTrack("music", "menu_music", "music", false);
    addTrack("wind", "ambient_wind_01", "ambient", false);
    addTrack("river", "ambient_stream_01", "ambient", false);
    addTrack("waves", "ambient_waves_01", "ambient", false);
    addTrack("interior_0", "", "ambient", true);
    addTrack("interior_1", "", "ambient", true);
    this.initTime = Date.now();
  }
  getTrack(name) {
    return this.tracks[this.trackToIdx[name]];
  }
  onGameStart() {
    this.introMusic = false;
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      this.tracks[i2].weight = 0;
    }
    this.getTrack("wind").weight = 1;
    this.soundUpdateThrottle = 0;
  }
  onGameComplete(_audioManager) {
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      const track = this.tracks[i2];
      if (track.immediateMode) {
        track.weight = 0;
      }
    }
    this.getTrack("river").weight = 0;
  }
  update(dt, audioManager, _inGame) {
    let updateVolume = false;
    this.soundUpdateThrottle -= dt;
    if (this.soundUpdateThrottle <= 0) {
      this.soundUpdateThrottle = 0.2;
      updateVolume = true;
    }
    let totalVolume = 0;
    for (let i2 = this.tracks.length - 1; i2 >= 0; i2--) {
      const track = this.tracks[i2];
      if (!track.inst && track.sound && audioManager.isSoundLoaded(track.sound, track.channel)) {
        console.log("Start track", track.sound, track.channel);
        track.inst = audioManager.playSound(track.sound, {
          channel: track.channel,
          startSilent: true,
          loop: track.channel == "ambient",
          forceStart: true,
          filter: track.filter,
          forceFilter: true
        });
        track.instSound = track.sound;
        if (i2 == 0) {
          console.log("Play delay", Date.now() - this.initTime);
        }
      }
      if (track.inst && updateVolume) {
        const volume = track.weight * (1 - totalVolume);
        totalVolume += volume;
        track.volume = volume;
        const defVolume = audioManager.getSoundDefVolume(
          track.sound,
          track.channel
        );
        audioManager.setVolume(track.inst, volume * defVolume, track.channel);
      }
      if (track.inst && (!track.sound && math.eqAbs(audioManager.getVolume(track.inst), 0) || track.sound && track.sound != track.instSound)) {
        console.log("Stop track", track.name, track.channel);
        audioManager.stopSound(track.inst);
        track.inst = null;
        track.instSound = "";
      }
      if (track.immediateMode) {
        track.sound = "";
        track.weight = 0;
      }
    }
    if (this.introMusic) {
      const music = this.getTrack("music");
      if (music.inst) {
        music.weight = math.min(music.weight + dt, 1);
      }
      const wind = this.getTrack("wind");
      if (music.inst && !audioManager.isSoundPlaying(music.inst)) {
        wind.weight = math.min(wind.weight + dt, 1);
      }
    }
  }
}
const isIOS = window.navigator.userAgent.includes("iPod") || window.navigator.userAgent.includes("iPhone") || window.navigator.userAgent.includes("iPad");
let nullBuffer = null;
let hasSelectiveDisconnect = false;
function testSelectiveDisconnect(ctx) {
  try {
    ctx.createGain().disconnect(ctx.destination);
    return false;
  } catch (_error) {
    return true;
  }
}
const kMaxInstances = 128;
class SoundInstance {
  constructor(ctx) {
    this.ctx = ctx;
    this.volumeOld = this.volume;
    this.panOld = this.pan;
    this.gainNode = this.ctx.createGain();
    this.pannerNode = this.ctx.createPanner();
    this.pannerNode.panningModel = "equalpower";
    this.gainNode.connect(this.pannerNode);
  }
  sound = null;
  id = 0;
  volume = 1;
  volumeOld;
  pan = 0;
  panOld;
  ambient;
  sourceNode = null;
  destination = null;
  paramEvents = 0;
  gainNode;
  pannerNode;
  stopTime = 0;
  stopping = false;
  // soundjs API compat
  playState = "playFinished";
  setGain(gain) {
    if (this.stopping) {
      return;
    }
    if (isIOS) {
      this.gainNode.gain.value = gain;
    } else {
      this.gainNode.gain.setTargetAtTime(gain, this.ctx.currentTime, 0.02);
      ++this.paramEvents;
    }
  }
  setPan(pan) {
    if (this.stopping) {
      return;
    }
    this.pannerNode.setPosition(pan, 0, -0.5);
    this.paramEvents += 3;
  }
  start(destination, buffer, volume, pan, loop, delay, offset, ambient, detune) {
    this.volume = this.volumeOld = volume;
    this.pan = this.panOld = pan;
    this.ambient = ambient;
    this.stopping = false;
    this.destination = destination;
    this.sourceNode = this.ctx.createBufferSource();
    this.sourceNode.buffer = buffer;
    this.sourceNode.connect(this.gainNode);
    this.pannerNode.connect(this.destination);
    this.sourceNode.loop = loop;
    if (isIOS) {
      this.gainNode.gain.value = volume;
    } else {
      this.gainNode.gain.setValueAtTime(volume, this.ctx.currentTime);
      ++this.paramEvents;
    }
    this.setPan(pan);
    if (this.sourceNode.detune) {
      this.sourceNode.detune.value = detune;
    }
    this.sourceNode.start(this.ctx.currentTime + delay, offset);
    this.stopTime = loop ? 1e100 : this.ctx.currentTime + delay + buffer.duration - offset;
    this.playState = "playSucceeded";
  }
  stop() {
    if (this.stopping) {
      return;
    }
    this.setGain(0);
    this.stopTime = this.ctx.currentTime + 0.1;
    this.stopping = true;
    this.playState = "playInterrupted";
  }
  disconnect() {
    this.sound?.instances.splice(this.sound?.instances.indexOf(this), 1);
    this.sound = null;
    this.sourceNode?.stop(0);
    this.sourceNode?.disconnect(this.gainNode);
    this.pannerNode?.disconnect(this.destination);
    if (isIOS) {
      try {
        this.sourceNode.buffer = nullBuffer;
      } catch (_e) {
      }
    }
    this.destination = null;
    this.sourceNode = null;
    this.playState = "playFinished";
  }
  reallocNodes() {
    this.gainNode.disconnect(this.pannerNode);
    this.gainNode = this.ctx.createGain();
    this.pannerNode = this.ctx.createPanner();
    this.pannerNode.panningModel = "equalpower";
    this.gainNode.connect(this.pannerNode);
    this.paramEvents = 0;
  }
}
let nullInstance = null;
class SoundHandle {
  constructor(instance) {
    this.instance = instance;
    this.id = instance.id;
  }
  id;
  check(_checkCoalesce) {
    if (this.id != this.instance.id) {
      this.instance = nullInstance;
      this.id = nullInstance?.id;
    }
  }
  // Passthrough API:
  stop() {
    this.check();
    this.instance.stop();
  }
  get volume() {
    this.check();
    return this.instance.volume;
  }
  set volume(value) {
    this.check(true);
    this.instance.volume = value;
  }
  get pan() {
    this.check();
    return this.instance.pan;
  }
  set pan(value) {
    this.check(true);
    this.instance.pan = value;
  }
  get playState() {
    this.check();
    return this.instance.playState;
  }
}
let nullHandle = null;
class Reverb {
  constructor(ctx, inNode, outNode, name, params) {
    this.ctx = ctx;
    this.inNode = inNode;
    this.outNode = outNode;
    this.name = name;
    this.params = params;
    this.volume = params.volume != void 0 ? params.volume : 1;
    this.echoVolume = params.echoVolume || 0;
    this.echoDelay = params.echoDelay || 0;
    this.echoLowPass = params.echoLowPass || 3e3;
    this.stereoSpread = params.stereoSpread || 0;
    if (!hasSelectiveDisconnect) {
      const workaround = this.ctx.createGain();
      this.inNode.connect(workaround);
      this.inNode = workaround;
    }
    this.convolverNode = this.ctx.createConvolver();
    if (this.echoVolume) {
      this.echoLowPassNode = this.ctx.createBiquadFilter();
      this.echoLowPassNode.type = "lowpass";
      this.echoLowPassNode.frequency.setValueAtTime(this.echoLowPass, 0);
      this.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0);
      this.echoDelayNode = this.ctx.createDelay(this.echoDelay || 0.01);
      this.echoDelayNode.delayTime.setValueAtTime(this.echoDelay, 0);
    }
    if (this.stereoSpread) {
      this.stereoDelayNode = this.ctx.createDelay(this.stereoSpread);
      this.stereoDelayNode.delayTime.setValueAtTime(this.stereoSpread, 0);
      this.mergerNode = this.ctx.createChannelMerger(2);
    }
  }
  volume;
  echoVolume;
  echoDelay;
  echoLowPass;
  stereoSpread;
  // Nodes pointers
  gainNode = null;
  convolverNode = null;
  echoGainNode = null;
  echoLowPassNode = null;
  echoDelayNode = null;
  stereoDelayNode = null;
  mergerNode = null;
  targetLevel = 0;
  gain = 0;
  drainEndTime = 0;
  active = false;
  isConnected() {
    return this.gainNode != null;
  }
  connect() {
    this.gainNode = this.ctx.createGain();
    this.gainNode.channelCount = 1;
    this.gainNode.channelCountMode = "explicit";
    this.gainNode.gain.setValueAtTime(0, 0);
    if (this.echoVolume) {
      this.echoGainNode = this.ctx.createGain();
      this.echoGainNode.channelCount = 1;
      this.echoGainNode.channelCountMode = "explicit";
      this.echoGainNode.gain.setValueAtTime(this.echoVolume, 0);
    }
    this.inNode.connect(this.gainNode);
    this.gainNode.connect(this.convolverNode);
    if (this.echoVolume) {
      this.convolverNode?.connect(this.echoGainNode);
      this.echoGainNode?.connect(this.echoLowPassNode);
      this.echoLowPassNode?.connect(this.echoDelayNode);
      this.echoDelayNode?.connect(this.convolverNode);
    }
    if (this.stereoSpread) {
      const { buffer } = this.convolverNode;
      if (buffer && buffer.numberOfChannels != 1) {
        console.error("stereoSpread can only be applied to mono IRs");
      }
      this.convolverNode?.connect(this.stereoDelayNode);
      this.convolverNode?.connect(this.mergerNode, 0, 0);
      this.stereoDelayNode?.connect(this.mergerNode, 0, 1);
      this.mergerNode?.connect(this.outNode);
    } else {
      this.convolverNode?.connect(this.outNode);
    }
  }
  disconnect() {
    this.inNode.disconnect(this.gainNode);
    this.gainNode?.disconnect(this.convolverNode);
    if (this.echoVolume) {
      this.convolverNode?.disconnect(this.echoGainNode);
      this.echoGainNode?.disconnect(this.echoLowPassNode);
      this.echoLowPassNode?.disconnect(this.echoDelayNode);
      this.echoDelayNode?.disconnect(this.convolverNode);
    }
    if (this.stereoSpread) {
      this.convolverNode?.disconnect(this.stereoDelayNode);
      this.convolverNode?.disconnect(this.mergerNode, 0, 0);
      this.stereoDelayNode?.disconnect(this.mergerNode, 0, 1);
      this.mergerNode?.disconnect(this.outNode);
    } else {
      this.convolverNode?.disconnect(this.outNode);
    }
    this.gainNode = null;
    this.echoGainNode = null;
  }
  setGain(gain, fadeStartTime, fadeEndTime) {
    gain *= this.volume;
    if (this.gain == gain) {
      return;
    }
    if (gain != 0 && !this.gainNode) {
      this.connect();
    }
    if (gain == 0) {
      if (this.echoGainNode) {
        this.echoGainNode.gain.setValueAtTime(0, fadeEndTime);
      }
      const { buffer } = this.convolverNode;
      const duration = buffer ? buffer.duration : 0;
      this.drainEndTime = fadeEndTime + duration + this.echoDelay + this.stereoSpread;
    }
    if (this.gain == 0 && this.echoGainNode) {
      this.echoGainNode.gain.setValueAtTime(this.echoVolume, fadeStartTime);
    }
    this.gainNode?.gain.setValueAtTime(this.gain, fadeStartTime);
    this.gainNode?.gain.linearRampToValueAtTime(gain, fadeEndTime);
    this.gain = gain;
  }
}
class WebAudioEngine {
  ctx = new (window.AudioContext || window.webkitAudioContext)();
  masterGainNode;
  compressorNode;
  reverbNode;
  // EQ effect nodes
  eqNodes = {};
  files = {};
  sounds = {};
  instances = [];
  instanceId = 0;
  playingInstances = [];
  reverbs = {};
  activeReverbs = [];
  reverbFadeEndTime = 0;
  // Global state
  volume = 1;
  volumeOld;
  muted = false;
  mutedOld;
  runningOfflineTest;
  offlineCtx;
  startTime;
  // Soundjs API compat:
  onfileload = function(..._args) {
  };
  PLAY_INITED = "playInited";
  PLAY_SUCCEEDED = "playSucceeded";
  PLAY_INTERRUPTED = "playInterrupted";
  PLAY_FINISHED = "playFinished";
  PLAY_FAILED = "playFailed";
  constructor() {
    if (isIOS) {
      const buffer = this.ctx.createBuffer(1, 1, 44100);
      const source = this.ctx.createBufferSource();
      source.buffer = buffer;
      source.connect(this.ctx.destination);
      source.start();
      source.disconnect(this.ctx.destination);
      this.ctx.close();
      this.ctx = new (window.AudioContext || window.webkitAudioContext)();
    }
    hasSelectiveDisconnect = testSelectiveDisconnect(this.ctx);
    window.audioEngine = this;
    this.masterGainNode = this.ctx.createGain();
    this.compressorNode = this.ctx.createDynamicsCompressor();
    this.masterGainNode.connect(this.compressorNode);
    this.compressorNode.connect(this.ctx.destination);
    this.reverbNode = this.ctx.createGain();
    this.reverbNode.connect(this.masterGainNode);
    const eqTypes = {
      muffled: [
        [20, 2.8284 / 2, -6, "peaking"],
        [40, 2.8284 / 2, -7, "peaking"],
        [80, 2.8284 / 2, -10, "peaking"],
        [160, 2.8284 / 2, -13, "peaking"],
        [320, 2.8284 / 2, -22, "peaking"],
        [640, 2.8284 / 2, -18, "peaking"],
        [1280, 2.8284 / 2, -25, "peaking"],
        [2560, 2.8284 / 2, -10, "peaking"],
        [5120, 2.8284 / 2, -30, "peaking"],
        [10240, 2.8284 / 2, -25, "peaking"]
      ],
      club: [
        [20, 2.8284 / 2, -6, "lowshelf"],
        [63, 2.8284 / 2, -3, "lowshelf"],
        [125, 2.8284 / 2, -3, "lowshelf"],
        [250, 2.8284 / 2, -6, "lowshelf"],
        [500, 2.8284 / 2, -18, "peaking"],
        [1e3, 2.8284 / 2, -36, "peaking"],
        [2e3, 2.8284 / 2, -48, "peaking"],
        [4e3, 2.8284 / 2, -50, "highshelf"],
        [8e3, 2.8284 / 2, -50, "highshelf"],
        [16e3, 2.8284 / 2, -50, "highshelf"]
      ]
    };
    Object.keys(eqTypes).forEach((item) => {
      const eqNode = this.ctx.createGain();
      eqNode.gain.setValueAtTime(16, 0);
      const peaks = eqTypes[item];
      let previousNode = eqNode;
      for (let i2 = 0; i2 < peaks.length; i2++) {
        const peakingNode = this.ctx.createBiquadFilter();
        previousNode.connect(peakingNode);
        previousNode = peakingNode;
        peakingNode.frequency.setValueAtTime(peaks[i2][0], 0);
        peakingNode.Q.setValueAtTime(peaks[i2][1], 0);
        peakingNode.gain.setValueAtTime(peaks[i2][2], 0);
        peakingNode.type = peaks[i2][3];
      }
      previousNode.connect(this.reverbNode);
      this.eqNodes[item] = eqNode;
    });
    for (let i2 = 0; i2 < kMaxInstances; i2++) {
      const instance = new SoundInstance(this.ctx);
      this.instances[i2] = instance;
    }
    nullInstance = new SoundInstance(this.ctx);
    nullHandle = new SoundHandle(nullInstance);
    this.volumeOld = this.volume;
    this.mutedOld = this.muted;
    if (this.ctx.state == "suspended") {
      const tryResume = () => {
        this.ctx.resume();
        const source = this.ctx.createBufferSource();
        source.buffer = this.ctx.createBuffer(1, 1, 22050);
        source.connect(this.ctx.destination);
        source.start();
        setTimeout(() => {
          if (this.ctx.state == "running") {
            document.body.removeEventListener("mousedown", tryResume, false);
            document.body.removeEventListener("touchend", tryResume, false);
          }
        }, 0);
      };
      document.body.addEventListener("mousedown", tryResume, false);
      document.body.addEventListener("touchend", tryResume, false);
    }
    if (isIOS) {
      nullBuffer = this.ctx.createBuffer(1, 1, 22050);
    }
  }
  loadFile(path, onfileload) {
    if (this.files[path] != void 0) {
      onfileload(path);
      return this.files[path];
    }
    this.files[path] = { buffer: null };
    const xhr = new XMLHttpRequest();
    xhr.open("GET", path);
    xhr.responseType = "arraybuffer";
    const onfailure = function onfailure2(_event) {
      console.error(`Failed loading sound file: ${path}`);
    };
    xhr.addEventListener("load", (event) => {
      const arrayBuffer = xhr.response;
      if (!arrayBuffer) {
        onfailure();
        return;
      }
      this.ctx.decodeAudioData(
        arrayBuffer,
        (audioBuffer) => {
          this.files[path].buffer = audioBuffer;
          onfileload(path);
        },
        () => {
          console.error(`Failed decoding sound: ${path}`);
        }
      );
    });
    xhr.addEventListener("abort", onfailure);
    xhr.addEventListener("error", onfailure);
    xhr.addEventListener("timeout", onfailure);
    xhr.send();
    return this.files[path];
  }
  registerSound(path, name, params) {
    const file = this.loadFile(path, this.onfileload.bind(this));
    const sound = {
      file,
      canCoalesce: !!params.canCoalesce,
      maxInstances: params.channels || 16,
      volume: params.volume || 1,
      instances: []
    };
    this.sounds[name] = sound;
  }
  play(name, params) {
    const sound = this.sounds[name];
    if (!sound) {
      console.error(`No sound named: ${name}`);
      return nullHandle;
    }
    const filter = params.filter || "none";
    let volume = params.volume != void 0 ? params.volume : 1;
    volume *= sound.volume;
    volume = this.muted ? 0 : volume;
    const pan = params.pan || 0;
    const loop = !!params.loop;
    const delay = params.delay ? params.delay * 1e-3 : 0;
    const offset = params.offset ? params.offset : 0;
    const ambient = params.ambient || false;
    const detune = params.detune || 0;
    if (!sound.file.buffer) {
      return nullHandle;
    }
    if (this.muted && !params.loop) {
      return nullHandle;
    }
    if (filter !== "none" && filter !== "reverb" && filter !== "muffled" && filter !== "club") {
      console.error(
        `Invalid filter: ${filter}. Only valid filters are 'none', 'reverb', 'muffled' and 'club'.`
      );
      return nullHandle;
    }
    if (sound.canCoalesce) {
      const kCoalesceTime = 0.03;
      const stopTime = this.ctx.currentTime + sound.file.buffer.duration;
      for (let i2 = 0; i2 < sound.instances.length; i2++) {
        const _instance = sound.instances[i2];
        if (Math.abs(stopTime - _instance.stopTime) > kCoalesceTime) {
          continue;
        }
        const vv = _instance.volume * _instance.volume + volume * volume;
        const vp = _instance.volume * _instance.pan + volume * pan;
        const v = _instance.volume + volume;
        _instance.volume = Math.sqrt(vv);
        _instance.pan = vp / Math.max(1e-3, v);
        return nullHandle;
      }
    }
    for (let _i = 0; _i < kMaxInstances; _i++) {
      ++this.instanceId;
      if (!this.instances[this.instanceId % kMaxInstances].sound) {
        break;
      }
    }
    const instance = this.instances[this.instanceId % kMaxInstances];
    if (instance.sound) {
      console.error(
        `All ${kMaxInstances} sound instances in use. You are using way too many sounds!`
      );
      return nullHandle;
    }
    instance.id = this.instanceId;
    const overuse = instance.paramEvents > 150;
    const periodic = instance.paramEvents > 20 && !(this.instanceId % 7);
    if (overuse || periodic) {
      instance.reallocNodes();
    }
    while (sound.instances.length >= sound.maxInstances) {
      let oldest = sound.instances[0];
      for (let _i2 = 1; _i2 < sound.instances.length; _i2++) {
        if (oldest.stopTime > sound.instances[_i2].stopTime) {
          oldest = sound.instances[_i2];
        }
      }
      oldest.disconnect();
    }
    instance.sound = sound;
    sound.instances.push(instance);
    const outNode = filter === "none" ? this.masterGainNode : filter === "reverb" ? this.reverbNode : this.eqNodes[filter];
    instance.start(
      outNode,
      sound.file.buffer,
      volume,
      pan,
      loop,
      delay,
      offset,
      ambient,
      detune
    );
    if (!this.playingInstances.includes(instance)) {
      this.playingInstances.push(instance);
    }
    return new SoundHandle(instance);
  }
  registerReverb(path, name, params) {
    const reverb = new Reverb(
      this.ctx,
      this.reverbNode,
      this.masterGainNode,
      name,
      params
    );
    this.loadFile(path, (path2) => {
      reverb.convolverNode.buffer = this.files[path2].buffer;
      this.onfileload(path2);
    });
    this.reverbs[name] = reverb;
  }
  // reverbLevels: An object where the keys are active reverb names and
  // the values are relative volume levels
  setReverbs(reverbLevels) {
    for (let i2 = 0; i2 < this.activeReverbs.length; i2++) {
      const reverb = this.activeReverbs[i2];
      if (!reverbLevels[reverb.name]) {
        reverb.targetLevel = 0;
      }
    }
    for (const name in reverbLevels) {
      if (!reverbLevels[name]) {
        continue;
      }
      const _reverb = this.reverbs[name];
      if (!_reverb) {
        console.error(`No reverb named ${name}`);
        continue;
      }
      if (!this.reverbs[name].active) {
        this.activeReverbs.push(_reverb);
        _reverb.active = true;
      }
      _reverb.targetLevel = reverbLevels[name];
    }
  }
  stop(retainAmbient = true) {
    for (let i2 = 0; i2 < kMaxInstances; i2++) {
      const instance = this.instances[i2];
      if (retainAmbient && instance.ambient) {
        continue;
      }
      if (instance.sound) {
        instance.stop();
      }
    }
  }
  update(_dt) {
    if (this.ctx.state == "suspended") {
      this.ctx.resume();
    }
    const masterVolume = this.muted ? 0 : this.volume;
    const masterVolumeOld = this.mutedOld ? 0 : this.volumeOld;
    this.volumeOld = this.volume;
    this.mutedOld = this.muted;
    if (masterVolume != masterVolumeOld) {
      this.masterGainNode.gain.setTargetAtTime(
        masterVolume,
        this.ctx.currentTime,
        0.02
      );
    }
    for (let i2 = this.playingInstances.length - 1; i2 >= 0; i2--) {
      const instance = this.playingInstances[i2];
      if (instance.volumeOld != instance.volume) {
        instance.volumeOld = instance.volume;
        instance.setGain(instance.volume);
      }
      if (instance.panOld != instance.pan) {
        instance.panOld = instance.pan;
        instance.setPan(instance.pan);
      }
      if (instance.sound) {
        if (this.ctx.currentTime > instance.stopTime) {
          instance.disconnect();
        }
      }
      if (!instance.sound) {
        this.playingInstances.splice(i2, 1);
      }
    }
    if (this.ctx.currentTime > this.reverbFadeEndTime) {
      const fadeStartTime = this.ctx.currentTime + 6e-3;
      const fadeDuration = 0.025;
      this.reverbFadeEndTime = fadeStartTime + fadeDuration;
      let sum = 0;
      for (let i2 = 0; i2 < this.activeReverbs.length; i2++) {
        const reverb = this.activeReverbs[i2];
        sum += reverb.targetLevel;
      }
      const scale = sum > 1 ? 1 / sum : 1;
      for (let i2 = 0; i2 < this.activeReverbs.length; i2++) {
        const _reverb2 = this.activeReverbs[i2];
        const gain = Math.sqrt(scale * _reverb2.targetLevel);
        _reverb2.setGain(gain, fadeStartTime, this.reverbFadeEndTime);
      }
      for (let i2 = this.activeReverbs.length - 1; i2 >= 0; i2--) {
        const _reverb3 = this.activeReverbs[i2];
        const drained = this.ctx.currentTime > _reverb3.drainEndTime;
        if (_reverb3.gain == 0 && drained) {
          if (_reverb3.isConnected()) {
            _reverb3.disconnect();
          }
          _reverb3.active = false;
          this.activeReverbs.splice(i2, 1);
        }
      }
    }
  }
  setMute(mute) {
    this.muted = mute;
  }
  on(eventName, eventHandler, that) {
    if (eventName != "fileload") {
      console.error('Only "fileload" event supported');
      return;
    }
    this.onfileload = eventHandler.bind(that);
  }
  // A hacky code playground for building intution about the performance
  // characteristics of various WebAudio nodes
  updatePerformanceTest() {
    this.runningOfflineTest = this.runningOfflineTest != void 0 ? this.runningOfflineTest : false;
    if (this.runningOfflineTest) {
      return;
    }
    this.runningOfflineTest = true;
    const testTime = 10;
    this.offlineCtx = new OfflineAudioContext(
      2,
      testTime * this.ctx.sampleRate,
      this.ctx.sampleRate
    );
    const soundBuffer = this.offlineCtx.createBuffer(
      2,
      testTime * this.ctx.sampleRate,
      this.ctx.sampleRate
    );
    for (let channel = 0; channel < soundBuffer.numberOfChannels; channel++) {
      const pcm = soundBuffer.getChannelData(channel);
      for (let i2 = 0; i2 < pcm.length; i2++) {
        pcm[i2] = Math.sin(i2 / 2333) * Math.sin(i2 / 5741) * 2 * Math.random() - 1;
      }
    }
    const soundNode = this.offlineCtx.createBufferSource();
    soundNode.buffer = soundBuffer;
    const convolverNode = this.offlineCtx.createConvolver();
    const convolverTime = 4;
    const convolverBuffer = this.offlineCtx.createBuffer(
      1,
      convolverTime * this.ctx.sampleRate,
      this.ctx.sampleRate
    );
    for (let channel = 0; channel < convolverBuffer.numberOfChannels; channel++) {
      const _pcm = convolverBuffer.getChannelData(channel);
      for (let _i6 = 0; _i6 < _pcm.length; _i6++) {
        _pcm[_i6] = 2 * Math.random() - 1;
      }
    }
    convolverNode.buffer = convolverBuffer;
    const reverb = {
      echoVolume: 0.5,
      echoLowPass: 800,
      echoDelay: 0.25,
      stereoSpread: 4e-3
    };
    reverb.convolverNode = convolverNode;
    reverb.echoLowPassNode = this.offlineCtx.createBiquadFilter();
    reverb.echoLowPassNode.type = "lowpass";
    reverb.echoLowPassNode.frequency.setValueAtTime(reverb.echoLowPass, 0);
    reverb.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0);
    reverb.echoDelayNode = this.offlineCtx.createDelay(reverb.echoDelay);
    reverb.echoDelayNode.delayTime.setValueAtTime(reverb.echoDelay, 0);
    {
      reverb.stereoDelayNode = this.offlineCtx.createDelay(reverb.stereoSpread);
      reverb.stereoDelayNode.delayTime.setValueAtTime(reverb.stereoSpread, 0);
      reverb.mergerNode = this.offlineCtx.createChannelMerger(2);
    }
    reverb.gainNode = this.offlineCtx.createGain();
    reverb.gainNode.channelCount = 1;
    reverb.gainNode.channelCountMode = "explicit";
    reverb.gainNode.gain.setValueAtTime(1, 0);
    reverb.echoGainNode = this.offlineCtx.createGain();
    reverb.echoGainNode.channelCount = 1;
    reverb.echoGainNode.channelCountMode = "explicit";
    reverb.echoGainNode.gain.setValueAtTime(reverb.echoVolume, 0);
    reverb.outNode = this.offlineCtx.createGain();
    reverb.gainNode.connect(reverb.convolverNode);
    {
      const { buffer } = reverb.convolverNode;
      if (buffer && buffer.numberOfChannels != 1) {
        console.error("stereoSpread can only be applied to mono IRs");
      }
      reverb.convolverNode.connect(reverb.stereoDelayNode);
      reverb.convolverNode.connect(reverb.mergerNode, 0, 0);
      reverb.stereoDelayNode?.connect(reverb.mergerNode, 0, 1);
      reverb.mergerNode?.connect(reverb.outNode);
    }
    console.log("starting convolver");
    soundNode.connect(reverb.gainNode);
    reverb.outNode.connect(this.offlineCtx.destination);
    soundNode.start();
    this.startTime = performance.now();
    this.offlineCtx.oncomplete = (_e) => {
      const endTime = performance.now();
      console.log("Offline render time: ", endTime - this.startTime);
      this.runningOfflineTest = false;
    };
    this.offlineCtx.startRendering();
  }
}
const CreateJS = { Sound: new WebAudioEngine() };
const Sounds = {
  players: {
    m9_01: {
      path: "audio/guns/m9_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m9_reload_01: {
      path: "audio/guns/m9_reload_01.mp3",
      volume: 1
    },
    m9_reload_02: {
      path: "audio/guns/m9_reload_02.mp3",
      volume: 1
    },
    m9_switch_01: {
      path: "audio/guns/m9_switch_01.mp3",
      volume: 1
    },
    m93r_01: {
      path: "audio/guns/m93r_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m93r_reload_01: {
      path: "audio/guns/m93r_reload_01.mp3",
      volume: 1
    },
    m93r_reload_02: {
      path: "audio/guns/m93r_reload_02.mp3",
      volume: 1
    },
    m93r_switch_01: {
      path: "audio/guns/m93r_switch_01.mp3",
      volume: 1
    },
    glock_01: {
      path: "audio/guns/glock_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    glock_reload_01: {
      path: "audio/guns/glock_reload_01.mp3",
      volume: 1
    },
    glock_reload_02: {
      path: "audio/guns/glock_reload_02.mp3",
      volume: 1
    },
    glock_switch_01: {
      path: "audio/guns/glock_switch_01.mp3",
      volume: 1
    },
    p30l_01: {
      path: "audio/guns/p30l_01.mp3",
      volume: 1.2,
      maxInstances: 5
    },
    p30l_reload_01: {
      path: "audio/guns/p30l_reload_01.mp3",
      volume: 1.4
    },
    p30l_reload_02: {
      path: "audio/guns/p30l_reload_02.mp3",
      volume: 1.4
    },
    p30l_switch_01: {
      path: "audio/guns/p30l_switch_01.mp3",
      volume: 1.5
    },
    m1911_01: {
      path: "audio/guns/m1911_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m1911_reload_01: {
      path: "audio/guns/m1911_reload_01.mp3",
      volume: 1
    },
    m1911_reload_02: {
      path: "audio/guns/m1911_reload_02.mp3",
      volume: 1
    },
    m1911_switch_01: {
      path: "audio/guns/m1911_switch_01.mp3",
      volume: 1
    },
    ot38_01: {
      path: "audio/guns/ot38_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    ot38_reload_01: {
      path: "audio/guns/ot38_reload_01.mp3",
      volume: 1
    },
    ot38_reload_02: {
      path: "audio/guns/ot38_reload_02.mp3",
      volume: 1
    },
    ot38_switch_01: {
      path: "audio/guns/ot38_switch_01.mp3",
      volume: 1
    },
    ots38_01: {
      path: "audio/guns/ots38_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    colt45_01: {
      path: "audio/guns/colt45_01.mp3",
      volume: 1
    },
    colt45_reload_01: {
      path: "audio/guns/colt45_reload_01.mp3",
      volume: 1
    },
    colt45_reload_02: {
      path: "audio/guns/colt45_reload_02.mp3",
      volume: 1
    },
    colt45_switch_01: {
      path: "audio/guns/colt45_switch_01.mp3",
      volume: 1
    },
    deagle_01: {
      path: "audio/guns/deagle_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    deagle_reload_01: {
      path: "audio/guns/deagle_reload_01.mp3",
      volume: 1
    },
    deagle_reload_02: {
      path: "audio/guns/deagle_reload_02.mp3",
      volume: 1
    },
    deagle_switch_01: {
      path: "audio/guns/deagle_switch_01.mp3",
      volume: 1
    },
    flare_gun_01: {
      path: "audio/guns/flare_gun_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    flare_gun_reload_01: {
      path: "audio/guns/flare_gun_reload_01.mp3",
      volume: 1
    },
    flare_gun_reload_02: {
      path: "audio/guns/flare_gun_reload_02.mp3",
      volume: 1
    },
    ak47_01: {
      path: "audio/guns/ak47_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    ak47_reload_01: {
      path: "audio/guns/ak47_reload_01.mp3",
      volume: 1
    },
    ak47_switch_01: {
      path: "audio/guns/ak47_switch_01.mp3",
      volume: 1
    },
    an94_01: {
      path: "audio/guns/an94_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    an94_reload_01: {
      path: "audio/guns/an94_reload_01.mp3",
      volume: 1
    },
    an94_switch_01: {
      path: "audio/guns/an94_switch_01.mp3",
      volume: 1
    },
    groza_01: {
      path: "audio/guns/groza_01.mp3",
      volume: 0.95,
      maxInstances: 5
    },
    groza_reload_01: {
      path: "audio/guns/groza_reload_01.mp3",
      volume: 1.1
    },
    groza_switch_01: {
      path: "audio/guns/groza_switch_01.mp3",
      volume: 1.1
    },
    grozas_01: {
      path: "audio/guns/grozas_01.mp3",
      volume: 0.95,
      maxInstances: 5
    },
    scar_01: {
      path: "audio/guns/scar_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    scar_reload_01: {
      path: "audio/guns/scar_reload_01.mp3",
      volume: 1
    },
    scar_switch_01: {
      path: "audio/guns/scar_switch_01.mp3",
      volume: 1
    },
    scarssr_01: {
      path: "audio/guns/scarssr_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    dp28_01: {
      path: "audio/guns/dp28_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    dp28_reload_01: {
      path: "audio/guns/dp28_reload_01.mp3",
      volume: 1
    },
    dp28_switch_01: {
      path: "audio/guns/dp28_switch_01.mp3",
      volume: 1
    },
    bar_01: {
      path: "audio/guns/bar_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    bar_reload_01: {
      path: "audio/guns/bar_reload_01.mp3",
      volume: 1
    },
    bar_switch_01: {
      path: "audio/guns/bar_switch_01.mp3",
      volume: 1
    },
    pkp_01: {
      path: "audio/guns/pkp_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    pkp_reload_01: {
      path: "audio/guns/pkp_reload_01.mp3",
      volume: 1
    },
    pkp_switch_01: {
      path: "audio/guns/pkp_switch_01.mp3",
      volume: 1
    },
    m870_01: {
      path: "audio/guns/m870_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m870_reload_01: {
      path: "audio/guns/m870_reload_01.mp3",
      volume: 1
    },
    m870_cycle_01: {
      path: "audio/guns/m870_cycle_01.mp3",
      volume: 1
    },
    m870_pull_01: {
      path: "audio/guns/m870_pull_01.mp3",
      volume: 1
    },
    spas12_01: {
      path: "audio/guns/spas12_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    spas12_reload_01: {
      path: "audio/guns/spas12_reload_01.mp3",
      volume: 1
    },
    spas12_cycle_01: {
      path: "audio/guns/spas12_cycle_01.mp3",
      volume: 1
    },
    spas12_pull_01: {
      path: "audio/guns/spas12_pull_01.mp3",
      volume: 1
    },
    mp220_01: {
      path: "audio/guns/mp220_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    mp220_reload_01: {
      path: "audio/guns/mp220_reload_01.mp3",
      volume: 1
    },
    mp220_deploy_01: {
      path: "audio/guns/mp220_deploy_01.mp3",
      volume: 1
    },
    saiga_01: {
      path: "audio/guns/saiga_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    saiga_reload_01: {
      path: "audio/guns/saiga_reload_01.mp3",
      volume: 1
    },
    saiga_switch_01: {
      path: "audio/guns/saiga_switch_01.mp3",
      volume: 1
    },
    usas_01: {
      path: "audio/guns/usas_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    usas_reload_01: {
      path: "audio/guns/usas_reload_01.mp3",
      volume: 1
    },
    usas_switch_01: {
      path: "audio/guns/usas_switch_01.mp3",
      volume: 1
    },
    m1100_01: {
      path: "audio/guns/m1100_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m1100_reload_01: {
      path: "audio/guns/m1100_reload_01.mp3",
      volume: 1
    },
    m1100_deploy_01: {
      path: "audio/guns/m1100_deploy_01.mp3",
      volume: 1
    },
    m1014_01: {
      path: "audio/guns/m1014_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m1014_reload_01: {
      path: "audio/guns/m1014_reload_01.mp3",
      volume: 1
    },
    m1014_deploy_01: {
      path: "audio/guns/m1014_deploy_01.mp3",
      volume: 1
    },
    m39_01: {
      path: "audio/guns/m39_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m39_reload_01: {
      path: "audio/guns/m39_reload_01.mp3",
      volume: 1
    },
    m39_switch_01: {
      path: "audio/guns/m39_switch_01.mp3",
      volume: 1
    },
    svd_01: {
      path: "audio/guns/svd_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    svd_reload_01: {
      path: "audio/guns/svd_reload_01.mp3",
      volume: 1
    },
    svd_switch_01: {
      path: "audio/guns/svd_switch_01.mp3",
      volume: 1
    },
    garand_01: {
      path: "audio/guns/garand_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    garand_02: {
      path: "audio/guns/garand_02.mp3",
      volume: 1,
      maxInstances: 5
    },
    garand_reload_01: {
      path: "audio/guns/garand_reload_01.mp3",
      volume: 1
    },
    garand_switch_01: {
      path: "audio/guns/garand_switch_01.mp3",
      volume: 1
    },
    m1a1_01: {
      path: "audio/guns/m1a1_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m1a1_reload_01: {
      path: "audio/guns/m1a1_reload_01.mp3",
      volume: 1
    },
    m1a1_switch_01: {
      path: "audio/guns/m1a1_switch_01.mp3",
      volume: 1
    },
    mp5_01: {
      path: "audio/guns/mp5_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    mp5_reload_01: {
      path: "audio/guns/mp5_reload_01.mp3",
      volume: 1
    },
    mp5_switch_01: {
      path: "audio/guns/mp5_switch_01.mp3",
      volume: 1
    },
    mac10_01: {
      path: "audio/guns/mac10_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    mac10_reload_01: {
      path: "audio/guns/mac10_reload_01.mp3",
      volume: 1
    },
    mac10_switch_01: {
      path: "audio/guns/mac10_switch_01.mp3",
      volume: 1
    },
    ump9_01: {
      path: "audio/guns/ump9_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    ump9_reload_01: {
      path: "audio/guns/ump9_reload_01.mp3",
      volume: 1
    },
    ump9_switch_01: {
      path: "audio/guns/ump9_switch_01.mp3",
      volume: 1
    },
    vector_01: {
      path: "audio/guns/vector_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    vector_02: {
      path: "audio/guns/vector_02.mp3",
      volume: 1,
      maxInstances: 5
    },
    vector_reload_01: {
      path: "audio/guns/vector_reload_01.mp3",
      volume: 1
    },
    vector_switch_01: {
      path: "audio/guns/vector_switch_01.mp3",
      volume: 1
    },
    scorpion_01: {
      path: "audio/guns/scorpion_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    scorpion_reload_01: {
      path: "audio/guns/scorpion_reload_01.mp3",
      volume: 1
    },
    scorpion_switch_01: {
      path: "audio/guns/scorpion_switch_01.mp3",
      volume: 1
    },
    vss_01: {
      path: "audio/guns/vss_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    vss_reload_01: {
      path: "audio/guns/vss_reload_01.mp3",
      volume: 1
    },
    vss_switch_01: {
      path: "audio/guns/vss_switch_01.mp3",
      volume: 1
    },
    famas_01: {
      path: "audio/guns/famas_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    famas_reload_01: {
      path: "audio/guns/famas_reload_01.mp3",
      volume: 1
    },
    famas_switch_01: {
      path: "audio/guns/famas_switch_01.mp3",
      volume: 1
    },
    hk416_01: {
      path: "audio/guns/hk416_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    hk416_reload_01: {
      path: "audio/guns/hk416_reload_01.mp3",
      volume: 1
    },
    hk416_switch_01: {
      path: "audio/guns/hk416_switch_01.mp3",
      volume: 1
    },
    m4a1_01: {
      path: "audio/guns/m4a1_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m4a1_reload_01: {
      path: "audio/guns/m4a1_reload_01.mp3",
      volume: 1
    },
    m4a1_switch_01: {
      path: "audio/guns/m4a1_switch_01.mp3",
      volume: 1
    },
    mk12_01: {
      path: "audio/guns/mk12_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    mk12_reload_01: {
      path: "audio/guns/mk12_reload_01.mp3",
      volume: 1
    },
    mk12_switch_01: {
      path: "audio/guns/mk12_switch_01.mp3",
      volume: 1
    },
    l86_01: {
      path: "audio/guns/l86_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    l86_reload_01: {
      path: "audio/guns/l86_reload_01.mp3",
      volume: 1
    },
    l86_switch_01: {
      path: "audio/guns/l86_switch_01.mp3",
      volume: 1
    },
    m249_01: {
      path: "audio/guns/m249_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    m249_reload_01: {
      path: "audio/guns/m249_reload_01.mp3",
      volume: 1.5
    },
    m249_switch_01: {
      path: "audio/guns/m249_switch_01.mp3",
      volume: 1.5
    },
    qbb97_01: {
      path: "audio/guns/qbb97_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    qbb97_reload_01: {
      path: "audio/guns/qbb97_reload_01.mp3",
      volume: 1
    },
    qbb97_switch_01: {
      path: "audio/guns/qbb97_switch_01.mp3",
      volume: 1
    },
    scout_01: {
      path: "audio/guns/scout_01.mp3",
      volume: 2,
      maxInstances: 5
    },
    scout_reload_01: {
      path: "audio/guns/scout_reload_01.mp3",
      volume: 1.2
    },
    scout_cycle_01: {
      path: "audio/guns/scout_cycle_01.mp3",
      volume: 1.2
    },
    scout_pull_01: {
      path: "audio/guns/scout_pull_01.mp3",
      volume: 1.2
    },
    model94_01: {
      path: "audio/guns/model94_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    model94_reload_01: {
      path: "audio/guns/model94_reload_01.mp3",
      volume: 1
    },
    model94_cycle_01: {
      path: "audio/guns/model94_cycle_01.mp3",
      volume: 1
    },
    mkg45_01: {
      path: "audio/guns/mkg45_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    mkg45_reload_01: {
      path: "audio/guns/mkg45_reload_01.mp3",
      volume: 1.25
    },
    mkg45_switch_01: {
      path: "audio/guns/mkg45_switch_01.mp3",
      volume: 1.25
    },
    blr_01: {
      path: "audio/guns/blr_01.mp3",
      volume: 1.5,
      maxInstances: 5
    },
    blr_reload_01: {
      path: "audio/guns/blr_reload_01.mp3",
      volume: 1
    },
    blr_cycle_01: {
      path: "audio/guns/blr_cycle_01.mp3",
      volume: 1
    },
    mosin_01: {
      path: "audio/guns/mosin_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    mosin_reload_01: {
      path: "audio/guns/mosin_reload_01.mp3",
      volume: 1
    },
    mosin_reload_02: {
      path: "audio/guns/mosin_reload_02.mp3",
      volume: 1
    },
    mosin_cycle_01: {
      path: "audio/guns/mosin_cycle_01.mp3",
      volume: 1
    },
    mosin_pull_01: {
      path: "audio/guns/mosin_pull_01.mp3",
      volume: 1
    },
    sv98_01: {
      path: "audio/guns/sv98_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    sv98_reload_01: {
      path: "audio/guns/sv98_reload_01.mp3",
      volume: 1
    },
    sv98_cycle_01: {
      path: "audio/guns/sv98_cycle_01.mp3",
      volume: 1
    },
    sv98_pull_01: {
      path: "audio/guns/sv98_pull_01.mp3",
      volume: 1
    },
    awc_01: {
      path: "audio/guns/awc_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    awc_reload_01: {
      path: "audio/guns/awc_reload_01.mp3",
      volume: 1
    },
    awc_cycle_01: {
      path: "audio/guns/awc_cycle_01.mp3",
      volume: 1
    },
    awc_pull_01: {
      path: "audio/guns/awc_pull_01.mp3",
      volume: 1
    },
    potato_cannon_01: {
      path: "audio/guns/potato_cannon_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    potato_cannon_reload_01: {
      path: "audio/guns/potato_cannon_reload_01.mp3",
      volume: 1
    },
    potato_cannon_switch_01: {
      path: "audio/guns/potato_cannon_switch_01.mp3",
      volume: 1
    },
    potato_smg_01: {
      path: "audio/guns/potato_smg_01.mp3",
      volume: 1,
      maxInstances: 5
    },
    potato_smg_reload_01: {
      path: "audio/guns/potato_smg_reload_01.mp3",
      volume: 1
    },
    potato_smg_switch_01: {
      path: "audio/guns/potato_smg_switch_01.mp3",
      volume: 1
    },
    bugle_01: {
      path: "audio/guns/bugle_01.mp3",
      volume: 1.5,
      maxInstances: 3,
      preload: false
    },
    bugle_02: {
      path: "audio/guns/bugle_02.mp3",
      volume: 1.5,
      maxInstances: 3,
      preload: false
    },
    bugle_03: {
      path: "audio/guns/bugle_03.mp3",
      volume: 1.5,
      maxInstances: 3,
      preload: false
    },
    empty_fire_01: {
      path: "audio/guns/empty_fire_01.mp3",
      volume: 0.9
    },
    empty_fire_02: {
      path: "audio/guns/empty_fire_02.mp3",
      volume: 0.9
    },
    gun_switch_01: {
      path: "audio/guns/gun_switch_01.mp3",
      volume: 1
    },
    bandage_use_01: {
      path: "audio/ui/bandage_use_01.mp3",
      volume: 1
    },
    healthkit_use_01: {
      path: "audio/ui/healthkit_use_01.mp3",
      volume: 1
    },
    soda_use_01: {
      path: "audio/ui/soda_use_01.mp3",
      volume: 1
    },
    pills_use_01: {
      path: "audio/ui/pills_use_01.mp3",
      volume: 1
    },
    stow_weapon_01: {
      path: "audio/ui/stow_weapon_01.mp3",
      volume: 1
    }
  },
  hits: {
    stone_bullet_hit_01: {
      path: "audio/hits/stone_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    wood_bullet_hit_01: {
      path: "audio/hits/wood_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    wood_bullet_hit_02: {
      path: "audio/hits/wood_bullet_hit_02.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    wood_bullet_hit_03: {
      path: "audio/hits/wood_bullet_hit_03.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    wood_bullet_hit_04: {
      path: "audio/hits/wood_bullet_hit_04.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    bush_bullet_hit_01: {
      path: "audio/hits/bush_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    metal_bullet_hit_01: {
      path: "audio/hits/metal_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    metal_bullet_hit_02: {
      path: "audio/hits/metal_bullet_hit_02.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    metal_bullet_hit_03: {
      path: "audio/hits/metal_bullet_hit_03.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    metal_bullet_hit_04: {
      path: "audio/hits/metal_bullet_hit_04.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 6
    },
    pan_bullet_hit_01: {
      path: "audio/hits/pan_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 6
    },
    brick_bullet_hit_01: {
      path: "audio/hits/brick_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    punch_hit_01: {
      path: "audio/hits/punch_hit_01.mp3",
      volume: 1
    },
    knife_hit_01: {
      path: "audio/hits/knife_hit_01.mp3",
      volume: 1
    },
    pan_hit_01: {
      path: "audio/hits/pan_hit_01.mp3",
      volume: 1
    },
    axe_hit_01: {
      path: "audio/hits/axe_hit_01.mp3",
      volume: 1
    },
    hook_hit_01: {
      path: "audio/hits/hook_hit_01.mp3",
      volume: 1
    },
    saw_hit_01: {
      path: "audio/hits/saw_hit_01.mp3",
      volume: 2.5
    },
    crowbar_hit_01: {
      path: "audio/hits/crowbar_hit_01.mp3",
      volume: 1
    },
    spade_hit_01: {
      path: "audio/hits/spade_hit_01.mp3",
      volume: 1
    },
    hammer_hit_01: {
      path: "audio/hits/hammer_hit_01.mp3",
      volume: 1
    },
    metal_punch_hit_01: {
      path: "audio/hits/metal_punch_hit_01.mp3",
      volume: 1
    },
    metal_punch_hit_02: {
      path: "audio/hits/metal_punch_hit_02.mp3",
      volume: 1
    },
    egg_hit_01: {
      path: "audio/hits/egg_hit_01.mp3",
      volume: 1,
      preload: false
    },
    player_bullet_hit_01: {
      path: "audio/hits/player_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    player_bullet_hit_02: {
      path: "audio/hits/player_bullet_hit_02.mp3",
      volume: 1,
      canCoalesce: true
    },
    plastic_bullet_hit_01: {
      path: "audio/hits/plastic_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    toilet_bullet_hit_01: {
      path: "audio/hits/toilet_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    toilet_bullet_hit_02: {
      path: "audio/hits/toilet_bullet_hit_02.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    glass_bullet_hit_01: {
      path: "audio/hits/glass_bullet_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    concrete_hit_01: {
      path: "audio/hits/concrete_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    frag_grass_01: {
      path: "audio/hits/frag_grass_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    frag_sand_01: {
      path: "audio/hits/frag_sand_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    frag_water_01: {
      path: "audio/hits/frag_water_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    cloth_hit_01: {
      path: "audio/hits/cloth_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    cloth_hit_02: {
      path: "audio/hits/cloth_hit_02.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    organic_hit_01: {
      path: "audio/hits/organic_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    piano_hit_01: {
      path: "audio/hits/piano_hit_01.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    },
    piano_hit_02: {
      path: "audio/hits/piano_hit_02.mp3",
      volume: 1,
      canCoalesce: true,
      maxInstances: 3
    }
  },
  sfx: {
    crate_break_01: {
      path: "audio/sfx/crate_break_01.mp3",
      volume: 1
    },
    crate_break_02: {
      path: "audio/sfx/crate_break_02.mp3",
      volume: 1
    },
    tree_break_01: {
      path: "audio/sfx/tree_break_01.mp3",
      volume: 1
    },
    bush_break_01: {
      path: "audio/sfx/bush_break_01.mp3",
      volume: 1
    },
    bush_enter_01: {
      path: "audio/sfx/bush_enter_01.mp3",
      volume: 1,
      canCoalesce: true
    },
    bush_enter_02: {
      path: "audio/sfx/bush_enter_02.mp3",
      volume: 1,
      canCoalesce: true
    },
    barrel_break_01: {
      path: "audio/sfx/barrel_break_01.mp3",
      volume: 1
    },
    barrel_break_02: {
      path: "audio/sfx/barrel_break_02.mp3",
      volume: 1
    },
    stone_break_01: {
      path: "audio/sfx/stone_break_01.mp3",
      volume: 1
    },
    wall_break_01: {
      path: "audio/sfx/wall_break_01.mp3",
      volume: 1
    },
    ceiling_break_01: {
      path: "audio/sfx/ceiling_break_01.mp3",
      volume: 1
    },
    ceiling_break_02: {
      path: "audio/sfx/ceiling_break_02.mp3",
      volume: 1
    },
    toilet_break_01: {
      path: "audio/sfx/toilet_break_01.mp3",
      volume: 1
    },
    toilet_break_02: {
      path: "audio/sfx/toilet_break_02.mp3",
      volume: 1
    },
    vending_break_01: {
      path: "audio/sfx/vending_break_01.mp3",
      volume: 1
    },
    window_break_01: {
      path: "audio/sfx/window_break_01.mp3",
      volume: 1
    },
    window_break_02: {
      path: "audio/sfx/window_break_02.mp3",
      volume: 1
    },
    drawers_break_01: {
      path: "audio/sfx/drawers_break_01.mp3",
      volume: 1
    },
    oven_break_01: {
      path: "audio/sfx/oven_break_01.mp3",
      volume: 1
    },
    deposit_box_break_01: {
      path: "audio/sfx/deposit_box_break_01.mp3",
      volume: 1
    },
    cloth_break_01: {
      path: "audio/sfx/cloth_break_01.mp3",
      volume: 1
    },
    screen_break_01: {
      path: "audio/sfx/screen_break_01.mp3",
      volume: 1
    },
    pumpkin_break_01: {
      path: "audio/sfx/pumpkin_break_01.mp3",
      volume: 1,
      preload: false
    },
    ceramic_break_01: {
      path: "audio/sfx/ceramic_break_01.mp3",
      volume: 1
    },
    egg_break_01: {
      path: "audio/sfx/egg_break_01.mp3",
      volume: 1,
      preload: false
    },
    footstep_grass_01: {
      path: "audio/sfx/footstep_grass_01.mp3",
      volume: 1
    },
    footstep_grass_02: {
      path: "audio/sfx/footstep_grass_02.mp3",
      volume: 1
    },
    footstep_metal_01: {
      path: "audio/sfx/footstep_metal_01.mp3",
      volume: 1
    },
    footstep_metal_02: {
      path: "audio/sfx/footstep_metal_02.mp3",
      volume: 1
    },
    footstep_metal_03: {
      path: "audio/sfx/footstep_metal_03.mp3",
      volume: 1
    },
    footstep_metal_04: {
      path: "audio/sfx/footstep_metal_04.mp3",
      volume: 1
    },
    footstep_metal_05: {
      path: "audio/sfx/footstep_metal_05.mp3",
      volume: 1
    },
    footstep_wood_01: {
      path: "audio/sfx/footstep_wood_01.mp3",
      volume: 1
    },
    footstep_wood_02: {
      path: "audio/sfx/footstep_wood_02.mp3",
      volume: 1
    },
    footstep_wood_03: {
      path: "audio/sfx/footstep_wood_03.mp3",
      volume: 1
    },
    footstep_sand_01: {
      path: "audio/sfx/footstep_sand_01.mp3",
      volume: 1
    },
    footstep_sand_02: {
      path: "audio/sfx/footstep_sand_02.mp3",
      volume: 1
    },
    footstep_water_01: {
      path: "audio/sfx/footstep_water_01.mp3",
      volume: 1
    },
    footstep_water_02: {
      path: "audio/sfx/footstep_water_02.mp3",
      volume: 1
    },
    footstep_tile_01: {
      path: "audio/sfx/footstep_tile_01.mp3",
      volume: 1
    },
    footstep_tile_02: {
      path: "audio/sfx/footstep_tile_02.mp3",
      volume: 1
    },
    footstep_asphalt_01: {
      path: "audio/sfx/footstep_asphalt_01.mp3",
      volume: 1
    },
    footstep_asphalt_02: {
      path: "audio/sfx/footstep_asphalt_02.mp3",
      volume: 1
    },
    footstep_brick_01: {
      path: "audio/sfx/footstep_brick_01.mp3",
      volume: 1
    },
    footstep_stone_01: {
      path: "audio/sfx/footstep_stone_01.mp3",
      volume: 0.8
    },
    footstep_carpet_01: {
      path: "audio/sfx/footstep_carpet_01.mp3",
      volume: 1
    },
    punch_swing_01: {
      path: "audio/sfx/punch_swing_01.mp3",
      volume: 1
    },
    knife_swing_01: {
      path: "audio/sfx/knife_swing_01.mp3",
      volume: 1
    },
    medium_swing_01: {
      path: "audio/sfx/medium_swing_01.mp3",
      volume: 1
    },
    heavy_swing_01: {
      path: "audio/sfx/heavy_swing_01.mp3",
      volume: 1
    },
    bullet_whiz_01: {
      path: "audio/sfx/bullet_whiz_01.mp3",
      volume: 1
    },
    bullet_whiz_02: {
      path: "audio/sfx/bullet_whiz_02.mp3",
      volume: 1
    },
    bullet_whiz_03: {
      path: "audio/sfx/bullet_whiz_03.mp3",
      volume: 1
    },
    frag_throw_01: {
      path: "audio/sfx/frag_throw_01.mp3",
      volume: 1
    },
    frag_pin_01: {
      path: "audio/sfx/frag_pin_01.mp3",
      volume: 1
    },
    frag_deploy_01: {
      path: "audio/ui/frag_pickup_01.mp3",
      volume: 1
    },
    frag_water_01: {
      path: "audio/hits/frag_water_01.mp3",
      volume: 1
    },
    strobe_click_01: {
      path: "audio/sfx/strobe_click_01.mp3",
      volume: 1
    },
    explosion_01: {
      path: "audio/sfx/explosion_01.mp3",
      volume: 1
    },
    explosion_02: {
      path: "audio/sfx/explosion_02.mp3",
      volume: 1
    },
    explosion_03: {
      path: "audio/sfx/explosion_03.mp3",
      volume: 1
    },
    explosion_04: {
      path: "audio/sfx/explosion_04.mp3",
      volume: 1,
      maxInstances: 4
    },
    explosion_05: {
      path: "audio/sfx/explosion_05.mp3",
      volume: 1
    },
    explosion_smoke_01: {
      path: "audio/sfx/explosion_smoke_01.mp3",
      volume: 1
    },
    snowball_01: {
      path: "audio/sfx/snowball_01.mp3",
      volume: 1,
      preload: false
    },
    snowball_02: {
      path: "audio/sfx/snowball_02.mp3",
      volume: 1,
      preload: false
    },
    potato_01: {
      path: "audio/sfx/potato_01.mp3",
      volume: 1,
      preload: false
    },
    potato_02: {
      path: "audio/sfx/potato_02.mp3",
      volume: 1,
      preload: false
    },
    stow_weapon_01: {
      path: "audio/ui/stow_weapon_01.mp3",
      volume: 1
    },
    knife_deploy_01: {
      path: "audio/ui/knife_deploy_01.mp3",
      volume: 1
    },
    pan_pickup_01: {
      path: "audio/ui/pan_pickup_01.mp3",
      volume: 1
    },
    knuckles_deploy_01: {
      path: "audio/ui/knuckles_deploy_01.mp3",
      volume: 1
    },
    door_open_01: {
      path: "audio/sfx/door_open_01.mp3",
      volume: 1
    },
    door_close_01: {
      path: "audio/sfx/door_close_01.mp3",
      volume: 1
    },
    door_open_02: {
      path: "audio/sfx/door_open_02.mp3",
      volume: 1
    },
    door_close_02: {
      path: "audio/sfx/door_close_02.mp3",
      volume: 1
    },
    door_open_03: {
      path: "audio/sfx/door_open_03.mp3",
      volume: 1
    },
    door_close_03: {
      path: "audio/sfx/door_close_03.mp3",
      volume: 1
    },
    door_open_04: {
      path: "audio/sfx/door_open_04.mp3",
      volume: 0.8
    },
    door_error_01: {
      path: "audio/sfx/door_error_01.mp3",
      volume: 1
    },
    vault_change_01: {
      path: "audio/sfx/vault_change_01.mp3",
      volume: 1
    },
    vault_change_02: {
      path: "audio/sfx/vault_change_02.mp3",
      volume: 1,
      preload: false
    },
    vault_change_03: {
      path: "audio/sfx/vault_change_03.mp3",
      volume: 1,
      preload: false
    },
    cell_control_01: {
      path: "audio/sfx/cell_control_01.mp3",
      volume: 1
    },
    cell_control_02: {
      path: "audio/sfx/cell_control_02.mp3",
      volume: 1
    },
    plane_01: {
      path: "audio/sfx/plane_01.mp3",
      volume: 1
    },
    plane_02: {
      path: "audio/sfx/plane_02.mp3",
      volume: 1,
      preload: false
    },
    fighter_01: {
      path: "audio/sfx/fighter_01.mp3",
      volume: 1
    },
    airdrop_chute_01: {
      path: "audio/sfx/airdrop_chute_01.mp3",
      volume: 1
    },
    airdrop_fall_01: {
      path: "audio/sfx/airdrop_fall_01.mp3",
      volume: 1
    },
    airdrop_crash_01: {
      path: "audio/sfx/airdrop_crash_01.mp3",
      volume: 1
    },
    airdrop_crash_02: {
      path: "audio/sfx/airdrop_crash_02.mp3",
      volume: 1
    },
    airdrop_open_01: {
      path: "audio/sfx/airdrop_open_01.mp3",
      volume: 1
    },
    airdrop_open_02: {
      path: "audio/sfx/airdrop_open_02.mp3",
      volume: 1
    },
    button_press_01: {
      path: "audio/sfx/button_press_01.mp3",
      volume: 1,
      maxInstances: 3
    },
    watering_01: {
      path: "audio/sfx/watering_01.mp3",
      volume: 1,
      maxInstances: 3,
      preload: false
    },
    piano_02: {
      path: "audio/sfx/piano_02.mp3",
      volume: 1,
      preload: false
    },
    footstep_08: {
      path: "audio/sfx/footstep_08.mp3",
      volume: 1,
      preload: false
    },
    footstep_09: {
      path: "audio/sfx/footstep_09.mp3",
      volume: 1,
      preload: false
    },
    howl_01: {
      path: "audio/sfx/howl_01.mp3",
      volume: 1,
      preload: false
    },
    wheel_control_01: {
      path: "audio/sfx/wheel_control_01.mp3",
      volume: 1,
      preload: false
    },
    log_01: {
      path: "audio/sfx/log_01.mp3",
      volume: 1,
      preload: false
    },
    log_02: {
      path: "audio/sfx/log_02.mp3",
      volume: 1,
      preload: false
    },
    log_03: {
      path: "audio/sfx/log_03.mp3",
      volume: 1,
      preload: false
    },
    log_04: {
      path: "audio/sfx/log_04.mp3",
      volume: 1,
      preload: false
    },
    log_05: {
      path: "audio/sfx/log_05.mp3",
      volume: 1,
      preload: false
    },
    log_06: {
      path: "audio/sfx/log_06.mp3",
      volume: 1,
      preload: false
    },
    log_11: {
      path: "audio/sfx/log_11.mp3",
      volume: 4,
      preload: false
    },
    log_12: {
      path: "audio/sfx/log_12.mp3",
      volume: 4,
      preload: false
    },
    log_13: {
      path: "audio/sfx/log_13.mp3",
      volume: 2,
      preload: false
    },
    log_14: {
      path: "audio/sfx/log_14.mp3",
      volume: 2,
      preload: false
    },
    ability_stim_01: {
      path: "audio/sfx/ability_stim_01.mp3",
      volume: 4
    },
    xp_drop_01: {
      path: "audio/sfx/xp_drop_01.mp3",
      volume: 1.25,
      preload: false
    },
    xp_drop_02: {
      path: "audio/sfx/xp_drop_02.mp3",
      volume: 1.25,
      preload: false
    },
    cluck_01: {
      path: "audio/sfx/cluck_01.mp3",
      volume: 1,
      preload: false
    },
    cluck_02: {
      path: "audio/sfx/cluck_02.mp3",
      volume: 1,
      preload: false
    },
    feather_01: {
      path: "audio/sfx/feather_01.mp3",
      volume: 1,
      preload: false
    }
  },
  ambient: {
    ambient_wind_01: {
      path: "audio/ambient/ambient_wind_01.mp3",
      volume: 1,
      loadPriority: 1
    },
    ambient_waves_01: {
      path: "audio/ambient/ambient_waves_01.mp3",
      volume: 1,
      loadPriority: 1
    },
    ambient_stream_01: {
      path: "audio/ambient/ambient_stream_01.mp3",
      volume: 1,
      loadPriority: 1
    },
    piano_music_01: {
      path: "audio/ambient/piano_music_01.mp3",
      volume: 1,
      preload: false
    },
    ambient_wind_02: {
      path: "audio/ambient/ambient_wind_02.mp3",
      volume: 1,
      preload: false
    },
    ambient_steam_01: {
      path: "audio/ambient/ambient_steam_01.mp3",
      volume: 1,
      preload: false
    },
    club_music_01: {
      path: "audio/ambient/club_music_01.mp3",
      volume: 1,
      preload: false
    },
    club_music_02: {
      path: "audio/ambient/club_music_02.mp3",
      volume: 1,
      preload: false
    },
    ambient_lab_01: {
      path: "audio/ambient/ambient_lab_01.mp3",
      volume: 0.2,
      preload: false
    }
  },
  ui: {
    ammo_pickup_01: {
      path: "audio/ui/ammo_pickup_01.mp3",
      volume: 1
    },
    clothes_pickup_01: {
      path: "audio/ui/clothes_pickup_01.mp3",
      volume: 1
    },
    bells_01: {
      path: "audio/sfx/plane_02.mp3",
      volume: 1,
      preload: false
    },
    helmet_pickup_01: {
      path: "audio/ui/helmet_pickup_01.mp3",
      volume: 1
    },
    chest_pickup_01: {
      path: "audio/ui/chest_pickup_01.mp3",
      volume: 1
    },
    gun_pickup_01: {
      path: "audio/ui/gun_pickup_01.mp3",
      volume: 1
    },
    scope_pickup_01: {
      path: "audio/ui/scope_pickup_01.mp3",
      volume: 1
    },
    pack_pickup_01: {
      path: "audio/ui/pack_pickup_01.mp3",
      volume: 1
    },
    soda_pickup_01: {
      path: "audio/ui/soda_pickup_01.mp3",
      volume: 1
    },
    pills_pickup_01: {
      path: "audio/ui/pills_pickup_01.mp3",
      volume: 1
    },
    bandage_pickup_01: {
      path: "audio/ui/bandage_pickup_01.mp3",
      volume: 1
    },
    healthkit_pickup_01: {
      path: "audio/ui/healthkit_pickup_01.mp3",
      volume: 1
    },
    frag_pickup_01: {
      path: "audio/ui/frag_pickup_01.mp3",
      volume: 1
    },
    snowball_pickup_01: {
      path: "audio/ui/snowball_pickup_01.mp3",
      volume: 1,
      preload: false
    },
    potato_pickup_01: {
      path: "audio/ui/potato_pickup_01.mp3",
      volume: 1,
      preload: false
    },
    heavy_pickup_01: {
      path: "audio/ui/heavy_pickup_01.mp3",
      volume: 1
    },
    pan_pickup_01: {
      path: "audio/ui/pan_pickup_01.mp3",
      volume: 1
    },
    perk_pickup_01: {
      path: "audio/ui/perk_pickup_01.mp3",
      volume: 1
    },
    xp_pickup_01: {
      path: "audio/ui/xp_pickup_01.mp3",
      volume: 1.5,
      preload: false
    },
    xp_pickup_02: {
      path: "audio/ui/xp_pickup_02.mp3",
      volume: 1.5,
      preload: false
    },
    ping_danger_01: {
      path: "audio/ui/ping_danger_01.mp3",
      volume: 1
    },
    ping_coming_01: {
      path: "audio/ui/ping_coming_01.mp3",
      volume: 1
    },
    ping_help_01: {
      path: "audio/ui/ping_help_01.mp3",
      volume: 1
    },
    ping_leader_01: {
      path: "audio/ui/ping_leader_01.mp3",
      volume: 1,
      preload: false
    },
    ping_airdrop_01: {
      path: "audio/ui/ping_airdrop_01.mp3",
      volume: 1
    },
    ping_airstrike_01: {
      path: "audio/ui/ping_airstrike_01.mp3",
      volume: 1
    },
    ping_unlock_01: {
      path: "audio/ui/ping_unlock_01.mp3",
      volume: 1,
      preload: false
    },
    emote_01: {
      path: "audio/ui/emote_01.mp3",
      volume: 1
    },
    trick_01: {
      path: "audio/ui/trick_01.mp3",
      volume: 1.5,
      preload: false
    },
    trick_02: {
      path: "audio/ui/trick_02.mp3",
      volume: 1.5,
      preload: false
    },
    trick_03: {
      path: "audio/ui/trick_03.mp3",
      volume: 1.5,
      preload: false
    },
    treat_01: {
      path: "audio/ui/treat_01.mp3",
      volume: 1,
      preload: false
    },
    loot_drop_01: {
      path: "audio/ui/loot_drop_01.mp3",
      volume: 1
    },
    notification_start_01: {
      path: "audio/ui/notification_start_01.mp3",
      volume: 1
    },
    notification_join_01: {
      path: "audio/ui/notification_join_01.mp3",
      volume: 1
    },
    leader_assigned_01: {
      path: "audio/ui/leader_assigned_01.mp3",
      volume: 1,
      maxInstances: 1
    },
    leader_dead_01: {
      path: "audio/ui/leader_dead_01.mp3",
      volume: 1.75,
      maxInstances: 1
    },
    captain_assigned_01: {
      path: "audio/ui/captain_assigned_01.mp3",
      volume: 2,
      maxInstances: 1
    },
    lt_assigned_01: {
      path: "audio/ui/lt_assigned_01.mp3",
      volume: 1,
      preload: false,
      maxInstances: 1
    },
    medic_assigned_01: {
      path: "audio/ui/medic_assigned_01.mp3",
      volume: 2,
      preload: false,
      maxInstances: 1
    },
    marksman_assigned_01: {
      path: "audio/ui/marksman_assigned_01.mp3",
      volume: 2,
      preload: false,
      maxInstances: 1
    },
    recon_assigned_01: {
      path: "audio/ui/recon_assigned_01.mp3",
      volume: 1.5,
      preload: false,
      maxInstances: 1
    },
    grenadier_assigned_01: {
      path: "audio/ui/grenadier_assigned_01.mp3",
      volume: 2.5,
      preload: false,
      maxInstances: 1
    },
    bugler_assigned_01: {
      path: "audio/ui/bugler_assigned_01.mp3",
      volume: 2.5,
      preload: false,
      maxInstances: 1
    },
    last_man_assigned_01: {
      path: "audio/ui/last_man_assigned_01.mp3",
      volume: 1.75,
      preload: false,
      maxInstances: 1
    },
    helmet03_forest_pickup_01: {
      path: "audio/ui/helmet03_forest_pickup_01.mp3",
      volume: 1,
      maxInstances: 1,
      preload: false
    },
    kill_leader_assigned_01: {
      path: "audio/ui/kill_leader_assigned_01.mp3",
      volume: 1.5,
      maxInstances: 1,
      preload: false
    },
    kill_leader_assigned_02: {
      path: "audio/ui/kill_leader_assigned_02.mp3",
      volume: 1.5,
      maxInstances: 1,
      preload: false
    },
    kill_leader_dead_01: {
      path: "audio/ui/kill_leader_dead_01.mp3",
      volume: 1.5,
      maxInstances: 1,
      preload: false
    },
    kill_leader_dead_02: {
      path: "audio/ui/kill_leader_dead_02.mp3",
      volume: 1.5,
      maxInstances: 1,
      preload: false
    },
    spawn_01: {
      path: "audio/ui/spawn_01.mp3",
      volume: 3,
      preload: false
    }
  },
  music: {
    menu_music: {
      path: "audio/ambient/menu_music_01.mp3",
      volume: 1,
      loadPriority: 2
    }
  }
};
const Groups = {
  footstep_grass: {
    channel: "sfx",
    sounds: ["footstep_grass_01", "footstep_grass_02"]
  },
  footstep_container: {
    channel: "sfx",
    sounds: ["footstep_metal_03"]
  },
  footstep_warehouse: {
    channel: "sfx",
    sounds: ["footstep_metal_01", "footstep_metal_02"]
  },
  footstep_house: {
    channel: "sfx",
    sounds: ["footstep_wood_02", "footstep_wood_03"]
  },
  footstep_shack: {
    channel: "sfx",
    sounds: ["footstep_wood_01"]
  },
  footstep_sand: {
    channel: "sfx",
    sounds: ["footstep_sand_01", "footstep_sand_02"]
  },
  footstep_water: {
    channel: "sfx",
    sounds: ["footstep_water_01", "footstep_water_02"]
  },
  footstep_tile: {
    channel: "sfx",
    sounds: ["footstep_tile_01", "footstep_tile_02"]
  },
  footstep_asphalt: {
    channel: "sfx",
    sounds: ["footstep_asphalt_01", "footstep_asphalt_02"]
  },
  footstep_brick: {
    channel: "sfx",
    sounds: ["footstep_brick_01"]
  },
  footstep_bunker: {
    channel: "sfx",
    sounds: ["footstep_metal_04", "footstep_metal_05"]
  },
  footstep_stone: {
    channel: "sfx",
    sounds: ["footstep_stone_01"]
  },
  footstep_carpet: {
    channel: "sfx",
    sounds: ["footstep_carpet_01"]
  },
  player_bullet_hit: {
    channel: "hits",
    sounds: ["player_bullet_hit_01"]
  },
  metal_punch: {
    channel: "hits",
    sounds: ["metal_punch_hit_01", "metal_punch_hit_02"]
  },
  cloth_punch: {
    channel: "hits",
    sounds: ["cloth_hit_01"]
  },
  cloth_bullet: {
    channel: "hits",
    sounds: ["cloth_hit_02"]
  },
  organic_hit: {
    channel: "hits",
    sounds: ["organic_hit_01"]
  },
  piano_hit: {
    channel: "hits",
    sounds: ["piano_hit_01", "piano_hit_02"]
  },
  wall_bullet: {
    channel: "hits",
    sounds: ["metal_bullet_hit_01"]
  },
  wall_wood_bullet: {
    channel: "hits",
    sounds: ["wood_bullet_hit_02"]
  },
  wall_brick_bullet: {
    channel: "hits",
    sounds: ["brick_bullet_hit_01"]
  },
  stone_bullet: {
    channel: "hits",
    sounds: ["stone_bullet_hit_01"]
  },
  barrel_bullet: {
    channel: "hits",
    sounds: ["metal_bullet_hit_03"]
  },
  pan_bullet: {
    channel: "hits",
    sounds: ["pan_bullet_hit_01"]
  },
  silo_bullet: {
    channel: "hits",
    sounds: ["metal_bullet_hit_04"]
  },
  toilet_porc_bullet: {
    channel: "hits",
    sounds: ["toilet_bullet_hit_01"]
  },
  toilet_metal_bullet: {
    channel: "hits",
    sounds: ["toilet_bullet_hit_02"]
  },
  glass_bullet: {
    channel: "hits",
    sounds: ["glass_bullet_hit_01"]
  },
  cobalt_bullet: {
    channel: "hits",
    sounds: ["metal_bullet_hit_02"]
  },
  concrete_hit: {
    channel: "hits",
    sounds: ["concrete_hit_01"]
  },
  wood_prop_bullet: {
    channel: "hits",
    sounds: ["wood_bullet_hit_03"]
  },
  wood_crate_bullet: {
    channel: "hits",
    sounds: ["wood_bullet_hit_04"]
  },
  ammo_crate_bullet: {
    channel: "hits",
    sounds: ["plastic_bullet_hit_01"]
  },
  bush_bullet: {
    channel: "hits",
    sounds: ["bush_bullet_hit_01"]
  },
  tree_bullet: {
    channel: "hits",
    sounds: ["wood_bullet_hit_01"]
  },
  egg_hit: {
    channel: "hits",
    sounds: ["egg_hit_01"]
  },
  player_bullet_grunt: {
    channel: "hits",
    sounds: ["player_bullet_hit_02"]
  },
  bullet_whiz: {
    channel: "sfx",
    sounds: ["bullet_whiz_01", "bullet_whiz_02", "bullet_whiz_03"]
  },
  frag_grass: {
    channel: "hits",
    sounds: ["frag_grass_01"]
  },
  frag_sand: {
    channel: "hits",
    sounds: ["frag_sand_01"]
  },
  frag_water: {
    channel: "hits",
    sounds: ["frag_water_01"]
  },
  kill_leader_assigned: {
    channel: "ui",
    sounds: ["kill_leader_assigned_01", "kill_leader_assigned_02"]
  },
  kill_leader_dead: {
    channel: "ui",
    sounds: ["kill_leader_dead_01", "kill_leader_dead_02"]
  },
  cluck: {
    channel: "sfx",
    sounds: ["cluck_01", "cluck_02"]
  }
};
const Channels = {
  activePlayer: {
    volume: 0.5,
    maxRange: 48,
    list: "players",
    type: "sound"
  },
  otherPlayers: {
    volume: 0.5,
    maxRange: 48,
    list: "players",
    type: "sound"
  },
  hits: {
    volume: 0.4,
    maxRange: 48,
    list: "hits",
    type: "sound"
  },
  sfx: {
    volume: 1,
    maxRange: 48,
    list: "sfx",
    type: "sound"
  },
  ambient: {
    volume: 1,
    maxRange: 1,
    list: "ambient",
    type: "sound"
  },
  ui: {
    volume: 0.75,
    maxRange: 48,
    list: "ui",
    type: "sound"
  },
  music: {
    volume: 1,
    maxRange: 1,
    list: "music",
    type: "music"
  }
};
const Reverbs = {
  cathedral: {
    path: "audio/reverb/cathedral_01.mp3",
    volume: 0.7,
    stereoSpread: 4e-3
  },
  cave: {
    path: "audio/reverb/cave_mono_01.mp3",
    volume: 0.7,
    echoVolume: 0.5,
    echoDelay: 0.25,
    echoLowPass: 800,
    stereoSpread: 4e-3
  }
};
const SoundDefs = {
  Sounds,
  Groups,
  Channels,
  Reverbs
};
const AudioManagerMinAllowedVolume = 3e-3;
const DiffLayerMult = 0.5;
class AudioManager {
  mute = false;
  masterVolume = 1;
  soundVolume = 1;
  musicVolume = 1;
  baseVolume = 0.5;
  sounds = {};
  loadedFiles = {};
  preloadedSounds = false;
  cameraPos = v2.create(0, 0);
  activeLayer = 0;
  underground = false;
  soundInstances = [];
  constructor(_options) {
    CreateJS.Sound.volume = 0.5;
    CreateJS.Sound.on("fileload", this.loadHandler, this);
  }
  preloadSounds() {
    if (!this.preloadedSounds) {
      this.preloadedSounds = true;
      const preloadedSounds = {};
      const soundGroups = Object.keys(SoundDefs.Sounds);
      for (let i2 = 0; i2 < soundGroups.length; i2++) {
        const soundGroup = soundGroups[i2];
        const soundList = SoundDefs.Sounds[soundGroup];
        const soundListKeys = Object.keys(soundList);
        for (let j = 0; j < soundListKeys.length; j++) {
          const soundName = soundListKeys[j];
          if (preloadedSounds[soundName] !== void 0) {
            console.log(`Sound ${soundName} defined multiple times!`);
          }
          preloadedSounds[soundName] = true;
        }
      }
      const loadList = [];
      const channelKeys = Object.keys(SoundDefs.Channels);
      for (let i2 = 0; i2 < channelKeys.length; i2++) {
        const channelKey = channelKeys[i2];
        const channel = SoundDefs.Channels[channelKey];
        const sounds = SoundDefs.Sounds[channel.list];
        const soundKeys = Object.keys(sounds);
        for (let j = 0; j < soundKeys.length; j++) {
          const key = soundKeys[j];
          const sound = sounds[key];
          if (sound.preload === void 0 || sound.preload) {
            const options = {
              canCoalesce: sound.canCoalesce,
              channels: sound.maxInstances,
              volume: sound.volume
            };
            loadList.push({
              name: key,
              channel: channelKey,
              path: sound.path,
              options,
              priority: sound.loadPriority || 0
            });
          }
        }
      }
      loadList.sort((a, b) => {
        return b.priority - a.priority;
      });
      for (let i2 = 0; i2 < loadList.length; i2++) {
        const sound = loadList[i2];
        this.loadSound(sound);
      }
      const reverbs = SoundDefs.Reverbs;
      const reverbKeys = Object.keys(reverbs);
      for (let i2 = 0; i2 < reverbKeys.length; i2++) {
        const key = reverbKeys[i2];
        const reverb = reverbs[key];
        CreateJS.Sound.registerReverb(reverb.path, key, reverb);
      }
    }
  }
  loadSound(sound) {
    const name = sound.name + sound.channel;
    if (!this.sounds[name]) {
      CreateJS.Sound.registerSound(sound.path, name, sound.options);
      this.sounds[name] = {
        path: sound.path,
        name: sound.name,
        channel: sound.channel
      };
    }
  }
  loadHandler(path) {
    this.loadedFiles[path] = true;
  }
  update(dt) {
    for (let i2 = this.soundInstances.length - 1; i2 >= 0; i2--) {
      const inst = this.soundInstances[i2];
      if (inst.instance.playState == "playFinished" || inst.instance.playState == "playInterrupted" || inst.instance.playState == "playFailed") {
        this.soundInstances.splice(i2, 1);
      }
    }
    const layerVolumeMap = [0, 1, 1 / 3, 2 / 3];
    const reverbVolume = this.underground ? layerVolumeMap[this.activeLayer] : 0;
    CreateJS.Sound.setReverbs({
      cathedral: reverbVolume
    });
    CreateJS.Sound.update(dt);
  }
  playSound(sound, options = {}) {
    if (!sound || sound == "none") {
      return null;
    }
    options.channel = options.channel || "activePlayer";
    options.startSilent = options.startSilent || false;
    options.forceStart = options.forceStart || false;
    options.loop = options.loop || false;
    options.soundPos = options.soundPos || null;
    options.fallOff = options.fallOff || 0;
    options.filter = options.filter || "";
    options.delay = options.delay || 0;
    options.ignoreMinAllowable = options.ignoreMinAllowable || false;
    options.rangeMult = options.rangeMult || 1;
    options.offset = options.offset || 0;
    options.ambient = options.channel == "ambient" || options.channel == "music";
    options.detune = options.detune || 0;
    options.volumeScale = options.volumeScale || 1;
    let instance = null;
    const a = SoundDefs.Channels[options.channel];
    if (a && (!this.mute || options.forceStart)) {
      const baseVolume = this.baseVolume * 1 * this.getTypeVolume(a.type) * options.volumeScale;
      const diffLayer = options.layer !== void 0 && !util.sameAudioLayer(options.layer, this.activeLayer);
      const filter = options.filter ? diffLayer || options.forceFilter ? options.filter : "reverb" : "none";
      if (options.channel != "activePlayer" && options.soundPos) {
        const diff2 = v2.sub(this.cameraPos, options.soundPos);
        const dist = v2.length(diff2);
        let range = a.maxRange * options.rangeMult;
        if (math.eqAbs(range, 0)) {
          range = 1;
        }
        const distNormal = math.clamp(Math.abs(dist / range), 0, 1);
        const scaledVolume = Math.pow(1 - distNormal, 1 + options.fallOff * 2);
        let clipVolume = a.volume * scaledVolume * baseVolume;
        clipVolume = diffLayer ? clipVolume * DiffLayerMult : clipVolume;
        if (clipVolume > AudioManagerMinAllowedVolume || options.ignoreMinAllowable) {
          const stereoNorm = math.clamp(diff2.x / range * -1, -1, 1);
          instance = CreateJS.Sound.play(sound + options.channel, {
            filter,
            loop: options.loop ? -1 : 0,
            volume: options.startSilent ? 0 : clipVolume,
            pan: stereoNorm,
            delay: options.delay,
            offset: options.offset,
            ambient: options.ambient,
            detune: options.detune
          });
        }
      } else {
        let clipVolume = a.volume * baseVolume;
        clipVolume = diffLayer ? clipVolume * DiffLayerMult : clipVolume;
        instance = CreateJS.Sound.play(sound + options.channel, {
          filter,
          loop: options.loop ? -1 : 0,
          volume: options.startSilent ? 0 : clipVolume,
          delay: options.delay,
          offset: options.offset,
          ambient: options.ambient,
          detune: options.detune
        });
      }
      if (instance && (options.loop || options.channel == "music")) {
        const type = options.channel == "music" ? "music" : "sound";
        this.soundInstances.push({
          instance,
          type
        });
      }
    }
    return instance;
  }
  playGroup(group, option = {}) {
    const _group = SoundDefs.Groups[group];
    if (_group) {
      const a = _group.sounds;
      const i2 = Math.floor(util.random(0, a.length));
      option.channel = _group.channel;
      return this.playSound(a[i2], option);
    }
    return null;
  }
  updateSound(instance, channel, soundPos, options = {}) {
    options.fallOff = options.fallOff || 0;
    options.rangeMult = options.rangeMult || 1;
    options.ignoreMinAllowable = options.ignoreMinAllowable || false;
    options.volumeScale = options.volumeScale || 1;
    const a = SoundDefs.Channels[channel];
    if (instance && a) {
      const baseVolume = this.baseVolume * 1 * this.getTypeVolume(a.type) * options.volumeScale;
      const diff2 = v2.sub(this.cameraPos, soundPos);
      const dist = v2.length(diff2);
      let range = a.maxRange * options.rangeMult;
      if (math.eqAbs(range, 0)) {
        range = 1;
      }
      const distNormal = math.clamp(Math.abs(dist / range), 0, 1);
      const scaledVolume = Math.pow(1 - distNormal, 1 + options.fallOff * 2);
      let clipVolume = a.volume * scaledVolume * baseVolume;
      const diffLayer = options.layer === void 0 || util.sameAudioLayer(options.layer, this.activeLayer);
      clipVolume = diffLayer ? clipVolume : clipVolume * DiffLayerMult;
      if (clipVolume > AudioManagerMinAllowedVolume || options.ignoreMinAllowable) {
        const stereoNorm = math.clamp(diff2.x / range * -1, -1, 1);
        instance.volume = clipVolume;
        instance.pan = stereoNorm;
      }
    }
  }
  setMasterVolume(volume) {
    volume = math.clamp(volume, 0, 1);
    CreateJS.Sound.volume = volume;
  }
  _setInstanceTypeVolume(type, volume) {
    volume = math.clamp(volume, 0, 1);
    const typeVolume = this.getTypeVolume(type);
    const scaledVolume = typeVolume > 1e-4 ? volume / typeVolume : 0;
    for (let i2 = 0; i2 < this.soundInstances.length; i2++) {
      const inst = this.soundInstances[i2];
      if (inst.type == type) {
        inst.instance.volume *= scaledVolume;
      }
    }
  }
  setSoundVolume(volume) {
    this._setInstanceTypeVolume("sound", volume);
    this.soundVolume = volume;
  }
  setMusicVolume(volume) {
    this._setInstanceTypeVolume("music", volume);
    this.musicVolume = volume;
  }
  setVolume(instance, volume, type) {
    if (instance) {
      type = type || "sound";
      const typeVolume = this.getTypeVolume(type);
      instance.volume = volume * typeVolume;
    }
  }
  getVolume(instance) {
    if (instance) {
      return instance.volume;
    }
    return 0;
  }
  setMute(mute) {
    this.mute = mute;
    CreateJS.Sound.setMute(this.mute);
    return this.mute;
  }
  muteToggle() {
    return this.setMute(!this.mute);
  }
  stopSound(instance) {
    instance?.stop();
  }
  stopAll() {
    CreateJS.Sound.stop();
  }
  allLoaded() {
    const keys = Object.keys(this.sounds);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const sound = this.sounds[keys[i2]];
      if (!this.isSoundLoaded(sound.name, sound.channel)) {
        return false;
      }
    }
    return true;
  }
  isSoundLoaded(soundName, key) {
    const sound = this.sounds[soundName + key];
    return sound && this.loadedFiles[sound.path];
  }
  isSoundPlaying(inst) {
    return !!inst && inst.playState == CreateJS.Sound.PLAY_SUCCEEDED;
  }
  getSoundDefVolume(sound, channel) {
    const soundDef = SoundDefs.Sounds[channel][sound];
    const channelDef = SoundDefs.Channels[channel];
    if (soundDef && channelDef) {
      return soundDef.volume * channelDef.volume;
    }
    return 1;
  }
  getTypeVolume(type) {
    switch (type) {
      case "music":
        return this.musicVolume;
      case "sound":
        return this.soundVolume;
      default:
        return this.soundVolume;
    }
  }
}
class Camera {
  m_pos = v2.create(0, 0);
  m_ppu = 16;
  m_zoom = 1.5;
  m_targetZoom = 1.5;
  m_screenWidth = 1;
  m_screenHeight = 1;
  m_shakeEnabled = true;
  m_shakeInt = 0;
  m_interpEnabled = true;
  m_localRotationEnabled = false;
  m_interpInterval = 0;
  m_z() {
    return this.m_ppu * this.m_zoom;
  }
  m_pointToScreen(point) {
    return {
      x: this.m_screenWidth * 0.5 + (point.x - this.m_pos.x) * this.m_z(),
      y: this.m_screenHeight * 0.5 - (point.y - this.m_pos.y) * this.m_z()
    };
  }
  m_screenToPoint(screen) {
    return {
      x: this.m_pos.x + (screen.x - this.m_screenWidth * 0.5) / this.m_z(),
      y: this.m_pos.y + (this.m_screenHeight * 0.5 - screen.y) / this.m_z()
    };
  }
  m_pixels(p) {
    return p * this.m_zoom;
  }
  m_scaleToScreen(s) {
    return s * this.m_z();
  }
  m_setShakeEnabled(en) {
    this.m_shakeEnabled = en;
  }
  m_setInterpEnabled(en) {
    this.m_interpEnabled = en;
  }
  m_setRotationEnabled(en) {
    this.m_localRotationEnabled = en;
  }
  m_addShake(pos, intensity) {
    const dist = v2.length(v2.sub(this.m_pos, pos));
    const newInt = math.delerp(dist, 40, 10) * intensity;
    this.m_shakeInt = Math.max(this.m_shakeInt, newInt);
  }
  m_applyShake() {
    if (this.m_shakeEnabled) {
      this.m_pos = v2.add(this.m_pos, v2.mul(v2.randomUnit(), this.m_shakeInt));
    }
    this.m_shakeInt = 0;
  }
}
class DebugLines {
  shapes = [];
  addLine(start, end, color, fill = 0) {
    return;
  }
  addRay(pos, dir, len, color, fill = 0) {
    return;
  }
  addCircle(pos, rad, color, fill) {
    return;
  }
  addAabb(min, max, color, fill) {
    return;
  }
  addCollider(col, color, fill) {
    return;
  }
  m_render(camera, gfx) {
    return;
  }
  flush() {
    this.shapes = [];
  }
}
const debugLines = new DebugLines();
let Touch$1 = class Touch {
  id = 0;
  pos = {
    x: 0,
    y: 0
  };
  posOld = {
    x: 0,
    y: 0
  };
  posDown = {
    x: 0,
    y: 0
  };
  startTime = 0;
  lastUpdateTime = 0;
  isNew = true;
  isDead = false;
  /* For internal use */
  osId = 0;
};
class InputHandler {
  constructor(touchElem) {
    this.touchElem = touchElem;
    window.addEventListener("focus", this.onWindowFocus.bind(this), false);
    window.addEventListener("blur", this.onWindowFocus.bind(this), false);
    window.addEventListener("keydown", this.onKeyDown.bind(this), false);
    window.addEventListener("keyup", this.onKeyUp.bind(this), false);
    window.addEventListener("mousemove", this.onMouseMove.bind(this), false);
    window.addEventListener("mousedown", this.onMouseDown.bind(this), false);
    window.addEventListener("mouseup", this.onMouseUp.bind(this), false);
    window.addEventListener("wheel", this.onMouseWheel.bind(this), {
      capture: false,
      passive: true
    });
    window.addEventListener("touchmove", this.onTouchMove.bind(this), false);
    window.addEventListener("touchstart", this.onTouchStart.bind(this), false);
    window.addEventListener("touchend", this.onTouchEnd.bind(this), false);
    window.addEventListener("touchcancel", this.onTouchCancel.bind(this), false);
    this.touchElem.addEventListener(
      "touchstart",
      (e) => {
        e.preventDefault();
      },
      false
    );
  }
  keys = {};
  keysOld = {};
  mousePos = v2.create(0, 0);
  mouseButtons = {};
  mouseButtonsOld = {};
  mouseWheelState = 0;
  touches = [];
  touchIdCounter = 0;
  lostFocus = false;
  captureNextInputCb = null;
  m_free() {
    this.touches = [];
    this.touchIdCounter = 0;
  }
  onWindowFocus() {
    this.keys = {};
    this.keysOld = {};
    this.mouseButtons = {};
    this.mouseButtonsOld = {};
    this.mouseWheelState = 0;
    this.touches.length = 0;
    this.lostFocus = true;
  }
  // Call at the end of every frame
  flush() {
    this.keysOld = Object.assign({}, this.keys);
    this.mouseButtonsOld = Object.assign({}, this.mouseButtons);
    this.mouseWheelState = 0;
    for (let i2 = 0; i2 < this.touches.length; i2++) {
      this.touches[i2].posOld.x = this.touches[i2].pos.x;
      this.touches[i2].posOld.y = this.touches[i2].pos.y;
      this.touches[i2].isNew = false;
      if (this.touches[i2].isDead) {
        this.touches.splice(i2, 1);
        --i2;
      }
    }
    this.lostFocus = false;
  }
  captureNextInput(cb) {
    this.captureNextInputCb = cb;
  }
  checkCaptureInput(event, inputType, inputCode) {
    return !!this.captureNextInputCb?.(event, new InputValue(inputType, inputCode)) && !(this.captureNextInputCb = null, 0);
  }
  // InputValue
  isInputValuePressed(inputValue) {
    switch (inputValue.type) {
      case 1:
        return this.keyPressed(inputValue.code);
      case 2:
        return this.mousePressed(inputValue.code);
      case 3:
        return this.mouseWheel() == inputValue.code;
      default:
        return false;
    }
  }
  isInputValueReleased(inputValue) {
    switch (inputValue.type) {
      case 1:
        return this.keyReleased(inputValue.code);
      case 2:
        return this.mouseReleased(inputValue.code);
      case 3:
        return this.mouseWheel() == inputValue.code;
      default:
        return false;
    }
  }
  isInputValueDown(inputValue) {
    switch (inputValue.type) {
      case 1:
        return this.keyDown(inputValue.code);
      case 2:
        return this.mouseDown(inputValue.code);
      case 3:
        return this.mouseWheel() == inputValue.code;
      default:
        return false;
    }
  }
  // Keyboard
  onKeyDown(event) {
    const keyCode = event.keyCode;
    if (keyCode == 9) {
      event.preventDefault();
    }
    if (this.checkCaptureInput(event, 1, keyCode)) {
      return;
    }
    this.keys[keyCode] = true;
  }
  onKeyUp(event) {
    this.keys[event.keyCode] = false;
  }
  keyDown(key) {
    return !!this.keys[key];
  }
  keyPressed(key) {
    return !this.keysOld[key] && !!this.keys[key];
  }
  keyReleased(event) {
    return !!this.keysOld[event] && !this.keys[event];
  }
  // Mouse
  onMouseMove(event) {
    this.mousePos.x = event.clientX;
    this.mousePos.y = event.clientY;
  }
  onMouseDown(event) {
    let button = 0;
    button = "which" in event ? event.which - 1 : event.button;
    if (this.checkCaptureInput(event, 2, button)) {
      return;
    }
    this.mouseButtons[button] = true;
  }
  onMouseUp(event) {
    let button = 0;
    button = "which" in event ? event.which - 1 : event.button;
    this.mouseButtons[button] = false;
    if (button == 3 || button == 4) {
      event.preventDefault();
    }
  }
  onMouseWheel(event) {
    const wheel = event.deltaY < 0 ? 1 : 2;
    if (this.checkCaptureInput(event, 3, wheel)) {
      return;
    }
    this.mouseWheelState = wheel;
  }
  mouseDown(button) {
    return !!this.mouseButtons[button];
  }
  mousePressed(button) {
    return !this.mouseButtonsOld[button] && !!this.mouseButtons[button];
  }
  mouseReleased(button) {
    return !!this.mouseButtonsOld[button] && !this.mouseButtons[button];
  }
  mouseWheel() {
    return this.mouseWheelState;
  }
  // Touch
  onTouchShared(event, type) {
    if (event.target == this.touchElem || type != 1) {
      const time = event.timeStamp || performance.now();
      for (let i2 = 0; i2 < event.changedTouches.length; i2++) {
        const osTouch = event.changedTouches[i2];
        const osId = osTouch.identifier;
        const x = osTouch.clientX;
        const y = osTouch.clientY;
        let t = null;
        for (let j = 0; j < this.touches.length; j++) {
          if (this.touches[j].osId == osId && !this.touches[j].isDead) {
            t = this.touches[j];
            break;
          }
        }
        if (type == 1 && !t) {
          t = new Touch$1();
          this.touches.push(t);
          ++this.touchIdCounter;
          t.id = this.touchIdCounter;
          t.osId = osId;
          t.posOld.x = x;
          t.posOld.y = y;
          t.posDown.x = x;
          t.posDown.y = y;
          t.startTime = time;
          t.isNew = true;
          t.isDead = false;
        }
        if ((type == 2 || type == 3) && !!t) {
          t.isDead = true;
        }
        if (t) {
          t.pos.x = x;
          t.pos.y = y;
          t.lastUpdateTime = time;
        }
      }
    }
  }
  onTouchMove(event) {
    this.onTouchShared(
      event,
      0
      /* Move */
    );
  }
  onTouchStart(event) {
    this.onTouchShared(
      event,
      1
      /* Start */
    );
  }
  onTouchEnd(event) {
    this.onTouchShared(
      event,
      2
      /* End */
    );
  }
  onTouchCancel(event) {
    this.onTouchShared(
      event,
      3
      /* Cancel */
    );
  }
  getTouchById(id) {
    for (let i2 = 0; i2 < this.touches.length; i2++) {
      if (this.touches[i2].id == id) {
        return this.touches[i2];
      }
    }
    return null;
  }
}
var Key = /* @__PURE__ */ ((Key2) => {
  Key2[Key2["Backspace"] = 8] = "Backspace";
  Key2[Key2["Enter"] = 13] = "Enter";
  Key2[Key2["Shift"] = 16] = "Shift";
  Key2[Key2["Control"] = 17] = "Control";
  Key2[Key2["Alt"] = 18] = "Alt";
  Key2[Key2["Escape"] = 27] = "Escape";
  Key2[Key2["Space"] = 32] = "Space";
  Key2[Key2["Left"] = 37] = "Left";
  Key2[Key2["Up"] = 38] = "Up";
  Key2[Key2["Right"] = 39] = "Right";
  Key2[Key2["Down"] = 40] = "Down";
  Key2[Key2["Zero"] = 48] = "Zero";
  Key2[Key2["One"] = 49] = "One";
  Key2[Key2["Two"] = 50] = "Two";
  Key2[Key2["Three"] = 51] = "Three";
  Key2[Key2["Four"] = 52] = "Four";
  Key2[Key2["Five"] = 53] = "Five";
  Key2[Key2["Six"] = 54] = "Six";
  Key2[Key2["Seven"] = 55] = "Seven";
  Key2[Key2["Eight"] = 56] = "Eight";
  Key2[Key2["Nine"] = 57] = "Nine";
  Key2[Key2["A"] = 65] = "A";
  Key2[Key2["B"] = 66] = "B";
  Key2[Key2["C"] = 67] = "C";
  Key2[Key2["D"] = 68] = "D";
  Key2[Key2["E"] = 69] = "E";
  Key2[Key2["F"] = 70] = "F";
  Key2[Key2["G"] = 71] = "G";
  Key2[Key2["L"] = 76] = "L";
  Key2[Key2["M"] = 77] = "M";
  Key2[Key2["N"] = 78] = "N";
  Key2[Key2["P"] = 80] = "P";
  Key2[Key2["Q"] = 81] = "Q";
  Key2[Key2["R"] = 82] = "R";
  Key2[Key2["S"] = 83] = "S";
  Key2[Key2["T"] = 84] = "T";
  Key2[Key2["V"] = 86] = "V";
  Key2[Key2["W"] = 87] = "W";
  Key2[Key2["X"] = 88] = "X";
  Key2[Key2["Windows"] = 91] = "Windows";
  Key2[Key2["ContextMenu"] = 93] = "ContextMenu";
  Key2[Key2["F1"] = 112] = "F1";
  Key2[Key2["F2"] = 113] = "F2";
  Key2[Key2["F3"] = 114] = "F3";
  Key2[Key2["F4"] = 115] = "F4";
  Key2[Key2["F5"] = 116] = "F5";
  Key2[Key2["F6"] = 117] = "F6";
  Key2[Key2["F7"] = 118] = "F7";
  Key2[Key2["F8"] = 119] = "F8";
  Key2[Key2["F9"] = 120] = "F9";
  Key2[Key2["F10"] = 121] = "F10";
  Key2[Key2["F11"] = 122] = "F11";
  Key2[Key2["F12"] = 123] = "F12";
  Key2[Key2["Plus"] = 187] = "Plus";
  Key2[Key2["Minus"] = 189] = "Minus";
  Key2[Key2["FwdSlash"] = 191] = "FwdSlash";
  Key2[Key2["Tilde"] = 192] = "Tilde";
  return Key2;
})(Key || {});
var MouseButton = /* @__PURE__ */ ((MouseButton2) => {
  MouseButton2[MouseButton2["Left"] = 0] = "Left";
  MouseButton2[MouseButton2["Middle"] = 1] = "Middle";
  MouseButton2[MouseButton2["Right"] = 2] = "Right";
  MouseButton2[MouseButton2["Thumb1"] = 3] = "Thumb1";
  MouseButton2[MouseButton2["Thumb2"] = 4] = "Thumb2";
  return MouseButton2;
})(MouseButton || {});
var MouseWheel = /* @__PURE__ */ ((MouseWheel2) => {
  MouseWheel2[MouseWheel2["None"] = 0] = "None";
  MouseWheel2[MouseWheel2["Up"] = 1] = "Up";
  MouseWheel2[MouseWheel2["Down"] = 2] = "Down";
  return MouseWheel2;
})(MouseWheel || {});
var InputType = /* @__PURE__ */ ((InputType2) => {
  InputType2[InputType2["None"] = 0] = "None";
  InputType2[InputType2["Key"] = 1] = "Key";
  InputType2[InputType2["MouseButton"] = 2] = "MouseButton";
  InputType2[InputType2["MouseWheel"] = 3] = "MouseWheel";
  return InputType2;
})(InputType || {});
const KeyNames = [
  "",
  "",
  "",
  "Cancel",
  "",
  "",
  "Help",
  "",
  "Backspace",
  "Tab",
  "",
  "",
  "Clear",
  "Enter",
  "Enter",
  "",
  "Shift",
  "Control",
  "Alt",
  "Pause",
  "Capslock",
  "Kana",
  "Eisu",
  "Junja",
  "Final",
  "Hanja",
  "",
  "ESC",
  "Convert",
  "Nonconvert",
  "Accept",
  "Modechange",
  "Space",
  "Page Up",
  "Page Down",
  "End",
  "Home",
  "←",
  "↑",
  "→",
  "↓",
  "Select",
  "Print",
  "Execute",
  "Printscreen",
  "Insert",
  "Delete",
  "",
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  ":",
  ";",
  "<",
  "=",
  ">",
  "?",
  "@",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "Windows Key",
  "",
  "Context Menu",
  "",
  "Sleep",
  "Numpad 0",
  "Numpad 1",
  "Numpad 2",
  "Numpad 3",
  "Numpad 4",
  "Numpad 5",
  "Numpad 6",
  "Numpad 7",
  "Numpad 8",
  "Numpad 9",
  "*",
  "+",
  "Separator",
  "-",
  ".",
  "/",
  "F1",
  "F2",
  "F3",
  "F4",
  "F5",
  "F6",
  "F7",
  "F8",
  "F9",
  "F10",
  "F11",
  "F12",
  "F13",
  "F14",
  "F15",
  "F16",
  "F17",
  "F18",
  "F19",
  "F20",
  "F21",
  "F22",
  "F23",
  "F24",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Num Lock",
  "Scroll Lock",
  "WIN_OEM_FJ_JISHO",
  "WIN_OEM_FJ_MASSHOU",
  "WIN_OEM_FJ_TOUROKU",
  "WIN_OEM_FJ_LOYA",
  "WIN_OEM_FJ_ROYA",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Circumflex",
  "!",
  '"',
  "#",
  "$",
  "%",
  "&",
  "_",
  "(",
  ")",
  "*",
  "+",
  "|",
  "Hyphen Minus",
  "{",
  "}",
  "~",
  "",
  "",
  "",
  "",
  "Volume Mute",
  "Volume Down",
  "Volume Up",
  "",
  "",
  ";",
  "=",
  ",",
  "-",
  ".",
  "/",
  "Backquote",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "[",
  "\\",
  "]",
  "'",
  "",
  "Meta",
  "ALTGR",
  "",
  "WIN_ICO_HELP",
  "WIN_ICO_00",
  "",
  "WIN_ICO_CLEAR",
  "",
  "",
  "WIN_OEM_RESET",
  "WIN_OEM_JUMP",
  "WIN_OEM_PA1",
  "WIN_OEM_PA2",
  "WIN_OEM_PA3",
  "WIN_OEM_WSCTRL",
  "WIN_OEM_CUSEL",
  "WIN_OEM_ATTN",
  "WIN_OEM_FINISH",
  "WIN_OEM_COPY",
  "WIN_OEM_AUTO",
  "WIN_OEM_ENLW",
  "WIN_OEM_BACKTAB",
  "ATTN",
  "CRSEL",
  "EXSEL",
  "EREOF",
  "PLAY",
  "ZOOM",
  "",
  "PA1",
  "WIN_OEM_CLEAR",
  ""
];
const MouseButtonNames = [
  "Left Mouse",
  "Middle Mouse",
  "Right Mouse",
  "Thumb Mouse 1",
  "Thumb Mouse 2"
];
const MouseWheelNames = ["", "Mouse Wheel Up", "Mouse Wheel Down"];
class InputValue {
  constructor(type, code) {
    this.type = type;
    this.code = code;
    this.type = type;
    this.code = code;
  }
  equals(inputValue) {
    return this.type == inputValue.type && this.code == inputValue.code;
  }
  toString() {
    if (this.type == 0) {
      return "";
    }
    if (this.type == 1) {
      return KeyNames[this.code] || `Key ${this.code}`;
    }
    if (this.type == 2) {
      return MouseButtonNames[this.code] || `Mouse ${this.code}`;
    }
    return MouseWheelNames[this.code] || `Mouse Wheel ${this.code}`;
  }
}
const airdropIdx = 4;
const airstrikeIdx = 5;
const emoteTimeout = 10;
function getImgUrlFromSelector(data) {
  if (data.displayCloseIcon) {
    return "img/gui/close.svg";
  }
  return helpers.getSvgFromGameType(data.ping || data.emote);
}
function vectorToDegreeAngle(vector) {
  let angle = Math.atan2(vector.y, vector.x) * 180 / Math.PI;
  if (angle < 0) {
    angle += 360;
  }
  return angle;
}
function isAngleBetween(target, angle1, angle2) {
  if (angle1 <= angle2) {
    if (angle2 - angle1 <= 180) {
      return angle1 <= target && target <= angle2;
    }
    return angle2 <= target || target <= angle1;
  }
  if (angle1 - angle2 <= 180) {
    return angle2 <= target && target <= angle1;
  }
  return angle1 <= target || target <= angle2;
}
class EmoteBarn {
  constructor(audioManager, uiManager, playerBarn, camera, map) {
    this.audioManager = audioManager;
    this.uiManager = uiManager;
    this.playerBarn = playerBarn;
    this.camera = camera;
    this.map = map;
    this.triggerPing = () => {
      if (this.activePlayer) {
        let worldPos;
        if (this.emoteSelector.ping && !this.emoteWheelsGreyed) {
          const pingData = PingDefs[this.emoteSelector.ping];
          if (pingData?.pingMap) {
            worldPos = this.uiManager.getWorldPosFromMapPos(
              this.bigmapPingPos || this.emoteScreenPos,
              this.map,
              this.camera
            );
            worldPos ||= this.camera.m_screenToPoint(this.emoteScreenPos);
            worldPos.x = math.clamp(worldPos.x, 0, this.map.width);
            worldPos.y = math.clamp(worldPos.y, 0, this.map.height);
            this.sendPing({
              type: this.emoteSelector.ping,
              pos: worldPos
            });
          }
        } else if (this.emoteSelector.emote && !this.emoteWheelsGreyed) {
          worldPos = this.activePlayer.m_pos;
          this.sendEmote({
            type: this.emoteSelector.emote,
            pos: worldPos
          });
          this.uiManager.displayMapLarge(true);
        }
        this.inputReset();
        this.pingKeyTriggered = this.pingKeyDown;
      }
    };
    this.triggerEmote = () => {
      if (this.activePlayer) {
        let worldPos;
        if (this.emoteSelector.emote && !this.emoteWheelsGreyed) {
          worldPos = this.activePlayer.m_pos;
          this.sendEmote({
            type: this.emoteSelector.emote,
            pos: worldPos
          });
        }
        this.inputReset();
      }
    };
    this.onTouchStart = (event) => {
      if (this.wheelDisplayed) {
        event.stopPropagation();
        this.inputReset();
      }
    };
    if (device.touch) {
      this.emoteElems.css("pointer-events", "auto");
      this.bigmapCollision.on("touchend", (e) => {
        e.stopPropagation();
        this.bigmapPingPos = {
          x: e.originalEvent?.changedTouches[0].pageX,
          y: e.originalEvent?.changedTouches[0].pageY
        };
        this.emoteScreenPos = v2.create(
          this.camera.m_screenWidth / 2,
          this.camera.m_screenHeight / 2
        );
        this.pingMouseTriggered = true;
      });
      this.emoteButtonElem.css("pointer-events", "auto");
      this.emoteButtonElem.on("touchstart", (event) => {
        event.stopPropagation();
        this.emoteScreenPos = v2.create(
          this.camera.m_screenWidth / 2,
          this.camera.m_screenHeight / 2
        );
        this.emoteMouseTriggered = true;
      });
      this.emoteElems.on("touchstart", (e) => {
        e.stopPropagation();
        this.emoteTouchedPos = {
          x: e.originalEvent?.changedTouches[0].pageX,
          y: e.originalEvent?.changedTouches[0].pageY
        };
      });
      $(document).on("touchstart", this.onTouchStart);
    }
    this.emoteWheelData = {
      middle: {
        parent: $("#ui-emote-middle"),
        vA: v2.create(-1, 1),
        vC: v2.create(1, 1),
        ping: "",
        emote: "",
        displayCloseIcon: true
      },
      top: {
        parent: $("#ui-emote-top"),
        vA: v2.create(-1, 1),
        vC: v2.create(1, 1),
        ping: "",
        emote: "",
        emoteSlot: EmoteSlot.Top
      },
      right: {
        parent: $("#ui-emote-right"),
        vA: v2.create(1, 1),
        vC: v2.create(1, -1),
        ping: "",
        emote: "",
        emoteSlot: EmoteSlot.Right
      },
      bottom: {
        parent: $("#ui-emote-bottom"),
        vA: v2.create(1, -1),
        vC: v2.create(-1, -1),
        ping: "",
        emote: "",
        emoteSlot: EmoteSlot.Bottom
      },
      left: {
        parent: $("#ui-emote-left"),
        vA: v2.create(-1, -1),
        vC: v2.create(-1, 1),
        ping: "",
        emote: "",
        emoteSlot: EmoteSlot.Left
      }
    };
    const teamPingData = {
      middle: {
        parent: $("#ui-team-ping-middle"),
        vA: v2.create(-1, 1),
        vC: v2.create(1, 1),
        ping: "",
        emote: "",
        displayCloseIcon: true
      },
      top: {
        parent: $("#ui-team-ping-top"),
        vA: v2.create(-1, 1),
        vC: v2.create(1, 1),
        ping: "ping_danger",
        emote: ""
      },
      right: {
        parent: $("#ui-team-ping-right"),
        vA: v2.create(1, 1),
        vC: v2.create(1, -1),
        ping: "ping_coming",
        emote: ""
      },
      bottom: {
        parent: $("#ui-team-ping-bottom"),
        vA: v2.create(1, -1),
        vC: v2.create(-1, -1),
        ping: "ping_help",
        emote: ""
      },
      "bottom-left": {
        parent: $("#ui-team-ping-bottom-left"),
        vA: v2.create(-1, -1),
        vC: v2.create(-1, 0),
        ping: "",
        emote: "emote_medical"
      },
      "top-left": {
        parent: $("#ui-team-ping-top-left"),
        vA: v2.create(-1, 0),
        vC: v2.create(-1, 1),
        ping: "",
        emote: "emote_ammo",
        ammoEmote: true
      }
    };
    for (const key in teamPingData) {
      if (teamPingData.hasOwnProperty(key)) {
        const pingData = teamPingData[key];
        const angleA = vectorToDegreeAngle(pingData.vA);
        const angleC = vectorToDegreeAngle(pingData.vC);
        this.teamPingSelectors.push({
          parent: pingData.parent,
          angleA,
          angleC,
          highlight: pingData.parent.find(".ui-emote-hl"),
          highlightDisplayed: false,
          ping: pingData.ping,
          emote: pingData.emote,
          ammoEmote: pingData?.ammoEmote,
          displayCloseIcon: pingData?.displayCloseIcon
        });
      }
    }
    this.displayedSelectors = this.teamPingSelectors;
    this.container.scale.set(this.baseScale, this.baseScale);
    this.container.addChild(this.pingContainer);
    const createIndicator = function(idx, indTint = 16777215) {
      const pingContainer = new Container();
      const indContainer = new Container();
      const tint = GameConfig.groupColors[idx] || indTint;
      const pingBorder = Sprite.from("ping-border.img");
      pingBorder.scale.set(0.4, 0.4);
      pingBorder.anchor.set(0.5, 0.5);
      pingBorder.tint = tint;
      pingBorder.alpha = 0;
      pingBorder.visible = true;
      pingContainer.addChild(pingBorder);
      const pingSprite = Sprite.from("ping-team-danger.img");
      pingSprite.scale.set(0.4, 0.4);
      pingSprite.anchor.set(0.5, 0.5);
      pingSprite.tint = tint;
      pingSprite.alpha = 0;
      pingSprite.visible = true;
      pingContainer.addChild(pingSprite);
      const indSpriteInner = Sprite.from("ping-team-danger.img");
      indSpriteInner.scale.set(0.5, 0.5);
      indSpriteInner.anchor.set(0.5, 0.5);
      indSpriteInner.tint = tint;
      indSpriteInner.alpha = 0;
      indSpriteInner.visible = true;
      indContainer.addChild(indSpriteInner);
      const indSpriteOuter = Sprite.from("ping-indicator.img");
      indSpriteOuter.scale.set(0.5, 0.5);
      indSpriteOuter.anchor.set(0.5, 0);
      indSpriteOuter.alpha = 0;
      indSpriteOuter.visible = true;
      indContainer.addChild(indSpriteOuter);
      return {
        elem: $("#ui-team-indicators").find(`.ui-indicator-ping[data-id=${idx}]`),
        borderElem: $("#ui-team-indicators").find(
          `.ui-indicator-ping-border[data-id=${idx}]`
        ),
        pingContainer,
        indContainer,
        borderSprite: {
          sprite: pingBorder,
          baseScale: 0.4
        },
        pingSprite: {
          sprite: pingSprite,
          baseScale: 0.4
        },
        indSpriteOuter: {
          sprite: indSpriteOuter,
          baseScale: 0.5,
          baseTint: Number(indSpriteOuter.tint)
        },
        indSpriteInner: {
          sprite: indSpriteInner,
          baseScale: 0.5,
          baseTint: Number(indSpriteInner.tint)
        },
        displayed: false,
        fadeIn: 0,
        life: 0,
        fadeOut: 0,
        pos: v2.create(0, 0)
      };
    };
    for (let i2 = 0; i2 < 4; i2++) {
      const indicator = createIndicator(i2);
      this.pingContainer.addChild(indicator.pingContainer);
      this.indContainer.addChild(indicator.indContainer);
      this.pingIndicators.push({
        ping: indicator
      });
    }
    this.airdropIndicator = createIndicator(airdropIdx, PingDefs.ping_airdrop.tint);
    this.pingContainer.addChild(this.airdropIndicator.pingContainer);
    this.indContainer.addChild(this.airdropIndicator.indContainer);
    this.pingIndicators.push({
      ping: this.airdropIndicator
    });
    this.airstrikeIndicator = createIndicator(
      airstrikeIdx,
      PingDefs.ping_airstrike.tint
    );
    this.pingContainer.addChild(this.airstrikeIndicator.pingContainer);
    this.indContainer.addChild(this.airstrikeIndicator.indContainer);
    this.pingIndicators.push({
      ping: this.airstrikeIndicator
    });
  }
  gameElem = $("#ui-game");
  disable = false;
  activePlayer = null;
  worldPos = v2.create(0, 0);
  zIdxNext = 0;
  emoteSelector = {
    ping: "",
    emote: ""
  };
  // Client ping/emote throttle
  emoteSoftTicker = 0;
  emoteHardTicker = 0;
  emoteCounter = 0;
  emoteWheelsGreyed = false;
  teamEmotesGreyed = false;
  wheelKeyTriggered = false;
  emoteTimeoutTicker = 0;
  // Track team pings and emote inputs separately
  pingKeyTriggered = false;
  pingKeyDown = false;
  pingMouseTriggered = false;
  wheelDisplayed = false;
  emoteMouseTriggered = false;
  emoteScreenPos = v2.create(0, 0);
  triggerPing;
  triggerEmote;
  // Touch listeners
  emoteTouchedPos = null;
  bigmapPingPos = null;
  onTouchStart;
  emoteElems = $(".ui-emote");
  bigmapCollision = $("#big-map-collision");
  emoteButtonElem = $("#ui-emote-button");
  emoteWheels = $("#ui-emotes, #ui-team-pings");
  teamEmotes = $(".ui-emote-bottom-left, .ui-emote-top-left");
  // Emotes
  emoteWheel = $("#ui-emotes");
  emoteWheelData;
  // Team pings
  teamPingWheel = $("#ui-team-pings");
  teamPingSelectors = [];
  displayedSelectors;
  baseScale = 1;
  container = new Container();
  pingContainer = new Container();
  indContainer = new Container();
  // !
  pingIndicators = [];
  airdropIndicator;
  airstrikeIndicator;
  emoteLifeIn = 0.75;
  emoteLife = 1;
  emoteLifeOut = 0.1;
  pingFadeIn = 0.5;
  pingLife = 4.25;
  pingFadeOut = 0.1;
  wedgeOpacityReset = device.touch ? 1 : 0.75;
  teamEmoteOpacityReset = 0.2;
  emotes = [];
  newPings = [];
  newEmotes = [];
  emoteLoadout = [];
  unlockTypes = {};
  socialUnlocked = false;
  emoteWheelSelectors;
  parentDisplayed;
  m_free() {
    if (device.touch) {
      $(document).off("touchstart", this.onTouchStart);
      this.emoteButtonElem.off("touchstart");
      this.emoteElems.off("touchstart");
      this.bigmapCollision.off("touchend");
    }
    this.init();
  }
  init() {
    this.emoteWheelsGreyed = false;
    this.emoteWheels.css("opacity", 1);
    this.teamEmotesGreyed = false;
    this.teamEmotes.css("opacity", 1);
    this.disable = false;
    this.inputReset();
  }
  inputReset() {
    this.pingMouseTriggered = false;
    this.pingKeyTriggered = false;
    this.emoteMouseTriggered = false;
    this.wheelDisplayed = false;
    this.displayWheel(this.teamPingWheel, false);
    this.displayWheel(this.emoteWheel, false);
    this.emoteTouchedPos = null;
    this.bigmapPingPos = null;
    this.emoteTimeoutTicker = 0;
    for (let i2 = 0; i2 < this.displayedSelectors.length; i2++) {
      const s = this.displayedSelectors[i2];
      const emoteData = EmotesDefs[s.emote];
      const teamOnly = emoteData?.teamOnly;
      if (this.teamEmotesGreyed && teamOnly) {
        s.parent.css("opacity", this.teamEmoteOpacityReset);
      } else {
        s.parent.css("opacity", this.wedgeOpacityReset);
      }
      s.highlight.css("display", "none");
      s.highlightDisplayed = false;
    }
  }
  sendPing(ping) {
    this.newPings.push({
      type: ping.type,
      pos: ping.pos
    });
    this.incrementEmote();
  }
  addPing(ping, factionMode) {
    if (this.activePlayer) {
      const pingData = PingDefs[ping.type];
      if (pingData) {
        this.uiManager.createPing(
          ping.type,
          ping.pos,
          ping.playerId,
          this.activePlayer.__id,
          this.playerBarn,
          factionMode
        );
        let indicator = null;
        let pingSound = pingData.sound;
        if (ping.type == "ping_airdrop") {
          indicator = this.pingIndicators[airdropIdx].ping;
        } else if (ping.type == "ping_airstrike") {
          indicator = this.pingIndicators[airstrikeIdx].ping;
        } else {
          const playerInfo = this.playerBarn.getPlayerInfo(ping.playerId);
          if (playerInfo) {
            const activeGroupId = this.playerBarn.getPlayerInfo(
              this.activePlayer.__id
            ).groupId;
            const groupId = playerInfo.groupId;
            if (activeGroupId == groupId) {
              const l = this.playerBarn.getGroupInfo(groupId);
              const c = l.playerIds.indexOf(ping.playerId);
              if (c !== -1) {
                indicator = this.pingIndicators[c].ping;
              }
            }
          }
          const playerStatus = this.playerBarn.getPlayerStatus(ping.playerId);
          if (playerStatus && (playerStatus.role == "leader" || playerStatus.role == "captain")) {
            pingSound = pingData.soundLeader;
          }
        }
        if (factionMode || ping.type != "ping_airstrike") {
          this.audioManager.playSound(pingSound, {
            channel: "ui"
          });
        } else {
          this.audioManager.playSound(pingSound, {
            channel: "ui",
            fallOff: 1,
            soundPos: ping.pos,
            rangeMult: 20
          });
        }
        if (indicator) {
          indicator.pos = ping.pos;
          indicator.pingSprite.sprite.texture = Texture.from(
            pingData.texture
          );
          indicator.indSpriteInner.sprite.texture = Texture.from(
            pingData.texture
          );
          indicator.indSpriteInner.sprite.tint = pingData.mapEvent ? pingData.tint : indicator.indSpriteInner.baseTint;
          indicator.indSpriteOuter.sprite.tint = pingData.mapEvent ? pingData.tint : indicator.indSpriteOuter.baseTint;
          indicator.fadeIn = this.pingFadeIn;
          indicator.life = this.pingLife;
          indicator.fadeOut = this.pingFadeOut;
          indicator.mapEvent = pingData.mapEvent;
          indicator.worldDisplay = pingData.worldDisplay;
        }
      }
    }
  }
  sendEmote(emote) {
    this.newEmotes.push({
      type: emote.type,
      pos: emote.pos
    });
    this.incrementEmote();
  }
  addEmote(emote) {
    const emoteData = EmotesDefs[emote.type];
    if (emoteData) {
      let e = null;
      for (let i2 = 0; i2 < this.emotes.length; i2++) {
        if (this.emotes[i2].alive || e) {
          if (this.emotes[i2].alive && this.emotes[i2].playerId == emote.playerId) {
            this.emotes[i2].alive = false;
          }
        } else {
          e = this.emotes[i2];
        }
      }
      if (!e) {
        e = {};
        e.alive = false;
        e.pos = v2.create(0, 0);
        e.container = new Container();
        e.circleOuter = Sprite.from("emote-circle-outer.img");
        e.circleOuter.anchor.set(0.5, 0.5);
        e.baseScale = 0.55;
        e.circleOuter.scale.set(e.baseScale * 0.8, e.baseScale * 0.8);
        e.circleOuter.tint = 0;
        e.circleOuter.visible = true;
        e.container.addChild(e.circleOuter);
        e.sprite = new Sprite();
        e.sprite.anchor.set(0.5, 0.5);
        e.container.addChild(e.sprite);
        e.sprite.scale.set(e.baseScale, e.baseScale);
        e.posOffset = v2.create(0, 4);
        e.container.scale.set(1, 1);
        e.container.visible = false;
        this.emotes.push(e);
      }
      e.alive = true;
      e.isNew = true;
      e.type = emote.type;
      e.playerId = emote.playerId;
      e.pos = v2.create(0, 0);
      e.lifeIn = this.emoteLifeIn;
      e.life = this.emoteLife;
      e.lifeOut = this.emoteLifeOut;
      e.zIdx = this.zIdxNext++;
      if (emoteData.texture) {
        e.sprite.texture = Texture.from(emoteData.texture);
      }
      e.container.visible = false;
      e.baseScale = 0.55;
      e.sound = emoteData.sound;
      e.channel = emoteData.channel;
      if (emote.type == "emote_loot") {
        const lootDef = GameObjectDefs[emote.itemType];
        if (lootDef?.lootImg) {
          e.sprite.texture = Texture.from(lootDef.lootImg.sprite);
          const ammo = GameObjectDefs[lootDef.ammo];
          e.circleOuter.tint = ammo ? ammo.lootImg.tintDark : 0;
          if (lootDef.lootImg.rot) {
            e.sprite.rotation = lootDef.lootImg.rot;
          } else {
            e.sprite.rotation = 0;
          }
          if (lootDef.lootImg.mirror) {
            e.sprite.scale.set(e.baseScale * -1, e.baseScale);
          } else {
            e.sprite.scale.set(e.baseScale, e.baseScale);
          }
          if (lootDef.sound?.deploy) {
            if (lootDef.type == "gun") {
              e.sound = lootDef.sound.deploy;
              e.channel = "activePlayer";
            } else {
              e.sound = "";
            }
          }
        }
      } else {
        e.circleOuter.tint = 0;
        e.sprite.rotation = 0;
        e.sprite.scale.set(e.baseScale, e.baseScale);
      }
    }
  }
  incrementEmote() {
    this.emoteCounter++;
    if (this.emoteCounter >= GameConfig.player.emoteThreshold) {
      this.emoteHardTicker = this.emoteHardTicker > 0 ? this.emoteHardTicker : GameConfig.player.emoteHardCooldown * 1.5;
    }
  }
  m_update(dt, localId, player, teamMode, deadBodyBarn, map, renderer, input, inputBinds, spectating) {
    const playerBarn = this.playerBarn;
    const camera = this.camera;
    let mousePos = v2.create(input.mousePos.x, input.mousePos.y);
    if (input.lostFocus) {
      this.inputReset();
    }
    if (inputBinds.isBindPressed(Input.TeamPingMenu)) {
      if (!this.pingKeyDown && !spectating) {
        this.pingKeyDown = true;
        this.pingKeyTriggered = true;
      }
    }
    if (inputBinds.isBindReleased(Input.TeamPingMenu) && this.pingKeyDown) {
      this.pingKeyDown = false;
      this.pingKeyTriggered = this.wheelDisplayed;
    }
    if (inputBinds.isBindPressed(Input.TeamPingSingle)) {
      if (!this.pingMouseTriggered && !this.emoteMouseTriggered) {
        this.emoteScreenPos = v2.copy(mousePos);
        this.pingMouseTriggered = true;
      }
    }
    if (inputBinds.isBindReleased(Input.TeamPingSingle) && this.pingMouseTriggered) {
      this.triggerPing();
    }
    if (inputBinds.isBindPressed(Input.EmoteMenu)) {
      if (!this.pingMouseTriggered && !this.emoteMouseTriggered && !!this.pingKeyDown) {
        this.emoteScreenPos = v2.copy(mousePos);
        this.pingMouseTriggered = true;
      }
      if (!this.pingMouseTriggered) {
        this.emoteScreenPos = v2.copy(mousePos);
        this.emoteMouseTriggered = true;
      }
    }
    if (inputBinds.isBindReleased(Input.EmoteMenu)) {
      if (this.pingKeyTriggered && this.pingMouseTriggered) {
        this.triggerPing();
      }
      if (this.emoteMouseTriggered) {
        this.triggerEmote();
      }
    }
    this.activePlayer = player;
    if ((localId != player.__id || !!player.m_netData.m_dead) && !this.disable) {
      this.m_free();
      this.disable = true;
    }
    const perkModeDisable = map.perkMode && !player.m_netData.m_role;
    if (!this.disable && !perkModeDisable) {
      this.wheelKeyTriggered = this.pingKeyTriggered || this.emoteMouseTriggered;
      this.emoteSoftTicker -= dt;
      if (this.emoteCounter >= GameConfig.player.emoteThreshold && this.emoteHardTicker > 0) {
        this.emoteHardTicker -= dt;
        if (this.emoteHardTicker < 0) {
          this.emoteCounter = 0;
        }
      } else if (this.emoteSoftTicker < 0 && this.emoteCounter > 0) {
        this.emoteCounter--;
        this.emoteSoftTicker = GameConfig.player.emoteSoftCooldown * 1.5;
      }
      if ((this.pingMouseTriggered || this.emoteMouseTriggered) && !this.wheelDisplayed) {
        this.parentDisplayed = this.pingMouseTriggered ? this.teamPingWheel : this.emoteWheel;
        this.parentDisplayed.css({
          display: "block",
          left: this.emoteScreenPos.x,
          top: this.emoteScreenPos.y
        });
        this.displayWheel(this.parentDisplayed, true);
        this.wheelDisplayed = true;
        this.displayedSelectors = this.pingMouseTriggered ? this.teamPingSelectors : this.emoteWheelSelectors;
        this.worldPos = camera.m_screenToPoint(this.emoteScreenPos);
      }
      if (this.wheelDisplayed) {
        this.emoteTimeoutTicker += dt;
        if (this.emoteTimeoutTicker > emoteTimeout) {
          this.inputReset();
        } else {
          if (this.emoteHardTicker > 0 && !this.emoteWheelsGreyed) {
            this.emoteWheels.css("opacity", 0.5);
            this.emoteWheelsGreyed = true;
          } else if (this.emoteHardTicker <= 0 && this.emoteWheelsGreyed) {
            this.emoteWheels.css("opacity", 1);
            this.emoteWheelsGreyed = false;
          }
          if (!this.teamEmotesGreyed && teamMode == 1) {
            this.teamEmotes.css("opacity", this.teamEmoteOpacityReset);
            this.teamEmotesGreyed = true;
          }
          let selector = null;
          if (device.touch) {
            mousePos = this.emoteTouchedPos;
          }
          if (mousePos) {
            const vB = v2.sub(mousePos, this.emoteScreenPos);
            vB.y *= -1;
            const distToCenter = v2.length(vB);
            const angleB = vectorToDegreeAngle(vB);
            const distMinLength = 35;
            const equippedWeapon = player.m_localData.m_weapons[player.m_localData.m_curWeapIdx];
            const weapDef = GameObjectDefs[equippedWeapon.type];
            let ammoType = "";
            if (weapDef && weapDef.ammo) {
              ammoType = weapDef.ammo;
            }
            for (let i2 = 0; i2 < this.displayedSelectors.length; i2++) {
              const s = this.displayedSelectors[i2];
              if (s.ammoEmote) {
                const AmmoTypeToEmote = {
                  "9mm": "emote_ammo9mm",
                  "12gauge": "emote_ammo12gauge",
                  "762mm": "emote_ammo762mm",
                  "556mm": "emote_ammo556mm",
                  "50AE": "emote_ammo50ae",
                  "308sub": "emote_ammo308sub",
                  flare: "emote_ammoflare",
                  "45acp": "emote_ammo45acp"
                };
                const oldEmote = s.emote;
                s.emote = AmmoTypeToEmote[ammoType] || "emote_ammo";
                s.texture = EmotesDefs[s.emote].texture;
                if (oldEmote != s.emote) {
                  const imageElem = s.parent.find(".ui-emote-image");
                  const imgUrl = getImgUrlFromSelector(s);
                  imageElem.css("background-image", `url(${imgUrl})`);
                }
              }
              const highlight = s.ping || s.emote;
              const emoteData = EmotesDefs[s.emote];
              const teamOnly = emoteData && emoteData.teamOnly;
              const disableInSolo = teamOnly && teamMode == 1;
              if (distToCenter <= distMinLength && !highlight && this.emoteHardTicker <= 0 && !disableInSolo) {
                selector = s;
                continue;
              }
              if (isAngleBetween(angleB, s.angleC, s.angleA) && distToCenter > distMinLength && highlight && this.emoteHardTicker <= 0 && !disableInSolo) {
                selector = s;
                continue;
              }
              if (s.highlightDisplayed) {
                s.parent.css("opacity", this.wedgeOpacityReset);
                s.highlight.css("display", "none");
                s.highlightDisplayed = false;
              }
            }
          }
          if (selector) {
            this.emoteSelector = selector;
            if (!selector.highlightDisplayed) {
              selector.parent.css("opacity", 1);
              selector.highlight.css("display", "block");
              selector.highlightDisplayed = true;
            }
            if (device.touch && this.emoteTouchedPos) {
              this.pingMouseTriggered ? this.triggerPing() : this.triggerEmote();
            }
          }
        }
      }
    }
    for (let i2 = 0; i2 < this.emotes.length; i2++) {
      const emote = this.emotes[i2];
      if (emote.alive) {
        let hasTarget = false;
        let targetPos = v2.create(0, 0);
        let targetLayer = 0;
        const targetPlayer = playerBarn.getPlayerById(emote.playerId);
        if (targetPlayer && !targetPlayer.m_netData.m_dead) {
          targetPos = v2.copy(targetPlayer.m_visualPos);
          targetLayer = targetPlayer.layer;
          hasTarget = true;
        }
        if (!hasTarget) {
          const body = deadBodyBarn.getDeadBodyById(emote.playerId);
          if (body) {
            targetPos = v2.copy(body.pos);
            targetLayer = body.layer;
            hasTarget = true;
          }
        }
        if (hasTarget) {
          if (emote.isNew) {
            this.audioManager.playSound(emote.sound, {
              channel: emote.channel,
              soundPos: targetPos,
              layer: targetLayer
            });
          }
          emote.isNew = false;
          emote.pos = targetPos;
          if (emote.lifeIn > 0) {
            emote.lifeIn -= dt;
          } else if (emote.life > 0) {
            emote.life -= dt;
          } else if (emote.lifeOut > 0) {
            emote.lifeOut -= dt;
          }
          const layer = util.sameLayer(targetLayer, this.activePlayer.layer) ? 3 : targetLayer;
          renderer.addPIXIObj(emote.container, layer, 5e4, emote.zIdx);
          emote.alive = emote.alive && emote.lifeOut > 0;
        } else {
          emote.alive = false;
        }
      }
    }
    const camExtents = v2.create(
      camera.m_screenWidth * 0.5 / camera.m_z(),
      camera.m_screenHeight * 0.5 / camera.m_z()
    );
    const camAabb = {
      min: v2.sub(camera.m_pos, camExtents),
      max: v2.add(camera.m_pos, camExtents)
    };
    const groupId = playerBarn.getPlayerInfo(player.__id).groupId;
    const groupInfo = playerBarn.getGroupInfo(groupId);
    for (let te = 0; te < this.pingIndicators.length; te++) {
      const indicator = this.pingIndicators[te].ping;
      const playerId = groupInfo.playerIds[te];
      const indContainer = indicator.indContainer;
      const pingContainer = indicator.pingContainer;
      if (playerId != void 0 || indicator.mapEvent) {
        playerBarn.getPlayerInfo(playerId);
        const isActivePlayer = playerId == this.activePlayer.__id;
        const playerStatus = playerBarn.getPlayerStatus(playerId);
        const borderSprite = indicator.borderSprite.sprite;
        const pingSprite = indicator.pingSprite.sprite;
        const indSpriteOuter = indicator.indSpriteOuter.sprite;
        const indSpriteInner = indicator.indSpriteInner.sprite;
        let hideIndicator = true;
        indicator.fadeIn -= dt;
        indicator.life -= dt;
        indicator.fadeOut -= indicator.life > 0 ? 0 : dt;
        if (indicator.fadeOut > 0) {
          const indicatorPos = indicator.pos;
          const dir = v2.normalizeSafe(
            v2.sub(indicatorPos, camera.m_pos),
            v2.create(1, 0)
          );
          const edge = coldet.intersectRayAabb(
            camera.m_pos,
            dir,
            camAabb.min,
            camAabb.max
          );
          const rot = Math.atan2(dir.y, -dir.x) + Math.PI * 0.5;
          const screenEdge = camera.m_pointToScreen(edge);
          const onscreen = coldet.testCircleAabb(
            indicatorPos,
            GameConfig.player.radius,
            camAabb.min,
            camAabb.max
          );
          const borderScale = camera.m_pixels(indicator.borderSprite.baseScale);
          const pingScale = camera.m_pixels(indicator.pingSprite.baseScale);
          borderSprite.scale.set(borderScale, borderScale);
          pingSprite.scale.set(pingScale, pingScale);
          if (playerStatus?.dead) {
            continue;
          }
          const off = 64;
          hideIndicator = indicator.fadeOut < 0;
          const leftConstrain = onscreen ? camera.m_pointToScreen(indicatorPos).x : math.clamp(screenEdge.x, off, camera.m_screenWidth - off);
          const topConstrain = onscreen ? camera.m_pointToScreen(indicatorPos).y : math.clamp(screenEdge.y, off, camera.m_screenHeight - off);
          const left = camera.m_pointToScreen(indicatorPos).x;
          const top = camera.m_pointToScreen(indicatorPos).y;
          pingSprite.position.x = left;
          pingSprite.position.y = top;
          borderSprite.position.x = left;
          borderSprite.position.y = top;
          indSpriteOuter.position.x = leftConstrain;
          indSpriteOuter.position.y = topConstrain;
          indSpriteOuter.rotation = rot;
          indSpriteInner.position.x = leftConstrain;
          indSpriteInner.position.y = topConstrain;
          const pulseAlpha = borderSprite.alpha <= 0 ? 1 : borderSprite.alpha - dt;
          borderSprite.alpha = pulseAlpha;
          const pulseScale = camera.m_pixels(
            indicator.borderSprite.baseScale * (2 - pulseAlpha)
          );
          borderSprite.scale.set(pulseScale, pulseScale);
          indSpriteInner.alpha = onscreen ? 0 : pulseAlpha;
          if (indicator.fadeIn > 0) {
            const elemOpacity = 1 - indicator.fadeIn / this.pingFadeIn;
            pingContainer.alpha = 1;
            indContainer.alpha = 1;
            pingSprite.alpha = 1;
            indSpriteOuter.alpha = onscreen ? 0 : elemOpacity;
          } else {
            indSpriteOuter.alpha = onscreen ? 0 : 1;
          }
          if (indicator.life < 0) {
            const elemOpacity = indicator.fadeOut / this.pingFadeOut;
            pingContainer.alpha = elemOpacity;
            indContainer.alpha = elemOpacity;
          }
          if (!indicator.displayed) {
            pingContainer.visible = indicator.worldDisplay;
            indContainer.visible = !isActivePlayer || indicator.mapEvent;
            indicator.displayed = true;
          }
        }
        if (hideIndicator && indicator.displayed) {
          pingContainer.visible = false;
          indContainer.visible = false;
          indicator.displayed = false;
        }
      } else {
        pingContainer.visible = false;
        indContainer.visible = false;
        indicator.displayed = false;
      }
    }
  }
  displayWheel(parent, display) {
    parent.css("display", display ? "block" : "none");
  }
  updateEmoteWheel(emoteLoadout) {
    this.emoteLoadout = emoteLoadout;
    const emotes = {
      top: emoteLoadout[EmoteSlot.Top],
      right: emoteLoadout[EmoteSlot.Right],
      bottom: emoteLoadout[EmoteSlot.Bottom],
      left: emoteLoadout[EmoteSlot.Left]
    };
    for (const key in emotes) {
      if (emotes.hasOwnProperty(key)) {
        const emoteType = emotes[key];
        const emoteData = EmotesDefs[emoteType];
        if (emoteData && this.emoteWheelData[key]) {
          this.emoteWheelData[key].emote = emoteType;
        }
      }
    }
    this.emoteWheelSelectors = [];
    for (const key in this.emoteWheelData) {
      if (this.emoteWheelData.hasOwnProperty(key)) {
        const ewData = this.emoteWheelData[key];
        const angleA = vectorToDegreeAngle(ewData.vA);
        const angleC = vectorToDegreeAngle(ewData.vC);
        this.emoteWheelSelectors.push(
          Object.assign(
            {
              angleA,
              angleC,
              highlight: ewData.parent.find(".ui-emote-hl"),
              highlightDisplayed: false
            },
            ewData
          )
        );
        const imageElem = ewData.parent.find(".ui-emote-image");
        const imgUrl = getImgUrlFromSelector(ewData);
        imageElem.css("background-image", `url(${imgUrl})`);
      }
    }
  }
  m_render(camera) {
    for (let i2 = 0; i2 < this.emotes.length; i2++) {
      const emote = this.emotes[i2];
      emote.container.visible = emote.alive;
      if (emote.alive) {
        let scale = 0;
        if (emote.lifeIn > 0) {
          const normLifeIn = 1 - emote.lifeIn / this.emoteLifeIn;
          scale = math.easeOutElastic(normLifeIn);
        } else if (emote.life > 0) {
          scale = 1;
        } else if (emote.lifeOut > 0) {
          const normLifeOut = emote.lifeOut / this.emoteLifeOut;
          scale = normLifeOut;
        }
        const pos = v2.add(
          emote.pos,
          v2.mul(emote.posOffset, 1 / math.clamp(camera.m_zoom, 0.75, 1))
        );
        const screenPos = camera.m_pointToScreen(pos);
        const screenScale = scale * emote.baseScale * math.clamp(camera.m_zoom, 0.9, 1.75);
        emote.container.position.set(screenPos.x, screenPos.y);
        emote.container.scale.set(screenScale, screenScale);
      }
    }
  }
}
const gasMode = GameConfig.GasMode;
const overdraw = 100 * 1e3;
const segments = 512;
class GasRenderer {
  constructor(canvasMode, gasColor) {
    this.canvasMode = canvasMode;
    this.gasColor = gasColor;
    if (canvasMode) {
      this.canvas = document.createElement("canvas");
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
      this.display = new Sprite(Texture.from(this.canvas));
      this.gasColorDOMString = helpers.colorToDOMString(gasColor, 0.6);
    } else {
      this.display = new Graphics();
      const ctx = this.display;
      ctx.clear();
      ctx.beginFill(gasColor, 0.6);
      ctx.moveTo(-overdraw, -overdraw);
      ctx.lineTo(overdraw, -overdraw);
      ctx.lineTo(overdraw, overdraw);
      ctx.lineTo(-overdraw, overdraw);
      ctx.closePath();
      ctx.beginHole();
      ctx.moveTo(0, 1);
      for (let i2 = 1; i2 < segments; i2++) {
        const theta = i2 / segments;
        const s = Math.sin(Math.PI * 2 * theta);
        const c = Math.cos(Math.PI * 2 * theta);
        ctx.lineTo(s, c);
      }
      ctx.endHole();
      ctx.closePath();
    }
    this.display.visible = false;
  }
  gasColorDOMString = "";
  display = null;
  canvas = null;
  free() {
    this.display.destroy(true);
  }
  resize() {
    if (this.canvas != null) {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
      this.display.texture.update();
    }
  }
  render(gasPos, gasRad, active) {
    if (this.canvas != null) {
      const canvas = this.canvas;
      const ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.beginPath();
      ctx.fillStyle = this.gasColorDOMString;
      ctx.rect(0, 0, canvas.width, canvas.height);
      ctx.arc(gasPos.x, gasPos.y, gasRad, 0, Math.PI * 2, true);
      ctx.fill();
    } else {
      const center = v2.copy(gasPos);
      let rad = gasRad;
      if (rad < 0.1) {
        rad = 1;
        center.x += overdraw * 0.5;
      }
      const ctx = this.display;
      ctx.position.set(center.x, center.y);
      ctx.scale.set(rad, rad);
    }
    this.display.visible = active;
  }
}
class GasSafeZoneRenderer {
  display = new Container();
  circleGfx = new Graphics();
  lineGfx = new Graphics();
  safePos = v2.create(0, 0);
  safeRad = 0;
  playerPos = v2.create(0, 0);
  constructor() {
    this.display.addChild(this.circleGfx);
    this.display.addChild(this.lineGfx);
    this.circleGfx.visible = false;
    this.lineGfx.visible = false;
  }
  render(safePos, safeRad, playerPos, drawCircle, drawLine2) {
    this.circleGfx.visible = drawCircle;
    this.lineGfx.visible = drawLine2;
    if (drawCircle || drawLine2) {
      const safePosChanged = !v2.eq(this.safePos, safePos, 1e-4);
      const safeRadChanged = Math.abs(this.safeRad - safeRad) > 1e-4;
      const playerPosChanged = !v2.eq(this.playerPos, playerPos, 1e-4);
      if (safePosChanged) {
        this.safePos.x = safePos.x;
        this.safePos.y = safePos.y;
      }
      if (safeRadChanged) {
        this.safeRad = safeRad;
      }
      if (playerPosChanged) {
        this.playerPos.x = playerPos.x;
        this.playerPos.y = playerPos.y;
      }
      if (safePosChanged) {
        this.circleGfx.position.set(this.safePos.x, this.safePos.y);
      }
      if (safeRadChanged) {
        this.circleGfx.clear();
        this.circleGfx.lineStyle(1.5, 16777215);
        this.circleGfx.drawCircle(0, 0, safeRad);
      }
      if (safePosChanged || safeRadChanged || playerPosChanged) {
        const isSafe = v2.length(v2.sub(playerPos, safePos)) < safeRad;
        const alpha = isSafe ? 0.5 : 1;
        this.lineGfx.clear();
        this.lineGfx.lineStyle(2, 65280, alpha);
        this.lineGfx.moveTo(playerPos.x, playerPos.y);
        this.lineGfx.lineTo(safePos.x, safePos.y);
      }
    }
  }
}
class Gas {
  mode = gasMode.Inactive;
  circleT = 0;
  circleTOld = 0;
  duration = 0;
  interpolationT = 0;
  gasRenderer;
  circleOld;
  circleNew;
  constructor(canvasMode) {
    const startRad = (Math.sqrt(2) + 0.01) * 1024;
    this.circleOld = {
      pos: v2.create(0, 0),
      rad: startRad
    };
    this.circleNew = {
      pos: v2.create(0, 0),
      rad: startRad
    };
    this.gasRenderer = new GasRenderer(canvasMode, 16711680);
  }
  m_free() {
    this.gasRenderer.free();
  }
  resize() {
    this.gasRenderer.resize();
  }
  isActive() {
    return this.mode != gasMode.Inactive;
  }
  getCircle(interpT) {
    const t = this.mode == gasMode.Moving ? math.lerp(interpT, this.circleTOld, this.circleT) : 0;
    return {
      pos: v2.lerp(t, this.circleOld.pos, this.circleNew.pos),
      rad: math.lerp(t, this.circleOld.rad, this.circleNew.rad)
    };
  }
  setProgress(circleT) {
    this.circleTOld = this.circleT;
    this.circleT = circleT;
    this.interpolationT = 0;
  }
  setFullState(circleT, data, _map, ui) {
    if (data.mode != this.mode) {
      const timeLeft = Math.ceil(data.duration * (1 - circleT));
      ui.setWaitingForPlayers(false);
      ui.displayGasAnnouncement(data.mode, timeLeft);
    }
    this.mode = data.mode;
    this.duration = data.duration;
    this.setProgress(circleT);
    this.circleOld.pos = v2.copy(data.posOld);
    this.circleOld.rad = data.radOld;
    this.circleNew.pos = v2.copy(data.posNew);
    this.circleNew.rad = data.radNew;
  }
  m_render(dt, camera) {
    this.interpolationT += dt;
    let interpT = 1;
    if (camera.m_interpEnabled) {
      interpT = math.clamp(this.interpolationT / camera.m_interpInterval, 0, 1);
    }
    const circle = this.getCircle(interpT);
    const pos = camera.m_pointToScreen(circle.pos);
    const scale = camera.m_scaleToScreen(circle.rad);
    this.gasRenderer.render(pos, scale, this.isActive());
  }
}
const cachedColliders = {};
function computeBoundingCollider(type) {
  const def2 = MapObjectDefs[type];
  if (def2.type === "structure") {
    const aabbs = [];
    for (let i2 = 0; i2 < def2.layers.length; i2++) {
      const obj = def2.layers[i2];
      const rot = math.oriToRad(obj.ori);
      const col = collider.transform(
        mapHelpers.getBoundingCollider(obj.type),
        obj.pos,
        rot,
        1
      );
      aabbs.push(collider.toAabb(col));
    }
    for (let i2 = 0; i2 < def2.stairs.length; i2++) {
      aabbs.push(def2.stairs[i2].collision);
    }
    const aabb = coldet.boundingAabb(aabbs);
    const margin = v2.create(1, 1);
    aabb.min = v2.sub(aabb.min, margin);
    aabb.max = v2.add(aabb.max, margin);
    return collider.createAabb(aabb.min, aabb.max);
  }
  if (def2.type === "building") {
    const aabbs = [];
    for (let i2 = 0; i2 < def2.floor.surfaces.length; i2++) {
      const collisions = def2.floor.surfaces[i2].collision;
      for (let j = 0; j < collisions.length; j++) {
        aabbs.push(collisions[j]);
      }
    }
    for (let i2 = 0; i2 < def2.ceiling.zoomRegions.length; i2++) {
      const region = def2.ceiling.zoomRegions[i2];
      if (region.zoomIn) {
        aabbs.push(region.zoomIn);
      }
      if (region.zoomOut) {
        aabbs.push(region.zoomOut);
      }
    }
    for (let i2 = 0; i2 < def2.mapObjects.length; i2++) {
      const mapObj = def2.mapObjects[i2];
      let mt = mapObj.type;
      if (typeof mt === "function") {
        mt = mt();
      }
      if (mt !== "") {
        const rot = math.oriToRad(mapObj.ori);
        const col = collider.transform(
          mapHelpers.getBoundingCollider(mt),
          mapObj.pos,
          rot,
          mapObj.scale
        );
        aabbs.push(collider.toAabb(col));
      }
    }
    const aabb = coldet.boundingAabb(aabbs);
    return collider.createAabb(aabb.min, aabb.max);
  }
  if (def2.type === "decal") {
    return collider.toAabb(def2.collision);
  }
  if (def2.type === "loot_spawner") {
    return collider.createCircle(v2.create(0, 0), 3);
  }
  assert(def2.collision !== void 0);
  return def2.collision;
}
const mapHelpers = {
  getBoundingCollider(type) {
    if (cachedColliders[type]) {
      return cachedColliders[type];
    }
    const col = computeBoundingCollider(type);
    cachedColliders[type] = col;
    return col;
  },
  getBridgeDims(type) {
    const col = mapHelpers.getBoundingCollider(type);
    const aabb = collider.toAabb(col);
    const e = v2.mul(v2.sub(aabb.max, aabb.min), 0.5);
    const x = e.x > e.y;
    const dir = v2.create(x ? 1 : 0, x ? 0 : 1);
    const length = v2.dot(dir, e) * 2;
    const width = v2.dot(v2.perp(dir), e) * 2;
    return { length, width };
  },
  getBridgeOverlapCollider(type, pos, rot, scale) {
    const def2 = MapObjectDefs[type];
    const dims = mapHelpers.getBridgeDims(type);
    const dir = v2.create(1, 0);
    const ext = v2.add(
      v2.mul(dir, dims.length * 1.5),
      v2.mul(v2.perp(dir), dims.width * def2.terrain.bridge.nearbyWidthMult)
    );
    const col = collider.createAabbExtents(v2.create(0, 0), v2.mul(ext, 0.5));
    return collider.transform(col, pos, rot, scale);
  }
};
function getControlPoints(t, points, looped) {
  const count = points.length;
  let i2;
  let i0;
  let i1;
  let i22;
  let i3;
  if (looped) {
    t = math.fmod(t, 1);
    i2 = ~~(t * (count - 1));
    i1 = i2;
    i22 = (i1 + 1) % (count - 1);
    i0 = i1 > 0 ? i1 - 1 : count - 2;
    i3 = (i22 + 1) % (count - 1);
  } else {
    t = math.clamp(t, 0, 1);
    i2 = ~~(t * (count - 1));
    i1 = i2 === count - 1 ? i2 - 1 : i2;
    i22 = i1 + 1;
    i0 = i1 > 0 ? i1 - 1 : i1;
    i3 = i22 < count - 1 ? i22 + 1 : i22;
  }
  return {
    pt: t * (count - 1) - i1,
    p0: points[i0],
    p1: points[i1],
    p2: points[i22],
    p3: points[i3]
  };
}
function catmullRom(t, p0, p1, p2, p3) {
  return 0.5 * (2 * p1 + t * (-p0 + p2) + t * t * (2 * p0 - 5 * p1 + 4 * p2 - p3) + t * t * t * (-p0 + 3 * p1 - 3 * p2 + p3));
}
function catmullRomDerivative(t, p0, p1, p2, p3) {
  return 0.5 * (-p0 + p2 + 2 * t * (2 * p0 - 5 * p1 + 4 * p2 - p3) + 3 * t * t * (-p0 + 3 * p1 - 3 * p2 + p3));
}
class Spline {
  points = [];
  arcLens = [];
  totalArcLen;
  looped;
  constructor(points, looped) {
    assert(points.length > 1);
    this.totalArcLen = 0;
    this.looped = looped;
    for (let i2 = 0; i2 < points.length; i2++) {
      this.points.push(v2.copy(points[i2]));
    }
    const arcLenSamples = points.length * 4;
    let cur = this.points[0];
    for (let i2 = 0; i2 <= arcLenSamples; i2++) {
      const t = i2 / arcLenSamples;
      const next = this.getPos(t);
      const arcLenPrev = i2 === 0 ? 0 : this.arcLens[i2 - 1];
      this.arcLens[i2] = arcLenPrev + v2.length(v2.sub(next, cur));
      cur = v2.copy(next);
    }
    this.totalArcLen = this.arcLens[this.arcLens.length - 1];
  }
  getPos(t) {
    const _getControlPoints = getControlPoints(t, this.points, this.looped);
    const { pt } = _getControlPoints;
    const { p0 } = _getControlPoints;
    const { p1 } = _getControlPoints;
    const { p2 } = _getControlPoints;
    const { p3 } = _getControlPoints;
    return v2.create(
      catmullRom(pt, p0.x, p1.x, p2.x, p3.x),
      catmullRom(pt, p0.y, p1.y, p2.y, p3.y)
    );
  }
  getTangent(t) {
    const _getControlPoints2 = getControlPoints(t, this.points, this.looped);
    const { pt } = _getControlPoints2;
    const { p0 } = _getControlPoints2;
    const { p1 } = _getControlPoints2;
    const { p2 } = _getControlPoints2;
    const { p3 } = _getControlPoints2;
    return v2.create(
      catmullRomDerivative(pt, p0.x, p1.x, p2.x, p3.x),
      catmullRomDerivative(pt, p0.y, p1.y, p2.y, p3.y)
    );
  }
  getNormal(t) {
    const tangent = this.getTangent(t);
    return v2.perp(v2.normalizeSafe(tangent, v2.create(1, 0)));
  }
  getClosestTtoPoint(pos) {
    let closestDistSq = Number.MAX_VALUE;
    let closestSegIdx = 0;
    for (let i2 = 0; i2 < this.points.length - 1; i2++) {
      const distSq = math.distToSegmentSq(pos, this.points[i2], this.points[i2 + 1]);
      if (distSq < closestDistSq) {
        closestDistSq = distSq;
        closestSegIdx = i2;
      }
    }
    const idx0 = closestSegIdx;
    const idx1 = idx0 + 1;
    const s0 = this.points[idx0];
    const s1 = this.points[idx1];
    const seg = v2.sub(s1, s0);
    const t = math.clamp(v2.dot(v2.sub(pos, s0), seg) / v2.dot(seg, seg), 0, 1);
    const len = this.points.length - 1;
    const tMin = math.clamp((idx0 + t - 0.1) / len, 0, 1);
    const tMax = math.clamp((idx0 + t + 0.1) / len, 0, 1);
    let nearestT = (idx0 + t) / len;
    let nearestDistSq = Number.MAX_VALUE;
    const kIter = 8;
    for (let i2 = 0; i2 <= kIter; i2++) {
      const testT = math.lerp(i2 / kIter, tMin, tMax);
      const testPos = this.getPos(testT);
      const testDistSq = v2.lengthSqr(v2.sub(testPos, pos));
      if (testDistSq < nearestDistSq) {
        nearestT = testT;
        nearestDistSq = testDistSq;
      }
    }
    const tangent = this.getTangent(nearestT);
    const tanLen = v2.length(tangent);
    if (tanLen > 0) {
      const nearest = this.getPos(nearestT);
      const offset = v2.dot(tangent, v2.sub(pos, nearest)) / tanLen;
      const offsetT = nearestT + offset / (tanLen * len);
      if (v2.lengthSqr(v2.sub(pos, this.getPos(offsetT))) < v2.lengthSqr(v2.sub(pos, nearest))) {
        nearestT = offsetT;
      }
    }
    return nearestT;
  }
  getTfromArcLen(arcLen) {
    arcLen = math.clamp(arcLen, 0, this.totalArcLen);
    let idx = 0;
    while (arcLen > this.arcLens[idx]) {
      idx++;
    }
    if (idx === 0) {
      return 0;
    }
    const arcT = math.delerp(arcLen, this.arcLens[idx - 1], this.arcLens[idx]);
    const arcCount = this.arcLens.length - 1;
    const t0 = (idx - 1) / arcCount;
    const t1 = idx / arcCount;
    return math.lerp(arcT, t0, t1);
  }
  getArcLen(t) {
    t = math.clamp(t, 0, 1);
    const arcCount = this.arcLens.length - 1;
    const idx0 = Math.floor(t * arcCount);
    const idx1 = idx0 < arcCount - 1 ? idx0 + 1 : idx0;
    const arcT = math.fmod(t, 1 / arcCount) / (1 / arcCount);
    return math.lerp(arcT, this.arcLens[idx0], this.arcLens[idx1]);
  }
}
class River {
  spline;
  waterWidth;
  shoreWidth;
  looped;
  center;
  waterPoly;
  shorePoly;
  waterWidths;
  shoreWidths;
  aabb;
  constructor(splinePts, riverWidth, looped, otherRivers, mapBounds) {
    this.spline = new Spline(splinePts, looped);
    this.waterWidth = riverWidth;
    this.shoreWidth = math.clamp(riverWidth * 0.75, 4, 8);
    this.looped = looped;
    this.center = v2.create(0, 0);
    for (let i2 = 0; i2 < this.spline.points.length; i2++) {
      this.center = v2.add(this.center, this.spline.points[i2]);
    }
    this.center = v2.div(this.center, this.spline.points.length);
    let avgDistToCenter = 0;
    for (let _i = 0; _i < this.spline.points.length; _i++) {
      const dist = v2.length(v2.sub(this.spline.points[_i], this.center));
      avgDistToCenter += dist;
    }
    avgDistToCenter /= this.spline.points.length;
    const mapExtent = v2.mul(v2.sub(mapBounds.max, mapBounds.min), 0.5);
    const mapCenter = v2.add(mapBounds.min, mapExtent);
    this.waterPoly = [];
    this.shorePoly = [];
    this.waterWidths = [];
    this.shoreWidths = [];
    for (let i2 = 0; i2 < splinePts.length; i2++) {
      const vert = splinePts[i2];
      let norm = this.spline.getNormal(i2 / (splinePts.length - 1));
      let nearMapEdge = false;
      if (!this.looped && (i2 === 0 || i2 === splinePts.length - 1)) {
        const e = v2.sub(vert, mapCenter);
        let edgePos = v2.create(0, 0);
        let edgeNorm = v2.create(1, 0);
        if (Math.abs(e.x) > Math.abs(e.y)) {
          edgePos = v2.create(
            e.x > 0 ? mapBounds.max.x : mapBounds.min.x,
            vert.y
          );
          edgeNorm = v2.create(e.x > 0 ? 1 : -1, 0);
        } else {
          edgePos = v2.create(
            vert.x,
            e.y > 0 ? mapBounds.max.y : mapBounds.min.y
          );
          edgeNorm = v2.create(0, e.y > 0 ? 1 : -1);
        }
        if (v2.lengthSqr(v2.sub(edgePos, vert)) < 1) {
          let perpNorm = v2.perp(edgeNorm);
          if (v2.dot(norm, perpNorm) < 0) {
            perpNorm = v2.neg(perpNorm);
          }
          norm = perpNorm;
          nearMapEdge = true;
        }
      }
      let { waterWidth } = this;
      if (!this.looped) {
        const len = splinePts.length;
        const end = 2 * (Math.max(1 - i2 / len, i2 / len) - 0.5);
        waterWidth = (1 + end ** 3 * 1.5) * this.waterWidth;
      }
      this.waterWidths.push(waterWidth);
      let { shoreWidth } = this;
      let boundingRiver = null;
      for (let j = 0; j < otherRivers.length; j++) {
        const river = otherRivers[j];
        const t = river.spline.getClosestTtoPoint(vert);
        const p = river.spline.getPos(t);
        const _len = v2.length(v2.sub(p, vert));
        if (_len < river.waterWidth * 2) {
          shoreWidth = math.max(shoreWidth, river.shoreWidth);
        }
        if ((i2 === 0 || i2 === splinePts.length - 1) && _len < 1.5 && !nearMapEdge) {
          boundingRiver = river;
        }
      }
      if (i2 > 0) {
        shoreWidth = (this.shoreWidths[i2 - 1] + shoreWidth) / 2;
      }
      this.shoreWidths.push(shoreWidth);
      shoreWidth += waterWidth;
      const clipRayToPoly = function clipRayToPoly2(pt, dir, poly) {
        const end = v2.add(pt, dir);
        if (!math.pointInsidePolygon(end, poly)) {
          const _t = math.rayPolygonIntersect(pt, dir, poly);
          if (_t) {
            return v2.mul(dir, _t);
          }
        }
        return dir;
      };
      let waterPtA;
      let waterPtB;
      let shorePtA;
      let shorePtB;
      if (this.looped) {
        let toVert = v2.sub(vert, this.center);
        const _dist = v2.length(toVert);
        toVert = _dist > 1e-4 ? v2.div(toVert, _dist) : v2.create(1, 0);
        const interiorWaterWidth = math.lerp(
          math.min(waterWidth / avgDistToCenter, 1) ** 0.5,
          waterWidth,
          (1 - (avgDistToCenter - waterWidth) / _dist) * _dist
        );
        const interiorShoreWidth = math.lerp(
          math.min(shoreWidth / avgDistToCenter, 1) ** 0.5,
          shoreWidth,
          (1 - (avgDistToCenter - shoreWidth) / _dist) * _dist
        );
        waterPtA = v2.add(vert, v2.mul(toVert, waterWidth));
        waterPtB = v2.add(vert, v2.mul(toVert, -interiorWaterWidth));
        shorePtA = v2.add(vert, v2.mul(toVert, shoreWidth));
        shorePtB = v2.add(vert, v2.mul(toVert, -interiorShoreWidth));
      } else {
        let waterRayA = v2.mul(norm, waterWidth);
        let waterRayB = v2.mul(norm, -waterWidth);
        let shoreRayA = v2.mul(norm, shoreWidth);
        let shoreRayB = v2.mul(norm, -shoreWidth);
        if (boundingRiver) {
          waterRayA = clipRayToPoly(vert, waterRayA, boundingRiver.waterPoly);
          waterRayB = clipRayToPoly(vert, waterRayB, boundingRiver.waterPoly);
          shoreRayA = clipRayToPoly(vert, shoreRayA, boundingRiver.shorePoly);
          shoreRayB = clipRayToPoly(vert, shoreRayB, boundingRiver.shorePoly);
        }
        waterPtA = v2.add(vert, waterRayA);
        waterPtB = v2.add(vert, waterRayB);
        shorePtA = v2.add(vert, shoreRayA);
        shorePtB = v2.add(vert, shoreRayB);
      }
      waterPtA = coldet.clampPosToAabb(waterPtA, mapBounds);
      waterPtB = coldet.clampPosToAabb(waterPtB, mapBounds);
      shorePtA = coldet.clampPosToAabb(shorePtA, mapBounds);
      shorePtB = coldet.clampPosToAabb(shorePtB, mapBounds);
      this.waterPoly.splice(i2, 0, waterPtA);
      this.waterPoly.splice(this.waterPoly.length - i2, 0, waterPtB);
      this.shorePoly.splice(i2, 0, shorePtA);
      this.shorePoly.splice(this.shorePoly.length - i2, 0, shorePtB);
    }
    let aabbMin = v2.create(Number.MAX_VALUE, Number.MAX_VALUE);
    let aabbMax = v2.create(-Number.MAX_VALUE, -Number.MAX_VALUE);
    for (let i2 = 0; i2 < this.shorePoly.length; i2++) {
      aabbMin = v2.minElems(aabbMin, this.shorePoly[i2]);
      aabbMax = v2.maxElems(aabbMax, this.shorePoly[i2]);
    }
    this.aabb = collider.createAabb(aabbMin, aabbMax, 0);
  }
  distanceToShore(pos) {
    const t = this.spline.getClosestTtoPoint(pos);
    const dist = v2.length(v2.sub(pos, this.spline.getPos(t)));
    return math.max(this.waterWidth - dist, 0);
  }
  getWaterWidth(t) {
    const count = this.spline.points.length;
    const idx = math.clamp(Math.floor(t * count), 0, count);
    return this.waterWidths[idx];
  }
}
function generateJaggedAabbPoints(aabb, divisionsX, divisionsY, variation, rand) {
  const ll = v2.create(aabb.min.x, aabb.min.y);
  const lr = v2.create(aabb.max.x, aabb.min.y);
  const ul = v2.create(aabb.min.x, aabb.max.y);
  const ur = v2.create(aabb.max.x, aabb.max.y);
  const distanceX = lr.x - ll.x;
  const distanceY = ul.y - ll.y;
  const spanX = distanceX / (divisionsX + 1);
  const spanY = distanceY / (divisionsY + 1);
  const points = [];
  points.push(v2.copy(ll));
  for (let i2 = 1; i2 <= divisionsX; ++i2) {
    points.push(v2.create(ll.x + spanX * i2, ll.y + rand(-variation, variation)));
  }
  points.push(v2.copy(lr));
  for (let i2 = 1; i2 <= divisionsY; ++i2) {
    points.push(v2.create(lr.x + rand(-variation, variation), lr.y + spanY * i2));
  }
  points.push(v2.copy(ur));
  for (let i2 = 1; i2 <= divisionsX; ++i2) {
    points.push(v2.create(ur.x - spanX * i2, ur.y + rand(-variation, variation)));
  }
  points.push(v2.copy(ul));
  for (let i2 = 1; i2 <= divisionsY; ++i2) {
    points.push(v2.create(ul.x + rand(-variation, variation), ul.y - spanY * i2));
  }
  return points;
}
function generateTerrain(width, height, shoreInset, grassInset, riverDescs, seed) {
  const shoreDivisions = 64;
  const { shoreVariation } = GameConfig.map;
  const { grassVariation } = GameConfig.map;
  const seededRand = util.seededRand(seed);
  const ll = v2.create(shoreInset, shoreInset);
  const ur = v2.create(width - shoreInset, height - shoreInset);
  const aabbMin = v2.create(ll.x, ll.y);
  const aabbMax = v2.create(ur.x, ur.y);
  const aabb = collider.createAabb(aabbMin, aabbMax);
  const shore = generateJaggedAabbPoints(
    aabb,
    shoreDivisions,
    shoreDivisions,
    shoreVariation,
    seededRand
  );
  const center = v2.create(width * 0.5, height * 0.5);
  const grass = shore.map((pos) => {
    const toCenter = v2.normalize(v2.sub(center, pos));
    const variation = seededRand(-grassVariation, grassVariation);
    const inset = grassInset + variation;
    return v2.add(pos, v2.mul(toCenter, inset));
  });
  const mapBounds = collider.createAabb(v2.create(0, 0), v2.create(width, height));
  const rivers = [];
  for (let i2 = 0; i2 < riverDescs.length; i2++) {
    const desc = riverDescs[i2];
    const river = new River(desc.points, desc.width, desc.looped, rivers, mapBounds);
    rivers.push(river);
  }
  return { shore, grass, rivers };
}
function intersectSegmentObstacle(obstacle, s0, s1, height, layer, hackStairs) {
  const o = obstacle;
  if (o.dead || !o.collidable || o.isWindow || o.height < height || !util.sameLayer(o.layer, layer)) {
    return null;
  }
  if (hackStairs && layer & 2 && o.layer == 0) {
    return null;
  }
  return collider.intersectSegment(o.collider, s0, s1);
}
function getIntersectSegmentEnd(obstacles, pos, dir, len, layer) {
  const dist = collisionHelpers.intersectSegmentDist(
    obstacles,
    pos,
    dir,
    len,
    0,
    layer,
    false
  );
  return v2.add(pos, v2.mul(dir, dist));
}
const collisionHelpers = {
  intersectSegment(obstacles, pos, dir, len, height, layer, hackStairs) {
    const end = v2.add(pos, v2.mul(dir, len));
    const cols = [];
    for (let i2 = 0; i2 < obstacles.length; i2++) {
      const o = obstacles[i2];
      const res = intersectSegmentObstacle(o, pos, end, height, layer, hackStairs);
      if (res) {
        const dist = v2.length(v2.sub(res.point, pos));
        cols.push({
          id: o.__id,
          dist
        });
      }
    }
    cols.sort((a, b) => a.dist - b.dist);
    return cols.length > 0 ? cols[0] : null;
  },
  intersectSegmentDist(obstacles, pos, dir, len, height, layer, hackStairs) {
    let dist = len;
    const end = v2.add(pos, v2.mul(dir, len));
    for (let i2 = 0; i2 < obstacles.length; i2++) {
      const o = obstacles[i2];
      const res = intersectSegmentObstacle(o, pos, end, height, layer, hackStairs);
      if (res) {
        dist = math.min(dist, v2.length(v2.sub(res.point, pos)));
      }
    }
    return dist;
  },
  scanCollider(col, obstacles, pos, layer, height, scanWidth, scanDist, rayCount, debug, debugLines2) {
    const toCol = collider.intersectCircle(col, pos, scanDist);
    if (!toCol) {
      return null;
    }
    if (toCol.pen >= scanDist) {
      return { dist: 0 };
    }
    const perp = v2.perp(toCol.dir);
    const scanStart = getIntersectSegmentEnd(
      obstacles,
      pos,
      v2.neg(perp),
      0.5 * scanWidth,
      layer
    );
    const scanEnd = getIntersectSegmentEnd(
      obstacles,
      pos,
      perp,
      0.5 * scanWidth,
      layer
    );
    let scanDir = v2.sub(scanEnd, scanStart);
    const scanLen = v2.length(scanDir);
    scanDir = scanLen > 1e-4 ? v2.div(scanDir, scanLen) : v2.create(1, 0);
    const rayPositions = [];
    for (let i2 = 0; i2 < rayCount; i2++) {
      const t = i2 / math.max(rayCount - 1, 1);
      rayPositions.push(v2.add(scanStart, v2.mul(scanDir, scanLen * t)));
    }
    const rayHeight = height;
    for (let i2 = 0; i2 < rayPositions.length; i2++) {
      const rayPos = rayPositions[i2];
      const circleRes = collider.intersectCircle(col, rayPos, scanDist);
      if (!circleRes) {
        continue;
      }
      const rayDir = v2.neg(circleRes.dir);
      const maxDist = collisionHelpers.intersectSegmentDist(
        obstacles,
        rayPos,
        rayDir,
        scanDist,
        rayHeight,
        layer,
        true
      );
      const res = collider.intersectSegment(
        col,
        rayPos,
        v2.add(rayPos, v2.mul(rayDir, scanDist))
      );
      const dist = res ? v2.length(v2.sub(res.point, rayPos)) : 0;
      const rayHit = res && dist <= maxDist;
      if (debug) {
        const color = rayHit ? 65280 : 16711680;
        debugLines2?.addRay(rayPos, rayDir, scanDist, color);
      }
      if (rayHit) {
        return { dist };
      }
    }
    return null;
  }
};
function step$1(cur, target, rate) {
  const delta = target - cur;
  const step2 = delta * rate;
  return Math.abs(step2) < 1e-3 ? delta : step2;
}
class Building {
  __id;
  __type;
  active;
  sprites = [];
  particleEmitters = [];
  soundEmitters = [];
  isNew;
  residue;
  ceilingDead;
  ceilingDamaged;
  playedCeilingDeadFx;
  playedSolvedPuzzleFx;
  hasPuzzle;
  puzzleErrSeqModified;
  puzzleErrSeq;
  puzzleSolved;
  soundEmitterTicker;
  type;
  pos;
  ori;
  rot;
  scale;
  layer;
  occupied;
  imgs = [];
  zIdx;
  bounds;
  ceiling;
  surfaces;
  m_init() {
    this.isNew = false;
    this.residue = null;
    this.ceilingDead = false;
    this.ceilingDamaged = false;
    this.playedCeilingDeadFx = false;
    this.playedSolvedPuzzleFx = false;
    this.hasPuzzle = false;
    this.puzzleErrSeqModified = false;
    this.puzzleErrSeq = 0;
    this.puzzleSolved = false;
    this.soundEmitterTicker = 0;
  }
  m_free() {
    for (let i2 = 0; i2 < this.sprites.length; i2++) {
      const t = this.sprites[i2];
      t.active = false;
      t.sprite.visible = false;
      t.sprite.parent?.removeChild(t.sprite);
      t.sprite.removeChildren();
    }
    for (let i2 = 0; i2 < this.particleEmitters.length; i2++) {
      this.particleEmitters[i2].stop();
    }
    this.particleEmitters = [];
    for (let i2 = 0; i2 < this.soundEmitters.length; i2++) {
      this.soundEmitters[i2].instance?.stop();
    }
    this.soundEmitters = [];
  }
  allocSprite() {
    for (let i2 = 0; i2 < this.sprites.length; i2++) {
      const s = this.sprites[i2];
      if (!s.active) {
        s.active = true;
        return s.sprite;
      }
    }
    const sprite = new Sprite();
    sprite.anchor.set(0.5, 0.5);
    this.sprites.push({
      active: true,
      sprite
    });
    return sprite;
  }
  m_updateData(data, fullUpdate, isNew, ctx) {
    if (fullUpdate) {
      this.type = data.type;
      this.pos = v2.copy(data.pos);
      this.ori = data.ori;
      this.rot = math.oriToRad(data.ori);
      this.scale = 1;
      this.layer = data.layer;
    }
    this.ceilingDead = data.ceilingDead;
    this.ceilingDamaged = data.ceilingDamaged;
    this.occupied = data.occupied;
    this.hasPuzzle = data.hasPuzzle;
    if (this.hasPuzzle) {
      this.puzzleErrSeqModified = data.puzzleErrSeq != this.puzzleErrSeq;
      this.puzzleSolved = data.puzzleSolved;
      this.puzzleErrSeq = data.puzzleErrSeq;
    }
    const def2 = MapObjectDefs[this.type];
    if (isNew) {
      this.isNew = true;
      this.playedCeilingDeadFx = def2.ceiling.destroy !== void 0 && ctx.map.deadCeilingIds.includes(this.__id);
      this.playedSolvedPuzzleFx = this.hasPuzzle && ctx.map.solvedPuzzleIds.includes(this.__id);
      const createSpriteFromDef = (imgDef) => {
        const posOffset = imgDef.pos || v2.create(0, 0);
        const rotOffset = math.oriToRad(imgDef.rot || 0);
        const sprite = this.allocSprite();
        if (imgDef.sprite && imgDef.sprite != "none") {
          sprite.texture = Texture.from(imgDef.sprite);
        } else {
          sprite.texture = Texture.EMPTY;
        }
        sprite.tint = imgDef.tint;
        const valueAdjust = ctx.map.getMapDef().biome.valueAdjust;
        if (valueAdjust < 1) {
          sprite.tint = util.adjustValue(sprite.tint, valueAdjust);
        }
        sprite.posOffset = v2.rotate(posOffset, this.rot);
        sprite.rotOffset = rotOffset;
        sprite.imgAlpha = imgDef.alpha;
        sprite.alpha = sprite.imgAlpha;
        sprite.defScale = imgDef.scale;
        sprite.mirrorY = !!imgDef.mirrorY;
        sprite.mirrorX = !!imgDef.mirrorX;
        sprite.visible = true;
        return sprite;
      };
      this.bounds = collider.transform(
        mapHelpers.getBoundingCollider(this.type),
        this.pos,
        this.rot,
        this.scale
      );
      this.zIdx = def2.zIdx || 0;
      this.surfaces = [];
      for (let i2 = 0; i2 < def2.floor.surfaces.length; i2++) {
        const surfaceDef = def2.floor.surfaces[i2];
        const surface = {
          type: surfaceDef.type,
          data: surfaceDef.data || {},
          colliders: []
        };
        for (let j = 0; j < surfaceDef.collision.length; j++) {
          surface.colliders.push(
            collider.transform(
              surfaceDef.collision[j],
              this.pos,
              this.rot,
              this.scale
            )
          );
        }
        this.surfaces.push(surface);
      }
      const vision = Object.assign(
        {
          dist: 5.5,
          width: 2.75,
          linger: 0,
          fadeRate: 12
        },
        def2.ceiling.vision
      );
      this.ceiling = {
        zoomRegions: [],
        vision,
        visionTicker: 0,
        fadeAlpha: 1
      };
      for (let i2 = 0; i2 < def2.ceiling.zoomRegions.length; i2++) {
        const region = def2.ceiling.zoomRegions[i2];
        this.ceiling.zoomRegions?.push({
          zoomIn: region.zoomIn ? collider.transform(
            region.zoomIn,
            this.pos,
            this.rot,
            this.scale
          ) : null,
          zoomOut: region.zoomOut ? collider.transform(
            region.zoomOut,
            this.pos,
            this.rot,
            this.scale
          ) : null
        });
      }
      this.imgs = [];
      for (let i2 = 0; i2 < def2.floor.imgs.length; i2++) {
        this.imgs.push({
          sprite: createSpriteFromDef(def2.floor.imgs[i2]),
          isCeiling: false,
          zOrd: this.zIdx,
          zIdx: this.__id * 100 + i2
        });
      }
      for (let i2 = 0; i2 < def2.ceiling.imgs.length; i2++) {
        const imgDef = def2.ceiling.imgs[i2];
        this.imgs.push({
          sprite: createSpriteFromDef(imgDef),
          isCeiling: true,
          removeOnDamaged: !!imgDef.removeOnDamaged,
          zOrd: 750 - this.zIdx,
          zIdx: this.__id * 100 + i2
        });
      }
      const defEmitters = def2.occupiedEmitters || [];
      for (let z = 0; z < defEmitters.length; z++) {
        const defEmitter = defEmitters[z];
        const defRot = defEmitter.rot !== void 0 ? defEmitter.rot : 0;
        const rot = this.rot + defRot;
        let pos = v2.add(this.pos, v2.rotate(defEmitter.pos, rot));
        const initDir = defEmitter.dir || v2.create(1, 0);
        let dir = v2.rotate(initDir, rot);
        let scale = defEmitter.scale;
        let parent = null;
        if (defEmitter.parentToCeiling) {
          let lastIdx = -1;
          for (let B = 0; B < this.imgs.length; B++) {
            if (this.imgs[B].isCeiling) {
              lastIdx = B;
            }
          }
          if (lastIdx >= 0) {
            const img = this.imgs[lastIdx];
            parent = img.sprite;
            pos = v2.mul(defEmitter.pos, 32);
            pos.y *= -1;
            dir = v2.rotate(v2.create(1, 0), defEmitter.rot);
            scale = 1 / img.sprite.defScale;
          }
        }
        const emitter = ctx.particleBarn.addEmitter(defEmitter.type, {
          pos,
          dir,
          scale,
          layer: defEmitter.layer,
          parent
        });
        this.particleEmitters.push(emitter);
      }
      const defSoundEmitters = def2.soundEmitters || [];
      for (let i2 = 0; i2 < defSoundEmitters.length; i2++) {
        const defSound = defSoundEmitters[i2];
        const pos = v2.add(this.pos, v2.rotate(defSound.pos, this.rot));
        this.soundEmitters.push({
          instance: null,
          sound: defSound.sound,
          channel: defSound.channel,
          pos,
          range: defSound.range,
          falloff: defSound.falloff,
          volume: defSound.volume
        });
      }
    }
  }
  m_update(dt, map, particleBarn, audioManager, _ambience, activePlayer, renderer, camera, debug) {
    if (this.hasPuzzle) {
      const def2 = MapObjectDefs[this.type];
      if (this.puzzleErrSeqModified && (this.puzzleErrSeqModified = false, !this.isNew)) {
        let nearestObj = this;
        let nearestDist = v2.length(v2.sub(activePlayer.m_pos, nearestObj.pos));
        const obstacles = map.m_obstaclePool.m_getPool();
        for (let i2 = 0; i2 < obstacles.length; i2++) {
          const o = obstacles[i2];
          if (o.active && o.isPuzzlePiece && o.parentBuildingId == this.__id) {
            const dist = v2.length(v2.sub(activePlayer.m_pos, o.pos));
            if (dist < nearestDist) {
              nearestObj = o;
              nearestDist = dist;
            }
          }
        }
        audioManager.playSound(def2.puzzle?.sound.fail, {
          channel: "sfx",
          soundPos: nearestObj.pos,
          layer: nearestObj.layer,
          filter: "muffled"
        });
      }
      if (this.puzzleSolved && !this.playedSolvedPuzzleFx) {
        map.solvedPuzzleIds.push(this.__id);
        this.playedSolvedPuzzleFx = true;
        if (!this.isNew && def2.puzzle?.sound.complete != "none") {
          audioManager.playSound(def2.puzzle?.sound.complete, {
            channel: "sfx",
            soundPos: this.pos,
            layer: this.layer,
            filter: "muffled"
          });
        }
      }
    }
    if (this.ceilingDead && !this.playedCeilingDeadFx) {
      map.deadCeilingIds.push(this.__id);
      this.playedCeilingDeadFx = true;
      if (!this.isNew) {
        this.destroyCeilingFx(particleBarn, audioManager);
      }
    }
    this.isNew = false;
    if (this.ceilingDead && !this.residue) {
      const def2 = MapObjectDefs[this.type];
      if (def2.ceiling.destroy?.residue) {
        const r = this.allocSprite();
        r.texture = Texture.from(def2.ceiling.destroy.residue);
        r.position.set(0, 0);
        r.scale.set(1, 1);
        r.rotation = 0;
        r.tint = 16777215;
        r.visible = true;
        this.imgs[0].sprite.addChild(r);
        this.residue = r;
      }
    }
    this.ceiling.visionTicker -= dt;
    const vision = this.ceiling.vision;
    let canSeeInside = false;
    for (let i2 = 0; i2 < this.ceiling.zoomRegions.length; i2++) {
      const zoomIn = this.ceiling.zoomRegions[i2].zoomIn;
      if (zoomIn && (this.layer == activePlayer.layer || activePlayer.layer & 2) && collisionHelpers.scanCollider(
        zoomIn,
        map.m_obstaclePool.m_getPool(),
        activePlayer.m_pos,
        activePlayer.layer,
        0.5,
        vision.width * 2,
        vision.dist,
        5,
        debug.render.buildings?.ceiling,
        debugLines
      )) {
        canSeeInside = true;
        break;
      }
    }
    if (this.ceilingDead) {
      canSeeInside = true;
    }
    if (canSeeInside) {
      this.ceiling.visionTicker = vision.linger + 1e-4;
    }
    if (activePlayer.noCeilingRevealTicker > 0 && !this.ceilingDead) {
      this.ceiling.visionTicker = 0;
    }
    const visible = this.ceiling.visionTicker > 0;
    const ceilingStep = step$1(
      this.ceiling.fadeAlpha,
      visible ? 0 : 1,
      dt * (visible ? 12 : vision?.fadeRate)
    );
    this.ceiling.fadeAlpha += ceilingStep;
    if (canSeeInside && activePlayer.noCeilingRevealTicker <= 0 && activePlayer.layer & 2 && !util.sameLayer(activePlayer.layer, this.layer)) {
      this.ceiling.fadeAlpha = 0;
    }
    for (let i2 = 0; i2 < this.particleEmitters.length; i2++) {
      this.particleEmitters[i2].enabled = this.occupied;
    }
    this.soundEmitterTicker += dt;
    if (this.soundEmitterTicker > 0.1) {
      this.soundEmitterTicker = 0;
      for (let A = 0; A < this.soundEmitters.length; A++) {
        const soundEmitter = this.soundEmitters[A];
        if (!soundEmitter.instance && audioManager.isSoundLoaded(soundEmitter.sound, soundEmitter.channel)) {
          soundEmitter.instance = audioManager.playSound(soundEmitter.sound, {
            channel: soundEmitter.channel,
            loop: true,
            forceStart: true,
            startSilent: true
          });
        }
        if (soundEmitter.instance) {
          const diff2 = v2.sub(camera.m_pos, soundEmitter.pos);
          const dist = v2.length(diff2);
          const distT = math.remap(
            dist,
            soundEmitter.range.min,
            soundEmitter.range.max,
            1,
            0
          );
          const volumeFalloff = Math.pow(distT, soundEmitter.falloff);
          const visibilityMult = math.lerp(this.ceiling.fadeAlpha, 1, 0.25);
          let volume = audioManager.baseVolume * audioManager.getTypeVolume("sound") * soundEmitter.volume * volumeFalloff * visibilityMult;
          if (!util.sameAudioLayer(this.layer, activePlayer.layer)) {
            volume = 0;
          }
          if (volume < 3e-3) {
            volume = 0;
          }
          soundEmitter.instance.volume = volume;
        }
      }
    }
    for (let F = 0; F < this.imgs.length; F++) {
      const img = this.imgs[F];
      const alpha = img.isCeiling ? this.ceiling.fadeAlpha : 1;
      this.positionSprite(img.sprite, alpha, camera);
      if (img.removeOnDamaged && this.ceilingDamaged) {
        img.sprite.visible = !this.ceilingDamaged;
      }
      let layer = this.layer;
      if (img.isCeiling && (this.layer == activePlayer.layer || activePlayer.layer & 2 && this.layer == 1)) {
        layer |= 2;
      }
      renderer.addPIXIObj(img.sprite, layer, img.zOrd, img.zIdx);
    }
  }
  isInsideCeiling(collision) {
    for (let i2 = 0; i2 < this.ceiling.zoomRegions.length; i2++) {
      const zoomIn = this.ceiling.zoomRegions[i2].zoomIn;
      if (zoomIn && collider.intersect(zoomIn, collision)) {
        return true;
      }
    }
    return false;
  }
  getDistanceToBuilding(pos, maxDist) {
    let dist = maxDist;
    for (let i2 = 0; i2 < this.ceiling.zoomRegions.length; i2++) {
      const zoomIn = this.ceiling.zoomRegions[i2].zoomIn;
      if (zoomIn) {
        const res = collider.intersectCircle(zoomIn, pos, maxDist);
        if (res) {
          dist = math.clamp(maxDist - res.pen, 0, dist);
        }
      }
    }
    return dist;
  }
  destroyCeilingFx(particleBarn, audioManager) {
    const def2 = MapObjectDefs[this.type].ceiling.destroy;
    const surface = this.surfaces[0];
    for (let i2 = 0; i2 < surface.colliders.length; i2++) {
      const aabb = collider.toAabb(surface.colliders[i2]);
      for (let j = 0; j < def2.particleCount; j++) {
        const pos = v2.create(
          util.random(aabb.min.x, aabb.max.x),
          util.random(aabb.min.y, aabb.max.y)
        );
        const vel = v2.mul(v2.randomUnit(), util.random(0, 15));
        particleBarn.addParticle(def2.particle, this.layer, pos, vel);
      }
      break;
    }
    audioManager.playSound(def2.sound || "ceiling_break_01", {
      channel: "sfx",
      soundPos: this.pos
    });
  }
  positionSprite(sprite, alpha, camera) {
    const screenPos = camera.m_pointToScreen(v2.add(this.pos, sprite.posOffset));
    const screenScale = camera.m_pixels(this.scale * sprite.defScale);
    sprite.position.set(screenPos.x, screenPos.y);
    sprite.scale.set(screenScale, screenScale);
    if (sprite.mirrorY) {
      sprite.scale.y *= -1;
    }
    if (sprite.mirrorX) {
      sprite.scale.x *= -1;
    }
    sprite.rotation = -this.rot + sprite.rotOffset;
    sprite.alpha = sprite.imgAlpha * alpha;
  }
  render(_camera, debug, layer) {
  }
}
class Pool {
  m_pool = [];
  m_activeCount = 0;
  m_creator;
  constructor(classFn) {
    this.m_creator = {
      type: classFn
    };
    assert(classFn !== void 0);
  }
  m_alloc() {
    let obj = null;
    for (let i2 = 0; i2 < this.m_pool.length; i2++) {
      if (!this.m_pool[i2].active) {
        obj = this.m_pool[i2];
        break;
      }
    }
    if (!obj) {
      obj = new this.m_creator.type();
      this.m_pool.push(obj);
    }
    obj.active = true;
    obj.m_init();
    this.m_activeCount++;
    return obj;
  }
  m_free(obj) {
    obj.m_free();
    obj.active = false;
    this.m_activeCount--;
    if (this.m_pool.length > 128 && this.m_activeCount < this.m_pool.length / 2) {
      const compact = [];
      for (let i2 = 0; i2 < this.m_pool.length; i2++) {
        if (this.m_pool[i2].active) {
          compact.push(this.m_pool[i2]);
        }
      }
      this.m_pool = compact;
    }
  }
  m_getPool() {
    return this.m_pool;
  }
}
class Creator {
  m_idToObj = {};
  m_types = {};
  m_seenCount = 0;
  m_registerType(type, pool) {
    this.m_types[type] = pool;
  }
  m_getObjById(id) {
    return this.m_idToObj[id];
  }
  m_getTypeById(id, s) {
    const obj = this.m_getObjById(id);
    if (!obj) {
      const err = {
        id,
        ids: Object.keys(this.m_idToObj),
        stream: s._view._view
      };
      errorLogManager.logError(`getTypeById${JSON.stringify(err)}`);
      errorLogManager.storeGeneric("objectPoolErr", "getTypeById");
      return ObjectType.Invalid;
    }
    return obj.__type;
  }
  m_updateObjFull(type, id, data, ctx) {
    let obj = this.m_getObjById(id);
    let isNew = false;
    if (obj === void 0) {
      obj = this.m_types[type].m_alloc();
      obj.__id = id;
      obj.__type = type;
      this.m_idToObj[id] = obj;
      this.m_seenCount++;
      isNew = true;
    }
    obj.m_updateData(data, true, isNew, ctx);
    return obj;
  }
  m_updateObjPart(id, data, ctx) {
    const obj = this.m_getObjById(id);
    if (obj) {
      obj.m_updateData(data, false, false, ctx);
    } else {
      errorLogManager.storeGeneric("objectPoolErr", "updateObjPart");
      console.error("updateObjPart, missing object", id);
    }
  }
  m_deleteObj(id) {
    const obj = this.m_getObjById(id);
    if (obj === void 0) {
      console.error("deleteObj, missing object", id);
      errorLogManager.storeGeneric("objectPoolErr", "deleteObj");
    } else {
      this.m_types[obj.__type].m_free(obj);
      delete this.m_idToObj[id];
    }
  }
}
class Obstacle {
  __id;
  __type;
  active;
  sprite = new Sprite();
  isNew;
  smokeEmitter;
  img;
  type;
  layer;
  healthT;
  dead;
  isSkin;
  rot;
  scale;
  pos;
  imgMirrorX;
  imgMirrorY;
  exploded;
  collidable;
  destructible;
  height;
  isWall;
  isWindow;
  isBush;
  isDoor;
  isButton;
  isPuzzlePiece;
  parentBuildingId;
  button;
  door;
  imgScale;
  explodeParticle;
  skinPlayerId;
  // for skin interpolation
  visualPosOld;
  posInterpTicker;
  collider;
  constructor() {
    this.sprite.anchor.set(0.5, 0.5);
    this.sprite.visible = false;
  }
  m_init() {
    this.isNew = false;
    this.smokeEmitter = null;
    this.sprite.visible = false;
    this.img = "";
    this.visualPosOld = v2.create(0, 0);
  }
  m_free() {
    this.sprite.visible = false;
    this.sprite.parent?.removeChild(this.sprite);
    if (this.door?.casingSprite) {
      this.door.casingSprite.destroy();
      this.door.casingSprite = null;
    }
    if (this.smokeEmitter) {
      this.smokeEmitter.stop();
      this.smokeEmitter = null;
    }
  }
  m_updateData(data, fullUpdate, isNew, ctx) {
    if (fullUpdate) {
      this.type = data.type;
      this.layer = data.layer;
      this.healthT = data.healthT;
      this.dead = data.dead;
      this.isSkin = data.isSkin;
      if (this.isSkin) {
        this.skinPlayerId = data.skinPlayerId;
      }
    }
    const def2 = MapObjectDefs[this.type];
    if (!v2.eq(data.pos, this.visualPosOld)) {
      this.visualPosOld = v2.copy(isNew ? data.pos : this.pos);
      this.posInterpTicker = 0;
    }
    this.pos = v2.copy(data.pos);
    this.rot = math.oriToRad(data.ori);
    this.scale = data.scale;
    this.imgScale = def2.img.scale;
    this.imgMirrorY = def2.img.mirrorY;
    this.imgMirrorX = def2.img.mirrorX;
    this.collider = collider.transform(def2.collision, this.pos, this.rot, this.scale);
    if (isNew) {
      this.isNew = true;
      this.exploded = ctx.map.deadObstacleIds.includes(this.__id);
      this.explodeParticle = def2.explodeParticle;
      this.collidable = def2.collidable && !this.isSkin;
      this.destructible = def2.destructible;
      this.height = def2.height;
      this.isWall = !!def2.isWall;
      this.isWindow = !!def2.isWindow;
      this.isBush = !!def2.isBush;
      this.isDoor = def2.door !== void 0;
      if (this.isDoor) {
        this.door = {
          openOneWay: def2.door?.openOneWay,
          closedPos: v2.copy(data.pos),
          autoOpen: def2.door?.autoOpen,
          interactionRad: def2.door?.interactionRad,
          interpSpeed: def2.door?.openSpeed,
          interpPos: v2.copy(data.pos),
          interpRot: math.oriToRad(data.ori),
          seq: data.door?.seq,
          seqOld: data.door?.seq,
          open: data.door?.open,
          wasOpen: data.door?.open,
          locked: data.door?.locked,
          casingSprite: null
        };
        const casingImgDef = def2.door?.casingImg;
        if (casingImgDef !== void 0) {
          let posOffset = casingImgDef.pos || v2.create(0, 0);
          posOffset = v2.rotate(posOffset, this.rot + Math.PI * 0.5);
          const sprite = new Sprite();
          sprite.texture = Texture.from(casingImgDef.sprite);
          sprite.anchor.set(0.5, 0.5);
          sprite.posOffset = posOffset;
          sprite.imgScale = casingImgDef.scale;
          sprite.tint = casingImgDef.tint;
          sprite.alpha = casingImgDef.alpha;
          sprite.visible = true;
          this.door.casingSprite = sprite;
        }
      }
      this.isButton = def2.button !== void 0;
      if (this.isButton) {
        this.button = {
          interactionRad: def2.button?.interactionRad,
          interactionText: def2.button?.interactionText || "game-use",
          seq: data.button?.seq,
          seqOld: data.button?.seq
        };
      }
      this.isPuzzlePiece = data.isPuzzlePiece;
      this.parentBuildingId = this.isPuzzlePiece ? data.parentBuildingId : 0;
    }
    if (this.isDoor && fullUpdate) {
      this.door.canUse = data.door?.canUse;
      this.door.open = data.door?.open;
      this.door.seq = data.door?.seq;
      const u = v2.rotate(
        v2.create(def2.door?.slideOffset, 0),
        this.rot + Math.PI * 0.5
      );
      this.door.closedPos = data.door?.open ? v2.add(data.pos, u) : v2.copy(data.pos);
    }
    if (this.isButton && fullUpdate) {
      this.button.onOff = data.button?.onOff;
      this.button.canUse = data.button?.canUse;
      this.button.seq = data.button?.seq;
    }
    if (def2.explosion !== void 0 && !this.smokeEmitter && data.healthT < 0.5 && !data.dead) {
      const g = v2.normalize(v2.create(1, 1));
      this.smokeEmitter = ctx.particleBarn.addEmitter("smoke_barrel", {
        pos: this.pos,
        dir: g,
        layer: this.layer
      });
    }
    let y = false;
    let w = this.dead ? def2.img.residue : def2.img.sprite;
    if (this.isButton && this.button.onOff && !this.dead && def2.button?.useImg) {
      w = def2.button.useImg;
    } else if (this.isButton && !this.button.canUse && def2.button?.offImg) {
      w = def2.button.offImg;
    }
    if (w != this.img) {
      let f = v2.create(0.5, 0.5);
      if (this.isDoor) {
        f = def2.door?.spriteAnchor;
      }
      const _ = w !== void 0;
      if (!_) {
        this.sprite.parent?.removeChild(this.sprite);
      }
      if (_) {
        this.sprite.texture = w == "none" || !w ? Texture.EMPTY : Texture.from(w);
        this.sprite.anchor.set(f.x, f.y);
        this.sprite.tint = def2.img.tint;
        this.sprite.imgAlpha = this.dead ? 0.75 : def2.img.alpha;
        this.sprite.zOrd = def2.img.zIdx;
        this.sprite.zIdx = Math.floor(this.scale * 1e3) * 65535 + this.__id;
        this.sprite.alpha = this.sprite.imgAlpha;
        y = true;
      }
      this.sprite.visible = _;
      this.img = w;
    }
    const b = ctx.map.getMapDef().biome.valueAdjust;
    if (y && b < 1) {
      this.sprite.tint = util.adjustValue(this.sprite.tint, b);
    }
  }
  getInteraction() {
    if (this.isButton && this.button.canUse) {
      return {
        rad: this.button.interactionRad,
        action: this.button.interactionText,
        object: `game-${this.type}`
      };
    }
    if (this.isDoor && this.door.canUse && !this.door.autoOpen) {
      return {
        rad: this.door.interactionRad,
        action: this.door.open ? "game-close-door" : "game-open-door",
        object: ""
      };
    }
    return null;
  }
  update(dt, map, playerBarn, particleBarn, audioManager, activePlayer, renderer) {
    if (this.isButton) {
      const button = this.button;
      if (button.seq != button.seqOld) {
        const def2 = MapObjectDefs[this.type];
        if (def2.button?.useParticle) {
          const aabb = collider.toAabb(this.collider);
          const extent = v2.mul(v2.sub(aabb.max, aabb.min), 0.5);
          const center = v2.add(aabb.min, extent);
          const vel = v2.mul(v2.randomUnit(), util.random(5, 15));
          particleBarn.addParticle(
            def2.button.useParticle,
            this.layer,
            center,
            vel
          );
        }
        const sound = this.button.onOff ? def2.button?.sound.on : def2.button?.sound.off;
        if (sound) {
          audioManager.playSound(sound, {
            channel: "sfx",
            soundPos: this.pos,
            layer: this.layer,
            filter: "muffled"
          });
        }
      }
      button.seqOld = button.seq;
    }
    if (this.isDoor) {
      const door = this.door;
      const moveSpd = door.interpSpeed;
      const posDiff = v2.sub(this.pos, door.interpPos);
      const diffLen = v2.length(posDiff);
      let posMove = moveSpd * dt;
      if (diffLen < posMove) {
        posMove = diffLen;
      }
      const moveDir = diffLen > 1e-4 ? v2.div(posDiff, diffLen) : v2.create(1, 0);
      door.interpPos = v2.add(door.interpPos, v2.mul(moveDir, posMove));
      const rotSpd = Math.PI * door.interpSpeed;
      const angDiff = math.angleDiff(door.interpRot, this.rot);
      let angMove = math.sign(angDiff) * rotSpd * dt;
      if (Math.abs(angDiff) < Math.abs(angMove)) {
        angMove = angDiff;
      }
      door.interpRot += angMove;
      if (door.seq != door.seqOld) {
        const def2 = MapObjectDefs[this.type];
        const sound = def2.door?.sound.change || "";
        if (sound != "") {
          audioManager.playSound(sound, {
            channel: "sfx",
            soundPos: this.pos,
            layer: this.layer,
            filter: "muffled"
          });
        }
        door.seqOld = door.seq;
      }
      if (door.open != door.wasOpen) {
        const C = MapObjectDefs[this.type];
        const A = door.open ? C.door?.sound.open : C.door?.sound.close;
        audioManager.playSound(A, {
          channel: "sfx",
          soundPos: this.pos,
          layer: this.layer,
          filter: "muffled"
        });
        door.wasOpen = door.open;
      }
    }
    if (this.dead && !this.exploded && (map.deadObstacleIds.push(this.__id), this.exploded = true, this.smokeEmitter && (this.smokeEmitter.stop(), this.smokeEmitter = null), !this.isNew)) {
      const def2 = MapObjectDefs[this.type];
      const aabb = collider.toAabb(this.collider);
      const extent = v2.mul(v2.sub(aabb.max, aabb.min), 0.5);
      const center = v2.add(aabb.min, extent);
      const numParticles = Math.floor(util.random(5, 11));
      for (let i2 = 0; i2 < numParticles; i2++) {
        const vel = v2.mul(v2.randomUnit(), util.random(5, 15));
        const particle = Array.isArray(this.explodeParticle) ? this.explodeParticle[Math.floor(Math.random() * this.explodeParticle.length)] : this.explodeParticle;
        particleBarn.addParticle(particle, this.layer, center, vel);
      }
      audioManager.playSound(def2.sound?.explode, {
        channel: "sfx",
        soundPos: center,
        layer: this.layer,
        filter: "muffled"
      });
    }
    if (this.smokeEmitter) {
      const healthT = this.isSkin ? 0.3 : 0.5;
      this.smokeEmitter.pos = v2.copy(this.pos);
      this.smokeEmitter.enabled = !this.dead && this.healthT < healthT;
    }
    if (this.sprite.visible && this.img) {
      let zOrd = this.dead ? 5 : this.sprite.zOrd;
      let zIdx = this.sprite.zIdx;
      let layer = this.layer;
      if (!this.dead && zOrd >= 50 && this.layer == 0 && activePlayer.layer == 0) {
        zOrd += 100;
        layer |= 2;
      }
      if (!this.dead && this.isSkin) {
        const skinPlayer = playerBarn.getPlayerById(this.skinPlayerId);
        if (skinPlayer) {
          zOrd = math.max(math.max(zOrd, skinPlayer.renderZOrd), 21);
          if (skinPlayer.renderLayer != 0) {
            layer = skinPlayer.renderLayer;
            zOrd = skinPlayer.renderZOrd;
          }
          zIdx = skinPlayer.renderZIdx + 262144;
        }
      }
      renderer.addPIXIObj(this.sprite, layer, zOrd, zIdx);
      if (this.isDoor && this.door.casingSprite) {
        renderer.addPIXIObj(this.door.casingSprite, layer, zOrd + 1, zIdx);
      }
    }
    this.isNew = false;
  }
  render(dt, camera, debug, layer) {
    let pos = this.isDoor ? this.door.interpPos : this.pos;
    if (this.isSkin && camera.m_interpEnabled) {
      this.posInterpTicker += dt;
      const posT = math.clamp(this.posInterpTicker / camera.m_interpInterval, 0, 1);
      pos = v2.lerp(posT, this.visualPosOld, this.pos);
    }
    const rot = this.isDoor ? this.door.interpRot : this.rot;
    const scale = this.scale;
    const screenPos = camera.m_pointToScreen(pos);
    const screenScale = camera.m_pixels(scale * this.imgScale);
    this.sprite.position.set(screenPos.x, screenPos.y);
    this.sprite.scale.set(screenScale, screenScale);
    if (this.imgMirrorY) {
      this.sprite.scale.y *= -1;
    }
    if (this.imgMirrorX) {
      this.sprite.scale.x *= -1;
    }
    this.sprite.rotation = -rot;
    if (this.isDoor && this.door?.casingSprite) {
      const casingPos = camera.m_pointToScreen(
        v2.add(this.door.closedPos, this.door.casingSprite.posOffset)
      );
      const casingScale = camera.m_pixels(scale * this.door.casingSprite.imgScale);
      this.door.casingSprite.position.set(casingPos.x, casingPos.y);
      this.door.casingSprite.scale.set(casingScale, casingScale);
      this.door.casingSprite.rotation = -rot;
      this.door.casingSprite.visible = !this.dead;
    }
  }
}
class Structure {
  __id;
  __type;
  active;
  soundTransitionT;
  soundEnabledT;
  type;
  layer;
  pos;
  rot;
  scale;
  interiorSoundAlt;
  interiorSoundEnabled;
  aabb;
  layers;
  stairs;
  mask;
  m_init() {
    this.soundTransitionT = 0;
  }
  m_free() {
  }
  m_updateData(data, fullUpdate, isNew, ctx) {
    if (fullUpdate) {
      this.type = data.type;
      this.layer = 0;
      this.pos = v2.copy(data.pos);
      this.rot = math.oriToRad(data.ori);
      this.scale = 1;
      this.interiorSoundAlt = data.interiorSoundAlt;
      this.interiorSoundEnabled = data.interiorSoundEnabled;
      if (isNew) {
        this.soundTransitionT = this.interiorSoundAlt ? 1 : 0;
        this.soundEnabledT = this.interiorSoundEnabled ? 1 : 0;
      }
      this.aabb = collider.transform(
        mapHelpers.getBoundingCollider(this.type),
        this.pos,
        this.rot,
        this.scale
      );
      const def2 = MapObjectDefs[this.type];
      this.layers = [];
      for (let i2 = 0; i2 < def2.layers.length; i2++) {
        const layer = def2.layers[i2];
        const objId = data.layerObjIds[i2];
        const inheritOri = layer?.inheritOri === void 0 || layer.inheritOri;
        const underground = layer.underground !== void 0 ? layer.underground : i2 == 1;
        const pos = v2.add(this.pos, layer.pos);
        const rot = math.oriToRad(inheritOri ? data.ori + layer.ori : layer.ori);
        const collision = collider.transform(
          mapHelpers.getBoundingCollider(layer.type),
          pos,
          rot,
          1
        );
        this.layers.push({
          objId,
          collision,
          underground
        });
      }
      this.stairs = [];
      for (let i2 = 0; i2 < def2.stairs.length; i2++) {
        const stairsDef = def2.stairs[i2];
        const stairsCol = collider.transform(
          stairsDef.collision,
          this.pos,
          this.rot,
          this.scale
        );
        const downDir = v2.rotate(stairsDef.downDir, this.rot);
        const childAabbs = coldet.splitAabb(stairsCol, downDir);
        this.stairs.push({
          collision: stairsCol,
          center: v2.add(
            stairsCol.min,
            v2.mul(v2.sub(stairsCol.max, stairsCol.min), 0.5)
          ),
          downDir,
          downAabb: collider.createAabb(childAabbs[0].min, childAabbs[0].max),
          upAabb: collider.createAabb(childAabbs[1].min, childAabbs[1].max),
          noCeilingReveal: !!stairsDef.noCeilingReveal,
          lootOnly: !!stairsDef.lootOnly
        });
      }
      this.mask = [];
      for (let i2 = 0; i2 < def2.mask.length; i2++) {
        this.mask.push(
          collider.transform(
            def2.mask[i2],
            this.pos,
            this.rot,
            this.scale
          )
        );
      }
      ctx.renderer.layerMaskDirty = true;
    }
  }
  update(dt, map, activePlayer, ambience) {
    if (MapObjectDefs[this.type].interiorSound) {
      this.updateInteriorSounds(dt, map, activePlayer, ambience);
    }
  }
  updateInteriorSounds(dt, map, activePlayer, ambience) {
    const def2 = MapObjectDefs[this.type];
    collider.createCircle(activePlayer.m_pos, 1e-3);
    map.m_buildingPool.m_getPool();
    const building0 = this.layers.length > 0 ? map.getBuildingById(this.layers[0].objId) : null;
    const building1 = this.layers.length > 1 ? map.getBuildingById(this.layers[1].objId) : null;
    const maxDist = def2.interiorSound?.outsideMaxDist !== void 0 ? def2.interiorSound.outsideMaxDist : 10;
    const outsideVol = def2.interiorSound?.outsideVolume !== void 0 ? def2.interiorSound.outsideVolume : 0;
    const undergroundVol = def2.interiorSound?.undergroundVolume !== void 0 ? def2.interiorSound.undergroundVolume : 1;
    let weight0 = 0;
    let weight1 = 0;
    if (activePlayer.layer != 1) {
      if (building0) {
        const dist = building0.getDistanceToBuilding(activePlayer.m_pos, maxDist);
        const weight = math.remap(dist, maxDist, 0, 0, 1);
        const onStairs = activePlayer.layer & 2;
        const visionT = building0.ceiling.fadeAlpha;
        weight0 = weight * (1 - visionT);
        weight1 = weight * visionT * (onStairs ? undergroundVol : outsideVol);
      }
    } else if (building1) {
      const dist = building1.getDistanceToBuilding(activePlayer.m_pos, maxDist);
      const weight = math.remap(dist, maxDist, 0, 0, 1);
      weight0 = 0;
      weight1 = weight * undergroundVol;
    }
    const transitionTime = def2.interiorSound?.transitionTime !== void 0 ? def2.interiorSound.transitionTime : 1;
    if (this.interiorSoundAlt) {
      this.soundTransitionT = math.clamp(
        this.soundTransitionT + dt / transitionTime,
        0,
        1
      );
    }
    const transitionWeight = Math.abs(this.soundTransitionT - 0.5) * 2;
    if (!this.interiorSoundEnabled) {
      this.soundEnabledT = math.clamp(this.soundEnabledT - dt * 0.5, 0, 1);
    }
    const sound = this.soundTransitionT > 0.5 ? def2.interiorSound?.soundAlt : def2.interiorSound?.sound;
    const track0 = ambience.getTrack("interior_0");
    track0.sound = sound;
    track0.filter = "";
    track0.weight = sound ? weight0 * transitionWeight * this.soundEnabledT : 0;
    const track1 = ambience.getTrack("interior_1");
    track1.sound = sound;
    track1.filter = def2.interiorSound?.filter;
    track1.weight = sound ? weight1 * transitionWeight * this.soundEnabledT : 0;
  }
  render(_camera, debug, _layer) {
    return;
  }
  insideStairs(collision) {
    for (let i2 = 0; i2 < this.stairs.length; i2++) {
      if (collider.intersect(this.stairs[i2]?.collision, collision)) {
        return true;
      }
    }
    return false;
  }
  insideMask(collision) {
    for (let i2 = 0; i2 < this.mask.length; i2++) {
      if (collider.intersect(this.mask[i2], collision)) {
        return true;
      }
    }
    return false;
  }
}
function drawLine(canvas, pt0, pt1) {
  canvas.moveTo(pt0.x, pt0.y);
  canvas.lineTo(pt1.x, pt1.y);
}
function tracePath(canvas, path) {
  let point = path[0];
  canvas.moveTo(point.x, point.y);
  for (let i2 = 1; i2 < path.length; ++i2) {
    point = path[i2];
    canvas.lineTo(point.x, point.y);
  }
  canvas.closePath();
}
function traceGroundPatch(canvas, patch, seed) {
  const width = patch.max.x - patch.min.x;
  const height = patch.max.y - patch.min.y;
  const offset = math.max(patch.offsetDist, 1e-3);
  const roughness = patch.roughness;
  const divisionsX = Math.round(width * roughness / offset);
  const divisionsY = Math.round(height * roughness / offset);
  const seededRand = util.seededRand(seed);
  tracePath(
    canvas,
    generateJaggedAabbPoints(patch, divisionsX, divisionsY, offset, seededRand)
  );
}
class Map {
  constructor(decalBarn) {
    this.decalBarn = decalBarn;
  }
  display = {
    ground: new Graphics()
  };
  mapName = "";
  mapDef = {};
  factionMode = false;
  perkMode = false;
  turkeyMode = false;
  seed = 0;
  width = 0;
  height = 0;
  mapData = {
    places: [],
    objects: [],
    groundPatches: []
  };
  mapLoaded = false;
  mapTexture = null;
  m_obstaclePool = new Pool(Obstacle);
  m_buildingPool = new Pool(Building);
  m_structurePool = new Pool(Structure);
  deadObstacleIds = [];
  deadCeilingIds = [];
  solvedPuzzleIds = [];
  lootDropSfxIds = [];
  terrain = null;
  cameraEmitter = null;
  m_free() {
    const buildings = this.m_buildingPool.m_getPool();
    for (let i2 = 0; i2 < buildings.length; i2++) {
      buildings[i2].m_free();
    }
    this.mapTexture?.destroy(true);
    this.display.ground.destroy({
      children: true
    });
    this.cameraEmitter?.stop();
    this.cameraEmitter = null;
  }
  resize(pixiRenderer, canvasMode) {
    this.renderMap(pixiRenderer, canvasMode);
  }
  loadMap(mapMsg, camera, canvasMode, particleBarn) {
    this.mapName = mapMsg.mapName;
    const mapDef = MapDefs[this.mapName];
    if (!mapDef) {
      throw new Error(`Failed loading mapDef ${this.mapName}`);
    }
    this.mapDef = util.cloneDeep(mapDef);
    this.factionMode = !!this.mapDef.gameMode.factionMode;
    this.perkMode = !!this.mapDef.gameMode.perkMode;
    this.turkeyMode = !!this.mapDef.gameMode.turkeyMode;
    this.seed = mapMsg.seed;
    this.width = mapMsg.width;
    this.height = mapMsg.height;
    this.terrain = generateTerrain(
      this.width,
      this.height,
      mapMsg.shoreInset,
      mapMsg.grassInset,
      mapMsg.rivers,
      this.seed
    );
    this.mapData = {
      places: mapMsg.places,
      objects: mapMsg.objects,
      groundPatches: mapMsg.groundPatches
    };
    this.mapLoaded = true;
    const cameraEmitterType = this.mapDef.biome.particles.camera;
    if (cameraEmitterType) {
      const dir = v2.normalize(v2.create(1, -1));
      this.cameraEmitter?.stop();
      this.cameraEmitter = particleBarn.addEmitter(cameraEmitterType, {
        pos: v2.create(0, 0),
        dir,
        layer: 99999
      });
    }
    this.display.ground.clear();
    this.renderTerrain(this.display.ground, 2 / camera.m_ppu, canvasMode, false);
  }
  getMapDef() {
    if (!this.mapLoaded) {
      throw new Error("Map not loaded!");
    }
    return this.mapDef;
  }
  getMapTexture() {
    return this.mapTexture;
  }
  m_update(dt, activePlayer, playerBarn, particleBarn, audioManager, ambience, renderer, camera, _smokeParticles, debug) {
    const obstacles = this.m_obstaclePool.m_getPool();
    for (let i2 = 0; i2 < obstacles.length; i2++) {
      const obstacle = obstacles[i2];
      if (obstacle.active) {
        obstacle.update(
          dt,
          this,
          playerBarn,
          particleBarn,
          audioManager,
          activePlayer,
          renderer
        );
        obstacle.render(dt, camera, debug, activePlayer.layer);
      }
    }
    const buildings = this.m_buildingPool.m_getPool();
    for (let i2 = 0; i2 < buildings.length; i2++) {
      const building = buildings[i2];
      if (building.active) {
        building.m_update(
          dt,
          this,
          particleBarn,
          audioManager,
          ambience,
          activePlayer,
          renderer,
          camera,
          debug
        );
        building.render(camera, debug, activePlayer.layer);
      }
    }
    for (let structures = this.m_structurePool.m_getPool(), x = 0; x < structures.length; x++) {
      const structure = structures[x];
      if (structure.active) {
        structure.update(dt, this, activePlayer, ambience);
        structure.render(camera, debug, activePlayer.layer);
      }
    }
    if (this.cameraEmitter) {
      this.cameraEmitter.pos = v2.copy(camera.m_pos);
      this.cameraEmitter.enabled = true;
      const maxRadius = 120;
      const camRadius = activePlayer.m_getZoom() * 2.5;
      this.cameraEmitter.radius = math.min(camRadius, maxRadius);
      const radius = this.cameraEmitter.radius;
      const ratio = radius * radius / (maxRadius * maxRadius);
      this.cameraEmitter.rateMult = 1 / ratio;
      const alphaTarget = activePlayer.layer == 0 ? 1 : 0;
      this.cameraEmitter.alpha = math.lerp(
        dt * 6,
        this.cameraEmitter.alpha,
        alphaTarget
      );
    }
  }
  renderTerrain(groundGfx, gridThickness, canvasMode, mapRender) {
    const width = this.width;
    const height = this.height;
    const terrain = this.terrain;
    const ll = {
      x: 0,
      y: 0
    };
    const lr = {
      x: width,
      y: 0
    };
    const ul = {
      x: 0,
      y: height
    };
    const ur = {
      x: width,
      y: height
    };
    const mapColors = this.mapDef.biome.colors;
    const groundPatches = this.mapData.groundPatches;
    groundGfx.beginFill(mapColors.background);
    groundGfx.drawRect(-120, -120, width + 240, 120);
    groundGfx.drawRect(-120, height, width + 240, 120);
    groundGfx.drawRect(-120, -120, 120, height + 240);
    groundGfx.drawRect(width, -120, 120, height + 240);
    groundGfx.endFill();
    groundGfx.beginFill(mapColors.beach);
    tracePath(groundGfx, terrain?.shore);
    groundGfx.beginHole();
    tracePath(groundGfx, terrain?.grass);
    groundGfx.endHole();
    groundGfx.endFill();
    if (canvasMode) {
      groundGfx.beginFill(mapColors.grass);
      tracePath(groundGfx, terrain?.grass);
      groundGfx.endFill();
    }
    for (let i2 = 0; i2 < groundPatches.length; i2++) {
      const patch = groundPatches[i2];
      if (patch.order == 0 && (!mapRender || !!patch.useAsMapShape)) {
        groundGfx.beginFill(patch.color);
        traceGroundPatch(groundGfx, patch, this.seed);
        groundGfx.endFill();
      }
    }
    groundGfx.beginFill(mapColors.riverbank);
    for (let i2 = 0; i2 < terrain.rivers.length; i2++) {
      tracePath(groundGfx, terrain.rivers[i2].shorePoly);
    }
    groundGfx.endFill();
    groundGfx.beginFill(mapColors.water);
    for (let b = 0; b < terrain.rivers.length; b++) {
      tracePath(groundGfx, terrain.rivers[b].waterPoly);
    }
    groundGfx.endFill();
    groundGfx.beginFill(mapColors.water);
    groundGfx.moveTo(ul.x, ul.y);
    groundGfx.lineTo(ur.x, ur.y);
    groundGfx.lineTo(lr.x, lr.y);
    groundGfx.lineTo(ll.x, ll.y);
    groundGfx.beginHole();
    tracePath(groundGfx, terrain.shore);
    groundGfx.endHole();
    groundGfx.closePath();
    groundGfx.endFill();
    const gridGfx = groundGfx;
    gridGfx.lineStyle(gridThickness, 0, 0.15);
    for (let x = 0; x <= width; x += GameConfig.map.gridSize) {
      drawLine(
        gridGfx,
        {
          x,
          y: 0
        },
        {
          x,
          y: height
        }
      );
    }
    for (let y = 0; y <= height; y += GameConfig.map.gridSize) {
      drawLine(
        gridGfx,
        {
          x: 0,
          y
        },
        {
          x: width,
          y
        }
      );
    }
    gridGfx.lineStyle(gridThickness, 0, 0);
    for (let i2 = 0; i2 < groundPatches.length; i2++) {
      const patch = groundPatches[i2];
      if (patch.order == 1 && (!mapRender || !!patch.useAsMapShape)) {
        groundGfx.beginFill(patch.color);
        traceGroundPatch(groundGfx, patch, this.seed);
        groundGfx.endFill();
      }
    }
  }
  m_render(camera) {
    const p0 = camera.m_pointToScreen(v2.create(0, 0));
    const p1 = camera.m_pointToScreen(v2.create(1, 1));
    const s = v2.sub(p1, p0);
    this.display.ground.position.set(p0.x, p0.y);
    this.display.ground.scale.set(s.x, s.y);
  }
  getMinimapRender(obj) {
    const def2 = MapObjectDefs[obj.type];
    const zIdx = def2.type == "building" ? 750 + (def2.zIdx || 0) : def2.img.zIdx || 0;
    let shapes = [];
    if (def2.map?.shapes !== void 0) {
      shapes = def2.map?.shapes;
    } else {
      let col = null;
      if (col = def2.type == "obstacle" ? def2.collision : def2.ceiling.zoomRegions.length > 0 && def2.ceiling.zoomRegions[0].zoomIn ? def2.ceiling.zoomRegions[0].zoomIn : mapHelpers.getBoundingCollider(obj.type)) {
        shapes.push({
          collider: collider.copy(col),
          scale: def2.map?.scale || 1,
          color: def2.map?.color
        });
      }
    }
    return {
      obj,
      zIdx,
      shapes
    };
  }
  renderMap(renderer, canvasMode) {
    if (this.mapLoaded) {
      const mapRender = new Container();
      const txtRender = new Container();
      const mapColors = this.mapDef.biome.colors;
      const places = this.mapData.places;
      const objects = this.mapData.objects;
      let screenScale = device.screenHeight;
      if (device.mobile) {
        if (!device.isLandscape) {
          screenScale = device.screenWidth;
        }
        screenScale *= math.min(device.pixelRatio, 2);
      }
      const scale = this.height / screenScale;
      const background = new Graphics();
      background.beginFill(mapColors.grass);
      background.drawRect(0, 0, this.width, this.height);
      background.endFill();
      this.renderTerrain(background, scale, canvasMode, true);
      const ll = {
        x: 0,
        y: 0
      };
      const lr = {
        x: this.width,
        y: 0
      };
      const ul = {
        x: 0,
        y: this.height
      };
      const ur = {
        x: this.width,
        y: this.height
      };
      background.lineStyle(scale * 2, 0, 1);
      drawLine(background, ll, ul);
      drawLine(background, ul, ur);
      drawLine(background, ur, lr);
      drawLine(background, lr, ll);
      background.position.y = this.height;
      background.scale.y = -1;
      mapRender.addChild(background);
      const minimapRenders = [];
      for (let i2 = 0; i2 < objects.length; i2++) {
        const obj = objects[i2];
        minimapRenders.push(this.getMinimapRender(obj));
      }
      minimapRenders.sort((a, b) => {
        return a.zIdx - b.zIdx;
      });
      const gfx = new Graphics();
      for (let i2 = 0; i2 < minimapRenders.length; i2++) {
        const render = minimapRenders[i2];
        const obj = render.obj;
        for (let j = 0; j < render.shapes.length; j++) {
          const shape = render.shapes[j];
          const col = collider.transform(
            shape.collider,
            obj.pos,
            math.oriToRad(obj.ori),
            obj.scale
          );
          const scale2 = shape.scale !== void 0 ? shape.scale : 1;
          gfx.beginFill(shape.color, 1);
          switch (col.type) {
            case collider.Type.Circle:
              gfx.drawCircle(
                col.pos.x,
                this.height - col.pos.y,
                col.rad * scale2
              );
              break;
            case collider.Type.Aabb: {
              let A = v2.mul(v2.sub(col.max, col.min), 0.5);
              const O = v2.add(col.min, A);
              A = v2.mul(A, scale2);
              gfx.drawRect(
                O.x - A.x,
                this.height - O.y - A.y,
                A.x * 2,
                A.y * 2
              );
              gfx.endFill();
            }
          }
        }
      }
      mapRender.addChild(gfx);
      const nameContainer = new Container();
      for (let i2 = 0; i2 < places.length; i2++) {
        const place = places[i2];
        const style = new TextStyle({
          fontFamily: "Arial",
          fontSize: device.mobile ? 20 : 22,
          fontWeight: "bold",
          fill: ["#ffffff"],
          stroke: "#000000",
          strokeThickness: 1,
          dropShadow: true,
          dropShadowColor: "#000000",
          dropShadowBlur: 1,
          dropShadowAngle: Math.PI / 3,
          dropShadowDistance: 1,
          wordWrap: false,
          align: "center"
        });
        const richText = new Text(place.name, style);
        richText.anchor.set(0.5, 0.5);
        richText.x = place.pos.x * this.height / scale;
        richText.y = place.pos.y * this.height / scale;
        richText.alpha = 0.75;
        nameContainer.addChild(richText);
      }
      txtRender.addChild(nameContainer);
      if (this.mapTexture) {
        this.mapTexture.resize(screenScale, screenScale);
      } else {
        this.mapTexture = RenderTexture.create({
          width: screenScale,
          height: screenScale,
          scaleMode: SCALE_MODES.LINEAR,
          resolution: 1
        });
      }
      mapRender.scale = new Point(
        screenScale / this.height,
        screenScale / this.height
      );
      renderer.render(mapRender, {
        renderTexture: this.mapTexture,
        clear: true
      });
      renderer.render(txtRender, {
        renderTexture: this.mapTexture,
        clear: false
      });
      mapRender.destroy({
        children: true,
        texture: true,
        baseTexture: true
      });
      txtRender.destroy({
        children: true,
        texture: true,
        baseTexture: true
      });
    }
  }
  getGroundSurface(pos, layer) {
    const groundSurface = (type, data = {}) => {
      if (type == "water") {
        const mapColors = this.getMapDef().biome.colors;
        data.waterColor = data.waterColor !== void 0 ? data.waterColor : mapColors.water;
        data.rippleColor = data.rippleColor !== void 0 ? data.rippleColor : mapColors.waterRipple;
      }
      return {
        type,
        data
      };
    };
    const decals = this.decalBarn.decalPool.m_getPool();
    for (let i2 = 0; i2 < decals.length; i2++) {
      const decal = decals[i2];
      if (decal.active && decal.surface && util.sameLayer(decal.layer, layer) && collider.intersectCircle(decal.collider, pos, 1e-4)) {
        return groundSurface(decal.surface.type, decal.surface.data);
      }
    }
    let surface = null;
    let zIdx = 0;
    const onStairs = layer & 2;
    const buildings = this.m_buildingPool.m_getPool();
    for (let i2 = 0; i2 < buildings.length; i2++) {
      const building = buildings[i2];
      if (building.active && building.zIdx >= zIdx && // Prioritize layer0 building surfaces when on stairs
      (building.layer == layer || !!onStairs) && (building.layer != 1 || !onStairs)) {
        for (let i22 = 0; i22 < building.surfaces.length; i22++) {
          const s = building.surfaces[i22];
          for (let j = 0; j < s.colliders.length; j++) {
            const res = collider.intersectCircle(s.colliders[j], pos, 1e-4);
            if (res) {
              zIdx = building.zIdx;
              surface = s;
              break;
            }
          }
        }
      }
    }
    if (surface) {
      return groundSurface(surface.type, surface.data);
    }
    let onRiverShore = false;
    if (layer != 1) {
      const rivers = this.terrain?.rivers;
      for (let v = 0; v < rivers.length; v++) {
        const river = rivers[v];
        if (coldet.testPointAabb(pos, river.aabb.min, river.aabb.max) && math.pointInsidePolygon(pos, river.shorePoly) && (onRiverShore = true, math.pointInsidePolygon(pos, river.waterPoly))) {
          return groundSurface("water", {
            river
          });
        }
      }
    }
    return groundSurface(
      // Use a stone step sound if we're in the main-spring def
      math.pointInsidePolygon(pos, this.terrain?.grass) ? onRiverShore ? this.mapDef.biome.sound.riverShore : "grass" : math.pointInsidePolygon(pos, this.terrain?.shore) ? "sand" : "water"
    );
  }
  isInOcean(pos) {
    return !math.pointInsidePolygon(pos, this.terrain?.shore);
  }
  distanceToShore(pos) {
    return math.distToPolygon(pos, this.terrain?.shore);
  }
  insideStructureStairs(collision) {
    const structures = this.m_structurePool.m_getPool();
    for (let i2 = 0; i2 < structures.length; i2++) {
      const structure = structures[i2];
      if (structure.active && structure.insideStairs(collision)) {
        return true;
      }
    }
    return false;
  }
  getBuildingById(objId) {
    const buildings = this.m_buildingPool.m_getPool();
    for (let i2 = 0; i2 < buildings.length; i2++) {
      const building = buildings[i2];
      if (building.active && building.__id == objId) {
        return building;
      }
    }
    return null;
  }
  insideStructureMask(collision) {
    const structures = this.m_structurePool.m_getPool();
    for (let i2 = 0; i2 < structures.length; i2++) {
      const structure = structures[i2];
      if (structure.active && structure.insideMask(collision)) {
        return true;
      }
    }
    return false;
  }
  insideBuildingCeiling(collision, checkVisible) {
    const buildings = this.m_buildingPool.m_getPool();
    for (let i2 = 0; i2 < buildings.length; i2++) {
      const building = buildings[i2];
      if (building.active && (!checkVisible || building.ceiling.visionTicker > 0 && !building.ceilingDead) && building.isInsideCeiling(collision)) {
        return true;
      }
    }
    return false;
  }
}
class AirDrop {
  __id;
  __type;
  active;
  sprite = new Sprite();
  playedLandFx;
  landed;
  fallInstance;
  chuteDeployed;
  soundUpdateThrottle;
  pos;
  isNew;
  fallTicker;
  rad;
  constructor() {
    this.sprite.anchor.set(0.5, 0.5);
    this.sprite.visible = false;
  }
  m_init() {
    this.playedLandFx = false;
    this.landed = false;
    this.fallInstance = null;
    this.chuteDeployed = false;
    this.soundUpdateThrottle = 0;
    this.pos = v2.create(0, 0);
    this.isNew = false;
    this.fallTicker = 0;
  }
  m_free() {
    this.fallInstance?.stop();
    this.fallInstance = null;
    this.sprite.visible = false;
  }
  m_updateData(data, fullUpdate, isNew, ctx) {
    if (isNew) {
      this.isNew = true;
      this.fallTicker = data.fallT * GameConfig.airdrop.fallTime;
      const img = ctx.map.getMapDef().biome.airdrop.airdropImg;
      this.sprite.texture = Texture.from(img);
    }
    if (fullUpdate) {
      this.pos = v2.copy(data.pos);
    }
    this.landed = data.landed;
  }
}
class AirdropBarn {
  airdropPool = new Pool(AirDrop);
  m_free() {
    const airdrops = this.airdropPool.m_getPool();
    for (let i2 = 0; i2 < airdrops.length; i2++) {
      airdrops[i2].m_free();
    }
  }
  m_update(dt, activePlayer, camera, map, particleBarn, renderer, audioManager) {
    const airdrops = this.airdropPool.m_getPool();
    for (let i2 = 0; i2 < airdrops.length; i2++) {
      const airdrop = airdrops[i2];
      if (!airdrop.active) {
        continue;
      }
      airdrop.fallTicker += dt;
      const fallT = math.clamp(
        airdrop.fallTicker / GameConfig.airdrop.fallTime,
        0,
        1
      );
      let layer = 0;
      if ((util.sameLayer(layer, activePlayer.layer) || activePlayer.layer & 2) && (!(activePlayer.layer & 2) || !map.insideStructureMask(collider.createCircle(airdrop.pos, 1)))) {
        layer |= 2;
      }
      if (airdrop.landed && !airdrop.playedLandFx) {
        airdrop.playedLandFx = true;
        if (!airdrop.isNew) {
          for (let j = 0; j < 10; j++) {
            const vel = v2.randomUnit();
            particleBarn.addParticle("airdropSmoke", layer, airdrop.pos, vel);
          }
          const surface = map.getGroundSurface(airdrop.pos, layer);
          if (surface.type == "water") {
            for (let j = 0; j < 12; j++) {
              const ripplePos = v2.add(
                airdrop.pos,
                v2.mul(v2.randomUnit(), util.random(4.5, 6))
              );
              const part = particleBarn.addRippleParticle(
                ripplePos,
                layer,
                surface.data.rippleColor
              );
              part.setDelay(j * 0.075);
            }
          }
          const crashSound = surface.type == "water" ? "airdrop_crash_02" : "airdrop_crash_01";
          audioManager.playSound(crashSound, {
            channel: "sfx",
            soundPos: airdrop.pos,
            layer,
            filter: "muffled"
          });
          audioManager.stopSound(airdrop.fallInstance);
          airdrop.fallInstance = null;
        }
      }
      if (!airdrop.chuteDeployed && fallT <= 0.1) {
        audioManager.playSound("airdrop_chute_01", {
          channel: "sfx",
          soundPos: airdrop.pos,
          layer,
          rangeMult: 1.75
        });
        airdrop.chuteDeployed = true;
      }
      if (!airdrop.landed && !airdrop.fallInstance) {
        airdrop.fallInstance = audioManager.playSound("airdrop_fall_01", {
          channel: "sfx",
          soundPos: airdrop.pos,
          layer,
          rangeMult: 1.75,
          ignoreMinAllowable: true,
          offset: airdrop.fallTicker
        });
      }
      if (airdrop.fallInstance && airdrop.soundUpdateThrottle < 0) {
        airdrop.soundUpdateThrottle = 0.1;
        audioManager.updateSound(airdrop.fallInstance, "sfx", airdrop.pos, {
          layer,
          rangeMult: 1.75,
          ignoreMinAllowable: true
        });
      } else {
        airdrop.soundUpdateThrottle -= dt;
      }
      airdrop.rad = math.lerp((1 - fallT) ** 1.1, 5, 12);
      renderer.addPIXIObj(airdrop.sprite, layer, 1500, airdrop.__id);
      const screenPos = camera.m_pointToScreen(airdrop.pos);
      const screenScale = camera.m_pixels(2 * airdrop.rad / camera.m_ppu);
      airdrop.sprite.position.set(screenPos.x, screenPos.y);
      airdrop.sprite.scale.set(screenScale, screenScale);
      airdrop.sprite.tint = 16776960;
      airdrop.sprite.alpha = 1;
      airdrop.sprite.visible = !airdrop.landed;
      airdrop.isNew = false;
    }
  }
}
function createBullet(bullet, bulletBarn, flareBarn, playerBarn, renderer) {
  if (BulletDefs[bullet.bulletType].addFlare) {
    flareBarn.addFlare(bullet, playerBarn, renderer);
  } else {
    bulletBarn.addBullet(bullet, playerBarn, renderer);
  }
}
function playHitFx(particleName, soundName, pos, dir, layer, particleBarn, audioManager) {
  const numParticles = Math.floor(util.random(1, 2));
  let vel = v2.mul(dir, 9.5);
  for (let i2 = 0; i2 < numParticles; i2++) {
    vel = v2.rotate(vel, (Math.random() - 0.5) * Math.PI / 3);
    particleBarn.addParticle(particleName, layer, pos, vel);
  }
  audioManager.playGroup(soundName, {
    channel: "hits",
    soundPos: pos,
    layer,
    filter: "muffled"
  });
}
class BulletBarn {
  bullets = [];
  tracerColors = {};
  onMapLoad(map) {
    this.tracerColors = util.mergeDeep(
      GameConfig.tracerColors,
      map.getMapDef().biome.tracerColors
    );
  }
  addBullet(bullet, playerBarn, renderer) {
    let b = null;
    for (let i2 = 0; i2 < this.bullets.length; i2++) {
      if (!this.bullets[i2].alive && !this.bullets[i2].collided) {
        b = this.bullets[i2];
        break;
      }
    }
    if (!b) {
      b = {};
      b.alive = false;
      b.container = new Container();
      b.container.pivot.set(14.5, 0);
      b.container.visible = false;
      b.bulletTrail = Sprite.from("player-bullet-trail-02.img");
      b.bulletTrail.anchor.set(0.5, 0.5);
      b.container.addChild(b.bulletTrail);
      this.bullets.push(b);
    }
    const bulletDef = BulletDefs[bullet.bulletType];
    const variance = 1 + bullet.varianceT * bulletDef.variance;
    const distAdj = math.remap(bullet.distAdjIdx, 0, 16, -1, 1);
    let distance = bulletDef.distance / Math.pow(GameConfig.bullet.reflectDistDecay, bullet.reflectCount);
    if (bullet.clipDistance) {
      distance = bullet.distance;
    }
    b.alive = true;
    b.isNew = true;
    b.collided = false;
    b.scale = 1;
    b.playerId = bullet.playerId;
    b.startPos = v2.copy(bullet.pos);
    b.pos = v2.copy(bullet.pos);
    b.dir = v2.copy(bullet.dir);
    b.layer = bullet.layer;
    b.speed = bulletDef.speed * variance;
    b.distance = distance * variance + distAdj;
    b.damageSelf = bulletDef.shrapnel || bullet.reflectCount > 0;
    b.reflectCount = bullet.reflectCount;
    b.reflectObjId = bullet.reflectObjId;
    b.whizHeard = false;
    const angleRadians = Math.atan2(b.dir.x, b.dir.y);
    b.container.rotation = angleRadians - Math.PI / 2;
    b.layer = bullet.layer;
    const player = playerBarn.getPlayerById(b.playerId);
    if (player && player.layer & 2) {
      b.layer |= 2;
    }
    let tracerWidth = bulletDef.tracerWidth;
    if (bullet.trailSmall) {
      tracerWidth *= 0.5;
    }
    if (bullet.trailThick) {
      tracerWidth *= 2;
    }
    b.bulletTrail.scale.set(0.8, tracerWidth);
    b.tracerLength = bulletDef.tracerLength;
    b.suppressed = !!bulletDef.suppressed;
    const tracerColors = this.tracerColors[bulletDef.tracerColor];
    let tracerTint = tracerColors.regular;
    if (bullet.apRounds) {
      tracerTint = tracerColors.apSaturated;
    } else if (bullet.trailSaturated) {
      tracerTint = tracerColors.chambered || tracerColors.saturated;
    } else if (player?.surface?.data.isBright) {
      tracerTint = tracerColors.saturated;
    }
    b.bulletTrail.tint = tracerTint;
    b.tracerAlphaRate = tracerColors.alphaRate;
    b.tracerAlphaMin = tracerColors.alphaMin;
    b.bulletTrail.alpha = 1;
    if (b.reflectCount > 0) {
      b.bulletTrail.alpha *= 0.5;
    }
    b.container.visible = true;
    renderer.addPIXIObj(b.container, b.layer, 20);
  }
  m_update(dt, playerBarn, map, camera, activePlayer, renderer, particleBarn, audioManager) {
    const players = playerBarn.playerPool.m_getPool();
    for (let i2 = 0; i2 < this.bullets.length; i2++) {
      const b = this.bullets[i2];
      if (b.collided) {
        b.scale = math.max(b.scale - dt * 6, 0);
        if (b.scale <= 0) {
          b.collided = false;
          b.container.visible = false;
        }
      }
      if (b.alive) {
        const distLeft = b.distance - v2.length(v2.sub(b.startPos, b.pos));
        const distTravel = math.min(distLeft, dt * b.speed);
        const posOld = v2.copy(b.pos);
        b.pos = v2.add(b.pos, v2.mul(b.dir, distTravel));
        if (!activePlayer.m_netData.m_dead && util.sameAudioLayer(activePlayer.layer, b.layer) && v2.length(v2.sub(camera.m_pos, b.pos)) < 7.5 && !b.whizHeard && b.playerId != activePlayer.__id) {
          audioManager.playGroup("bullet_whiz", {
            soundPos: b.pos,
            fallOff: 4
          });
          b.whizHeard = true;
        }
        if (b.tracerAlphaRate && b.suppressed) {
          const rate = b.tracerAlphaRate;
          b.bulletTrail.alpha = math.max(
            b.tracerAlphaMin,
            b.bulletTrail.alpha * rate
          );
        }
        const colObjs = [];
        const obstacles = map.m_obstaclePool.m_getPool();
        for (let i22 = 0; i22 < obstacles.length; i22++) {
          const obstacle = obstacles[i22];
          if (!!obstacle.active && !obstacle.dead && !!util.sameLayer(obstacle.layer, b.layer) && obstacle.height >= GameConfig.bullet.height && (b.reflectCount <= 0 || obstacle.__id != b.reflectObjId)) {
            const res = collider.intersectSegment(
              obstacle.collider,
              posOld,
              b.pos
            );
            if (res) {
              colObjs.push({
                type: "obstacle",
                obstacleType: obstacle.type,
                collidable: obstacle.collidable,
                point: res.point,
                normal: res.normal
              });
            }
          }
        }
        for (let C = 0; C < players.length; C++) {
          const player = players[C];
          if (player.active && !player.m_netData.m_dead && (util.sameLayer(player.m_netData.m_layer, b.layer) || player.m_netData.m_layer & 2) && (player.__id != b.playerId || b.damageSelf)) {
            let panCollision = null;
            if (player.m_hasActivePan()) {
              const p = player;
              const panSeg = p.m_getPanSegment();
              const oldSegment = math.transformSegment(
                panSeg.p0,
                panSeg.p1,
                p.m_posOld,
                p.m_dirOld
              );
              const newSegment = math.transformSegment(
                panSeg.p0,
                panSeg.p1,
                p.m_pos,
                p.m_dir
              );
              const newIntersection = coldet.intersectSegmentSegment(
                posOld,
                b.pos,
                oldSegment.p0,
                oldSegment.p1
              );
              const oldIntersection = coldet.intersectSegmentSegment(
                posOld,
                b.pos,
                newSegment.p0,
                newSegment.p1
              );
              const finalIntersection = oldIntersection || newIntersection;
              if (finalIntersection) {
                const normal = v2.normalize(
                  v2.perp(v2.sub(newSegment.p1, newSegment.p0))
                );
                panCollision = {
                  point: finalIntersection.point,
                  normal
                };
              }
            }
            const collision = coldet.intersectSegmentCircle(
              posOld,
              b.pos,
              player.m_pos,
              player.m_rad
            );
            if (collision && (!panCollision || v2.length(v2.sub(collision.point, b.startPos)) < v2.length(v2.sub(panCollision.point, b.startPos)))) {
              colObjs.push({
                type: "player",
                player,
                point: collision.point,
                normal: collision.normal,
                layer: player.layer,
                collidable: true
              });
              if (player.m_hasPerk("steelskin")) {
                colObjs.push({
                  type: "pan",
                  point: v2.add(
                    collision.point,
                    v2.mul(collision.normal, 0.1)
                  ),
                  normal: collision.normal,
                  layer: player.layer,
                  collidable: false
                });
              }
            } else if (panCollision) {
              colObjs.push({
                type: "pan",
                point: panCollision.point,
                normal: panCollision.normal,
                layer: player.layer,
                collidable: true
              });
            }
            if (collision || panCollision) {
              break;
            }
          }
        }
        for (let i22 = 0; i22 < colObjs.length; i22++) {
          const col = colObjs[i22];
          col.dist = v2.length(v2.sub(col.point, posOld));
        }
        colObjs.sort((a, b2) => {
          return a.dist - b2.dist;
        });
        let shooterDead = false;
        const W = playerBarn.getPlayerById(b.playerId);
        if (W && (W.m_netData.m_dead || W.m_netData.m_downed)) {
          shooterDead = true;
        }
        let hit = false;
        for (let i22 = 0; i22 < colObjs.length; i22++) {
          const col = colObjs[i22];
          if (col.type == "obstacle") {
            const mapDef = MapObjectDefs[col?.obstacleType];
            playHitFx(
              mapDef.hitParticle,
              mapDef.sound.bullet,
              col.point,
              col.normal,
              b.layer,
              particleBarn,
              audioManager
            );
            hit = col.collidable;
          } else if (col.type == "player") {
            if (!shooterDead) {
              const Y = col.player;
              if (map.turkeyMode && W?.m_hasPerk("turkey_shoot")) {
                const J = v2.mul(v2.randomUnit(), util.random(3, 6));
                particleBarn.addParticle(
                  "turkeyFeathersHit",
                  Y.layer,
                  Y.m_pos,
                  J
                );
              }
              const Q = v2.sub(col.point, Y?.m_pos);
              Q.y *= -1;
              particleBarn.addParticle(
                "bloodSplat",
                Y.layer,
                v2.mul(Q, camera.m_ppu),
                v2.create(0, 0),
                1,
                1,
                Y.container
              );
              audioManager.playGroup("player_bullet_hit", {
                soundPos: Y.m_pos,
                fallOff: 1,
                layer: Y.layer,
                filter: "muffled"
              });
            }
            hit = col.collidable;
          } else if (col.type == "pan") {
            playHitFx(
              "barrelChip",
              GameObjectDefs.pan.sound.bullet,
              col.point,
              col.normal,
              col.layer,
              particleBarn,
              audioManager
            );
            hit = col.collidable;
          }
          if (hit) {
            b.pos = col.point;
            break;
          }
        }
        if (!(b.layer & 2)) {
          const $2 = map.m_structurePool.m_getPool();
          let ee = b.layer;
          for (let te = 0; te < $2.length; te++) {
            const re = $2[te];
            if (re.active) {
              let ae = false;
              let ie = false;
              for (let oe = 0; oe < re.stairs.length; oe++) {
                const se = re.stairs[oe];
                if (!se?.lootOnly && collider.intersectSegment(
                  se?.collision,
                  b.pos,
                  posOld
                )) {
                  ae = true;
                  break;
                }
              }
              for (let ne = 0; ne < re.mask.length; ne++) {
                if (collider.intersectSegment(re.mask[ne], b.pos, posOld)) {
                  ie = true;
                  break;
                }
              }
              if (ae && !ie) {
                ee |= 2;
              }
            }
          }
          if (ee != b.layer) {
            b.layer = ee;
            renderer.addPIXIObj(b.container, b.layer, 20);
          }
        }
        if (hit || math.eqAbs(distLeft, distTravel)) {
          b.collided = true;
          b.alive = false;
        }
        b.isNew = false;
      }
    }
  }
  createBulletHit(playerBarn, targetId, audioManager) {
    const player = playerBarn.getPlayerById(targetId);
    if (player) {
      audioManager.playGroup("player_bullet_hit", {
        soundPos: player.m_pos,
        fallOff: 1,
        layer: player.layer,
        filter: "muffled"
      });
    }
  }
  m_render(camera, _debug) {
    camera.m_pixels(1);
    for (let i2 = 0; i2 < this.bullets.length; i2++) {
      const b = this.bullets[i2];
      if (b.alive || b.collided) {
        const dist = v2.length(v2.sub(b.pos, b.startPos));
        const screenPos = camera.m_pointToScreen(b.pos);
        b.container.position.set(screenPos.x, screenPos.y);
        const screenScale = camera.m_pixels(1);
        const trailLength = math.min(b.tracerLength * 15, dist / 2);
        b.container.scale.set(screenScale * trailLength * b.scale, screenScale);
      }
    }
  }
}
function createDeadBodyText() {
  const nameStyle = {
    fontFamily: "Arial",
    fontWeight: "bold",
    fontSize: device.pixelRatio > 1 ? 30 : 24,
    align: "center",
    fill: 16777215,
    stroke: 0,
    strokeThickness: 0,
    dropShadow: true,
    dropShadowColor: "#000000",
    dropShadowBlur: 1,
    dropShadowAngle: Math.PI / 3,
    dropShadowDistance: 1
  };
  const nameText = new Text("", nameStyle);
  nameText.anchor.set(0.5, 0.5);
  nameText.scale.set(0.5, 0.5);
  return nameText;
}
class DeadBody {
  __id;
  __type;
  active = false;
  pos = v2.create(0, 0);
  container = new Container();
  sprite = Sprite.from("skull.img");
  nameText = createDeadBodyText();
  nameTextSet;
  layer;
  playerId;
  constructor() {
    this.container.addChild(this.sprite);
    this.sprite.anchor.set(0.5, 0.5);
    this.sprite.scale.set(0.4, 0.4);
    this.sprite.tint = 5921370;
    this.nameText.anchor.set(0.5, -1);
    this.nameText.tint = util.rgbToInt(util.hsvToRgb(0, 0, 0.5));
    this.container.addChild(this.nameText);
    this.container.visible = this.sprite;
  }
  m_init() {
  }
  m_free() {
    this.container.visible = false;
  }
  m_updateData(data, fullUpdate, isNew, _ctx) {
    this.pos = v2.copy(data.pos);
    if (fullUpdate) {
      this.layer = data.layer;
      this.playerId = data.playerId;
    }
    if (isNew) {
      this.nameTextSet = false;
      this.container.visible = true;
    }
  }
}
class DeadBodyBarn {
  deadBodyPool = new Pool(DeadBody);
  m_update(_dt, playerBarn, activePlayer, map, camera, renderer) {
    const deadBodies = this.deadBodyPool.m_getPool();
    for (let i2 = 0; i2 < deadBodies.length; i2++) {
      const d = deadBodies[i2];
      if (d.active) {
        if (!d.nameTextSet) {
          d.nameText.text = playerBarn.getPlayerName(
            d.playerId,
            activePlayer.__id,
            false
          );
          d.nameTextSet = true;
        }
        const col = collider.createCircle(d.pos, 1);
        const onStairs = map.insideStructureStairs(col);
        let layer = d.layer;
        let zOrd = 12;
        if (d.layer == 0 && activePlayer.layer == 0 && onStairs) {
          layer |= 2;
          zOrd += 100;
        }
        renderer.addPIXIObj(d.container, layer, zOrd, d.__id);
        const screenPos = camera.m_pointToScreen(d.pos);
        const screenScale = camera.m_pixels(1);
        d.container.position.set(screenPos.x, screenPos.y);
        d.container.scale.set(screenScale, screenScale);
      }
    }
  }
  getDeadBodyById(playerId) {
    const deadBodies = this.deadBodyPool.m_getPool();
    for (let i2 = 0; i2 < deadBodies.length; i2++) {
      const d = deadBodies[i2];
      if (d.active && d.playerId == playerId) {
        return d;
      }
    }
    return null;
  }
}
function lerpColor(t, a, b) {
  return t == 0 ? a : t == 1 ? b : util.lerpColor(t, a, b);
}
class Decal {
  __id;
  __type;
  active;
  decalRender = null;
  isNew;
  goreT;
  hasGore;
  type;
  pos;
  rot;
  scale;
  layer;
  goreKills;
  collider;
  surface;
  m_init() {
    this.isNew = false;
    this.goreT = 0;
  }
  m_free() {
    if (this.decalRender) {
      this.decalRender.free();
      this.decalRender = null;
    }
  }
  m_updateData(data, fullUpdate, isNew, ctx) {
    if (fullUpdate) {
      const def2 = MapObjectDefs[data.type];
      this.type = data.type;
      this.pos = v2.copy(data.pos);
      this.rot = math.oriToRad(data.ori);
      this.scale = data.scale;
      this.layer = data.layer;
      this.goreKills = data.goreKills;
      this.collider = collider.transform(
        def2.collision,
        this.pos,
        this.rot,
        this.scale
      );
      this.surface = def2.surface ? util.cloneDeep(def2.surface) : null;
      this.hasGore = def2.gore !== void 0;
      this.isNew = isNew;
      if (this.isNew) {
        this.decalRender = ctx.decalBarn.allocDecalRender();
        this.decalRender.init(this, ctx.map, ctx.renderer);
      }
    }
  }
  update(dt, _map) {
    if (this.hasGore) {
      const def2 = MapObjectDefs[this.type];
      let goreTarget = math.delerp(
        this.goreKills,
        def2.gore?.fade.start,
        def2.gore?.fade.end
      );
      goreTarget = Math.pow(goreTarget, def2.gore?.fade.pow);
      this.goreT = this.isNew ? goreTarget : math.lerp(dt * def2.gore?.fade.speed, this.goreT, goreTarget);
      if (def2.gore?.tint !== void 0) {
        const tint = lerpColor(this.goreT, def2.img.tint, def2.gore.tint);
        this.decalRender.setTint(tint);
      }
      if (def2.gore?.alpha !== void 0) {
        this.decalRender.spriteAlpha = math.lerp(
          this.goreT,
          def2.img.alpha,
          def2.gore.alpha
        );
      }
      if (def2.gore?.waterColor !== void 0 && this.surface) {
        this.surface.data.waterColor = lerpColor(
          this.goreT,
          def2.surface?.data.waterColor,
          def2.gore.waterColor
        );
      }
      if (def2.gore?.rippleColor !== void 0 && this.surface) {
        this.surface.data.rippleColor = lerpColor(
          this.goreT,
          def2.surface?.data.rippleColor,
          def2.gore.rippleColor
        );
      }
    }
    this.isNew = false;
  }
}
class DecalRender {
  sprite = new Sprite();
  pos;
  rot;
  scale;
  layer;
  zIdx;
  zOrd;
  imgScale;
  spriteAlpha;
  valueAdjust;
  inWater;
  flicker;
  flickerMin;
  flickerMax;
  flickerTarget;
  flickerRate;
  flickerCooldown;
  active;
  deactivated;
  fadeout;
  fadeAlpha;
  constructor() {
    this.sprite.anchor.set(0.5, 0.5);
    this.sprite.visible = false;
  }
  init(decal, map, _renderer) {
    const def2 = MapObjectDefs[decal.type];
    this.pos = v2.copy(decal.pos);
    this.rot = decal.rot;
    this.scale = decal.scale;
    this.layer = decal.layer;
    this.zIdx = def2.img.zIdx;
    this.zOrd = decal.__id;
    const imgDef = def2.img;
    this.sprite.texture = Texture.from(imgDef.sprite);
    this.sprite.alpha = 1;
    this.sprite.visible = true;
    this.imgScale = def2.img.scale;
    this.spriteAlpha = imgDef.alpha;
    this.valueAdjust = imgDef.ignoreAdjust ? 1 : map.getMapDef().biome.valueAdjust;
    this.setTint(imgDef.tint);
    this.inWater = false;
    if (def2.height < 0.25) {
      const surface = map.getGroundSurface(decal.pos, decal.layer);
      this.inWater = surface.type == "water";
    }
    this.flicker = def2.img.flicker;
    if (this.flicker) {
      this.flickerMin = def2.img.flickerMin;
      this.flickerMax = def2.img.flickerMax;
      this.flickerTarget = this.imgScale;
      this.flickerRate = def2.img.flickerRate;
      this.flickerCooldown = 0;
    }
    this.active = true;
    this.deactivated = false;
    this.fadeout = def2.lifetime !== void 0;
    this.fadeAlpha = 1;
  }
  free() {
    this.deactivated = true;
  }
  setTint(color) {
    if (this.valueAdjust < 1) {
      color = util.adjustValue(color, this.valueAdjust);
    }
    this.sprite.tint = color;
  }
  update(dt, camera, renderer) {
    if (this.deactivated && this.fadeout) {
      this.fadeAlpha = math.lerp(dt * 3, this.fadeAlpha, 0);
      if (this.fadeAlpha < 0.01) {
        this.fadeAlpha = 0;
      }
    }
    if (!!this.deactivated && (!this.fadeout || !!math.eqAbs(this.fadeAlpha, 0))) {
      this.sprite.visible = false;
      this.active = false;
    }
    if (this.flicker) {
      if (this.flickerCooldown < 0) {
        this.flickerTarget = util.random(this.flickerMin, this.flickerMax);
        this.flickerCooldown = util.random(0.05, this.flickerRate);
      } else {
        this.imgScale = math.lerp(
          this.flickerRate - this.flickerCooldown,
          this.imgScale,
          this.flickerTarget
        );
        this.flickerCooldown -= dt;
      }
    }
    const screenPos = camera.m_pointToScreen(this.pos);
    const screenScale = camera.m_pixels(this.scale * this.imgScale);
    this.sprite.position.set(screenPos.x, screenPos.y);
    this.sprite.scale.set(screenScale, screenScale);
    this.sprite.rotation = -this.rot;
    this.sprite.alpha = this.spriteAlpha * (this.inWater ? 0.3 : 1) * this.fadeAlpha;
    renderer.addPIXIObj(this.sprite, this.layer, this.zIdx, this.zOrd);
  }
}
class DecalBarn {
  decalPool = new Pool(Decal);
  decalRenders = [];
  allocDecalRender() {
    let decalRender = null;
    for (let i2 = 0; i2 < this.decalRenders.length; i2++) {
      const d = this.decalRenders[i2];
      if (!d.active) {
        decalRender = d;
        break;
      }
    }
    if (!decalRender) {
      decalRender = new DecalRender();
      this.decalRenders.push(decalRender);
    }
    return decalRender;
  }
  m_update(dt, camera, renderer, _debug) {
    const decals = this.decalPool.m_getPool();
    for (let i2 = 0; i2 < decals.length; i2++) {
      const decal = decals[i2];
      if (decal.active) {
        decal.update(dt);
      }
    }
    for (let i2 = 0; i2 < this.decalRenders.length; i2++) {
      const decalRender = this.decalRenders[i2];
      if (decalRender.active) {
        decalRender.update(dt, camera, renderer);
      }
    }
  }
  m_render(_camera, _debug, _layer) {
  }
}
class PhysicsParticle {
  active;
  pos;
  vel;
  layer;
  particle;
  ticker;
  colCount;
  constructor() {
    this.active = false;
  }
  init(pos, vel, layer, particle) {
    this.pos = v2.copy(pos);
    this.vel = v2.copy(vel);
    this.layer = layer;
    this.particle = particle;
    this.ticker = 0;
    this.colCount = 0;
    this.active = true;
  }
  update(dt, map, playerBarn) {
    const posOld = v2.copy(this.pos);
    this.pos = v2.add(this.pos, v2.mul(this.vel, dt));
    this.vel = v2.mul(this.vel, 1 / (1 + dt * 5));
    const colliders = [];
    const obstacles = map.m_obstaclePool.m_getPool();
    for (let i2 = 0; i2 < obstacles.length; i2++) {
      const obstacle = obstacles[i2];
      if (obstacle.active && !obstacle.dead && util.sameLayer(this.layer, obstacle.layer)) {
        colliders.push(obstacle.collider);
      }
    }
    const players = playerBarn.playerPool.m_getPool();
    for (let i2 = 0; i2 < players.length; i2++) {
      const player = players[i2];
      if (player.active && !player.dead && util.sameLayer(this.layer, player.layer)) {
        colliders.push(collider.createCircle(player.m_pos, player.m_rad, 0));
      }
    }
    const cols = [];
    for (let i2 = 0; i2 < colliders.length; i2++) {
      const res = collider.intersectSegment(colliders[i2], posOld, this.pos);
      if (res) {
        const dist = v2.length(v2.sub(res.point, posOld));
        cols.push({
          point: res.point,
          normal: res.normal,
          dist
        });
      }
    }
    cols.sort((a, b) => {
      return a.dist - b.dist;
    });
    if (cols.length > 0) {
      const col = cols[0];
      const dir = v2.normalizeSafe(this.vel, v2.create(1, 0));
      const spd = v2.length(this.vel);
      const reflectDir = v2.sub(
        dir,
        v2.mul(col.normal, v2.dot(col.normal, dir) * 2)
      );
      const friction = this.colCount++ > 0 ? 0.35 : 1;
      this.pos = v2.add(col.point, v2.mul(col.normal, 0.01));
      this.vel = v2.mul(reflectDir, spd * friction);
    }
    this.particle.pos = v2.copy(this.pos);
    this.ticker += dt;
    if (this.ticker >= this.particle.life) {
      this.particle.free();
      this.active = false;
    }
  }
}
class Explosion {
  active;
  type;
  done;
  pos;
  layer;
  ticker;
  lifetime;
  soundInstance;
  soundUpdateThrottle;
  constructor(_e) {
    this.active = false;
  }
  init(type, pos, layer) {
    const expType = ExplosionDefs[type].explosionEffectType;
    const def2 = ExplosionEffectDefs[expType];
    this.active = true;
    this.done = false;
    this.type = type;
    this.pos = v2.copy(pos);
    this.layer = layer;
    this.ticker = 0;
    this.lifetime = def2.lifetime;
    this.soundInstance = null;
    this.soundUpdateThrottle = 0;
  }
  free() {
    this.active = false;
  }
  update(dt, explosionBarn, particleBarn, audioManager, map, camera) {
    const expType = ExplosionDefs[this.type].explosionEffectType;
    const def2 = ExplosionEffectDefs[expType];
    if (this.ticker == 0) {
      let renderVisuals = true;
      if (this.type == "explosion_bomb_iron") {
        const col = collider.createCircle(this.pos, 0.5);
        if (map.insideBuildingCeiling(col, true)) {
          renderVisuals = false;
        }
      }
      if (renderVisuals && (def2.burst.particle && particleBarn.addParticle(
        def2.burst.particle,
        this.layer,
        this.pos,
        v2.create(0, 0),
        def2.burst.scale,
        0,
        null
      ), def2.scatter)) {
        for (let i2 = 0; i2 < def2.scatter.count; i2++) {
          const particle = particleBarn.addParticle(
            def2.scatter.particle,
            this.layer,
            this.pos,
            v2.create(0, 0),
            1,
            0,
            null
          );
          const physPart = explosionBarn.addPhysicsParticle();
          const vel = v2.mul(
            v2.randomUnit(),
            util.random(def2.scatter.speed.min, def2.scatter.speed.max)
          );
          physPart.init(this.pos, vel, this.layer, particle);
        }
      }
      const surface = map.getGroundSurface(this.pos, this.layer);
      const sound = surface.type == "water" ? def2.burst.sound.water : def2.burst.sound.grass;
      let detune = 0;
      if (def2.burst.sound.detune != void 0) {
        detune = def2.burst.sound.detune;
      }
      let volume = 1;
      if (def2.burst.sound.volume != void 0) {
        volume = def2.burst.sound.volume;
      }
      this.soundInstance = audioManager.playSound(sound, {
        channel: "sfx",
        soundPos: this.pos,
        layer: this.layer,
        filter: "muffled",
        rangeMult: 2,
        ignoreMinAllowable: true,
        detune,
        volumeScale: volume
      });
      if (surface.type == "water") {
        for (let i2 = 0; i2 < def2.rippleCount; i2++) {
          const maxRad = def2.rippleCount * 0.5;
          const ripplePos = v2.add(
            this.pos,
            v2.mul(v2.randomUnit(), util.random(0, maxRad))
          );
          const part = particleBarn.addRippleParticle(
            ripplePos,
            this.layer,
            surface.data.rippleColor
          );
          part.setDelay(i2 * 0.06);
        }
      }
    }
    if (this.soundInstance && this.soundUpdateThrottle < 0) {
      this.soundUpdateThrottle = 0.1;
      let volume = 1;
      if (def2.burst.sound.volume != void 0) {
        volume = def2.burst.sound.volume;
      }
      audioManager.updateSound(this.soundInstance, "sfx", this.pos, {
        layer: this.layer,
        filter: "muffled",
        volumeScale: volume
      });
    } else {
      this.soundUpdateThrottle -= dt;
    }
    this.ticker += dt;
    const shakeT = math.min(this.ticker / def2.shakeDur, 1);
    const shakeInt = math.lerp(shakeT, def2.shakeStr, 0);
    camera.m_addShake(this.pos, shakeInt);
    if (this.ticker >= this.lifetime) {
      this.active = false;
    }
  }
}
class ExplosionBarn {
  explosions;
  physicsParticles;
  constructor() {
    this.explosions = [];
    this.physicsParticles = [];
  }
  addExplosion(type, pos, layer) {
    let explosion = null;
    for (let i2 = 0; i2 < this.explosions.length; i2++) {
      if (!this.explosions[i2].active) {
        explosion = this.explosions[i2];
        break;
      }
    }
    if (!explosion) {
      explosion = new Explosion(this);
      this.explosions.push(explosion);
    }
    explosion.init(type, pos, layer);
  }
  addPhysicsParticle() {
    let p = null;
    for (let i2 = 0; i2 < this.physicsParticles.length; i2++) {
      const particle = this.physicsParticles[i2];
      if (!particle.active) {
        p = particle;
        break;
      }
    }
    if (!p) {
      p = new PhysicsParticle();
      this.physicsParticles.push(p);
    }
    return p;
  }
  m_update(dt, map, playerBarn, camera, particleBarn, audioManager, debug) {
    for (let i2 = 0; i2 < this.explosions.length; i2++) {
      const e = this.explosions[i2];
      if (e.active) {
        e.update(dt, this, particleBarn, audioManager, map, camera);
        if (!e.active) {
          e.free();
        }
      }
    }
    for (let i2 = 0; i2 < this.physicsParticles.length; i2++) {
      const p = this.physicsParticles[i2];
      if (p.active) {
        p.update(dt, map, playerBarn);
      }
    }
  }
}
const ExplosionEffectDefs = {
  frag: {
    burst: {
      particle: "explosionBurst",
      scale: 1,
      sound: {
        grass: "explosion_01",
        water: "explosion_02"
      }
    },
    rippleCount: 10,
    shakeStr: 0.2,
    shakeDur: 0.35,
    lifetime: 2
  },
  smoke: {
    burst: {
      particle: "explosionBurst",
      scale: 0,
      sound: {
        grass: "explosion_smoke_01",
        water: "explosion_smoke_01"
      }
    },
    rippleCount: 10,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 6
  },
  strobe: {
    burst: {
      particle: "explosionBurst",
      scale: 0.25,
      sound: {
        grass: "explosion_04",
        water: "explosion_02"
      }
    },
    rippleCount: 3,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 2
  },
  barrel: {
    burst: {
      particle: "explosionBurst",
      scale: 1,
      sound: {
        grass: "explosion_01",
        water: "explosion_02"
      }
    },
    rippleCount: 10,
    shakeStr: 0.2,
    shakeDur: 0.35,
    lifetime: 2
  },
  usas: {
    burst: {
      particle: "explosionUSAS",
      scale: 0.75,
      sound: {
        grass: "explosion_03",
        water: "explosion_02"
      }
    },
    rippleCount: 10,
    shakeStr: 0.12,
    shakeDur: 0.25,
    lifetime: 1.25
  },
  rounds: {
    burst: {
      particle: "explosionRounds",
      scale: 0.32,
      sound: {
        grass: "explosion_04",
        water: "explosion_04",
        detune: 500,
        volume: 0.5
      }
    },
    rippleCount: 1,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 1
  },
  rounds_sg: {
    burst: {
      particle: "explosionRounds",
      scale: 0.32,
      sound: {
        grass: "explosion_04",
        water: "explosion_04",
        detune: 500,
        volume: 0.2
      }
    },
    rippleCount: 1,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 1
  },
  mirv: {
    burst: {
      particle: "explosionMIRV",
      scale: 1,
      sound: {
        grass: "explosion_01",
        water: "explosion_02"
      }
    },
    rippleCount: 10,
    shakeStr: 0.2,
    shakeDur: 0.35,
    lifetime: 2
  },
  mirv_mini: {
    burst: {
      particle: "explosionMIRV",
      scale: 0.75,
      sound: {
        grass: "explosion_03",
        water: "explosion_02"
      }
    },
    rippleCount: 3,
    shakeStr: 0.1,
    shakeDur: 0.2,
    lifetime: 1.25
  },
  martyr_nade: {
    burst: {
      particle: "explosionBurst",
      scale: 0.75,
      sound: {
        grass: "explosion_03",
        water: "explosion_02"
      }
    },
    rippleCount: 3,
    shakeStr: 0.1,
    shakeDur: 0.2,
    lifetime: 1.25
  },
  snowball: {
    burst: {
      particle: "",
      scale: 0.75,
      sound: {
        grass: "snowball_01",
        water: "frag_water_01"
      }
    },
    scatter: {
      particle: "snowball_impact",
      count: 5,
      speed: {
        min: 5,
        max: 25
      }
    },
    rippleCount: 1,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 1
  },
  snowball_heavy: {
    burst: {
      particle: "",
      scale: 0.75,
      sound: {
        grass: "snowball_02",
        water: "frag_water_01"
      }
    },
    scatter: {
      particle: "snowball_impact",
      count: 8,
      speed: {
        min: 5,
        max: 25
      }
    },
    rippleCount: 1,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 1
  },
  potato: {
    burst: {
      particle: "",
      scale: 0.75,
      sound: {
        grass: "potato_01",
        water: "frag_water_01"
      }
    },
    scatter: {
      particle: "potato_impact",
      count: 5,
      speed: {
        min: 5,
        max: 25
      }
    },
    rippleCount: 1,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 1
  },
  potato_heavy: {
    burst: {
      particle: "",
      scale: 0.75,
      sound: {
        grass: "potato_02",
        water: "frag_water_01"
      }
    },
    scatter: {
      particle: "potato_impact",
      count: 8,
      speed: {
        min: 5,
        max: 25
      }
    },
    rippleCount: 1,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 1
  },
  potato_cannonball: {
    burst: {
      particle: "explosionPotato",
      scale: 0.75,
      sound: {
        grass: "explosion_05",
        water: "explosion_02"
      }
    },
    scatter: {
      particle: "potato_impact",
      count: 8,
      speed: {
        min: 5,
        max: 25
      }
    },
    rippleCount: 10,
    shakeStr: 0.12,
    shakeDur: 0.25,
    lifetime: 1.25
  },
  potato_smgshot: {
    burst: {
      particle: "",
      scale: 0.2,
      sound: {
        grass: "potato_01",
        water: "potato_02",
        detune: 250,
        volume: 0.5
      }
    },
    scatter: {
      particle: "potato_smg_impact",
      count: 2,
      speed: {
        min: 5,
        max: 25
      }
    },
    rippleCount: 1,
    shakeStr: 0,
    shakeDur: 0,
    lifetime: 0.5
  },
  bomb_iron: {
    burst: {
      particle: "explosionBomb",
      scale: 2,
      sound: {
        grass: "explosion_01",
        water: "explosion_02"
      }
    },
    rippleCount: 12,
    shakeStr: 0.25,
    shakeDur: 0.4,
    lifetime: 2
  }
};
class FlareBarn {
  bullets = [];
  addFlare(bullet, playerBarn, _renderer) {
    let b = null;
    for (let i2 = 0; i2 < this.bullets.length; i2++) {
      if (!this.bullets[i2].alive && !this.bullets[i2].collided) {
        b = this.bullets[i2];
        break;
      }
    }
    if (!b) {
      b = {};
      b.alive = false;
      b.flareContainer = new Container();
      b.flareContainer.visible = false;
      b.flare = Sprite.from("part-flare-01.img");
      b.flare.anchor.set(0.5, 0.5);
      b.flareContainer.addChild(b.flare);
      b.trailContainer = new Container();
      b.trailContainer.visible = false;
      b.trailContainer.pivot.set(14.5, 0);
      b.bulletTrail = Sprite.from("player-bullet-trail-02.img");
      b.bulletTrail.anchor.set(0.5, 0.5);
      b.trailContainer.addChild(b.bulletTrail);
      this.bullets.push(b);
    }
    const bulletDef = BulletDefs[bullet.bulletType];
    const variance = 1 + bullet.varianceT * bulletDef.variance;
    const distAdj = math.remap(bullet.distAdjIdx, 0, 32, -1, 1);
    const distance = bulletDef.distance / Math.pow(GameConfig.bullet.reflectDistDecay, bullet.reflectCount);
    b.alive = true;
    b.isNew = true;
    b.collided = false;
    b.flareScale = 0.01;
    b.trailScale = 1;
    b.timeAlive = 0;
    b.maxTimeAlive = 2.5;
    b.startPos = v2.copy(bullet.pos);
    b.pos = v2.copy(bullet.pos);
    b.dir = v2.copy(bullet.dir);
    b.layer = bullet.layer;
    b.speed = bulletDef.speed * variance;
    b.distance = distance * variance + distAdj;
    const angleRadians = Math.atan2(b.dir.x, b.dir.y);
    b.flareContainer.rotation = angleRadians - Math.PI / 2;
    b.trailContainer.rotation = angleRadians - Math.PI / 2;
    b.layer = bullet.layer;
    const player = playerBarn.getPlayerById(b.playerId);
    if (player && player.layer & 2) {
      b.layer |= 2;
    }
    const tracerColorDefs = GameConfig.tracerColors[bulletDef.tracerColor];
    let tracerColor = tracerColorDefs.regular;
    if (player?.isOnBrightSurface) {
      tracerColor = tracerColorDefs.saturated;
    }
    b.bulletTrail.scale.set(0.8, bulletDef.tracerWidth);
    b.tracerLength = bulletDef.tracerLength;
    b.bulletTrail.tint = tracerColor;
    b.tracerAlphaRate = tracerColorDefs.alphaRate;
    b.tracerAlphaMin = tracerColorDefs.alphaMin;
    b.bulletTrail.alpha = 1;
    b.flare.scale.set(1, 1);
    b.flare.tint = bulletDef.flareColor;
    b.flare.alpha = 0.8;
    b.maxFlareScale = bulletDef.maxFlareScale;
    b.smokeThrottle = 0;
    b.flareContainer.visible = true;
    b.trailContainer.visible = true;
  }
  m_update(dt, _playerBarn, map, _camera, activePlayer, renderer, _particleBarn, _audioManager) {
    for (let h = 0; h < this.bullets.length; h++) {
      const d = this.bullets[h];
      if (d.collided) {
        d.flareScale = math.max(d.flareScale - dt * 0.5, 0);
        d.flare.alpha = math.max(d.flare.alpha - dt, 0);
        d.trailScale = math.max(d.trailScale - dt * 6, 0);
        d.bulletTrail.alpha = math.max(d.bulletTrail.alpha - dt, 0);
        d.pos = v2.add(d.pos, v2.mul(d.dir, dt * d.speed));
        if (d.flare.alpha <= 0) {
          d.collided = false;
          d.flareContainer.visible = false;
          d.trailContainer.visible = false;
        }
      }
      if (d.alive) {
        if (d.tracerAlphaRate) {
          const rate = activePlayer.__id == d.playerId ? d.tracerAlphaRate : d.tracerAlphaRate * 0.9;
          d.bulletTrail.alpha = math.max(
            d.tracerAlphaMin,
            d.bulletTrail.alpha * rate
          );
        }
        d.timeAlive += dt;
        d.flareScale = math.easeOutExpo(d.timeAlive / d.maxTimeAlive) * d?.maxFlareScale;
        if (d.smokeThrottle <= 0) {
          d.smokeThrottle = 0.05;
        } else {
          d.smokeThrottle -= dt;
        }
        const distLeft = d.distance - v2.length(v2.sub(d.startPos, d.pos));
        const distTravel = math.min(distLeft, dt * d.speed);
        d.pos = v2.add(d.pos, v2.mul(d.dir, distTravel));
        if (math.eqAbs(distLeft, distTravel)) {
          d.collided = true;
          d.alive = false;
        }
        let layer = 0;
        if ((!!util.sameLayer(layer, activePlayer.layer) || !!(activePlayer.layer & 2)) && (!(activePlayer.layer & 2) || !map.insideStructureMask(collider.createCircle(d.pos, 1)))) {
          layer |= 2;
        }
        renderer.addPIXIObj(d.trailContainer, layer, 1e3, 0);
        renderer.addPIXIObj(d.flareContainer, layer, 1e3, 1);
        d.isNew = false;
      }
    }
  }
  m_render(camera) {
    for (let i2 = 0; i2 < this.bullets.length; i2++) {
      const b = this.bullets[i2];
      if (b.alive || b.collided) {
        const screenPos = camera.m_pointToScreen(b.pos);
        b.flareContainer.position.set(screenPos.x, screenPos.y);
        const screenScale = camera.m_pixels(1);
        b.flareContainer.scale.set(
          screenScale * b.flareScale,
          screenScale * b.flareScale
        );
        const dist = v2.length(v2.sub(b.pos, b.startPos));
        b.trailContainer.position.set(screenPos.x, screenPos.y);
        const trailLength = math.min(b.tracerLength * 15, dist / 2);
        b.trailContainer.scale.set(
          screenScale * trailLength * b.trailScale,
          screenScale
        );
      }
    }
  }
}
class Loot {
  __id;
  __type;
  active;
  ticker = 0;
  playDropSfx = false;
  container = new Sprite();
  sprite = new Sprite();
  emitter = null;
  updatedData;
  pos;
  visualPosOld;
  posInterpTicker;
  isOld;
  layer;
  type;
  count;
  isPreloadedGun;
  ownerId;
  rad;
  imgScale;
  constructor() {
    this.container.anchor.set(0.5, 0.5);
    this.container.scale.set(1, 1);
    this.sprite.anchor.set(0.5, 0.5);
    this.sprite.scale.set(0.8, 0.8);
    this.container.addChild(this.sprite);
  }
  m_init() {
    this.updatedData = false;
    this.visualPosOld = v2.create(0, 0);
  }
  m_free() {
    this.container.visible = false;
    if (this.emitter) {
      this.emitter.stop();
      this.emitter = null;
    }
  }
  m_updateData(data, fullUpdate, isNew, ctx) {
    this.updatedData = true;
    if (!v2.eq(data.pos, this.visualPosOld)) {
      this.visualPosOld = v2.copy(isNew ? data.pos : this.pos);
      this.posInterpTicker = 0;
    }
    this.pos = v2.copy(data.pos);
    if (fullUpdate) {
      this.layer = data.layer;
      this.type = data.type;
      this.count = data.count;
      this.isOld = data.isOld;
      this.isPreloadedGun = data.isPreloadedGun;
      this.ownerId = data.hasOwner ? data.ownerId : 0;
    }
    if (isNew) {
      const itemDef = GameObjectDefs[this.type];
      this.ticker = 0;
      if (this.isOld) {
        this.ticker = 10;
      }
      if (!this.isOld && itemDef.sound.drop && !ctx.map.lootDropSfxIds.includes(this.__id)) {
        this.playDropSfx = true;
      }
      this.rad = GameConfig.lootRadius[itemDef.type];
      this.imgScale = itemDef.lootImg?.scale * 1.25;
      const innerScale = itemDef.lootImg.innerScale || 0.8;
      this.sprite.scale.set(innerScale, innerScale);
      this.sprite.texture = Texture.from(itemDef.lootImg?.sprite);
      this.sprite.tint = itemDef.lootImg?.tint;
      this.container.texture = itemDef.lootImg.border ? Texture.from(itemDef.lootImg.border) : Texture.EMPTY;
      if (this.isPreloadedGun) {
        this.container.texture = Texture.from("loot-circle-outer-06.img");
      }
      const ammo = GameObjectDefs[itemDef.ammo];
      if (ammo) {
        this.container.tint = ammo.lootImg.tintDark;
      } else if (itemDef.lootImg.borderTint) {
        this.container.tint = itemDef.lootImg.borderTint;
      } else {
        this.container.tint = 0;
      }
      if (itemDef.type == "xp" && itemDef.emitter) {
        this.emitter = ctx.particleBarn.addEmitter(itemDef.emitter, {
          pos: this.pos,
          layer: this.layer
        });
      }
      this.sprite.rotation = itemDef?.lootImg?.rot ? itemDef.lootImg.rot : 0;
      this.sprite.scale.x = itemDef.lootImg.mirror ? -innerScale : innerScale;
      this.container.visible = true;
    }
    if (isNew || fullUpdate) {
      ctx.renderer.addPIXIObj(this.container, this.layer, 13, this.__id);
    }
  }
}
class LootBarn {
  lootPool = new Pool(Loot);
  closestLoot = null;
  m_update(dt, activePlayer, map, audioManager, camera, debug) {
    this.closestLoot = null;
    let closestDist = Number.MAX_VALUE;
    const loots = this.lootPool.m_getPool();
    for (let i2 = 0; i2 < loots.length; i2++) {
      const loot = loots[i2];
      if (loot.active) {
        if (util.sameLayer(loot.layer, activePlayer.layer) && !activePlayer.m_netData.m_dead && (loot.ownerId == 0 || loot.ownerId == activePlayer.__id)) {
          const pos2 = loot.pos;
          const rad = device.touch ? activePlayer.m_rad + loot.rad * GameConfig.player.touchLootRadMult : loot.rad;
          const toPlayer = v2.sub(activePlayer.m_pos, pos2);
          const distSq = v2.lengthSqr(toPlayer);
          if (distSq < rad * rad && distSq < closestDist) {
            closestDist = distSq;
            this.closestLoot = loot;
          }
        }
        loot.ticker += dt;
        if (loot.playDropSfx) {
          map.lootDropSfxIds.push(loot.__id);
          loot.playDropSfx = false;
          const itemDef = GameObjectDefs[loot.type];
          audioManager.playSound(itemDef.sound?.drop, {
            channel: "sfx",
            soundPos: loot.pos,
            layer: loot.layer,
            filter: "muffled"
          });
        }
        if (loot.emitter) {
          loot.emitter.pos = v2.add(loot.pos, v2.create(0, 0.1));
          loot.emitter.layer = loot.layer;
        }
        const scaleIn = math.delerp(loot.ticker, 0, 1);
        const scale = math.easeOutElastic(scaleIn, 0.75);
        let pos = loot.pos;
        if (camera.m_interpEnabled) {
          loot.posInterpTicker += dt;
          const posT = math.clamp(
            loot.posInterpTicker / camera.m_interpInterval,
            0,
            1
          );
          pos = v2.lerp(posT, loot.visualPosOld, loot.pos);
        }
        const screenPos = camera.m_pointToScreen(pos);
        const screenScale = camera.m_pixels(loot.imgScale * scale);
        loot.container.position.set(screenPos.x, screenPos.y);
        loot.container.scale.set(screenScale, screenScale);
      }
    }
  }
  getClosestLoot() {
    return this.closestLoot;
  }
}
if (window.self !== window.top) {
  let preventScroll = function(event) {
    let target = event.target;
    while (target && target !== document.body) {
      const overflowY = getComputedStyle(target).overflowY;
      const scrollable = overflowY === "auto" || overflowY === "scroll";
      if (scrollable) {
        return;
      }
      target = target.parentElement;
    }
    event.preventDefault();
  };
  window.addEventListener("wheel", preventScroll, { passive: false });
  window.addEventListener("touchmove", preventScroll, { passive: false });
  document.addEventListener("keydown", (event) => {
    const keysToPrevent = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "];
    if (keysToPrevent.includes(event.key)) {
      const target = event.target;
      const allowedTags = ["INPUT", "TEXTAREA", "SELECT", "BUTTON"];
      if (event.key === " " && (allowedTags.includes(target.tagName) || target.isContentEditable)) {
        return;
      }
      event.preventDefault();
    }
  });
}
function isWithinGameMonetize() {
  try {
    if (window !== window.parent && document.referrer) {
      const parentOrigin = new URL(document.referrer).origin;
      return parentOrigin.includes("gamemonetize");
    }
    return window.location.href.includes("gamemonetize");
  } catch (error) {
    console.error("Error in isWithinGameMonetize:", error);
    return window.location.href.includes("gamemonetize");
  }
}
function isWithinCrazyGames() {
  const urlParams = new URLSearchParams(self.location.search);
  return urlParams.has("crazygames");
}
function isWithinPoki() {
  try {
    if (window !== window.parent && document.referrer) {
      const parentOrigin = new URL(document.referrer).origin;
      return parentOrigin.includes("poki");
    }
    return false;
  } catch (error) {
    console.error("Error in isWithinPoki:", error);
    return false;
  }
}
class SDKManager {
  isPoki = isWithinPoki();
  isCrazyGames = isWithinCrazyGames();
  isGameMonetize = isWithinGameMonetize();
  isAnySDK;
  respawns = [];
  adCallback = () => {
  };
  constructor() {
    this.isAnySDK = this.isPoki || this.isCrazyGames || this.isGameMonetize;
  }
  async init() {
    if (this.isAnySDK) {
      $("#btn-start-fullscreen").hide();
      $("#left-column").hide();
      $("#btn-discord-top-right").show();
      $(".surviv-shirts").css("background-image", "url(./img/discord-promo.png)").html(`<a href="https://discord.gg/6uRdCdkTPt" target="_blank"></a>`);
    } else {
      $(".btn-kofi").show();
      $(".surviv-shirts").css("background-image", "url(./img/survev-kofi.png)").html(`<a href="https://ko-fi.com/survev" target="_blank"></a>`);
    }
    if (this.isPoki) {
      await this.initPoki();
    } else if (this.isGameMonetize) {
      this.initGameMonetize();
    } else if (this.isCrazyGames) {
      await this.initCrazyGames();
    }
  }
  disableBloodParticles() {
    return this.isCrazyGames;
  }
  gameLoadComplete() {
    if (this.isPoki) {
      window.PokiSDK.gameLoadingFinished();
    }
  }
  gamePlayStart() {
    if (this.isCrazyGames) {
      window.CrazyGames.SDK.game.gameplayStart();
    } else if (this.isPoki) {
      window.PokiSDK.gameplayStart();
    }
  }
  gamePlayStop() {
    if (this.isCrazyGames) {
      window.CrazyGames.SDK.game.gameplayStop();
    } else if (this.isPoki) {
      window.PokiSDK.gameplayStop();
    }
  }
  requestMidGameAd(callback) {
    if (this.isPoki) {
      this.requestPokiMidGameAd(callback);
    } else if (this.isGameMonetize) {
      this.requestGameMonetizeMidgameAd(callback);
    } else if (this.isCrazyGames) {
      this.requestCrazyGamesMidGameAd(callback);
    } else {
      callback();
    }
  }
  async getPlayerName() {
    if (this.isCrazyGames && window.CrazyGames.SDK.user.isUserAccountAvailable) {
      const user = await window.CrazyGames.SDK.user.getUser();
      if (user) {
        return user.username;
      }
    }
    return void 0;
  }
  hideInviteButton() {
    if (this.isCrazyGames) {
      window.CrazyGames.SDK.game.hideInviteButton();
    }
  }
  showInviteButton(roomID) {
    if (this.isCrazyGames) {
      window.CrazyGames.SDK.game.showInviteButton({
        roomID
      });
    }
  }
  supportsInviteLink() {
    return this.isCrazyGames || this.isPoki;
  }
  async getInviteLink(roomID) {
    if (this.isCrazyGames) {
      return window.CrazyGames.SDK.game.inviteLink({
        roomID
      });
    }
    if (this.isPoki) {
      return await window.PokiSDK.shareableURL({
        roomID
      });
    }
    return void 0;
  }
  getRoomInviteParam() {
    if (this.isCrazyGames) {
      return window.CrazyGames.SDK.game.getInviteParam("roomID");
    }
    if (this.isPoki) {
      return window.PokiSDK.getURLParam("roomID");
    }
    return void 0;
  }
  async requestAd(ad) {
    if (this.isCrazyGames) {
      const dimensions = ad.split("x").map(Number);
      await this.requestCrazyGamesBanner(
        `${void 0}_${ad}`,
        dimensions[0],
        dimensions[1]
      );
    }
  }
  removeAllAds() {
    if (this.isCrazyGames) {
      window.CrazyGames.SDK.banner.clearAllBanners();
    }
  }
  requestCrazyGamesMidGameAd(callback) {
    const callbacks = {
      adFinished: callback,
      adError: callback,
      adStarted: () => console.log("Start midgame ad")
    };
    window.CrazyGames.SDK.ad.requestAd("midgame", callbacks);
  }
  requestGameMonetizeMidgameAd(callback) {
    if (window.sdk && window.sdk.showBanner) {
      window.sdk.showBanner();
      this.adCallback;
    } else {
      callback();
    }
  }
  requestPokiMidGameAd(callback) {
    window.PokiSDK.commercialBreak(() => {
    }).then(() => {
      callback();
    });
  }
  initGameMonetize() {
    const gameMonetizeScript = document.createElement("script");
    gameMonetizeScript.src = "https://api.gamemonetize.com/sdk.js";
    gameMonetizeScript.id = "gamemonetize-sdk";
    document.head.appendChild(gameMonetizeScript);
    window.SDK_OPTIONS = {
      gameId: void 0,
      onEvent: (event) => {
        switch (event.name) {
          case "SDK_GAME_START":
            this.adCallback();
            this.adCallback = () => {
            };
            break;
          case "SDK_READY":
            console.log("Successfully loaded GameMonetize SDK");
            break;
        }
      }
    };
  }
  initPoki() {
    return new Promise(function(resolve) {
      const pokiScript = document.createElement("script");
      pokiScript.src = "https://game-cdn.poki.com/scripts/v2/poki-sdk.js";
      document.head.appendChild(pokiScript);
      pokiScript.addEventListener("load", () => {
        window.PokiSDK.init().then(() => {
          console.log("Poki SDK successfully initialized");
        }).catch(() => {
          console.log(
            "Initialized, something went wrong, load you game anyway"
          );
        });
        resolve();
      });
    });
  }
  initCrazyGames() {
    return new Promise((resolve, reject) => {
      const crazyGamesScript = document.createElement("script");
      crazyGamesScript.src = "https://sdk.crazygames.com/crazygames-sdk-v3.js";
      document.head.appendChild(crazyGamesScript);
      crazyGamesScript.addEventListener("load", async () => {
        await window.CrazyGames.SDK.init();
        this.requestCrazyGamesBanner(`${void 0}_728x90`, 728, 90);
        setInterval(() => {
          const mainMenu = document.getElementById("start-menu-wrapper");
          if (getComputedStyle(mainMenu).display != "none") {
            this.requestCrazyGamesBanner(
              `${void 0}_728x90`,
              728,
              90
            );
          }
        }, 6e4);
        resolve();
      });
      crazyGamesScript.addEventListener("error", () => {
        console.log("CrazyGames SDK load error");
        reject();
      });
    });
  }
  async requestCrazyGamesBanner(element, width, height) {
    try {
      await window.CrazyGames.SDK.banner.requestBanner({
        id: element,
        width,
        height
      });
    } catch (e) {
      console.log("Banner request error", e);
    }
  }
}
const SDK = new SDKManager();
class Range {
  constructor(min, max) {
    this.min = min;
    this.max = max;
  }
  getRandom() {
    return util.random(this.min, this.max);
  }
}
function getRangeValue(val) {
  if (val instanceof Range) {
    return val.getRandom();
  }
  return val;
}
function getColorValue(val) {
  return val instanceof Function ? val() : val;
}
class Particle {
  active = false;
  ticker = 0;
  def = {};
  sprite = new Sprite();
  hasParent = false;
  pos;
  vel;
  rot;
  delay;
  life;
  drag;
  rotVel;
  rotDrag;
  scaleUseExp;
  scale;
  scaleEnd;
  scaleExp;
  alphaUseExp;
  alpha;
  alphaEnd;
  alphaExp;
  alphaIn;
  alphaInStart;
  alphaInEnd;
  emitterIdx;
  valueAdjust;
  constructor() {
    this.sprite.anchor.set(0.5, 0.5);
    this.sprite.scale.set(1, 1);
    this.sprite.visible = false;
  }
  init(renderer, type, layer, pos, vel, scale, rot, parent, zOrd, valueAdjust) {
    const def2 = ParticleDefs[type];
    this.active = true;
    this.ticker = 0;
    if (parent) {
      this.hasParent = true;
      parent.addChild(this.sprite);
    } else {
      this.hasParent = false;
      renderer.addPIXIObj(this.sprite, layer, zOrd);
    }
    this.pos = v2.copy(pos);
    this.vel = v2.copy(vel);
    this.rot = rot;
    this.def = def2;
    this.delay = 0;
    this.life = getRangeValue(def2.life);
    this.drag = getRangeValue(def2.drag);
    this.rotVel = getRangeValue(def2.rotVel) * (Math.random() < 0.5 ? -1 : 1);
    this.rotDrag = getRangeValue(def2.drag) / 2;
    this.scaleUseExp = def2.scale.exp !== void 0;
    this.scale = getRangeValue(def2.scale.start) * scale;
    this.scaleEnd = this.scaleUseExp ? 0 : getRangeValue(def2.scale?.end) * scale;
    this.scaleExp = this.scaleUseExp ? def2.scale.exp : 0;
    this.alphaUseExp = def2.alpha.exp !== void 0;
    this.alpha = getRangeValue(def2.alpha.start);
    this.alphaEnd = this.alphaUseExp ? 0 : getRangeValue(def2.alpha?.end);
    this.alphaExp = this.alphaUseExp ? def2.alpha.exp : 0;
    this.alphaIn = def2.alphaIn !== void 0;
    this.alphaInStart = this.alphaIn ? getRangeValue(def2.alphaIn?.start) : 0;
    this.alphaInEnd = this.alphaIn ? getRangeValue(def2.alphaIn?.end) : 0;
    this.emitterIdx = -1;
    const tex = Array.isArray(def2.image) ? def2.image[Math.floor(Math.random() * def2.image.length)] : def2.image;
    this.sprite.texture = Texture.from(tex);
    this.sprite.visible = false;
    this.valueAdjust = def2.ignoreValueAdjust ? 1 : valueAdjust;
    this.setColor(getColorValue(def2.color));
    if (SDK.disableBloodParticles() && type == "bloodSplat") {
      this.sprite.renderable = false;
    } else {
      this.sprite.renderable = true;
    }
  }
  free() {
    this.active = false;
    this.sprite.visible = false;
  }
  setDelay(delay) {
    this.delay = delay;
  }
  setColor(color) {
    if (this.valueAdjust < 1) {
      color = util.adjustValue(color, this.valueAdjust);
    }
    this.sprite.tint = color;
  }
}
class Emitter {
  active = false;
  enabled;
  type;
  pos;
  dir;
  scale;
  layer;
  duration;
  radius;
  ticker;
  nextSpawn;
  spawnCount;
  parent;
  alpha;
  rateMult;
  zOrd;
  init(type, options = {}) {
    const def2 = EmitterDefs[type];
    this.active = true;
    this.enabled = true;
    this.type = type;
    this.pos = options.pos ? v2.copy(options.pos) : v2.create(0, 0);
    this.dir = options.dir ? v2.copy(options.dir) : v2.create(0, 1);
    this.scale = options.scale !== void 0 ? options.scale : 1;
    this.layer = options.layer || 0;
    this.duration = options.duration !== void 0 ? options.duration : Number.MAX_VALUE;
    this.radius = options.radius !== void 0 ? options.radius : def2.radius;
    this.ticker = 0;
    this.nextSpawn = 0;
    this.spawnCount = 0;
    this.parent = options.parent || null;
    this.alpha = 1;
    this.rateMult = options.rateMult !== void 0 ? options.rateMult : 1;
    const partDef = ParticleDefs[def2.particle];
    this.zOrd = def2.zOrd !== void 0 ? def2.zOrd : partDef.zOrd !== void 0 ? partDef.zOrd : 20;
  }
  free() {
    this.active = false;
  }
  stop() {
    this.duration = this.ticker;
  }
}
class ParticleBarn {
  constructor(renderer) {
    this.renderer = renderer;
    for (let i2 = 0; i2 < 256; i2++) {
      this.particles[i2] = new Particle();
    }
  }
  particles = [];
  emitters = [];
  valueAdjust = 1;
  onMapLoad(map) {
    this.valueAdjust = map.getMapDef().biome.valueAdjust;
  }
  m_free() {
    for (let i2 = 0; i2 < this.particles.length; i2++) {
      const sprite = this.particles[i2].sprite;
      sprite.parent?.removeChild(sprite);
      sprite.destroy({
        children: true
      });
    }
  }
  addParticle(type, layer, pos, vel, scale, rot, parent, zOrd) {
    let particle = null;
    for (let i2 = 0; i2 < this.particles.length; i2++) {
      if (!this.particles[i2].active) {
        particle = this.particles[i2];
        break;
      }
    }
    if (!particle) {
      particle = new Particle();
      this.particles.push(particle);
    }
    scale = scale !== void 0 ? scale : 1;
    rot = rot !== void 0 ? rot : Math.random() * Math.PI * 2;
    zOrd = zOrd !== void 0 ? zOrd : ParticleDefs[type].zOrd || 20;
    particle.init(
      this.renderer,
      type,
      layer,
      pos,
      vel,
      scale,
      rot,
      parent,
      zOrd,
      this.valueAdjust
    );
    return particle;
  }
  addRippleParticle(pos, layer, color) {
    const particle = this.addParticle(
      "waterRipple",
      layer,
      pos,
      v2.create(0, 0),
      1,
      0,
      null
    );
    particle.setColor(color);
    return particle;
  }
  addEmitter(type, options = {}) {
    let emitter = null;
    for (let i2 = 0; i2 < this.emitters.length; i2++) {
      if (!this.emitters[i2].active) {
        emitter = this.emitters[i2];
        break;
      }
    }
    if (!emitter) {
      emitter = new Emitter();
      this.emitters.push(emitter);
    }
    emitter.init(type, options);
    return emitter;
  }
  m_update(dt, camera, _debug) {
    for (let i2 = 0; i2 < this.emitters.length; i2++) {
      const e = this.emitters[i2];
      if (e.active && e.enabled) {
        e.ticker += dt;
        e.nextSpawn -= dt;
        const def2 = EmitterDefs[e.type];
        while (e.nextSpawn <= 0 && e.spawnCount < def2.maxCount) {
          const rad = e.scale * e.radius;
          const pos = v2.add(e.pos, util.randomPointInCircle(rad));
          const dir = v2.rotate(e.dir, (Math.random() - 0.5) * def2.angle);
          const vel = v2.mul(dir, getRangeValue(def2.speed));
          const rot = getRangeValue(def2.rot);
          const particle = this.addParticle(
            def2.particle,
            e.layer,
            pos,
            vel,
            e.scale,
            rot,
            e.parent,
            e.zOrd
          );
          particle.emitterIdx = i2;
          let rate = getRangeValue(def2.rate);
          if (def2.maxRate) {
            const w = math.easeInExpo(
              math.min(1, e.ticker / def2.maxElapsed)
            );
            const maxRate = getRangeValue(def2.maxRate);
            rate = math.lerp(w, rate, maxRate);
          }
          e.nextSpawn += rate * e.rateMult;
          e.spawnCount++;
        }
        if (e.ticker >= e.duration) {
          e.free();
        }
      }
    }
    for (let i2 = 0; i2 < this.particles.length; i2++) {
      const p = this.particles[i2];
      if (p.active && (p.ticker += dt, p.ticker >= p.delay)) {
        const t = math.min((p.ticker - p.delay) / p.life, 1);
        p.vel = v2.mul(p.vel, 1 / (1 + dt * p.drag));
        p.pos = v2.add(p.pos, v2.mul(p.vel, dt));
        p.rotVel *= 1 / (1 + dt * p.rotDrag);
        p.rot += p.rotVel * dt;
        if (p.scaleUseExp) {
          p.scale += dt * p.scaleExp;
        }
        if (p.alphaUseExp) {
          p.alpha = math.max(p.alpha + dt * p.alphaExp, 0);
        }
        const pos = p.hasParent ? p.pos : camera.m_pointToScreen(p.pos);
        let scale = p.scaleUseExp ? p.scale : math.remap(
          t,
          p.def.scale.lerp?.min,
          p.def.scale.lerp?.max,
          p.scale,
          p.scaleEnd
        );
        let alpha = p.alphaUseExp ? p.alpha : math.remap(
          t,
          p.def.alpha.lerp?.min,
          p.def.alpha.lerp?.max,
          p.alpha,
          p.alphaEnd
        );
        if (p.alphaIn && t < p.def.alphaIn?.lerp?.max) {
          alpha = math.remap(
            t,
            p.def.alphaIn?.lerp?.min,
            p.def.alphaIn?.lerp?.max,
            p.alphaInStart,
            p.alphaInEnd
          );
        }
        if (p.emitterIdx >= 0) {
          alpha *= this.emitters[p.emitterIdx].alpha;
        }
        if (!p.hasParent) {
          scale = camera.m_pixels(scale);
        }
        p.sprite.position.set(pos.x, pos.y);
        p.sprite.scale.set(scale, scale);
        p.sprite.rotation = p.rot;
        p.sprite.alpha = alpha;
        p.sprite.visible = true;
        if (t >= 1) {
          p.free();
        }
      }
    }
  }
}
const ParticleDefs = {
  archwayBreak: {
    image: ["part-panel-01.img"],
    life: new Range(0.5, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.2, 0.35),
      end: new Range(0.08, 0.12),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.06, 0.84, util.random(0.46, 0.48)));
    }
  },
  bloodSplat: {
    image: ["part-splat-01.img", "part-splat-02.img", "part-splat-03.img"],
    life: 0.5,
    drag: 1,
    rotVel: 0,
    scale: {
      start: 0.04,
      end: new Range(0.15, 0.2),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(16711680, 1, util.random(0.45, 0.8)));
    }
  },
  barrelPlank: {
    image: ["part-plank-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(3, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.08, 0.18),
      end: new Range(0.07, 0.17),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.09, 0.8, util.random(0.66, 0.68)));
    }
  },
  barrelChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.01, 0.02, util.random(0.38, 0.41)));
    }
  },
  barrelBreak: {
    image: ["part-spark-02.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.01, 0.02, util.random(0.38, 0.41)));
    }
  },
  blackChip: {
    image: ["part-woodchip-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0.08, util.random(0.16, 0.18)));
    }
  },
  blueChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.64, 1, util.random(0.83, 0.85)));
    }
  },
  book: {
    image: ["part-book-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(3, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.09, 0.19),
      end: new Range(0.07, 0.17),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.08, 0.42, util.random(0.72, 0.74)));
    }
  },
  bottleBrownChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.02, 0.04),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: 7878664
  },
  bottleBrownBreak: {
    image: ["part-spark-02.img"],
    life: new Range(0.4, 0.8),
    drag: new Range(1, 4),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.03, 0.06),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.8,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: 7878664
  },
  bottleBlueChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.02, 0.04),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: 19544
  },
  bottleWhiteBreak: {
    image: ["part-spark-02.img"],
    life: new Range(0.4, 0.8),
    drag: new Range(1, 4),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.03, 0.06),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.75,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: 16777215
  },
  bottleWhiteChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.02, 0.04),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.75,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: 16777215
  },
  bottleBlueBreak: {
    image: ["part-spark-02.img"],
    life: new Range(0.4, 0.8),
    drag: new Range(1, 4),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.03, 0.06),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.8,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: 19544
  },
  brickChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0.71, util.random(0.32, 0.34)));
    }
  },
  clothBreak: {
    image: ["part-cloth-01.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.95, 1)));
    }
  },
  clothHit: {
    image: ["part-cloth-01.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.95, 1)));
    }
  },
  depositBoxGreyBreak: {
    image: ["part-plate-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(7, 8),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.15, 0.25),
      end: new Range(0.12, 0.2),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.36, 0.38)));
    }
  },
  depositBoxGoldBreak: {
    image: ["part-plate-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(6, 8),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.2, 0.35),
      end: new Range(0.18, 0.25),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.11, 0.84, util.random(0.64, 0.66)));
    }
  },
  glassChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: 8444415
  },
  glassPlank: {
    image: ["part-plank-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.1, 0.2),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 8444415
  },
  goldChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.11, 0.84, util.random(0.88, 0.9)));
    }
  },
  pinkChip: {
    image: ["part-spark-02.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0.52, util.random(0.98, 1)));
    }
  },
  ltblueChip: {
    image: ["part-spark-02.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.5, 0.65, util.random(0.98, 1)));
    }
  },
  yellowChip: {
    image: ["part-spark-02.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.16, 0.73, util.random(0.98, 1)));
    }
  },
  greenChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.4, 0.18, util.random(0.5, 0.62)));
    }
  },
  greenPlank: {
    image: ["part-plank-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.08, 0.16),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 3884335
  },
  greenhouseBreak: {
    image: ["part-spark-02.img", "part-plate-01.img", "part-panel-01.img"],
    life: new Range(0.5, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.25, 0.55),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.8,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: 8444415
  },
  hutBreak: {
    image: ["part-panel-01.img"],
    life: new Range(0.5, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.25, 0.55),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.1, 0.81, util.random(0.78, 0.82)));
    }
  },
  leaf: {
    image: ["part-leaf-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.5, 0.75)));
    }
  },
  leafPrickly: {
    image: ["part-leaf-01sv.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.8, 0.85)));
    }
  },
  leafRiver: {
    image: ["part-leaf-02.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.5, 0.75)));
    }
  },
  lockerBreak: {
    image: ["part-plate-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(7, 8),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.15, 0.2),
      end: new Range(0.12, 0.15),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.1, 0.23, util.random(0.51, 0.53)));
    }
  },
  ltgreenChip: {
    image: ["part-woodchip-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.2, 0.42, util.random(0.38, 0.42)));
    }
  },
  outhouseChip: {
    image: ["part-woodchip-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.08, 0.57, util.random(0.4, 0.46)));
    }
  },
  outhouseBreak: {
    image: ["part-panel-01.img"],
    life: new Range(0.5, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.25, 0.55),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.08, 0.79, util.random(0.52, 0.54)));
    }
  },
  outhousePlank: {
    image: ["part-plank-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.1, 0.2),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.08, 0.57, util.random(0.4, 0.46)));
    }
  },
  potChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.06, 0.84, util.random(0.73, 0.77)));
    }
  },
  potBreak: {
    image: ["part-pot-01.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.06, 0.84, util.random(0.73, 0.77)));
    }
  },
  potatoChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.075, 0.43, util.random(0.48, 0.5)));
    }
  },
  potatoBreak: {
    image: ["part-pumpkin-01.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.075, 0.43, util.random(0.48, 0.5)));
    }
  },
  pumpkinChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.07, 1, util.random(0.98, 1)));
    }
  },
  pumpkinBreak: {
    image: ["part-pumpkin-01.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.08, 1, util.random(0.95, 0.97)));
    }
  },
  squashChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.31, 0.86, util.random(0.35, 0.36)));
    }
  },
  squashBreak: {
    image: ["part-pumpkin-01.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.31, 0.86, util.random(0.35, 0.36)));
    }
  },
  redChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.98, 1, util.random(0.52, 0.54)));
    }
  },
  redBreak: {
    image: ["part-spark-02.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.98, 1, util.random(0.52, 0.54)));
    }
  },
  redPlank: {
    image: ["part-plank-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.1, 0.2),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.02, 1, util.random(0.26, 0.28)));
    }
  },
  rockChip: {
    image: ["map-stone-01.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.5, 0.75)));
    }
  },
  rockBreak: {
    image: ["map-stone-01.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.5, 0.75)));
    }
  },
  rockEyeChip: {
    image: ["map-stone-01.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.03, 0.06),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: 2696225
  },
  rockEyeBreak: {
    image: ["map-stone-01.img"],
    life: new Range(0.8, 1),
    drag: new Range(4, 12),
    rotVel: 0,
    scale: {
      start: new Range(0.05, 0.1),
      end: new Range(0.03, 0.06),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 2696225
  },
  shackBreak: {
    image: ["part-panel-01.img"],
    life: new Range(0.5, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.25, 0.55),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.1, 0.24, util.random(0.38, 0.41)));
    }
  },
  shackGreenBreak: {
    image: ["part-panel-01.img"],
    life: new Range(0.5, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.25, 0.55),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 5730406
  },
  tanChip: {
    image: ["part-woodchip-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.1, 0.35, util.random(0.48, 0.52)));
    }
  },
  teahouseBreak: {
    image: ["part-panel-01.img"],
    life: new Range(0.5, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.25, 0.55),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.6, 0.31, util.random(0.42, 0.45)));
    }
  },
  teapavilionBreak: {
    image: ["part-panel-01.img"],
    life: new Range(0.5, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.25, 0.55),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0.8, util.random(0.6, 0.62)));
    }
  },
  toiletBreak: {
    image: ["part-spark-02.img"],
    life: new Range(0.8, 1),
    drag: new Range(1, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.97, 0, util.random(0.95, 0.97)));
    }
  },
  toiletMetalBreak: {
    image: ["part-spark-02.img"],
    life: new Range(0.8, 1),
    drag: new Range(4, 5),
    rotVel: 0,
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.01, 0.02, util.random(0.38, 0.41)));
    }
  },
  turkeyFeathersHit: {
    image: ["part-feather-01.img", "part-feather-02.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 10),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.1, 0.2),
      end: new Range(0.08, 0.12),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return 16777215;
    }
  },
  turkeyFeathersDeath: {
    image: ["part-feather-01.img", "part-feather-02.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 10),
    rotVel: new Range(0, Math.PI * 3),
    scale: {
      start: new Range(0.15, 0.25),
      end: new Range(0.12, 0.2),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return 16777215;
    }
  },
  whiteChip: {
    image: ["part-spark-02.img"],
    life: 0.5,
    drag: new Range(1, 10),
    rotVel: 0,
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.97, 0, util.random(0.95, 0.97)));
    }
  },
  whitePlank: {
    image: ["part-plank-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.1, 0.2),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.97, 0, util.random(0.95, 0.97)));
    }
  },
  windowBreak: {
    image: ["part-spark-02.img"],
    life: new Range(0.4, 0.8),
    drag: new Range(1, 4),
    rotVel: new Range(Math.PI * 1, Math.PI * 6),
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.8,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: 8444415
  },
  woodChip: {
    image: ["part-woodchip-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.04, 0.08),
      end: new Range(0.01, 0.02),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.05, 1, util.random(0.35, 0.45)));
    }
  },
  woodLog: {
    image: ["part-log-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.1, 0.2),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.05, 1, util.random(0.35, 0.45)));
    }
  },
  woodPlank: {
    image: ["part-plank-01.img"],
    life: new Range(1, 1.5),
    drag: new Range(1, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.1, 0.2),
      end: new Range(0.08, 0.18),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.05, 1, util.random(0.25, 0.35)));
    }
  },
  woodShard: {
    image: ["part-spark-02.img"],
    life: new Range(1, 1.5),
    drag: new Range(3, 5),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: new Range(0.06, 0.15),
      end: new Range(0.02, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.05, 1, util.random(0.25, 0.35)));
    }
  },
  "9mm": {
    image: ["part-shell-01.img"],
    life: new Range(0.5, 0.75),
    drag: new Range(3, 4),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: 0.0625,
      end: 0.0325,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  "9mm_cursed": {
    image: ["part-shell-01.img"],
    life: new Range(0.5, 0.75),
    drag: new Range(3, 4),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: 0.0625,
      end: 0.0325,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  "762mm": {
    image: ["part-shell-02.img"],
    life: new Range(0.75, 1),
    drag: new Range(1.5, 2.5),
    rotVel: new Range(Math.PI * 2.5, Math.PI * 2.5),
    scale: {
      start: 0.075,
      end: 0.045,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.925, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  "556mm": {
    image: ["part-shell-04.img"],
    life: new Range(0.75, 1),
    drag: new Range(1.5, 2.5),
    rotVel: new Range(Math.PI * 2.5, Math.PI * 2.5),
    scale: {
      start: 0.075,
      end: 0.045,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.925, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  "12gauge": {
    image: ["part-shell-03.img"],
    life: new Range(0.5, 0.75),
    drag: new Range(1, 2),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: 0.1,
      end: 0.05,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  "50AE": {
    image: ["part-shell-01.img"],
    life: new Range(0.5, 0.75),
    drag: new Range(3, 4),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: 0.0625,
      end: 0.0325,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  "308sub": {
    image: ["part-shell-05.img"],
    life: new Range(0.5, 0.75),
    drag: new Range(3, 4),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: 0.0625,
      end: 0.0325,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  flare: {
    image: ["part-shell-03.img"],
    life: new Range(0.5, 0.75),
    drag: new Range(1, 2),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: 0.1,
      end: 0.05,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  "45acp": {
    image: ["part-shell-01.img"],
    life: new Range(0.5, 0.75),
    drag: new Range(3, 4),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: 0.07,
      end: 0.04,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  potato_ammo: {
    image: ["part-wedge-01.img"],
    life: new Range(0.5, 0.75),
    drag: new Range(3, 4),
    rotVel: new Range(Math.PI * 3, Math.PI * 3),
    scale: {
      start: 0.07,
      end: 0.04,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.95, 1)
    },
    color: 16777215
  },
  bugle_ammo: {
    image: ["part-note-02.img"],
    life: new Range(1.25, 1.3),
    drag: new Range(3, 4),
    rotVel: new Range(Math.PI * 1, Math.PI * 1),
    scale: {
      start: 0.1,
      end: 0.14,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.5, 1)
    },
    color: 16767488
  },
  fragPin: {
    image: ["part-frag-pin-01.img"],
    life: new Range(0.5, 0.5),
    drag: new Range(0.9, 1),
    rotVel: 0,
    scale: {
      start: 0.18,
      end: 0.14,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.5, 1)
    },
    color: 16777215
  },
  fragLever: {
    image: ["part-frag-lever-01.img"],
    life: new Range(0.5, 0.5),
    drag: new Range(0.9, 1),
    rotVel: Math.PI * 9,
    scale: {
      start: 0.18,
      end: 0.14,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.5, 1)
    },
    color: 16777215
  },
  explosionBurst: {
    image: ["part-frag-burst-01.img"],
    life: 0.5,
    drag: 0,
    rotVel: 0,
    scale: {
      start: 1,
      end: 4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.065, 1, util.random(0.98, 0.99)));
    }
  },
  explosionMIRV: {
    image: ["part-frag-burst-01.img"],
    life: 0.5,
    drag: 0,
    rotVel: 0,
    scale: {
      start: 1,
      end: 4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 1, util.random(0.82, 0.84)));
    }
  },
  explosionSmoke: {
    image: ["part-smoke-01.img"],
    life: new Range(2, 3),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  explosionUSAS: {
    image: ["part-frag-burst-01.img"],
    life: 0.5,
    drag: 0,
    rotVel: 0,
    scale: {
      start: 1,
      end: 4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.08, 1, util.random(0.98, 0.99)));
    }
  },
  explosionRounds: {
    image: ["part-frag-burst-03.img"],
    life: 0.5,
    drag: 0,
    rotVel: 0,
    scale: {
      start: 1,
      end: 4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.08, 0.7, util.random(0.75, 0.8)));
    }
  },
  explosionBomb: {
    image: ["part-frag-burst-02.img"],
    life: 0.5,
    drag: 0,
    rotVel: 0,
    scale: {
      start: 1,
      end: 4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: 16777215
  },
  explosionPotato: {
    image: ["part-frag-burst-01.img"],
    life: 0.5,
    drag: 0,
    rotVel: 0,
    scale: {
      start: 1,
      end: 4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: 11363866
  },
  explosionPotatoSMG: {
    image: ["part-frag-burst-01.img"],
    life: 0.5,
    drag: 0,
    rotVel: 0,
    scale: {
      start: 1,
      end: 4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.75, 1)
    },
    color: 12888074
  },
  airdropSmoke: {
    image: ["part-smoke-02.img", "part-smoke-03.img"],
    zOrd: 499,
    life: new Range(1, 1.5),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.67, 0.72),
      end: new Range(0.55, 0.61),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  airdropCrate01: {
    image: ["part-airdrop-01.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(2, 2.25),
    rotVel: new Range(Math.PI * 1, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  airdropCrate01h: {
    image: ["part-airdrop-01h.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(2, 2.25),
    rotVel: new Range(Math.PI * 1, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  airdropCrate01x: {
    image: ["part-airdrop-01x.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(2, 2.25),
    rotVel: new Range(Math.PI * 1, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  airdropCrate02: {
    image: ["part-airdrop-02.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(1.85, 2.15),
    rotVel: new Range(0, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  airdropCrate02h: {
    image: ["part-airdrop-02h.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(1.85, 2.15),
    rotVel: new Range(0, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  airdropCrate02x: {
    image: ["part-airdrop-02x.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(1.85, 2.15),
    rotVel: new Range(0, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  airdropCrate03: {
    image: ["part-airdrop-03.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(2, 2.25),
    rotVel: new Range(Math.PI * 1, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  airdropCrate04: {
    image: ["part-airdrop-04.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(1.85, 2.15),
    rotVel: new Range(0, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  classShell01a: {
    image: ["part-class-shell-01a.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(2, 2.25),
    rotVel: new Range(Math.PI * 1, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  classShell01b: {
    image: ["part-class-shell-01b.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(1.85, 2.15),
    rotVel: new Range(0, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  classShell02a: {
    image: ["part-class-shell-02a.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(2, 2.25),
    rotVel: new Range(Math.PI * 1, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  classShell02b: {
    image: ["part-class-shell-02b.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(1.85, 2.15),
    rotVel: new Range(0, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  classShell03a: {
    image: ["part-class-shell-03a.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(2, 2.25),
    rotVel: new Range(Math.PI * 1, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  classShell03b: {
    image: ["part-class-shell-03b.img"],
    life: new Range(0.85, 1.15),
    drag: new Range(1.85, 2.15),
    rotVel: new Range(0, Math.PI * 2),
    scale: {
      start: 0.5,
      end: 0.4,
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16777215
  },
  cabinSmoke: {
    image: ["part-smoke-02.img", "part-smoke-03.img"],
    life: new Range(3, 3.25),
    drag: new Range(0.2, 0.22),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.2, 0.25),
      end: new Range(0.6, 0.65),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.7,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 0.7,
      lerp: new Range(0, 0.1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.69, 0.695)));
    }
  },
  bathhouseSteam: {
    image: ["part-smoke-02.img", "part-smoke-03.img"],
    life: new Range(10, 12),
    drag: new Range(0.04, 0.06),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.2, 0.25),
      end: new Range(0.9, 0.95),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.5,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 0.5,
      lerp: new Range(0, 0.1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.99, 0.995)));
    }
  },
  bunkerBubbles: {
    image: ["player-ripple-01.img"],
    zOrd: 10,
    life: new Range(2.25, 2.5),
    drag: new Range(1.85, 2.15),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.2, 0.25),
      end: new Range(0.65, 0.7),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 0.25,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.95, 1)));
    }
  },
  waterRipple: {
    image: ["player-ripple-01.img"],
    zOrd: 10,
    life: 1.75,
    drag: 0,
    rotVel: 0,
    scale: {
      start: 0.15,
      exp: 0.5
    },
    alpha: {
      start: 1,
      exp: -1
    },
    color: 11792639
  },
  leafAutumn: {
    image: [
      "part-leaf-03.img",
      "part-leaf-04.img",
      "part-leaf-05.img",
      "part-leaf-06.img"
    ],
    life: new Range(10, 15),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.15),
      end: new Range(0.08, 0.11),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  leafHalloween: {
    image: [
      "part-leaf-03.img",
      "part-leaf-04.img",
      "part-leaf-05.img",
      "part-leaf-06.img"
    ],
    life: new Range(10, 15),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.15),
      end: new Range(0.08, 0.11),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.5, 0.55)));
    },
    ignoreValueAdjust: true
  },
  leafSpring: {
    image: [
      "part-blossom-01.img",
      "part-blossom-02.img",
      "part-blossom-03.img",
      "part-blossom-04.img"
    ],
    life: new Range(10, 15),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.13, 0.15),
      end: new Range(0.08, 0.11),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  leafSummer: {
    image: ["part-leaf-06.img"],
    life: new Range(10, 15),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.15),
      end: new Range(0.08, 0.11),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.7, 0.95)));
    },
    ignoreValueAdjust: true
  },
  leafPotato: {
    image: [
      "part-blossom-01.img",
      "part-blossom-02.img",
      "part-blossom-03.img",
      "part-blossom-04.img",
      "part-potato-02.img"
    ],
    life: new Range(10, 15),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.13, 0.15),
      end: new Range(0.08, 0.11),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  potato: {
    image: ["part-potato-02.img"],
    life: new Range(10, 15),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.13, 0.15),
      end: new Range(0.08, 0.11),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  snow: {
    image: ["part-snow-01.img"],
    life: new Range(10, 15),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.07, 0.12),
      end: new Range(0.05, 0.1),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  snowball_impact: {
    image: ["part-snow-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.13, 0.23),
      end: new Range(0.07, 0.14),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  potato_impact: {
    image: ["part-potato-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.13, 0.23),
      end: new Range(0.07, 0.14),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    }
  },
  potato_smg_impact: {
    image: ["part-potato-01.img"],
    life: new Range(0.5, 1),
    drag: new Range(0, 0),
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.13, 0.23),
      end: new Range(0.07, 0.14),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.9, 1)
    },
    color: 16770437
  },
  heal_basic: {
    image: ["part-heal-basic.img"],
    life: new Range(0.75, 1),
    drag: 0.25,
    rotVel: 0,
    scale: {
      start: new Range(0.1, 0.12),
      end: new Range(0.05, 0.07),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  heal_heart: {
    image: ["part-heal-heart.img"],
    life: new Range(0.75, 1),
    drag: 0.25,
    rotVel: 0,
    scale: {
      start: new Range(0.1, 0.12),
      end: new Range(0.05, 0.07),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  heal_moon: {
    image: ["part-heal-moon.img"],
    life: new Range(0.75, 1),
    drag: 0.25,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.1, 0.12),
      end: new Range(0.05, 0.07),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  heal_tomoe: {
    image: ["part-heal-tomoe.img"],
    life: new Range(0.75, 1),
    drag: 0.25,
    rotVel: new Range(Math.PI * 0.5, Math.PI * 1),
    scale: {
      start: new Range(0.1, 0.12),
      end: new Range(0.05, 0.07),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  boost_basic: {
    image: ["part-boost-basic.img"],
    life: new Range(0.75, 1),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.3, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  boost_star: {
    image: ["part-boost-star.img"],
    life: new Range(0.75, 1),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.3, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  boost_naturalize: {
    image: ["part-boost-naturalize.img"],
    life: new Range(0.75, 1),
    drag: 0,
    rotVel: new Range(Math.PI * 0.35, Math.PI * 0.7),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.3, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  boost_shuriken: {
    image: ["part-boost-shuriken.img"],
    life: new Range(0.75, 1),
    drag: 0,
    rotVel: new Range(Math.PI * 1, Math.PI * 2),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.3, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  revive_basic: {
    image: ["part-heal-basic.img"],
    life: new Range(0.75, 1),
    drag: 0.25,
    rotVel: 0,
    scale: {
      start: new Range(0.1, 0.12),
      end: new Range(0.05, 0.07),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.83, 1, util.random(0.7, 1)));
    },
    ignoreValueAdjust: true
  },
  leafStim: {
    image: [
      "part-blossom-01.img",
      "part-blossom-02.img",
      "part-blossom-03.img",
      "part-blossom-04.img"
    ],
    life: new Range(4, 5),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.37, 1, util.random(0.95, 1)));
    }
  },
  takedownStim: {
    image: ["part-takedown-01.img"],
    life: new Range(4, 5),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: 13107200
  },
  inspireStim: {
    image: ["part-note-01.img"],
    life: new Range(4, 5),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      return util.rgbToInt(util.hsvToRgb(0.13, 1, util.random(0.98, 1)));
    }
  },
  xp_common: {
    image: ["part-boost-basic.img"],
    life: new Range(0.75, 1),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      if (Math.random() > 0.5) {
        return util.rgbToInt(util.hsvToRgb(0.12, 0.97, util.random(0.95, 1)));
      }
      return util.rgbToInt(util.hsvToRgb(0.16, 1, util.random(0.95, 1)));
    },
    ignoreValueAdjust: true
  },
  xp_rare: {
    image: ["part-boost-basic.img"],
    life: new Range(0.75, 1),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      if (Math.random() > 0.5) {
        return util.rgbToInt(util.hsvToRgb(0.05, 0.94, util.random(0.85, 0.88)));
      }
      return util.rgbToInt(util.hsvToRgb(0.06, 0.95, util.random(0.95, 1)));
    },
    ignoreValueAdjust: true
  },
  xp_mythic: {
    image: ["part-boost-basic.img"],
    life: new Range(0.75, 1),
    drag: 0,
    rotVel: new Range(Math.PI * 0.25, Math.PI * 0.5),
    scale: {
      start: new Range(0.12, 0.14),
      end: new Range(0.06, 0.08),
      lerp: new Range(0, 1)
    },
    alpha: {
      start: 1,
      end: 0,
      lerp: new Range(0.7, 1)
    },
    alphaIn: {
      start: 0,
      end: 1,
      lerp: new Range(0, 0.05)
    },
    color: function() {
      if (Math.random() > 0.5) {
        return util.rgbToInt(util.hsvToRgb(0, 0.96, util.random(0.91, 0.94)));
      }
      return util.rgbToInt(util.hsvToRgb(0.03, 0.95, util.random(0.92, 0.95)));
    },
    ignoreValueAdjust: true
  }
};
const EmitterDefs = {
  smoke_barrel: {
    particle: "explosionSmoke",
    rate: new Range(0.2, 0.3),
    radius: 0,
    speed: new Range(2, 3),
    angle: Math.PI * 0.1,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE
  },
  cabin_smoke_parent: {
    particle: "cabinSmoke",
    rate: new Range(0.72, 0.83),
    radius: 0,
    speed: new Range(64, 96),
    angle: Math.PI * 0.1,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE
  },
  bathhouse_steam: {
    particle: "bathhouseSteam",
    rate: new Range(2, 3),
    radius: 1,
    speed: new Range(1.5, 2),
    angle: Math.PI * 0.1,
    maxCount: Number.MAX_VALUE
  },
  bunker_bubbles_01: {
    particle: "bunkerBubbles",
    rate: new Range(0.3, 0.325),
    radius: 0,
    speed: new Range(1.6, 1.8),
    angle: Math.PI * -2.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE
  },
  bunker_bubbles_02: {
    particle: "bunkerBubbles",
    rate: new Range(0.4, 0.425),
    radius: 0,
    speed: new Range(1.6, 1.8),
    angle: Math.PI * -2.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE
  },
  falling_leaf: {
    particle: "leafAutumn",
    rate: new Range(0.08, 0.12),
    radius: 120,
    speed: new Range(2, 3),
    angle: Math.PI * 0.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE,
    zOrd: 999
  },
  falling_leaf_halloween: {
    particle: "leafHalloween",
    rate: new Range(0.08, 0.12),
    radius: 120,
    speed: new Range(2, 3),
    angle: Math.PI * 0.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE,
    zOrd: 999
  },
  falling_leaf_spring: {
    particle: "leafSpring",
    rate: new Range(0.1, 0.14),
    radius: 120,
    speed: new Range(2, 3),
    angle: Math.PI * 0.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE,
    zOrd: 999
  },
  falling_leaf_summer: {
    particle: "leafSummer",
    rate: new Range(0.18, 0.24),
    radius: 120,
    speed: new Range(1.4, 2.4),
    angle: Math.PI * 0.2,
    maxCount: Number.MAX_VALUE,
    zOrd: 999
  },
  falling_leaf_potato: {
    particle: "leafPotato",
    rate: new Range(0.1, 0.14),
    radius: 120,
    speed: new Range(2, 3),
    angle: Math.PI * 0.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE,
    zOrd: 999
  },
  falling_potato: {
    particle: "potato",
    rate: new Range(0.2, 0.24),
    radius: 120,
    speed: new Range(2, 3),
    angle: Math.PI * 0.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE,
    zOrd: 999
  },
  falling_snow_fast: {
    particle: "snow",
    rate: new Range(0.12, 0.17),
    maxRate: new Range(0.05, 0.07),
    maxElapsed: 240,
    radius: 70,
    speed: new Range(1, 1.5),
    angle: Math.PI * 0.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE,
    zOrd: 999
  },
  falling_snow_slow: {
    particle: "snow",
    rate: new Range(0.08, 0.12),
    radius: 70,
    speed: new Range(1, 1.5),
    angle: Math.PI * 0.2,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE,
    zOrd: 999
  },
  heal_basic: {
    particle: "heal_basic",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  heal_heart: {
    particle: "heal_heart",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  heal_moon: {
    particle: "heal_moon",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  heal_tomoe: {
    particle: "heal_tomoe",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  boost_basic: {
    particle: "boost_basic",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE
  },
  boost_star: {
    particle: "boost_star",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE
  },
  boost_naturalize: {
    particle: "boost_naturalize",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE
  },
  boost_shuriken: {
    particle: "boost_shuriken",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: new Range(0, Math.PI * 2),
    maxCount: Number.MAX_VALUE
  },
  revive_basic: {
    particle: "revive_basic",
    rate: new Range(0.5, 0.55),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  windwalk: {
    particle: "leafStim",
    rate: new Range(0.1, 0.12),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  takedown: {
    particle: "takedownStim",
    rate: new Range(0.1, 0.12),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  inspire: {
    particle: "inspireStim",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  xp_common: {
    particle: "xp_common",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  xp_rare: {
    particle: "xp_rare",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  },
  xp_mythic: {
    particle: "xp_mythic",
    rate: new Range(0.3, 0.35),
    radius: 1.5,
    speed: new Range(1, 1.5),
    angle: 0,
    rot: 0,
    maxCount: Number.MAX_VALUE
  }
};
const planeElevateMult = 1.25;
const planeAlpha = 0.75;
const planeAlphaMult = 0.75;
const planeElevateTime = 2;
class Plane {
  active = false;
  sprite = new Sprite();
  soundRangeMult;
  id;
  pos;
  planeDir;
  actionComplete;
  dirty;
  soundInstance;
  soundUpdateThrottle;
  alpha;
  renderAlpha;
  spriteUpdateTime;
  type;
  config;
  rad;
  planeSound;
  constructor() {
    this.sprite.anchor.set(0.5, 0.5);
    this.sprite.visible = false;
  }
  m_init(data, map) {
    this.id = data.id;
    this.pos = v2.copy(data.pos);
    this.planeDir = v2.copy(data.planeDir);
    this.actionComplete = data.actionComplete;
    this.active = true;
    this.dirty = false;
    this.soundInstance = null;
    this.soundUpdateThrottle = 0;
    this.alpha = planeAlpha;
    this.renderAlpha = 1;
    this.spriteUpdateTime = 0;
    this.type = data.action;
    this.config = this.type == GameConfig.Plane.Airdrop ? GameConfig.airdrop : GameConfig.airstrike;
    this.rad = this.config.planeRad;
    switch (this.type) {
      case GameConfig.Plane.Airdrop:
        this.sprite.texture = Texture.from(
          map.getMapDef().biome.airdrop.planeImg
        );
        this.planeSound = map.getMapDef().biome.airdrop.planeSound;
        break;
      case GameConfig.Plane.Airstrike:
        this.sprite.texture = Texture.from("map-plane-02.img");
        this.planeSound = "fighter_01";
    }
    this.sprite.visible = true;
    this.sprite.rotation = Math.atan2(this.planeDir.x, this.planeDir.y);
  }
  m_free(audioManager) {
    if (this.spriteUpdateTime >= planeElevateTime) {
      if (this.soundInstance) {
        audioManager.stopSound(this.soundInstance);
        this.soundInstance = null;
      }
      this.sprite.visible = false;
      this.active = false;
    }
  }
}
class AirstrikeZone {
  constructor(container) {
    this.container = container;
    container.addChild(this.gfx);
  }
  active = false;
  pos = v2.create(0, 0);
  rad = 0;
  duration = 0;
  ticker = 0;
  gfx = new Graphics();
  renderPos;
  renderRad;
  m_init(pos, rad, duration) {
    this.active = true;
    this.pos = v2.copy(pos);
    this.rad = rad;
    this.duration = duration;
    this.ticker = 0;
    this.renderPos = v2.create(0, 0);
    this.renderRad = 0;
    this.gfx.visible = true;
  }
  m_update(dt) {
    this.ticker += dt;
    this.gfx.visible = true;
    if (this.ticker >= this.duration) {
      this.gfx.visible = false;
      this.active = false;
    }
  }
  render(uiManager, map, _debug) {
    const pos = uiManager.getMapPosFromWorldPos(this.pos, map);
    const edge = uiManager.getMapPosFromWorldPos(
      v2.add(this.pos, v2.create(this.rad, 0)),
      map
    );
    const rad = v2.length(v2.sub(edge, pos));
    const posChanged = !v2.eq(this.renderPos, pos, 1e-4);
    const radChanged = !math.eqAbs(this.renderRad, rad, 1e-4);
    if (posChanged) {
      this.renderPos = v2.copy(pos);
    }
    if (radChanged) {
      this.renderRad = rad;
    }
    if (posChanged) {
      this.gfx.position.set(this.renderPos.x, this.renderPos.y);
    }
    if (radChanged) {
      this.gfx.clear();
      this.gfx.lineStyle(1.5, 15400704);
      this.gfx.beginFill(15400704, 0.2);
      this.gfx.drawCircle(0, 0, this.renderRad);
      this.gfx.endFill();
    }
    const alpha = math.smoothstep(this.ticker, 0, 0.5) * (1 - math.smoothstep(this.ticker, this.duration - 0.5, this.duration));
    this.gfx.alpha = alpha;
  }
}
class PlaneBarn {
  constructor(audioManager) {
    this.audioManager = audioManager;
  }
  planes = [];
  airstrikeZones = [];
  airstrikeZoneContainer = new Container();
  m_free() {
    for (let i2 = 0; i2 < this.planes.length; i2++) {
      this.planes[i2].m_free(this.audioManager);
    }
  }
  updatePlanes(planeData, map) {
    for (let i2 = 0; i2 < this.planes.length; i2++) {
      this.planes[i2].dirty = true;
    }
    for (let i2 = 0; i2 < planeData.length; i2++) {
      const data = planeData[i2];
      let plane = null;
      for (let j = 0; j < this.planes.length; j++) {
        const p = this.planes[j];
        if (p.active && p.id == data.id) {
          plane = p;
          break;
        }
      }
      plane ||= this.addPlane(data, map);
      plane.dirty = false;
      plane.actionComplete = data.actionComplete;
    }
    for (let i2 = 0; i2 < this.planes.length; i2++) {
      const p = this.planes[i2];
      if (p.active && p.dirty) {
        p.m_free(this.audioManager);
      }
    }
  }
  addPlane(data, map) {
    let p = null;
    for (let i2 = 0; i2 < this.planes.length; i2++) {
      if (!this.planes[i2].active) {
        p = this.planes[i2];
        break;
      }
    }
    if (!p) {
      p = new Plane();
      this.planes.push(p);
    }
    p.m_init(data, map);
    return p;
  }
  createAirstrikeZone(data) {
    let zone = null;
    for (let i2 = 0; i2 < this.airstrikeZones.length; i2++) {
      if (!this.airstrikeZones[i2]) {
        zone = this.airstrikeZones[i2];
        break;
      }
    }
    if (!zone) {
      zone = new AirstrikeZone(this.airstrikeZoneContainer);
      this.airstrikeZones.push(zone);
    }
    zone.m_init(data.pos, data.rad, data.duration);
    return zone;
  }
  m_update(dt, camera, activePlayer, map, renderer) {
    for (let i2 = 0; i2 < this.planes.length; i2++) {
      const p = this.planes[i2];
      if (p.active) {
        let layer = 0;
        if ((!!util.sameLayer(layer, activePlayer.layer) || !!(activePlayer.layer & 2)) && (!(activePlayer.layer & 2) || !map.insideStructureMask(collider.createCircle(p.pos, 1)))) {
          layer |= 2;
        }
        p.pos = v2.add(p.pos, v2.mul(p.planeDir, dt * p.config.planeVel));
        if (p.actionComplete) {
          p.spriteUpdateTime = Math.min(
            p.spriteUpdateTime + dt,
            planeElevateTime
          );
          p.rad = math.lerp(
            p.spriteUpdateTime,
            p.config.planeRad,
            p.config.planeRad * planeElevateMult
          );
          p.alpha = math.lerp(
            p.spriteUpdateTime,
            planeAlpha,
            planeAlpha * planeAlphaMult
          );
          p.soundRangeMult = math.max(
            0,
            math.lerp(
              p.spriteUpdateTime,
              p.config.soundRangeMult,
              p.config.soundRangeMult - p.config.soundRangeDelta
            )
          );
        }
        if (p.soundInstance) {
          if (p.soundUpdateThrottle < 0) {
            this.audioManager.updateSound(p.soundInstance, "sfx", p.pos, {
              layer,
              rangeMult: p.config.soundRangeMult,
              ignoreMinAllowable: true,
              fallOff: p.config.fallOff
            });
            p.soundUpdateThrottle = 0.1;
          } else {
            p.soundUpdateThrottle -= dt;
          }
        } else {
          const distToPlane = v2.length(v2.sub(activePlayer.m_pos, p.pos));
          const maxRange = p.config.soundRangeMax * p.config.soundRangeMult;
          let offset = 0;
          if (p.type == GameConfig.Plane.Airstrike) {
            const maxDistToOffset = 800;
            const minDist = 150;
            const maxSoundOffset = 2.25;
            const distToCompare = math.max(minDist, distToPlane);
            offset = (1 - math.clamp(
              math.max(0, distToCompare) / maxDistToOffset,
              0,
              1
            )) * maxSoundOffset;
          }
          if (distToPlane < maxRange) {
            p.soundInstance = this.audioManager.playSound(p.planeSound, {
              channel: "sfx",
              soundPos: p.pos,
              layer,
              loop: true,
              rangeMult: 2.5,
              ignoreMinAllowable: true,
              fallOff: p.config.fallOff,
              offset
            });
          }
        }
        renderer.addPIXIObj(p.sprite, layer, 1501, p.id);
        const screenPos = camera.m_pointToScreen(p.pos);
        const screenScale = camera.m_pixels(p.rad / camera.m_ppu);
        const activePlayerIndoors = map.insideBuildingCeiling(
          collider.createCircle(activePlayer.m_pos, 0.01),
          true
        );
        let alphaTarget = p.alpha;
        if (activePlayer.layer == 1) {
          alphaTarget = 0;
        } else if (activePlayerIndoors || activePlayer.layer & 1) {
          alphaTarget = 0.15;
        }
        p.renderAlpha = math.lerp(dt * 3, p.renderAlpha, alphaTarget);
        p.sprite.position.set(screenPos.x, screenPos.y);
        p.sprite.scale.set(screenScale, screenScale);
        p.sprite.tint = 16776960;
        p.sprite.alpha = p.renderAlpha;
        p.sprite.visible = true;
      }
    }
    for (let i2 = 0; i2 < this.airstrikeZones.length; i2++) {
      const zone = this.airstrikeZones[i2];
      if (zone.active) {
        zone.m_update(dt);
      }
    }
  }
  renderAirstrikeZones(uiManager, map, debug) {
    for (let i2 = 0; i2 < this.airstrikeZones.length; i2++) {
      const zone = this.airstrikeZones[i2];
      if (zone.active) {
        zone.render(uiManager, map, debug);
      }
    }
  }
}
function frame(time, bones) {
  return {
    time,
    bones
  };
}
function effect(time, fn, args) {
  return {
    time,
    fn,
    args
  };
}
class Pose {
  constructor(pivot = v2.create(0, 0), rot = 0, pos = v2.create(0, 0)) {
    this.pivot = pivot;
    this.rot = rot;
    this.pos = pos;
    this.pivot = v2.copy(pivot);
    this.rot = 0;
    this.pos = v2.copy(pos);
  }
  copy(pose) {
    v2.set(this.pivot, pose.pivot);
    this.rot = pose.rot;
    v2.set(this.pos, pose.pos);
  }
  rotate(angle) {
    this.rot = angle;
    return this;
  }
  offset(pos) {
    this.pos = v2.copy(pos);
    return this;
  }
  static identity = new Pose(v2.create(0, 0));
  static lerp(t, poseA, poseB) {
    const result = new Pose();
    result.pos = v2.lerp(t, poseA.pos, poseB.pos);
    result.rot = math.lerp(t, poseA.rot, poseB.rot);
    result.pivot = v2.lerp(t, poseA.pivot, poseB.pivot);
    return result;
  }
}
var Bones = /* @__PURE__ */ ((Bones2) => {
  Bones2[Bones2["HandL"] = 0] = "HandL";
  Bones2[Bones2["HandR"] = 1] = "HandR";
  Bones2[Bones2["FootL"] = 2] = "FootL";
  Bones2[Bones2["FootR"] = 3] = "FootR";
  return Bones2;
})(Bones || {});
assert(Object.keys(Bones).length % 2 == 0);
const IdlePoses = {
  fists: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(14, -12.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(14, 12.25))
  },
  slash: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(18, -8.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(6, 20.25))
  },
  meleeTwoHanded: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(10.5, -14.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(18, 6.25))
  },
  meleeKatana: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(8.5, 13.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(-3, 17.75))
  },
  meleeNaginata: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(19, -7.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(8.5, 24.25))
  },
  machete: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(14, -12.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(1, 17.75))
  },
  rifle: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(28, 5.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(14, 1.75))
  },
  dualRifle: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(5.75, -16)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(5.75, 16))
  },
  bullpup: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(28, 5.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(24, 1.75))
  },
  launcher: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(20, 10)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(2, 22))
  },
  pistol: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(14, 1.75)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(14, 1.75))
  },
  dualPistol: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(15.75, -8.75)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(15.75, 8.75))
  },
  throwable: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(15.75, -9.625)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(15.75, 9.625))
  },
  downed: {
    [
      0
      /* HandL */
    ]: new Pose(v2.create(14, -12.25)),
    [
      1
      /* HandR */
    ]: new Pose(v2.create(14, 12.25)),
    [
      2
      /* FootL */
    ]: new Pose(v2.create(-15.75, -9)),
    [
      3
      /* FootR */
    ]: new Pose(v2.create(-15.75, 9))
  }
};
const def$1 = GameObjectDefs;
const Animations = {
  none: {
    keyframes: [],
    effects: []
  },
  fists: {
    keyframes: [
      frame(0, { [
        1
        /* HandR */
      ]: new Pose(v2.create(14, 12.25)) }),
      frame(def$1.fists.attack.damageTimes[0], {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(29.75, 1.75))
      }),
      frame(def$1.fists.attack.cooldownTime, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(def$1.fists.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  cut: {
    keyframes: [
      frame(0, { [
        1
        /* HandR */
      ]: new Pose(v2.create(14, 12.25)) }),
      frame(def$1.fists.attack.damageTimes[0] * 0.25, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25)).rotate(-Math.PI * 0.35)
      }),
      frame(def$1.fists.attack.damageTimes[0] * 1.25, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25)).rotate(Math.PI * 0.35)
      }),
      frame(def$1.fists.attack.cooldownTime, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(def$1.fists.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  cutReverse: {
    keyframes: [
      frame(0, { [
        1
        /* HandR */
      ]: new Pose(v2.create(1, 17.75)) }),
      frame(def$1.fists.attack.damageTimes[0] * 0.4, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(25, 6.25)).rotate(Math.PI * 0.3)
      }),
      frame(def$1.fists.attack.damageTimes[0] * 1.4, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(25, 6.25)).rotate(-Math.PI * 0.5)
      }),
      frame(def$1.fists.attack.cooldownTime, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(1, 17.75))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(def$1.fists.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  thrust: {
    keyframes: [
      frame(0, { [
        1
        /* HandR */
      ]: new Pose(v2.create(14, 12.25)) }),
      frame(def$1.fists.attack.damageTimes[0] * 0.4, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(5, 12.25)).rotate(Math.PI * 0.1)
      }),
      frame(def$1.fists.attack.damageTimes[0] * 1.4, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(25, 6.25)).rotate(-Math.PI * 0)
      }),
      frame(def$1.fists.attack.cooldownTime, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(def$1.fists.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  slash: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(18, -8.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(6, 20.25))
      }),
      frame(def$1.fists.attack.damageTimes[0], {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(6, -22.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(6, 20.25)).rotate(-Math.PI * 0.6)
      }),
      frame(def$1.fists.attack.cooldownTime, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(18, -8.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(6, 20.25)).rotate(0)
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(def$1.fists.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  hook: {
    keyframes: [
      frame(0, { [
        1
        /* HandR */
      ]: new Pose(v2.create(14, 12.25)) }),
      frame(def$1.hook.attack.damageTimes[0] * 0.25, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25)).rotate(Math.PI * 0.1)
      }),
      frame(def$1.hook.attack.damageTimes[0], {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(24, 1.75))
      }),
      frame(def$1.hook.attack.damageTimes[0] + 0.05, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25)).rotate(Math.PI * -0.3)
      }),
      frame(def$1.hook.attack.damageTimes[0] + 0.1, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(def$1.hook.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  pan: {
    keyframes: [
      frame(0, { [
        1
        /* HandR */
      ]: new Pose(v2.create(14, 12.25)) }),
      frame(0.15, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(22, -8.25)).rotate(-Math.PI * 0.2)
      }),
      frame(0.25, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(28, -8.25)).rotate(Math.PI * 0.5)
      }),
      frame(0.55, { [
        1
        /* HandR */
      ]: new Pose(v2.create(14, 12.25)) })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(def$1.pan.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  axeSwing: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(10.5, -14.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(18, 6.25))
      }),
      frame(def$1.woodaxe.attack.damageTimes[0] * 0.4, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(9, -14.25)).rotate(Math.PI * 0.4),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(18, 6.25)).rotate(Math.PI * 0.4)
      }),
      frame(def$1.woodaxe.attack.damageTimes[0], {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(9, -14.25)).rotate(-Math.PI * 0.4),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(18, 6.25)).rotate(-Math.PI * 0.4)
      }),
      frame(def$1.woodaxe.attack.cooldownTime, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(10.5, -14.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(18, 6.25))
      })
    ],
    effects: [
      effect(def$1.woodaxe.attack.damageTimes[0], "animPlaySound", {
        sound: "swing"
      }),
      effect(def$1.woodaxe.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  hammerSwing: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(10.5, -14.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(18, 6.25))
      }),
      frame(def$1.stonehammer.attack.damageTimes[0] * 0.4, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(9, -14.25)).rotate(Math.PI * 0.4),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(18, 6.25)).rotate(Math.PI * 0.4)
      }),
      frame(def$1.stonehammer.attack.damageTimes[0], {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(9, -14.25)).rotate(-Math.PI * 0.4),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(18, 6.25)).rotate(-Math.PI * 0.4)
      }),
      frame(def$1.stonehammer.attack.cooldownTime, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(10.5, -14.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(18, 6.25))
      })
    ],
    effects: [
      effect(def$1.stonehammer.attack.damageTimes[0], "animPlaySound", {
        sound: "swing"
      }),
      effect(def$1.stonehammer.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  katanaSwing: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(8.5, 13.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(-3, 17.75))
      }),
      frame(def$1.katana.attack.damageTimes[0] * 0.3, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(8.5, 13.25)).rotate(Math.PI * 0.2),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(-3, 17.75)).rotate(Math.PI * 0.2)
      }),
      frame(def$1.katana.attack.damageTimes[0] * 0.9, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(8.5, 13.25)).rotate(-Math.PI * 1.2),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(-3, 17.75)).rotate(-Math.PI * 1.2)
      }),
      frame(def$1.katana.attack.cooldownTime, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(8.5, 13.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(-3, 17.75))
      })
    ],
    effects: [
      effect(def$1.katana.attack.damageTimes[0], "animPlaySound", {
        sound: "swing"
      }),
      effect(def$1.katana.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  naginataSwing: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(19, -7.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(8.5, 24.25))
      }),
      frame(def$1.naginata.attack.damageTimes[0] * 0.3, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(19, -7.25)).rotate(Math.PI * 0.3),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(8.5, 24.25)).rotate(Math.PI * 0.3)
      }),
      frame(def$1.naginata.attack.damageTimes[0] * 0.9, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(19, -7.25)).rotate(-Math.PI * 0.85),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(8.5, 24.25)).rotate(-Math.PI * 0.85)
      }),
      frame(def$1.naginata.attack.cooldownTime, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(19, -7.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(8.5, 24.25))
      })
    ],
    effects: [
      effect(def$1.naginata.attack.damageTimes[0], "animPlaySound", {
        sound: "swing"
      }),
      effect(def$1.naginata.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  sawSwing: {
    keyframes: [
      frame(0, { [
        1
        /* HandR */
      ]: new Pose(v2.create(1, 17.75)) }),
      frame(def$1.saw.attack.damageTimes[0] * 0.4, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(25, 6.25)).rotate(Math.PI * 0.3)
      }),
      frame(def$1.saw.attack.damageTimes[0], {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(25, 6.25)).rotate(-Math.PI * 0.3)
      }),
      frame(def$1.saw.attack.damageTimes[1] - 0.1, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(25, 17.75)).rotate(-Math.PI * 0.25)
      }),
      frame(def$1.saw.attack.damageTimes[1] * 0.6, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(-36, 7.75)).rotate(-Math.PI * 0.25)
      }),
      frame(def$1.saw.attack.damageTimes[1] + 0.2, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(1, 17.75))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(0.4, "animPlaySound", { sound: "swing" }),
      effect(def$1.saw.attack.damageTimes[0], "animMeleeCollision", {}),
      effect(def$1.saw.attack.damageTimes[1], "animMeleeCollision", {
        playerHit: "playerHit2"
      })
    ]
  },
  cutReverseShort: {
    keyframes: [
      frame(0, { [
        1
        /* HandR */
      ]: new Pose(v2.create(1, 17.75)) }),
      frame(def$1.saw.attack.damageTimes[0] * 0.4, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(25, 6.25)).rotate(Math.PI * 0.3)
      }),
      frame(def$1.saw.attack.damageTimes[0], {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(25, 6.25)).rotate(-Math.PI * 0.3)
      }),
      frame(def$1.fists.attack.cooldownTime, {
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 17.75))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "swing" }),
      effect(def$1.fists.attack.damageTimes[0], "animMeleeCollision", {})
    ]
  },
  cook: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(15.75, -9.625)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(15.75, 9.625))
      }),
      frame(0.1, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(14, -1.75)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 1.75))
      }),
      frame(0.3, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(14, -1.75)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 1.75))
      }),
      frame(0.4, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(22.75, -1.75)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(1.75, 14))
      }),
      frame(99999, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(22.75, -1.75)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(1.75, 14))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "pullPin" }),
      effect(0.1, "animSetThrowableState", { state: "cook" })
    ]
  },
  throw: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(22.75, -1.75)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(1.75, 14.175))
      }),
      frame(0.15, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(5.25, -15.75)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(29.75, 1.75))
      }),
      frame(0.15 + GameConfig.player.throwTime, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(15.75, -9.625)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(15.75, 9.625))
      })
    ],
    effects: [
      effect(0, "animPlaySound", { sound: "throwing" }),
      effect(0, "animSetThrowableState", { state: "throwing" }),
      effect(0, "animThrowableParticles", {})
    ]
  },
  crawl_forward: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(14, -12.25)),
        [
          2
          /* FootL */
        ]: new Pose(v2.create(-15.75, -9))
      }),
      frame(GameConfig.player.crawlTime * 0.33, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(19.25, -10.5)),
        [
          2
          /* FootL */
        ]: new Pose(v2.create(-20.25, -9))
      }),
      frame(GameConfig.player.crawlTime * 0.66, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(5.25, -15.75)),
        [
          2
          /* FootL */
        ]: new Pose(v2.create(-11.25, -9))
      }),
      frame(GameConfig.player.crawlTime * 1, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(14, -12.25)),
        [
          2
          /* FootL */
        ]: new Pose(v2.create(-15.75, -9))
      })
    ],
    effects: []
  },
  crawl_backward: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(14, -12.25)),
        [
          2
          /* FootL */
        ]: new Pose(v2.create(-15.75, -9))
      }),
      frame(GameConfig.player.crawlTime * 0.33, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(5.25, -15.75)),
        [
          2
          /* FootL */
        ]: new Pose(v2.create(-11.25, -9))
      }),
      frame(GameConfig.player.crawlTime * 0.66, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(19.25, -10.5)),
        [
          2
          /* FootL */
        ]: new Pose(v2.create(-20.25, -9))
      }),
      frame(GameConfig.player.crawlTime * 1, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(14, -12.25)),
        [
          2
          /* FootL */
        ]: new Pose(v2.create(-15.75, -9))
      })
    ],
    effects: []
  },
  revive: {
    keyframes: [
      frame(0, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(14, -12.25)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(14, 12.25))
      }),
      frame(0.2, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(24.5, -8.75)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(5.25, 21))
      }),
      frame(0.2 + GameConfig.player.reviveDuration, {
        [
          0
          /* HandL */
        ]: new Pose(v2.create(24.5, -8.75)),
        [
          1
          /* HandR */
        ]: new Pose(v2.create(5.25, 21))
      })
    ],
    effects: []
  }
};
const halloweenSpriteMap = {
  "proj-frag-nopin-01.img": "proj-frag-nopin-02.img",
  "proj-frag-nopin-nolever-01.img": "proj-frag-nopin-nolever-02.img",
  "proj-frag-pin-01.img": "proj-frag-pin-02.img",
  "proj-mirv-mini-01.img": "proj-mirv-mini-02.img"
};
class Projectile {
  __id;
  __type;
  active;
  isNew;
  container = new Container();
  trail = Sprite.from("player-bullet-trail-02.img");
  sprite = new Sprite();
  strobeSprite = null;
  layer;
  type;
  rad;
  pos;
  posOld;
  visualPosOld;
  posInterpTicker;
  posZ;
  posZOld;
  dir;
  imgScale;
  rot;
  rotVel;
  rotDrag;
  velZ;
  grounded;
  inWater;
  lastSoundObjId;
  playHitSfx;
  alwaysRenderOntop;
  strobeScale;
  strobeScaleMax;
  strobeTicker;
  strobeDir;
  strobeSpeed;
  constructor() {
    this.container.visible = false;
    this.trail.anchor.set(1, 0.5);
    this.trail.scale.set(1, 1);
    this.trail.visible = false;
    this.container.addChild(this.trail);
    this.sprite.anchor.set(0.5, 0.5);
    this.container.addChild(this.sprite);
  }
  m_init() {
    this.visualPosOld = v2.create(0, 0);
    this.posInterpTicker = 0;
  }
  m_free() {
    this.container.visible = false;
    if (this.strobeSprite) {
      this.strobeSprite.visible = false;
    }
  }
  m_updateData(data, fullUpdate, isNew, ctx) {
    if (fullUpdate) {
      const itemDef = GameObjectDefs[data.type];
      this.layer = data.layer;
      this.type = data.type;
      this.rad = itemDef.rad * 0.5;
    }
    this.posOld = isNew ? v2.copy(data.pos) : v2.copy(this.pos);
    this.posZOld = isNew ? data.posZ : this.posZ;
    this.pos = v2.copy(data.pos);
    if (!v2.eq(data.pos, this.visualPosOld)) {
      this.visualPosOld = v2.copy(this.posOld);
      this.posInterpTicker = 0;
    }
    this.posZ = data.posZ;
    this.dir = v2.copy(data.dir);
    if (isNew) {
      const itemDef = GameObjectDefs[data.type];
      const imgDef = itemDef.worldImg;
      this.imgScale = imgDef.scale;
      this.rot = 0;
      this.rotVel = itemDef.throwPhysics.spinVel;
      if (itemDef.throwPhysics.randomizeSpinDir && Math.random() < 0.5) {
        this.rotVel *= -1;
      }
      this.rotDrag = itemDef.throwPhysics.spinDrag * util.random(1, 2);
      this.velZ = 0;
      this.grounded = false;
      this.inWater = false;
      this.lastSoundObjId = 0;
      this.playHitSfx = !itemDef.explodeOnImpact;
      this.alwaysRenderOntop = false;
      let isVisible = true;
      if (this.type == "bomb_iron") {
        this.alwaysRenderOntop = true;
        const col = collider.createCircle(this.pos, 0.5);
        if (ctx.map.insideBuildingCeiling(col, true)) {
          isVisible = false;
        }
      }
      let sprite = imgDef.sprite;
      if (ctx.map.mapDef.gameMode.spookyKillSounds) {
        sprite = halloweenSpriteMap[sprite] || sprite;
      }
      this.sprite.texture = Texture.from(sprite);
      this.sprite.tint = imgDef.tint;
      this.sprite.alpha = 1;
      this.container.visible = isVisible;
      if (data.type == "strobe") {
        if (!this.strobeSprite) {
          this.strobeSprite = new Sprite();
          this.strobeSprite.texture = Texture.from("part-strobe-01.img");
          this.strobeSprite.anchor.set(0.5, 0.5);
          this.container.addChild(this.strobeSprite);
        }
        this.strobeSprite.scale.set(0, 0);
        this.strobeSprite.visible = true;
        this.strobeScale = 0;
        this.strobeScaleMax = 12;
        this.strobeTicker = 0;
        this.strobeDir = 1;
        this.strobeSpeed = 1.25;
      }
    }
  }
}
const groundSounds = {
  grass: "frag_grass",
  sand: "frag_sand",
  water: "frag_water"
};
class ProjectileBarn {
  projectilePool = new Pool(Projectile);
  m_update(dt, particleBarn, audioManager, activePlayer, map, renderer, camera) {
    const projectiles = this.projectilePool.m_getPool();
    for (let i2 = 0; i2 < projectiles.length; i2++) {
      const p = projectiles[i2];
      if (p.active) {
        const itemDef = GameObjectDefs[p.type];
        let rotDrag = p.rotDrag;
        if (p.inWater) {
          rotDrag *= 3;
        }
        p.rotVel *= 1 / (1 + dt * rotDrag);
        p.rot += p.rotVel * dt;
        const wallCol = {
          obj: null,
          pen: 0
        };
        const groundCol = {
          obj: null,
          pen: 0
        };
        const projCollider = collider.createCircle(p.pos, p.rad);
        const obstacles = map.m_obstaclePool.m_getPool();
        for (let j = 0; j < obstacles.length; j++) {
          const o = obstacles[j];
          if (o.active && !o.dead && util.sameLayer(o.layer, p.layer)) {
            const res = collider.intersect(o.collider, projCollider);
            if (res) {
              const col = o.height > p.posZ ? wallCol : groundCol;
              if (res.pen > col.pen && (!col.obj || col.obj.height <= o.height)) {
                col.obj = o;
                col.pen = res.pen;
              }
            }
          }
        }
        const vel = v2.div(v2.sub(p.pos, p.posOld), dt);
        const speed = v2.length(vel);
        if (wallCol.obj && wallCol.obj.__id != p.lastSoundObjId && speed > 7.5 && (p.lastSoundObjId = wallCol.obj.__id, p.playHitSfx)) {
          const dir = v2.mul(v2.normalizeSafe(vel, v2.create(1, 0)), -1);
          const mapDef = MapObjectDefs[wallCol.obj.type];
          playHitFx(
            mapDef.hitParticle,
            mapDef.sound.bullet,
            p.pos,
            dir,
            p.layer,
            particleBarn,
            audioManager
          );
        }
        const surface = map.getGroundSurface(p.pos, p.layer);
        if (p.posZ <= 0.01) {
          if (!p.inWater && surface.type == "water") {
            particleBarn.addRippleParticle(
              p.pos,
              p.layer,
              surface.data.rippleColor
            );
          }
          p.inWater = surface.type == "water";
        }
        const velZOld = p.velZ;
        p.velZ = (p.posZ - p.posZOld) / dt;
        if (!p.isNew && !p.grounded && p.velZ >= 0 && velZOld < 0) {
          const sound = {
            fn: "playGroup",
            channel: "hits",
            name: ""
          };
          if (groundCol.obj) {
            if (p.lastSoundObjId != groundCol.obj.__id) {
              p.lastSoundObjId = groundCol.obj.__id;
              const def2 = MapObjectDefs[groundCol.obj.type];
              sound.name = def2.sound.bullet;
            }
          } else {
            p.grounded = true;
            sound.name = groundSounds[surface.type];
            if (sound.name === void 0) {
              sound.name = `footstep_${surface.type}`;
              sound.fn = "playGroup";
              sound.channel = "sfx";
            }
          }
          if (sound.name && p.playHitSfx) {
            audioManager[sound.fn](sound.name, {
              channel: sound.channel,
              soundPos: p.pos,
              layer: p.layer,
              filter: "muffled"
            });
          }
        }
        if (p.type == "strobe" && p.strobeSprite) {
          p.strobeTicker = math.clamp(
            p.strobeTicker + dt * p.strobeDir * p.strobeSpeed,
            0,
            1
          );
          p.strobeScale = math.easeInExpo(p.strobeTicker) * p.strobeScaleMax;
          p.strobeSprite.scale.set(p.strobeScale, p.strobeScale);
          if (p.strobeScale >= p.strobeScaleMax || p.strobeTicker <= 0) {
            p.strobeDir *= -1;
          }
        }
        p.sprite.rotation = p.rot;
        p.sprite.alpha = p.inWater ? 0.3 : 1;
        if (itemDef.trail) {
          const speed2 = v2.length(vel);
          const trailT = math.remap(
            speed2,
            itemDef.throwPhysics.speed * 0.25,
            itemDef.throwPhysics.speed * 1,
            0,
            1
          ) * math.remap(
            p.posZ,
            0.1,
            GameConfig.projectile.maxHeight * 0.5,
            0,
            1
          );
          p.trail.scale.set(
            itemDef.trail.maxLength * trailT,
            itemDef.trail.width
          );
          p.trail.rotation = -Math.atan2(p.dir.y, p.dir.x);
          p.trail.tint = itemDef.trail.tint;
          p.trail.alpha = itemDef.trail.alpha * trailT;
          p.trail.visible = true;
        } else {
          p.trail.visible = false;
        }
        let layer = p.layer;
        let zOrd = p.posZ < 0.25 ? 14 : 25;
        const stairCollider = collider.createCircle(p.pos, p.rad * 3);
        const onStairs = map.insideStructureStairs(stairCollider);
        const onMask = map.insideStructureMask(stairCollider);
        if (p.posZ >= 0.25 && !!onStairs && (p.layer & 1) == (activePlayer.layer & 1) && (!onMask || !(activePlayer.layer & 2))) {
          layer |= 2;
          zOrd += 100;
        }
        if (p.alwaysRenderOntop && activePlayer.layer == 0) {
          zOrd = 1e3;
          layer |= 2;
        }
        renderer.addPIXIObj(p.container, layer, zOrd);
        const scale = p.imgScale * math.remap(p.posZ, 0, GameConfig.projectile.maxHeight, 1, 4.75);
        let pos = p.pos;
        if (camera.m_interpEnabled) {
          p.posInterpTicker += dt;
          const posT = math.clamp(
            p.posInterpTicker / camera.m_interpInterval,
            0,
            1
          );
          pos = v2.lerp(posT, p.visualPosOld, p.pos);
        }
        const screenPos = camera.m_pointToScreen(pos);
        const screenScale = camera.m_pixels(scale);
        p.container.position.set(screenPos.x, screenPos.y);
        p.container.scale.set(screenScale, screenScale);
      }
    }
  }
}
function createCasingParticle(weapType, casingAngle, casingSpeedMult, pos, dir, layer, zOrd, particleBarn) {
  const weapDef = GameObjectDefs[weapType];
  if (weapDef) {
    let shellDir = v2.rotate(dir, casingAngle);
    if (weapDef.particle.shellForward) {
      shellDir = v2.mul(dir, weapDef.particle.shellForward);
    }
    let vel = v2.mul(shellDir, casingSpeedMult * 9.5);
    vel = v2.rotate(vel, (Math.random() - 0.5) * Math.PI / 3);
    let shellPos = v2.add(
      pos,
      v2.mul(dir, GameConfig.player.radius + weapDef.particle.shellOffset)
    );
    if (weapDef.particle.shellOffsetY) {
      shellPos = v2.add(shellPos, v2.mul(shellDir, weapDef.particle.shellOffsetY));
    }
    if (weapDef.particle.shellReverse) {
      vel = v2.mul(vel, -1);
    }
    particleBarn.addParticle(
      weapDef.ammo,
      layer,
      shellPos,
      vel,
      weapDef.particle.shellScale,
      -Math.atan2(shellDir.y, shellDir.x),
      null,
      zOrd
    );
  }
}
class ShotBarn {
  shots = [];
  addShot(bullet) {
    let shot = null;
    for (let i2 = 0; i2 < this.shots.length; i2++) {
      if (!this.shots[i2].active) {
        shot = this.shots[i2];
        break;
      }
    }
    if (!shot) {
      shot = {};
      this.shots.push(shot);
    }
    const weaponType = bullet.shotSourceType;
    const weaponDef = GameObjectDefs[weaponType];
    shot.active = true;
    shot.pos = v2.copy(bullet.pos);
    shot.layer = bullet.layer;
    shot.playerId = bullet.playerId;
    shot.weaponType = weaponType;
    shot.offhand = bullet.shotOffhand;
    shot.lastShot = bullet.lastShot;
    shot.shotAlt = bullet.shotAlt;
    shot.ticker = 0;
    shot.pullDelay = weaponDef.pullDelay !== void 0 ? weaponDef.pullDelay * 0.45 : 0;
    shot.splinter = bullet.splinter;
    shot.trailSaturated = bullet.trailSaturated;
    shot.apRounds = bullet.apRounds;
  }
  m_update(dt, activePlayerId, playerBarn, particleBarn, audioManager) {
    for (let i2 = 0; i2 < this.shots.length; i2++) {
      const shot = this.shots[i2];
      if (shot.active) {
        const weaponDef = GameObjectDefs[shot.weaponType];
        if (shot.ticker == 0) {
          const player = playerBarn.getPlayerById(shot.playerId);
          let shotSound = weaponDef.sound.shoot;
          if (weaponDef.sound.shootTeam) {
            const teamId = playerBarn.getPlayerInfo(shot.playerId).teamId;
            if (weaponDef.sound.shootTeam[teamId]) {
              shotSound = weaponDef.sound.shootTeam[teamId];
            }
          }
          if (shot.lastShot && weaponDef.sound.shootLast) {
            shotSound = weaponDef.sound.shootLast;
          }
          if (shot.shotAlt && weaponDef.sound.shootAlt) {
            shotSound = weaponDef.sound.shootAlt;
          }
          let detune = 0;
          if (shot.trailSaturated && !weaponDef.ignoreDetune) {
            detune = 300;
          } else if (shot.splinter) {
            detune = -300;
          }
          audioManager.playSound(shotSound, {
            channel: shot.playerId == activePlayerId ? "activePlayer" : "otherPlayers",
            soundPos: shot.pos,
            layer: player ? player.layer : shot.layer,
            filter: "muffled",
            fallOff: weaponDef.sound.fallOff ? weaponDef.sound.fallOff : 0,
            detune,
            volumeScale: shot.splinter ? 0.75 : 1
          });
          if (shot.splinter) {
            audioManager.playSound(shotSound, {
              channel: shot.playerId == activePlayerId ? "activePlayer" : "otherPlayers",
              soundPos: shot.pos,
              layer: player ? player.layer : shot.layer,
              filter: "muffled",
              fallOff: weaponDef.sound.fallOff ? weaponDef.sound.fallOff : 0,
              detune: 1200,
              delay: 30,
              volumeScale: 0.75
            });
          }
          if (shot.apRounds) {
            audioManager.playSound(shotSound, {
              channel: shot.playerId == activePlayerId ? "activePlayer" : "otherPlayers",
              soundPos: shot.pos,
              layer: player ? player.layer : shot.layer,
              filter: "muffled",
              fallOff: weaponDef.sound.fallOff ? weaponDef.sound.fallOff : 0,
              detune: 1e3,
              delay: 45,
              volumeScale: 0.75
            });
          }
          if (player) {
            if (player.__id == activePlayerId && weaponDef.fireMode == "single" && weaponDef.pullDelay) {
              const ammoLeft = player.m_localData.m_weapons[player.m_localData.m_curWeapIdx].ammo;
              const soundName = ammoLeft > 0 ? weaponDef.sound.cycle : weaponDef.sound.pull;
              audioManager.stopSound(player.cycleSoundInstance);
              player.cycleSoundInstance = audioManager.playSound(
                soundName
              );
            }
            const leftHand = shot.offhand || !weaponDef.isDual;
            const rightHand = !shot.offhand || !weaponDef.isDual;
            player.addRecoil(weaponDef.worldImg.recoil, leftHand, rightHand);
            player.fireDelay = weaponDef.fireDelay;
          }
        }
        shot.ticker += dt;
        if (shot.ticker >= shot.pullDelay) {
          const player = playerBarn.getPlayerById(shot.playerId);
          if (player && !player.m_netData.m_dead && player.m_netData.m_activeWeapon == shot.weaponType && weaponDef.caseTiming == "shoot") {
            createCasingParticle(
              shot.weaponType,
              Math.PI / 2 * -1,
              1,
              player.m_netData.m_pos,
              player.m_netData.m_dir,
              player.renderLayer,
              player.renderZOrd + 1,
              particleBarn
            );
          }
          shot.active = false;
        }
      }
    }
  }
}
const submergeMaskScaleFactor = 0.1;
function perksEqual(a, b) {
  if (a.length != b.length) {
    return false;
  }
  for (let i2 = 0; i2 < a.length; i2++) {
    if (a[i2].type != b[i2].type) {
      return false;
    }
  }
  return true;
}
function createPlayerNameText() {
  const nameStyle = {
    fontFamily: "Arial",
    fontWeight: "bold",
    fontSize: device.pixelRatio > 1 ? 30 : 22,
    align: "center",
    fill: 65535,
    stroke: 0,
    strokeThickness: 0,
    dropShadow: true,
    dropShadowColor: "#000000",
    dropShadowBlur: 1,
    dropShadowAngle: Math.PI / 3,
    dropShadowDistance: 1
  };
  const nameText = new Text("", nameStyle);
  nameText.anchor.set(0.5, 0.5);
  nameText.scale.set(0.5, 0.5);
  nameText.position.set(0, 30);
  nameText.visible = false;
  return nameText;
}
function createSprite() {
  const sprite = new Sprite();
  sprite.texture = Texture.EMPTY;
  sprite.anchor.set(0.5, 0.5);
  sprite.scale.set(1, 1);
  sprite.tint = 16777215;
  sprite.visible = false;
  return sprite;
}
const desktopZoomRads = Object.values(GameConfig.scopeZoomRadius.desktop);
const mobileZoomRads = Object.values(GameConfig.scopeZoomRadius.mobile);
class Gun {
  gunBarrel = createSprite();
  gunMag = createSprite();
  container = new Container();
  magTop = false;
  constructor() {
    this.container.addChild(this.gunBarrel);
    this.container.addChild(this.gunMag);
    this.container.rotation = Math.PI * 0.5;
    this.container.visible = false;
  }
  setVisible(vis) {
    this.container.visible = vis;
  }
  setType(type, t) {
    const gunDef = GameObjectDefs[type];
    const imgDef = gunDef.worldImg;
    this.gunBarrel.texture = Texture.from(imgDef.sprite);
    this.gunBarrel.anchor.set(0.5, 1);
    this.gunBarrel.position.set(0, 0);
    this.gunBarrel.scale.set(imgDef.scale.x * 0.5 / t, imgDef.scale.y * 0.5 / t);
    this.gunBarrel.tint = imgDef.tint;
    this.gunBarrel.visible = true;
    if (imgDef.magImg) {
      const magDef = imgDef.magImg;
      this.gunMag.texture = Texture.from(magDef.sprite);
      this.gunMag.anchor.set(0.5, 0.5);
      this.gunMag.position.set(magDef.pos.x / t, magDef.pos.y / t);
      this.gunMag.scale.set(0.25 / t, 0.25 / t);
      this.gunMag.tint = 16777215;
      this.gunMag.visible = true;
      if (magDef.top) {
        this.container.addChild(this.gunMag);
      } else {
        this.container.addChildAt(this.gunMag, 0);
      }
    } else {
      this.gunMag.visible = false;
    }
    this.magTop = imgDef.magImg?.top;
    const handOffset = gunDef.isDual ? v2.create(-5.95, 0) : v2.create(-4.25, -1.75);
    if (imgDef.gunOffset) {
      handOffset.x += imgDef.gunOffset.x;
      handOffset.y += imgDef.gunOffset.y;
    }
    this.container.position.set(handOffset.x, handOffset.y);
  }
}
class Player {
  __id;
  __type;
  active;
  bodySprite = createSprite();
  chestSprite = createSprite();
  flakSprite = createSprite();
  steelskinSprite = createSprite();
  helmetSprite = createSprite();
  visorSprite = createSprite();
  backpackSprite = createSprite();
  handLSprite = createSprite();
  handRSprite = createSprite();
  footLSprite = createSprite();
  footRSprite = createSprite();
  hipSprite = createSprite();
  gunLSprites = new Gun();
  gunRSprites = new Gun();
  objectLSprite = createSprite();
  objectRSprite = createSprite();
  meleeSprite = createSprite();
  bodySubmergeSprite = createSprite();
  handLSubmergeSprite = createSprite();
  handRSubmergeSprite = createSprite();
  footLSubmergeSprite = createSprite();
  footRSubmergeSprite = createSprite();
  bodyEffectSprite = createSprite();
  patchSprite = createSprite();
  handLContainer = new Container();
  handRContainer = new Container();
  footLContainer = new Container();
  footRContainer = new Container();
  bodyContainer = new Container();
  container = new Container();
  nameText = createPlayerNameText();
  auraContainer = new Container();
  auraCircle = createSprite();
  // Anim
  bones = [];
  anim = {
    type: Anim.None,
    data: {},
    seq: -1,
    ticker: 0,
    bones: []
  };
  perks = [];
  // Maintain a list of just the perk types as a hasPerk() optimization
  perkTypes = [];
  perksDirty = false;
  surface = null;
  wasInWater = false;
  weapTypeOld = "";
  visualsDirty = false;
  stepDistance = 0;
  zoomFast = false;
  playedDryFire = false;
  lastSwapIdx = -1;
  hasteSeq = -1;
  cycleSoundInstance = null;
  actionSoundInstance = null;
  useItemEmitter = null;
  hasteEmitter = null;
  passiveHealEmitter = null;
  downed = false;
  wasDowned = false;
  bleedTicker = 0;
  submersion = 0;
  gunRecoilL = 0;
  gunRecoilR = 0;
  fireDelay = 0;
  throwableState = "equip";
  lastThrowablePickupSfxTicker = 0;
  isNearDoorError = false;
  doorErrorTicker = 0;
  noCeilingRevealTicker = 0;
  frozenTicker = 0;
  updateFrozenImage = true;
  viewAabb = {
    min: v2.create(0, 0),
    max: v2.create(0, 0)
  };
  auraViewFade = 0;
  auraPulseTicker = 0;
  auraPulseDir = 1;
  renderLayer = 0;
  renderZOrd = 18;
  renderZIdx = 0;
  m_action;
  m_netData;
  m_localData;
  throwableStatePrev;
  m_rad = GameConfig.player.radius;
  m_bodyRad;
  m_pos = v2.create(0, 0);
  m_posOld = v2.create(0, 0);
  m_dir = v2.create(1, 0);
  m_dirOld = v2.create(1, 0);
  m_visualPos = v2.create(0, 0);
  m_visualPosOld = v2.create(0, 0);
  m_visualDir = v2.create(0, 0);
  m_visualDirOld = v2.create(0, 0);
  posInterpTicker = 0;
  dirInterpolationTicker = 0;
  layer = 0;
  isLoadoutAvatar = false;
  playActionStartSfx = true;
  isNew;
  wasInsideObstacle;
  insideObstacleType;
  lastInsideObstacleTime;
  dead;
  gunSwitchCooldown;
  constructor() {
    this.bodySprite.addChild(this.bodySubmergeSprite);
    this.handLSprite.addChild(this.handLSubmergeSprite);
    this.handRSprite.addChild(this.handRSubmergeSprite);
    this.footLSprite.addChild(this.footLSubmergeSprite);
    this.footRSprite.addChild(this.footRSubmergeSprite);
    this.handLContainer.addChild(this.gunLSprites.container);
    this.handLContainer.addChild(this.handLSprite);
    this.handLContainer.addChild(this.objectLSprite);
    this.handRContainer.addChild(this.gunRSprites.container);
    this.handRContainer.addChild(this.meleeSprite);
    this.handRContainer.addChild(this.handRSprite);
    this.handRContainer.addChild(this.objectRSprite);
    this.footLContainer.addChild(this.footLSprite);
    this.footRContainer.addChild(this.footRSprite);
    this.bodyContainer.addChild(this.footLContainer);
    this.bodyContainer.addChild(this.footRContainer);
    this.bodyContainer.addChild(this.backpackSprite);
    this.bodyContainer.addChild(this.bodySprite);
    this.bodyContainer.addChild(this.chestSprite);
    this.bodyContainer.addChild(this.flakSprite);
    this.bodyContainer.addChild(this.steelskinSprite);
    this.bodyContainer.addChild(this.hipSprite);
    this.bodyContainer.addChild(this.patchSprite);
    this.bodyContainer.addChild(this.bodyEffectSprite);
    this.bodyContainer.addChild(this.handLContainer);
    this.bodyContainer.addChild(this.handRContainer);
    this.bodyContainer.addChild(this.visorSprite);
    this.bodyContainer.addChild(this.helmetSprite);
    this.container.addChild(this.bodyContainer);
    this.container.addChild(this.nameText);
    this.auraContainer.addChild(this.auraCircle);
    this.initSubmergeSprites();
    const boneCount = Object.keys(Bones).length;
    for (let i2 = 0; i2 < boneCount; i2++) {
      this.bones.push(new Pose());
      this.anim.bones.push({
        weight: 0,
        pose: new Pose()
      });
    }
    this.throwableStatePrev = this.throwableState;
    this.m_bodyRad = this.m_rad;
    this.m_visualPos = v2.create(0, 0);
    this.m_visualPosOld = v2.create(0, 0);
    this.m_visualDir = v2.create(0, 0);
    this.m_visualDirOld = v2.create(0, 0);
    this.posInterpTicker = 0;
    this.dirInterpolationTicker = 0;
  }
  m_init() {
    this.isNew = false;
    this.wasInsideObstacle = false;
    this.insideObstacleType = "";
    this.lastInsideObstacleTime = 0;
    this.lastSwapIdx = -1;
    this.hasteSeq = -1;
    this.actionSoundInstance = null;
    this.m_action = {
      type: Action.None,
      seq: -1,
      seqOld: -1,
      item: "",
      skin: "",
      targetId: 0,
      time: 0,
      duration: 0,
      throttleCount: 0,
      throttleTicker: 0
    };
    this.m_netData = {
      m_pos: v2.create(0, 0),
      m_dir: v2.create(1, 0),
      m_outfit: "",
      m_backpack: "",
      m_helmet: "",
      m_chest: "",
      m_activeWeapon: "fists",
      m_layer: 0,
      m_dead: false,
      m_downed: false,
      m_animType: Anim.None,
      m_animSeq: 0,
      m_actionType: Action.None,
      m_actionSeq: 0,
      m_wearingPan: false,
      m_healEffect: false,
      m_frozen: false,
      m_frozenOri: 0,
      m_hasteType: HasteType.None,
      m_hasteSeq: 0,
      m_actionItem: "",
      m_scale: 1,
      m_role: "",
      m_perks: []
    };
    this.m_localData = {
      m_health: GameConfig.player.health,
      m_zoom: 0,
      m_boost: 0,
      m_scope: "",
      m_curWeapIdx: 0,
      m_inventory: {},
      m_weapons: [],
      m_spectatorCount: 0
    };
    this.playAnim(Anim.None, -1);
  }
  m_free() {
    this.container.visible = false;
    this.auraContainer.visible = false;
    if (this.useItemEmitter) {
      this.useItemEmitter.stop();
      this.useItemEmitter = null;
    }
    if (this.hasteEmitter) {
      this.hasteEmitter.stop();
      this.hasteEmitter = null;
    }
    if (this.passiveHealEmitter) {
      this.passiveHealEmitter.stop();
      this.passiveHealEmitter = null;
    }
  }
  m_updateData(data, fullUpdate, isNew, _ctx) {
    if (!v2.eq(data.pos, this.m_visualPosOld)) {
      this.m_visualPosOld = v2.copy(isNew ? data.pos : this.m_pos);
      this.posInterpTicker = 0;
    }
    if (!v2.eq(data.dir, this.m_visualDirOld)) {
      this.m_visualDirOld = v2.copy(isNew ? data.dir : this.m_dir);
      this.dirInterpolationTicker = 0;
    }
    this.m_netData.m_pos = v2.copy(data.pos);
    this.m_netData.m_dir = v2.copy(data.dir);
    if (fullUpdate) {
      this.m_netData.m_outfit = data.outfit;
      this.m_netData.m_backpack = data.backpack;
      this.m_netData.m_helmet = data.helmet;
      this.m_netData.m_chest = data.chest;
      this.m_netData.m_activeWeapon = data.activeWeapon;
      this.m_netData.m_layer = data.layer;
      this.m_netData.m_dead = data.dead;
      this.m_netData.m_downed = data.downed;
      this.m_netData.m_animType = data.animType;
      this.m_netData.m_animSeq = data.animSeq;
      this.m_netData.m_actionType = data.actionType;
      this.m_netData.m_actionSeq = data.actionSeq;
      this.m_netData.m_wearingPan = data.wearingPan;
      this.m_netData.m_healEffect = data.healEffect;
      this.m_netData.m_frozen = data.frozen;
      this.m_netData.m_frozenOri = data.frozenOri;
      this.m_netData.m_hasteType = data.hasteType;
      this.m_netData.m_hasteSeq = data.hasteSeq;
      this.m_netData.m_actionItem = data.actionItem;
      this.m_netData.m_scale = data.scale;
      this.m_netData.m_role = data.role;
      if (!!isNew || !perksEqual(this.m_netData.m_perks, data.perks)) {
        this.perksDirty = true;
      }
      this.m_netData.m_perks = data.perks;
      if (data.animSeq != this.anim.seq) {
        this.playAnim(data.animType, data.animSeq);
      }
      this.m_action.type = data.actionType;
      this.m_action.seq = data.actionSeq;
      this.m_action.item = data.actionItem;
      this.visualsDirty = true;
    }
    if (isNew) {
      this.isNew = true;
      this.renderLayer = this.m_netData.m_layer;
      this.renderZOrd = 18;
      this.renderZIdx = this.__id;
    }
  }
  m_setLocalData(data, _playerBarn) {
    const scopeOld = this.m_localData.m_scope;
    if (data.healthDirty) {
      this.m_localData.m_health = data.health;
    }
    if (data.boostDirty) {
      this.m_localData.m_boost = data.boost;
    }
    if (data.zoomDirty) {
      this.m_localData.m_zoom = data.zoom;
      this.zoomFast = false;
    }
    if (data.actionDirty) {
      this.m_action.time = data.action.time;
      this.m_action.duration = data.action.duration;
      this.m_action.targetId = data.action.targetId;
    }
    if (data.inventoryDirty) {
      this.m_localData.m_scope = data.scope;
      this.m_localData.m_inventory = {};
      for (const item in GameConfig.bagSizes) {
        if (GameConfig.bagSizes.hasOwnProperty(item)) {
          this.m_localData.m_inventory[item] = data.inventory[item];
        }
      }
    }
    if (data.weapsDirty) {
      this.m_localData.m_curWeapIdx = data.curWeapIdx;
      this.m_localData.m_weapons = [];
      for (let i2 = 0; i2 < GameConfig.WeaponSlot.Count; i2++) {
        const w = {
          type: data.weapons[i2].type,
          ammo: data.weapons[i2].ammo
        };
        this.m_localData.m_weapons.push(w);
      }
    }
    if (data.spectatorCountDirty) {
      this.m_localData.m_spectatorCount = data.spectatorCount;
    }
    if (this.m_localData.m_scope != scopeOld) {
      this.zoomFast = true;
    }
  }
  m_getZoom() {
    let zoom = this.m_localData.m_zoom;
    if (device.mobile) {
      const stepIdx = desktopZoomRads.indexOf(zoom);
      if (stepIdx !== -1) {
        zoom = mobileZoomRads[stepIdx];
      }
    }
    return zoom;
  }
  m_getHelmetLevel() {
    if (this.m_netData.m_helmet) {
      return GameObjectDefs[this.m_netData.m_helmet].level;
    }
    return 0;
  }
  m_getChestLevel() {
    if (this.m_netData.m_chest) {
      return GameObjectDefs[this.m_netData.m_chest].level;
    }
    return 0;
  }
  m_getBagLevel() {
    return GameObjectDefs[this.m_netData.m_backpack].level;
  }
  m_equippedWeaponType() {
    return GameObjectDefs[this.m_netData.m_activeWeapon].type;
  }
  m_hasWeaponInSlot(slot) {
    return this.m_localData.m_weapons[slot].type !== "";
  }
  getMeleeCollider() {
    const meleeDef = GameObjectDefs[this.m_netData.m_activeWeapon];
    const ang = Math.atan2(this.m_dir.y, this.m_dir.x);
    const off = v2.add(
      meleeDef.attack.offset,
      v2.mul(v2.create(1, 0), this.m_netData.m_scale - 1)
    );
    const pos = v2.add(this.m_pos, v2.rotate(off, ang));
    const rad = meleeDef.attack.rad;
    return collider.createCircle(pos, rad, 0);
  }
  m_hasActivePan() {
    return this.m_netData.m_wearingPan || this.m_netData.m_activeWeapon == "pan" && this.currentAnim() != Anim.Melee;
  }
  m_getPanSegment() {
    const panSurface = this.m_netData.m_wearingPan ? "unequipped" : "equipped";
    let surface = GameObjectDefs.pan.reflectSurface[panSurface];
    const scale = this.m_netData.m_scale;
    if (scale !== 1) {
      if (panSurface === "unequipped") {
        surface = {
          p0: v2.mul(surface.p0, scale),
          p1: v2.mul(surface.p1, scale)
        };
      } else {
        const s = (scale - 1) * 0.75;
        const off = v2.create(s, -s);
        surface = {
          p0: v2.add(surface.p0, off),
          p1: v2.add(surface.p1, off)
        };
      }
    }
    return surface;
  }
  canInteract(map) {
    return !this.m_netData.m_dead && (!map.perkMode || this.m_netData.m_role);
  }
  m_updatePerks(isActivePlayer, isSpectating, ui2Manager) {
    for (let i2 = 0; i2 < this.perks.length; i2++) {
      this.perks[i2].isNew = false;
    }
    if (this.perksDirty) {
      if (isActivePlayer && !isSpectating) {
        for (let i2 = 0; i2 < this.m_netData.m_perks.length; i2++) {
          const perk = this.m_netData.m_perks[i2];
          if (this.perks.findIndex((x) => {
            return x.type == perk.type;
          }) === -1) {
            ui2Manager.addRareLootMessage(perk.type);
          }
        }
        for (let i2 = 0; i2 < this.perks.length; i2++) {
          const perk = this.perks[i2];
          if (this.m_netData.m_perks.findIndex((x) => {
            return x.type == perk.type;
          }) === -1) {
            ui2Manager.removeRareLootMessage(perk.type);
          }
        }
      }
      const perks = [];
      for (let i2 = 0; i2 < this.m_netData.m_perks.length; i2++) {
        const perk = this.m_netData.m_perks[i2];
        const isNew = this.perks.findIndex((x) => {
          return x.type == perk.type;
        }) === -1;
        perks.push({
          type: perk.type,
          droppable: perk.droppable,
          isNew: isNew && !this.isNew
        });
      }
      this.perks = perks;
      this.perkTypes = [];
      for (let i2 = 0; i2 < this.m_netData.m_perks.length; i2++) {
        this.perkTypes.push(this.m_netData.m_perks[i2].type);
      }
      this.perksDirty = false;
    }
  }
  m_hasPerk(type) {
    return this.perkTypes.includes(type);
  }
  m_update(dt, playerBarn, map, audioManager, particleBarn, inputBinds, camera, renderer, ui2Manager, activeId, preventInput, displayingStats, isSpectating) {
    const curWeapDef = GameObjectDefs[this.m_netData.m_activeWeapon];
    const isActivePlayer = this.__id == activeId;
    const activePlayer = playerBarn.getPlayerById(activeId);
    this.m_posOld = v2.copy(this.m_pos);
    this.m_dirOld = v2.copy(this.m_dir);
    this.m_pos = v2.copy(this.m_netData.m_pos);
    this.m_dir = v2.copy(this.m_netData.m_dir);
    this.layer = this.m_netData.m_layer;
    this.downed = this.m_netData.m_downed;
    this.m_rad = this.m_netData.m_scale * GameConfig.player.radius;
    if (camera.m_interpEnabled) {
      this.posInterpTicker += dt;
      const posT = math.clamp(this.posInterpTicker / camera.m_interpInterval, 0, 1);
      this.m_visualPos = v2.lerp(posT, this.m_visualPosOld, this.m_pos);
      if (!camera.m_localRotationEnabled || !isActivePlayer || isSpectating || displayingStats) {
        this.dirInterpolationTicker += dt;
        const dirT = math.clamp(
          this.dirInterpolationTicker / camera.m_interpInterval,
          0,
          1
        );
        this.m_visualDir = v2.lerp(dirT, this.m_visualDirOld, this.m_dir);
      }
    } else {
      this.m_visualPos = v2.copy(this.m_pos);
      this.m_visualDir = v2.copy(this.m_dir);
    }
    if (!math.eqAbs(this.m_rad, this.m_bodyRad)) {
      const bodyRadDist = this.m_rad - this.m_bodyRad;
      let bodyRadStep = Math.abs(bodyRadDist) > 1e-4 ? bodyRadDist * dt * 6 : bodyRadDist;
      if (this.isNew) {
        bodyRadStep = bodyRadDist;
      }
      this.m_bodyRad += bodyRadStep;
      this.visualsDirty = true;
    }
    if (isActivePlayer) {
      const viewEdge = camera.m_screenToPoint(v2.create(camera.m_screenWidth, 0));
      const viewExtent = v2.sub(viewEdge, camera.m_pos);
      this.viewAabb.min = v2.sub(camera.m_pos, viewExtent);
      this.viewAabb.max = v2.add(camera.m_pos, viewExtent);
    }
    this.m_updatePerks(isActivePlayer, isSpectating, ui2Manager);
    const weapTypeDirty = this.weapTypeOld != this.m_netData.m_activeWeapon;
    this.weapTypeOld = this.m_netData.m_activeWeapon;
    this.lastThrowablePickupSfxTicker -= dt;
    this.noCeilingRevealTicker -= dt;
    const activeGroupId = playerBarn.getPlayerInfo(activeId).groupId;
    const playerInfo = playerBarn.getPlayerInfo(this.__id);
    const inSameGroup = playerInfo.groupId == activeGroupId;
    this.nameText.text = playerInfo.name;
    this.nameText.visible = !isActivePlayer && inSameGroup;
    let insideObstacle = null;
    let doorErrorObstacle = null;
    const obstacles = map.m_obstaclePool.m_getPool();
    for (let i2 = 0; i2 < obstacles.length; i2++) {
      const obstacle = obstacles[i2];
      if (obstacle.active && !obstacle.dead && obstacle.layer == this.m_netData.m_layer) {
        if (obstacle.isBush) {
          const rad = this.m_rad * 0.25;
          if (collider.intersectCircle(obstacle.collider, this.m_pos, rad)) {
            insideObstacle = obstacle;
          }
        } else if (obstacle.isDoor) {
          const rad = this.m_rad + 0.25;
          const toDoor = v2.sub(obstacle.pos, this.m_pos);
          const doorDir = v2.rotate(v2.create(1, 0), obstacle.rot);
          const res = collider.intersectCircle(
            obstacle.collider,
            this.m_pos,
            rad
          );
          if (res && (obstacle.door.locked || obstacle.door.openOneWay && v2.dot(toDoor, doorDir) < 0)) {
            doorErrorObstacle = obstacle;
          }
        }
      }
    }
    const isInside = insideObstacle != null;
    if (isInside) {
      this.insideObstacleType = insideObstacle?.type;
    }
    this.lastInsideObstacleTime -= dt;
    if (this.wasInsideObstacle != isInside && this.lastInsideObstacleTime < 0 && !this.isNew) {
      const obstacleDef = MapObjectDefs[this.insideObstacleType];
      this.lastInsideObstacleTime = 0.2;
      audioManager.playSound(obstacleDef?.sound.enter, {
        channel: "sfx",
        soundPos: this.m_pos,
        fallOff: 1,
        layer: this.layer,
        filter: "muffled"
      });
      const moveDir = v2.normalizeSafe(
        v2.sub(this.m_posOld, this.m_pos),
        v2.create(1, 0)
      );
      const partDir = isInside ? 1 : -1;
      const numParticles = Math.floor(util.random(3, 5));
      for (let i2 = 0; i2 < numParticles; i2++) {
        const vel = v2.mul(
          v2.rotate(
            v2.mul(moveDir, partDir),
            (Math.random() - 0.5) * Math.PI / 1.5
          ),
          util.random(6, 8)
        );
        particleBarn.addParticle(
          obstacleDef.hitParticle,
          this.layer,
          this.m_pos,
          vel
        );
      }
    }
    this.wasInsideObstacle = isInside;
    const wasNearDoorError = this.isNearDoorError;
    this.isNearDoorError = doorErrorObstacle != null;
    this.doorErrorTicker -= dt;
    if (this.isNearDoorError && !wasNearDoorError && this.doorErrorTicker <= 0) {
      this.doorErrorTicker = 0.5;
      const doorDef = MapObjectDefs[doorErrorObstacle?.type];
      const doorSfx = doorDef.door?.sound.error;
      audioManager.playSound(doorSfx, {
        channel: "sfx",
        soundPos: this.m_pos,
        fallOff: 1,
        layer: this.layer,
        filter: "muffled"
      });
    }
    this.surface = map.getGroundSurface(this.m_pos, this.layer);
    const inWater = this.surface.type == "water";
    this.updateSubmersion(dt, map);
    this.updateFrozenState(dt);
    if (!this.m_netData.m_dead) {
      this.stepDistance += v2.length(v2.sub(this.m_posOld, this.m_pos));
      if (this.stepDistance > 5 && inWater || inWater && !this.wasInWater) {
        this.stepDistance = 0;
        particleBarn.addRippleParticle(
          this.m_pos,
          this.layer,
          this.surface?.data.rippleColor
        );
        audioManager.playGroup("footstep_water", {
          soundPos: this.m_pos,
          fallOff: 3,
          layer: this.layer,
          filter: "muffled"
        });
      } else if (this.stepDistance > 4 && !inWater) {
        this.stepDistance = 0;
        audioManager.playGroup(`footstep_${this.surface.type}`, {
          soundPos: this.m_pos,
          fallOff: 3,
          layer: this.layer,
          filter: "muffled"
        });
      }
      this.wasInWater = inWater;
    }
    this.bleedTicker -= dt;
    if (!this.m_netData.m_dead && (this.m_netData.m_downed && this.m_action.type == Action.None || this.m_hasPerk("trick_drain")) && this.bleedTicker < 0) {
      this.bleedTicker = this.m_hasPerk("trick_drain") ? GameConfig.player.bleedTickRate * 3 : GameConfig.player.bleedTickRate;
      const vel = v2.rotate(
        v2.mul(this.m_dir, -1),
        (Math.random() - 0.5) * Math.PI / 3
      );
      vel.y *= -1;
      particleBarn.addParticle(
        "bloodSplat",
        this.renderLayer,
        v2.create(0, 0),
        v2.mul(vel, camera.m_ppu),
        1,
        Math.random() * Math.PI * 2,
        this.container,
        this.renderZOrd + 1
      );
      if (!displayingStats) {
        audioManager.playSound("player_bullet_hit_02", {
          channel: "hits",
          soundPos: this.m_pos,
          fallOff: 3,
          layer: this.layer,
          filter: "muffled"
        });
      }
    }
    this.gunSwitchCooldown -= dt;
    this.fireDelay -= dt;
    if (isActivePlayer && (weapTypeDirty || this.lastSwapIdx != this.m_localData.m_curWeapIdx)) {
      const lastWeapIdx = this.lastSwapIdx;
      this.lastSwapIdx = this.m_localData.m_curWeapIdx;
      const itemDef = GameObjectDefs[this.m_netData.m_activeWeapon];
      if (itemDef.type == "melee" || itemDef.type == "throwable") {
        if (itemDef.type != "throwable" || this.lastThrowablePickupSfxTicker <= 0) {
          const soundPos = this.isLoadoutAvatar ? camera.m_pos : this.m_pos;
          audioManager.playSound(itemDef.sound.deploy, {
            channel: "sfx",
            soundPos,
            fallOff: 3
          });
        }
      } else if (itemDef.type == "gun") {
        let switchSound = "gun_switch_01";
        let deployFull = false;
        if ((lastWeapIdx == 0 || lastWeapIdx == 1) && (this.lastSwapIdx == 0 || this.lastSwapIdx == 1) && this.fireDelay > 0) {
          const lastWeapDef = GameObjectDefs[this.m_localData.m_weapons[lastWeapIdx].type];
          if (itemDef && lastWeapDef && itemDef.deployGroup !== void 0 && lastWeapDef.deployGroup !== void 0 && itemDef.deployGroup == lastWeapDef.deployGroup) {
            deployFull = true;
          }
        }
        if (this.gunSwitchCooldown > 0 || deployFull) {
          switchSound = itemDef.sound.deploy;
        } else {
          this.gunSwitchCooldown = GameConfig.player.freeSwitchCooldown;
        }
        audioManager.stopSound(this.cycleSoundInstance);
        this.cycleSoundInstance = audioManager.playSound(switchSound, {
          channel: "activePlayer"
        });
        this.fireDelay = 0;
      }
    }
    if (!audioManager.isSoundPlaying(this.cycleSoundInstance)) {
      this.cycleSoundInstance = null;
    }
    if (this.m_action.seq != this.m_action.seqOld && !this.isNew) {
      let playEffect = true;
      if (!isActivePlayer && this.m_action.type != Action.None) {
        this.m_action.throttleTicker = 0.5;
        if (this.m_action.throttleCount < 5) {
          this.m_action.throttleCount++;
        } else {
          playEffect = false;
        }
      }
      if (playEffect) {
        this.playActionStartEffect(isActivePlayer, particleBarn, audioManager);
      }
    }
    this.m_action.seqOld = this.m_action.seq;
    this.updateActionEffect(isActivePlayer, playerInfo, particleBarn, audioManager);
    this.m_action.throttleTicker -= dt;
    if (this.m_action.throttleTicker < 0 && this.m_action.throttleCount > 0) {
      this.m_action.throttleCount--;
      this.m_action.throttleTicker = 0.25;
    }
    if (this.m_netData.m_hasteType && this.m_netData.m_hasteSeq != this.hasteSeq) {
      const hasteEffects = {
        [HasteType.None]: {
          particle: "",
          sound: ""
        },
        [HasteType.Windwalk]: {
          particle: "windwalk",
          sound: "ability_stim_01"
        },
        [HasteType.Takedown]: {
          particle: "takedown",
          sound: "ability_stim_01"
        },
        [HasteType.Inspire]: {
          particle: "inspire",
          sound: "ability_stim_01"
        }
      };
      const fx = hasteEffects[this.m_netData.m_hasteType];
      if (!this.isNew) {
        audioManager.playSound(fx.sound, {
          channel: "sfx",
          soundPos: this.m_pos,
          fallOff: 1,
          layer: this.layer,
          filter: "muffled"
        });
      }
      this.hasteEmitter?.stop();
      this.hasteEmitter = particleBarn.addEmitter(fx.particle, {
        pos: this.m_pos,
        layer: this.layer
      });
      this.hasteSeq = this.m_netData.m_hasteSeq;
    } else if (!this.m_netData.m_hasteType && this.hasteEmitter) {
      this.hasteEmitter.stop();
      this.hasteEmitter = null;
    }
    if (this.hasteEmitter) {
      this.hasteEmitter.pos = v2.add(this.m_pos, v2.create(0, 0.1));
      this.hasteEmitter.layer = this.renderLayer;
      this.hasteEmitter.zOrd = this.renderZOrd + 1;
    }
    if (this.m_netData.m_healEffect && !this.passiveHealEmitter) {
      this.passiveHealEmitter = particleBarn.addEmitter("heal_basic", {
        pos: this.m_pos,
        layer: this.layer
      });
    } else if (!this.m_netData.m_healEffect && this.passiveHealEmitter) {
      this.passiveHealEmitter.stop();
      this.passiveHealEmitter = null;
    }
    if (this.passiveHealEmitter) {
      this.passiveHealEmitter.pos = v2.add(this.m_pos, v2.create(0, 0.1));
      this.passiveHealEmitter.layer = this.renderLayer;
      this.passiveHealEmitter.zOrd = this.renderZOrd + 1;
    }
    if (isActivePlayer && !isSpectating) {
      const curWeapIdx = this.m_localData.m_curWeapIdx;
      const curWeap = this.m_localData.m_weapons[curWeapIdx];
      const itemDef = GameObjectDefs[curWeap.type];
      if (!this.playedDryFire && this.m_equippedWeaponType() == "gun" && (inputBinds.isBindPressed(Input.Fire) || inputBinds.isBindDown(Input.Fire) && itemDef.fireMode == "auto") && this.m_action.type == Action.None && !preventInput && !itemDef.ammoInfinite) {
        const ammoLeft = this.m_localData.m_inventory[itemDef.ammo] || 0;
        const currentClip = curWeap.ammo;
        if (ammoLeft == 0 && currentClip == 0) {
          audioManager.playSound(itemDef.sound.empty);
          this.playedDryFire = true;
        }
      }
      if (!inputBinds.isBindDown(Input.Fire)) {
        this.playedDryFire = false;
      }
    }
    this.gunRecoilL = math.max(0, this.gunRecoilL - this.gunRecoilL * dt * 5 - dt);
    this.gunRecoilR = math.max(0, this.gunRecoilR - this.gunRecoilR * dt * 5 - dt);
    const xe = {
      playerBarn,
      map,
      audioManager,
      particleBarn
    };
    this.updateAnim(dt, xe);
    if (this.currentAnim() == Anim.None) {
      this.throwableState = "equip";
    }
    if ((this.currentAnim() == Anim.Cook || this.currentAnim() == Anim.Throw) && curWeapDef.type != "throwable") {
      this.playAnim(Anim.None, this.anim.seq);
    }
    const idlePose = this.selectIdlePose();
    const idlePoseData = IdlePoses[idlePose];
    for (let boneIdx = 0; boneIdx < this.bones.length; boneIdx++) {
      const idleBonePose = idlePoseData[boneIdx] || Pose.identity;
      const animBone = this.anim.bones[boneIdx];
      if (animBone.weight > 0) {
        this.bones[boneIdx].copy(
          Pose.lerp(animBone.weight, idleBonePose, animBone.pose)
        );
      } else {
        this.bones[boneIdx].copy(idleBonePose);
      }
    }
    if (this.throwableStatePrev != this.throwableState) {
      this.visualsDirty = true;
    }
    this.throwableStatePrev = this.throwableState;
    if (this.visualsDirty) {
      this.updateVisuals(playerBarn, map);
    }
    this.visualsDirty = false;
    this.updateAura(dt, isActivePlayer, activePlayer);
    this.Zr(inputBinds.input, camera, isActivePlayer, isSpectating, displayingStats);
    this.updateRenderLayer(isActivePlayer, activePlayer, map);
    renderer.addPIXIObj(
      this.auraContainer,
      this.renderLayer,
      this.renderZOrd - 1,
      this.renderZIdx
    );
    const auraLayerMatch = activePlayer.layer & 2 || (activePlayer.layer & 1) == 1 || (this.layer & 1) == 0;
    this.auraContainer.visible = Boolean(!this.m_netData.m_dead && auraLayerMatch);
    renderer.addPIXIObj(
      this.container,
      this.renderLayer,
      this.renderZOrd,
      this.renderZIdx
    );
    this.isNew = false;
  }
  render(camera, debug) {
    const screenPos = camera.m_pointToScreen(this.m_visualPos);
    const screenScale = camera.m_pixels(1);
    this.container.position.set(screenPos.x, screenPos.y);
    this.container.scale.set(screenScale, screenScale);
    this.container.visible = !this.m_netData.m_dead;
    this.auraContainer.position.set(screenPos.x, screenPos.y);
    this.auraContainer.scale.set(screenScale, screenScale);
  }
  updateRenderLayer(isActivePlayer, activePlayer, map) {
    const visualCol = collider.createCircle(
      this.m_pos,
      GameConfig.player.maxVisualRadius
    );
    let onMask = false;
    let onStairs = false;
    let occluded = false;
    const structures = map.m_structurePool.m_getPool();
    for (let i2 = 0; i2 < structures.length; i2++) {
      const structure = structures[i2];
      if (structure.active) {
        for (let j = 0; j < structure.stairs.length; j++) {
          const stairs = structure.stairs[j];
          const col = collider.intersect(stairs.collision, visualCol);
          if (col) {
            onStairs = true;
            const stairTop = v2.add(
              stairs.center,
              v2.mul(stairs.downDir, -2.5)
            );
            let dir = v2.sub(stairTop, this.m_pos);
            const dist = v2.length(dir);
            dir = dist > 1e-4 ? v2.div(dir, dist) : v2.create(1, 0);
            occluded = collisionHelpers.intersectSegmentDist(
              map.m_obstaclePool.m_getPool(),
              this.m_pos,
              dir,
              dist,
              0.5,
              this.layer,
              false
            ) < dist;
          }
          if (isActivePlayer && stairs.noCeilingReveal && col && this.layer != 0) {
            this.noCeilingRevealTicker = 0.25;
          }
        }
        for (let j = 0; j < structure.mask.length; j++) {
          if (collider.intersect(structure.mask[j], visualCol)) {
            onMask = true;
            break;
          }
        }
      }
    }
    let renderLayer = this.layer;
    let renderZOrd = 18;
    if (onStairs && (renderLayer & 1 && (activePlayer.layer & 1 || !occluded) || activePlayer.layer & 2 && !onMask)) {
      renderLayer |= 2;
    }
    if (!!onStairs && (renderLayer & 1) == (activePlayer.layer & 1) && (!onMask || activePlayer.layer == 0)) {
      renderLayer |= 2;
      renderZOrd += 100;
    }
    const renderZIdx = this.__id + (this.m_netData.m_downed ? 0 : 262144) + (isActivePlayer ? 65536 : 0) + (this.m_rad > 1 ? 131072 : 0);
    this.renderLayer = renderLayer;
    this.renderZOrd = renderZOrd;
    this.renderZIdx = renderZIdx;
  }
  updateVisuals(playerBarn, map) {
    const outfitDef = GameObjectDefs[this.m_netData.m_outfit];
    const outfitImg = outfitDef.skinImg;
    const bodyScale = this.m_bodyRad / GameConfig.player.radius;
    this.bodySprite.texture = Texture.from(outfitImg.baseSprite);
    this.bodySprite.tint = outfitDef.ghillie ? map.getMapDef().biome.colors.playerGhillie : outfitImg.baseTint;
    this.bodySprite.scale.set(0.25, 0.25);
    this.bodySprite.visible = true;
    if (this.m_netData.m_frozen && this.updateFrozenImage) {
      const frozenSprites = map.getMapDef().biome.frozenSprites || [];
      if (frozenSprites.length > 0) {
        const sprite = frozenSprites[Math.floor(Math.random() * frozenSprites.length)];
        const n = math.oriToRad(this.m_netData.m_frozenOri) + Math.PI * 0.5 + (Math.random() - 0.5) * Math.PI * 0.25;
        this.bodyEffectSprite.texture = Texture.from(sprite);
        this.bodyEffectSprite.rotation = n;
        this.bodyEffectSprite.tint = 16777215;
        this.bodyEffectSprite.scale.set(0.25, 0.25);
      }
      this.updateFrozenImage = false;
    }
    if (map.factionMode && !outfitDef.ghillie) {
      const playerInfo = playerBarn.getPlayerInfo(this.__id);
      const teamId = playerInfo.teamId;
      const teamSprites = ["player-patch-01.img", "player-patch-02.img"];
      const teamIdx = (teamId - 1) % teamSprites.length;
      const sprite = teamSprites[teamIdx];
      const tint = GameConfig.teamColors[teamIdx];
      const rot = math.oriToRad(3) + Math.PI * 0.5;
      this.patchSprite.texture = Texture.from(sprite);
      this.patchSprite.rotation = rot;
      this.patchSprite.tint = tint;
      this.patchSprite.scale.set(0.25, 0.25);
      this.patchSprite.visible = true;
    } else {
      this.patchSprite.visible = false;
    }
    const setHandSprite = function(sprite, img, tint) {
      sprite.texture = Texture.from(img);
      sprite.scale.set(0.175, 0.175);
      sprite.tint = tint;
      sprite.visible = true;
    };
    const handTint = outfitDef.ghillie ? map.getMapDef().biome.colors.playerGhillie : outfitImg.handTint;
    setHandSprite(this.handLSprite, outfitImg.handSprite, handTint);
    setHandSprite(this.handRSprite, outfitImg.handSprite, handTint);
    const setFootSprite = function(sprite, tint, downed) {
      sprite.texture = Texture.from("player-feet-01.img");
      sprite.scale.set(0.45, 0.45);
      sprite.rotation = Math.PI * 0.5;
      sprite.tint = tint;
      sprite.visible = downed;
    };
    const footTint = outfitDef.ghillie ? map.getMapDef().biome.colors.playerGhillie : outfitImg.footTint;
    setFootSprite(this.footLSprite, footTint, this.downed);
    setFootSprite(this.footRSprite, footTint, this.downed);
    if (this.m_hasPerk("flak_jacket") && !outfitDef.ghillie) {
      this.flakSprite.texture = Texture.from("player-armor-base-01.img");
      this.flakSprite.scale.set(0.215, 0.215);
      this.flakSprite.tint = 3671558;
      this.flakSprite.alpha = 0.7;
      this.flakSprite.visible = true;
    } else {
      this.flakSprite.visible = false;
    }
    if (this.m_netData.m_chest == "" || outfitDef.ghillie) {
      this.chestSprite.visible = false;
    } else {
      const chestDef = GameObjectDefs[this.m_netData.m_chest];
      const chestSkin = chestDef.skinImg;
      this.chestSprite.texture = Texture.from(chestSkin.baseSprite);
      this.chestSprite.scale.set(0.25, 0.25);
      this.chestSprite.tint = chestSkin.baseTint;
      this.chestSprite.visible = true;
    }
    if (this.m_hasPerk("steelskin") && !outfitDef.ghillie) {
      this.steelskinSprite.texture = Texture.from("loot-melee-pan-black.img");
      this.steelskinSprite.scale.set(0.4, 0.4);
      this.steelskinSprite.anchor.set(0.575, 0.5);
      this.steelskinSprite.tint = 16777215;
      this.steelskinSprite.visible = true;
    } else {
      this.steelskinSprite.visible = false;
    }
    if (this.m_netData.m_helmet == "" || outfitDef.ghillie) {
      this.helmetSprite.visible = false;
    } else {
      const helmetDef = GameObjectDefs[this.m_netData.m_helmet];
      const helmetSkin = helmetDef.skinImg;
      const helmetOffset = (this.downed ? 1 : -1) * 3.33;
      this.helmetSprite.texture = Texture.from(helmetSkin.baseSprite);
      this.helmetSprite.position.set(helmetOffset, 0);
      if (helmetSkin.spriteScale) {
        this.helmetSprite.scale.set(
          helmetSkin.spriteScale,
          helmetSkin.spriteScale
        );
      } else {
        this.helmetSprite.scale.set(0.15, 0.15);
      }
      let helmetTint = helmetSkin.baseTint;
      if (map.factionMode) {
        helmetTint = playerBarn.getPlayerInfo(this.__id).teamId == 1 ? helmetSkin.baseTintRed : helmetSkin.baseTintBlue;
      }
      this.helmetSprite.tint = helmetTint;
      this.helmetSprite.visible = true;
    }
    if (this.m_getBagLevel() > 0 && !outfitDef.ghillie && !this.downed) {
      const bagOffsets = [10.25, 11.5, 12.75];
      const bagLevel = this.m_getBagLevel();
      const bagOffset = bagOffsets[math.min(bagLevel - 1, bagOffsets.length - 1)];
      const scale = (0.4 + bagLevel * 0.03) * 0.5;
      this.backpackSprite.texture = Texture.from("player-circle-base-01.img");
      this.backpackSprite.position.set(-bagOffset, 0);
      this.backpackSprite.scale.set(scale, scale);
      this.backpackSprite.tint = outfitImg.backpackTint;
      this.backpackSprite.visible = true;
      (function(sprite, img, tint) {
        sprite.texture = Texture.from(img);
        sprite.tint = tint;
      })(this.backpackSprite, outfitImg.backpackSprite, outfitImg.backpackTint);
    } else {
      this.backpackSprite.visible = false;
    }
    if (this.m_netData.m_wearingPan) {
      const imgDef = GameObjectDefs.pan.hipImg;
      this.hipSprite.texture = Texture.from(imgDef.sprite);
      this.hipSprite.position.set(imgDef.pos.x, imgDef.pos.y);
      this.hipSprite.scale.set(imgDef.scale.x, imgDef.scale.y);
      this.hipSprite.rotation = imgDef.rot;
      this.hipSprite.tint = imgDef.tint;
      this.hipSprite.visible = true;
    } else {
      this.hipSprite.visible = false;
    }
    const R = GameObjectDefs[this.m_netData.m_activeWeapon];
    if (R.type == "gun") {
      this.gunRSprites.setType(this.m_netData.m_activeWeapon, bodyScale);
      this.gunRSprites.setVisible(true);
      if (R.isDual) {
        this.gunLSprites.setType(this.m_netData.m_activeWeapon, bodyScale);
        this.gunLSprites.setVisible(true);
      } else {
        this.gunLSprites.setVisible(false);
      }
      const L = this.bodyContainer.getChildIndex(this.handRContainer);
      const q = this.bodyContainer.getChildIndex(this.handRContainer);
      let F = L + 1;
      if (this.gunRSprites.magTop || R.worldImg.handsBelow) {
        F = L - 1;
      }
      F = math.max(F, 0);
      if (q != F) {
        this.bodyContainer.addChildAt(this.handLContainer, F);
      }
      const j = this.handRContainer.getChildIndex(this.gunRSprites.container);
      const N = R.worldImg.handsBelow ? this.handRContainer.children.length : 0;
      if (j != N) {
        this.handRContainer.addChildAt(this.gunRSprites.container, N);
      }
    } else {
      this.gunLSprites.setVisible(false);
      this.gunRSprites.setVisible(false);
    }
    if (this.downed != this.wasDowned) {
      this.wasDowned = this.downed;
      if (this.downed) {
        const H = this.bodyContainer.getChildIndex(this.footLContainer);
        this.bodyContainer.addChildAt(this.handLContainer, H);
        this.bodyContainer.addChildAt(this.handRContainer, H);
      } else {
        this.bodyContainer.addChild(this.handLContainer);
        this.bodyContainer.addChild(this.handRContainer);
      }
    }
    if (R.type == "melee" && this.m_netData.m_activeWeapon != "fists") {
      const V = R.worldImg;
      this.meleeSprite.texture = Texture.from(V.sprite);
      this.meleeSprite.pivot.set(-V.pos.x, -V.pos.y);
      this.meleeSprite.scale.set(V.scale.x / bodyScale, V.scale.y / bodyScale);
      this.meleeSprite.rotation = V.rot;
      this.meleeSprite.tint = V.tint;
      this.meleeSprite.visible = true;
      const U = this.handRContainer.getChildIndex(this.handRSprite);
      const W = math.max(V.renderOnHand ? U + 1 : U - 1, 0);
      if (this.handRContainer.getChildIndex(this.meleeSprite) != W) {
        this.handRContainer.addChildAt(this.meleeSprite, W);
      }
      const G = this.bodyContainer.getChildIndex(this.handRContainer);
      const X = math.max(V.leftHandOntop ? G + 1 : G - 1, 0);
      if (this.bodyContainer.getChildIndex(this.handLContainer) != X) {
        this.bodyContainer.addChildAt(this.handLContainer, X);
      }
    } else {
      this.meleeSprite.visible = false;
    }
    if (R.type == "throwable") {
      const K = function(e, t) {
        if (t.sprite && t.sprite != "none") {
          let sprite = t.sprite;
          if (map.mapDef.gameMode.spookyKillSounds) {
            sprite = halloweenSpriteMap[sprite] || sprite;
          }
          e.texture = Texture.from(sprite);
          e.position.set(t.pos?.x, t.pos?.y);
          e.scale.set(t.scale, t.scale);
          e.rotation = Math.PI * 0.5;
          e.visible = true;
        } else {
          e.visible = false;
        }
      };
      const Z = R.handImg?.[this.throwableState];
      K(this.objectLSprite, Z.left);
      K(this.objectRSprite, Z.right);
    } else {
      this.objectLSprite.visible = false;
      this.objectRSprite.visible = false;
    }
    if (this.downed || this.currentAnim() == Anim.Revive) {
      this.gunLSprites.setVisible(false);
      this.gunRSprites.setVisible(false);
      this.meleeSprite.visible = false;
      this.objectLSprite.visible = false;
      this.objectRSprite.visible = false;
    }
    if (this.downed) {
      this.backpackSprite.visible = false;
    }
    if (this.m_action.type != Action.UseItem && this.m_action.type != Action.Revive || this.m_netData.m_dead || this.m_netData.m_downed && !this.m_hasPerk("self_revive") || !this.m_hasPerk("aoe_heal")) {
      this.auraPulseTicker = 0;
      this.auraPulseDir = 1;
      this.auraCircle.visible = false;
    } else {
      const actionItemDef = GameObjectDefs[this.m_action.item];
      const sprite = actionItemDef?.aura ? actionItemDef.aura.sprite : "part-aura-circle-01.img";
      const tint = actionItemDef?.aura ? actionItemDef.aura.tint : 16711935;
      const auraScale = 0.125;
      let auraRad = actionItemDef ? GameConfig.player.medicHealRange : GameConfig.player.medicReviveRange;
      auraRad *= auraScale;
      this.auraCircle.texture = Texture.from(sprite);
      this.auraCircle.scale.set(auraRad, auraRad);
      this.auraCircle.tint = tint;
      this.auraCircle.visible = true;
    }
    if (this.m_netData.m_role != "" && GameObjectDefs[this.m_netData.m_role]?.visorImg && this.m_netData.m_helmet != "" && !outfitDef.ghillie) {
      const roleDef = GameObjectDefs[this.m_netData.m_role];
      const visorSkin = roleDef.visorImg;
      if (visorSkin) {
        const helmetOffset = (this.downed ? 1 : -1) * 3.33;
        this.visorSprite.texture = Texture.from(visorSkin.baseSprite);
        this.visorSprite.position.set(helmetOffset, 0);
      }
      if (visorSkin.spriteScale) {
        this.visorSprite.scale.set(visorSkin.spriteScale, visorSkin.spriteScale);
      } else {
        this.visorSprite.scale.set(0.15, 0.15);
      }
      this.visorSprite.visible = true;
    } else {
      this.visorSprite.visible = false;
    }
    this.bodyContainer.scale.set(bodyScale, bodyScale);
  }
  updateAura(dt, isActivePlayer, activePlayer) {
    let inView = true;
    if (!isActivePlayer) {
      inView = coldet.testCircleAabb(
        this.m_pos,
        this.m_rad,
        activePlayer.viewAabb.min,
        activePlayer.viewAabb.max
      );
    }
    this.auraViewFade = math.lerp(dt * 6, this.auraViewFade, inView ? 1 : 0);
    if (this.auraCircle.visible) {
      this.auraPulseTicker = math.clamp(
        this.auraPulseTicker + dt * this.auraPulseDir * 1.5,
        0,
        1
      );
      const pulseAlpha = math.easeOutExpo(this.auraPulseTicker) * 0.75 + 0.25;
      if (this.auraPulseTicker >= 1 || this.auraPulseTicker <= 0) {
        this.auraPulseDir *= -1;
      }
      this.auraCircle.alpha = pulseAlpha * this.auraViewFade;
    }
  }
  Zr(inputManager, camera, isActivePlayer, isSpectating, displayingStats) {
    const e = function(e2, t2) {
      e2.position.set(t2.pos.x, t2.pos.y);
      e2.pivot.set(-t2.pivot.x, -t2.pivot.y);
      e2.rotation = t2.rot;
    };
    e(this.handLContainer, this.bones[Bones.HandL]);
    e(this.handRContainer, this.bones[Bones.HandR]);
    e(this.footLContainer, this.bones[Bones.FootL]);
    e(this.footRContainer, this.bones[Bones.FootR]);
    const t = GameObjectDefs[this.m_netData.m_activeWeapon];
    if (!this.downed && this.currentAnim() != Anim.Revive && t.type == "gun") {
      if (t.worldImg.leftHandOffset) {
        this.handLContainer.position.x += t.worldImg.leftHandOffset.x;
        this.handLContainer.position.y += t.worldImg.leftHandOffset.y;
      }
    }
    this.handLContainer.position.x -= this.gunRecoilL * 1.125;
    this.handRContainer.position.x -= this.gunRecoilR * 1.125;
    const mouseY = inputManager.mousePos.y;
    const mouseX = inputManager.mousePos.x;
    if (!device.mobile && camera.m_localRotationEnabled && isActivePlayer && !isSpectating && !displayingStats) {
      this.bodyContainer.rotation = Math.atan2(
        mouseY - window.innerHeight / 2,
        mouseX - window.innerWidth / 2
      );
    } else {
      this.bodyContainer.rotation = -Math.atan2(
        this.m_visualDir.y,
        this.m_visualDir.x
      );
    }
  }
  playActionStartEffect(isActivePlayer, particleBarn, audioManager) {
    let actionSound = null;
    switch (this.m_action.type) {
      case Action.Reload:
      case Action.ReloadAlt:
        {
          const actionItemDef = GameObjectDefs[this.m_action.item];
          if (actionItemDef) {
            actionSound = {
              sound: this.m_action.type == Action.ReloadAlt ? actionItemDef.sound.reloadAlt : actionItemDef.sound.reload,
              channel: isActivePlayer ? "activePlayer" : "otherPlayers"
            };
          }
        }
        break;
      case Action.UseItem: {
        const actionItemDef = GameObjectDefs[this.m_action.item];
        if (actionItemDef) {
          actionSound = {
            sound: actionItemDef.sound.use,
            channel: isActivePlayer ? "activePlayer" : "otherPlayers"
          };
        }
      }
    }
    audioManager.stopSound(this.actionSoundInstance);
    if (actionSound && this.playActionStartSfx) {
      this.actionSoundInstance = audioManager.playSound(actionSound.sound, {
        channel: actionSound.channel,
        soundPos: this.m_pos,
        fallOff: 2,
        layer: this.layer,
        filter: "muffled"
      });
    }
    if (this.m_action.type == Action.Reload || this.m_action.type == Action.ReloadAlt) {
      const actionItemDef = GameObjectDefs[this.m_action.item];
      if (actionItemDef && actionItemDef.caseTiming == "reload") {
        for (let n = 0; n < actionItemDef.maxReload; n++) {
          const shellDir = n % 2 == 0 ? -1 : 1;
          const shellAngle = Math.PI + Math.PI / 4 * shellDir;
          const shellSpeedMult = actionItemDef.maxReload <= 2 ? 1 : math.lerp(Math.random(), 0.8, 1.2);
          createCasingParticle(
            this.m_action.item,
            shellAngle,
            shellSpeedMult,
            this.m_pos,
            this.m_dir,
            this.renderLayer,
            this.renderZOrd + 1,
            particleBarn
          );
        }
      }
    }
  }
  updateActionEffect(isActivePlayer, playerInfo, particleBarn, audioManager) {
    let emitterType = "";
    const emitterProps = {};
    switch (this.m_action.type) {
      case Action.UseItem: {
        const actionItemDef = GameObjectDefs[this.m_action.item];
        const loadout2 = playerInfo.loadout;
        if (actionItemDef.type == "heal") {
          emitterType = GameObjectDefs[loadout2.heal].emitter;
        } else if (actionItemDef.type == "boost") {
          emitterType = GameObjectDefs[loadout2.boost].emitter;
        }
        if (this.m_hasPerk("aoe_heal")) {
          emitterProps.scale = 1.5;
          emitterProps.radius = GameConfig.player.medicHealRange / emitterProps.scale;
          emitterProps.rateMult = 0.25;
        }
        break;
      }
      case Action.Revive: {
        if (this.m_netData.m_downed) {
          emitterType = "revive_basic";
        }
        break;
      }
    }
    if (!!emitterType && (!this.useItemEmitter || this.useItemEmitter.type != emitterType)) {
      this.useItemEmitter?.stop();
      emitterProps.pos = this.m_pos;
      emitterProps.layer = this.layer;
      this.useItemEmitter = particleBarn.addEmitter(emitterType, emitterProps);
    }
    if (this.useItemEmitter) {
      this.useItemEmitter.pos = v2.add(this.m_pos, v2.create(0, 0.1));
      this.useItemEmitter.layer = this.renderLayer;
      this.useItemEmitter.zOrd = this.renderZOrd + 1;
    }
    if (this.useItemEmitter && !emitterType) {
      this.useItemEmitter.stop();
      this.useItemEmitter = null;
    }
    if (!audioManager.isSoundPlaying(this.actionSoundInstance)) {
      this.actionSoundInstance = null;
    }
    if (this.actionSoundInstance && !isActivePlayer) {
      audioManager.updateSound(
        this.actionSoundInstance,
        "otherPlayers",
        this.m_pos,
        {
          layer: this.layer,
          fallOff: 2,
          filter: "muffled"
        }
      );
    }
  }
  playItemPickupSound(item, audioManager) {
    const itemDef = GameObjectDefs[item];
    if (itemDef) {
      audioManager.playSound(itemDef.sound?.pickup, {
        channel: "ui"
      });
      if (itemDef.type == "throwable") {
        this.lastThrowablePickupSfxTicker = 0.3;
      }
    }
  }
  selectIdlePose() {
    const curWeapDef = GameObjectDefs[this.m_netData.m_activeWeapon];
    let idlePose = "fists";
    if (this.downed) {
      idlePose = "downed";
    } else if ("anim" in curWeapDef && curWeapDef.anim.idlePose) {
      idlePose = curWeapDef.anim.idlePose;
    } else if (curWeapDef.type == "gun") {
      if (curWeapDef.pistol) {
        idlePose = curWeapDef.isDual ? "dualPistol" : "pistol";
      } else if (curWeapDef.isBullpup) {
        idlePose = "bullpup";
      } else if (curWeapDef.isLauncher) {
        idlePose = "launcher";
      } else {
        idlePose = curWeapDef.isDual ? "dualRifle" : "rifle";
      }
    } else if (curWeapDef.type == "throwable") {
      idlePose = "throwable";
    } else {
      idlePose = "fists";
    }
    return IdlePoses[idlePose] ? idlePose : "fists";
  }
  selectAnim(type) {
    const t = function(e, t2) {
      return {
        type: e,
        mirror: !!t2 && Math.random() < 0.5
      };
    };
    switch (type) {
      case Anim.None:
        return t("none", false);
      case Anim.Cook:
        return t("cook", false);
      case Anim.Throw:
        return t("throw", false);
      case Anim.Revive:
        return t("revive", false);
      case Anim.CrawlForward:
        return t("crawl_forward", true);
      case Anim.CrawlBackward:
        return t("crawl_backward", true);
      case Anim.Melee: {
        const r = GameObjectDefs[this.m_netData.m_activeWeapon];
        if (!r.anim?.attackAnims) {
          return t("fists", true);
        }
        const a = r.anim.attackAnims;
        const i2 = Math.floor(Math.random() * a.length);
        const o = a[i2];
        return t(o, o == "fists" && a.length == 1);
      }
      default:
        return t("none", false);
    }
  }
  currentAnim() {
    return this.anim.type;
  }
  playAnim(type, seq) {
    this.anim.type = type;
    this.anim.data = this.selectAnim(type);
    this.anim.seq = seq;
    this.anim.ticker = 0;
    for (let i2 = 0; i2 < this.bones.length; i2++) {
      const a = this.anim.bones[i2];
      a.weight = 0;
      a.pose.copy(this.bones[i2]);
    }
  }
  updateAnim(dt, AnimCtx) {
    if (this.anim.data.type == "none") {
      this.playAnim(Anim.None, this.anim.seq);
    }
    if (this.currentAnim() != Anim.None) {
      const ticker = this.anim.ticker;
      this.anim.ticker += dt * 1;
      const anim = Animations[this.anim.data.type];
      const frames = anim.keyframes;
      let frameAIdx = -1;
      let frameBIdx = 0;
      for (; this.anim.ticker >= frames[frameBIdx].time && frameBIdx < frames.length - 1; ) {
        frameAIdx++;
        frameBIdx++;
      }
      frameAIdx = math.max(frameAIdx, 0);
      const frameATime = frames[frameAIdx].time;
      const frameBTime = frames[frameBIdx].time;
      const t = math.min(
        (this.anim.ticker - frameATime) / (frameBTime - frameATime),
        1
      );
      const frameABones = frames[frameAIdx].bones;
      const frameBBones = frames[frameBIdx].bones;
      const mirror = this.anim.data.mirror;
      for (let i2 = 0; i2 < this.anim.bones.length; i2++) {
        const bones = this.anim.bones[i2];
        let bone = i2;
        if (mirror) {
          bone = i2 % 2 == 0 ? i2 + 1 : i2 - 1;
        }
        if (frameABones[bone] !== void 0 && frameBBones[bone] !== void 0) {
          bones.weight = frameAIdx == frameBIdx ? t : 1;
          bones.pose.copy(Pose.lerp(t, frameABones[bone], frameBBones[bone]));
          if (mirror) {
            bones.pose.pos.y *= -1;
            bones.pose.pivot.y *= -1;
            bones.pose.rot *= -1;
          }
        }
      }
      const w = frameBIdx == frames.length - 1 && math.eqAbs(t, 1);
      let f = this.anim.ticker;
      if (w) {
        f += 1;
      }
      for (let i2 = 0; i2 < anim.effects.length; i2++) {
        const effect2 = anim.effects[i2];
        if (effect2.time >= ticker && effect2.time < f) {
          this[effect2.fn](
            AnimCtx,
            effect2.args
          );
        }
      }
      if (w) {
        this.playAnim(Anim.None, this.anim.seq);
      }
    }
  }
  animPlaySound(animCtx, args) {
    const itemDef = GameObjectDefs[this.m_netData.m_activeWeapon];
    const sound = itemDef.sound[args.sound];
    if (sound) {
      animCtx.audioManager?.playSound(sound, {
        channel: "sfx",
        soundPos: this.m_pos,
        fallOff: 3,
        layer: this.layer,
        filter: "muffled"
      });
    }
  }
  animSetThrowableState(_animCtx, args) {
    this.throwableState = args.state;
  }
  animThrowableParticles(animCtx, _args) {
    if (GameObjectDefs[this.m_netData.m_activeWeapon].useThrowParticles) {
      const pinOff = v2.rotate(
        v2.create(0.75, 0.75),
        Math.atan2(this.m_dir.y, this.m_dir.x)
      );
      animCtx.particleBarn?.addParticle(
        "fragPin",
        this.renderLayer,
        v2.add(this.m_pos, pinOff),
        v2.mul(v2.rotate(this.m_dir, Math.PI * 0.5), 4.5),
        1,
        Math.random() * Math.PI * 2,
        null,
        this.renderZOrd + 1
      );
      const leverOff = v2.rotate(
        v2.create(0.75, -0.75),
        Math.atan2(this.m_dir.y, this.m_dir.x)
      );
      animCtx.particleBarn?.addParticle(
        "fragLever",
        this.renderLayer,
        v2.add(this.m_pos, leverOff),
        v2.mul(v2.rotate(this.m_dir, -Math.PI * 0.25), 3.5),
        1,
        Math.random() * Math.PI * 2,
        null,
        this.renderZOrd + 1
      );
    }
  }
  animMeleeCollision(animCtx, args) {
    const meleeDef = GameObjectDefs[this.m_netData.m_activeWeapon];
    if (meleeDef && meleeDef.type == "melee") {
      const meleeCol = this.getMeleeCollider();
      const meleeDist = meleeCol.rad + v2.length(v2.sub(this.m_pos, meleeCol.pos));
      const hits = [];
      const obstacles = animCtx.map?.m_obstaclePool.m_getPool();
      for (let i2 = 0; i2 < obstacles.length; i2++) {
        const obstacle = obstacles[i2];
        if (!!obstacle.active && !obstacle.dead && !obstacle.isSkin && obstacle.height >= GameConfig.player.meleeHeight && util.sameLayer(obstacle.layer, this.layer & 1)) {
          let res = collider.intersectCircle(
            obstacle.collider,
            meleeCol.pos,
            meleeCol.rad
          );
          if (meleeDef.cleave || meleeDef.wallCheck) {
            const meleeDir = v2.normalizeSafe(
              v2.sub(obstacle.pos, this.m_pos),
              v2.create(1, 0)
            );
            const wallCheck = collisionHelpers.intersectSegment(
              animCtx.map?.m_obstaclePool.m_getPool(),
              this.m_pos,
              meleeDir,
              meleeDist,
              GameConfig.player.meleeHeight,
              this.layer,
              false
            );
            if (wallCheck && wallCheck.id !== obstacle.__id) {
              res = null;
            }
          }
          if (res) {
            const def2 = MapObjectDefs[obstacle.type];
            const closestPt = v2.add(
              meleeCol.pos,
              v2.mul(v2.neg(res.dir), meleeCol.rad - res.pen)
            );
            const vel = v2.rotate(
              v2.mul(res.dir, 7.5),
              (Math.random() - 0.5) * Math.PI / 3
            );
            hits.push({
              pen: res.pen,
              prio: 1,
              pos: closestPt,
              vel,
              layer: this.renderLayer,
              zOrd: this.renderZOrd,
              particle: def2.hitParticle,
              sound: def2.sound.punch,
              soundFn: "playGroup"
            });
          }
        }
      }
      const ourTeamId = animCtx.playerBarn?.getPlayerInfo(this.__id).teamId;
      const players = animCtx.playerBarn?.playerPool.m_getPool();
      for (let i2 = 0; i2 < players.length; i2++) {
        const playerCol = players[i2];
        if (playerCol.active && playerCol.__id != this.__id && !playerCol.m_netData.m_dead && util.sameLayer(playerCol.layer, this.layer)) {
          const meleeDir = v2.normalizeSafe(
            v2.sub(playerCol.m_pos, this.m_pos),
            v2.create(1, 0)
          );
          const col = coldet.intersectCircleCircle(
            meleeCol.pos,
            meleeCol.rad,
            playerCol.m_pos,
            playerCol.m_rad
          );
          if (col && math.eqAbs(
            meleeDist,
            collisionHelpers.intersectSegmentDist(
              animCtx.map?.m_obstaclePool.m_getPool(),
              this.m_pos,
              meleeDir,
              meleeDist,
              GameConfig.player.meleeHeight,
              this.layer,
              false
            )
          )) {
            const teamId = animCtx.playerBarn?.getPlayerInfo(
              playerCol.__id
            ).teamId;
            const vel = v2.rotate(
              meleeDir,
              (Math.random() - 0.5) * Math.PI / 3
            );
            const hitSound = meleeDef.sound[args.playerHit] || meleeDef.sound.playerHit;
            hits.push({
              pen: col.pen,
              prio: teamId == ourTeamId ? 2 : 0,
              pos: v2.copy(playerCol.m_pos),
              vel,
              layer: playerCol.renderLayer,
              zOrd: playerCol.renderZOrd,
              particle: "bloodSplat",
              sound: hitSound,
              soundFn: "playSound"
            });
          }
        }
      }
      hits.sort((a, b) => {
        if (a.prio == b.prio) {
          return b.pen - a.pen;
        }
        return a.prio - b.prio;
      });
      let hitCount = hits.length;
      if (!meleeDef.cleave) {
        hitCount = math.min(hitCount, 1);
      }
      for (let i2 = 0; i2 < hitCount; i2++) {
        const hit = hits[i2];
        animCtx.particleBarn?.addParticle(
          hit.particle,
          hit.layer,
          hit.pos,
          hit.vel,
          1,
          Math.random() * Math.PI * 2,
          null,
          hit.zOrd + 1
        );
        animCtx.audioManager?.[hit.soundFn](hit.sound, {
          channel: "hits",
          soundPos: hit.pos,
          layer: this.layer,
          filter: "muffled"
        });
      }
    }
  }
  initSubmergeSprites() {
    const initSprite = function(sprite, img) {
      sprite.texture = Texture.from(img);
      sprite.anchor.set(0.5, 0.5);
      sprite.tint = 16777215;
      sprite.alpha = 0;
      sprite.visible = false;
    };
    initSprite(this.bodySubmergeSprite, "player-wading-01.img");
    initSprite(this.handLSubmergeSprite, "player-hands-01.img");
    initSprite(this.handRSubmergeSprite, "player-hands-01.img");
    initSprite(this.footLSubmergeSprite, "player-feet-01.img");
    initSprite(this.footRSubmergeSprite, "player-feet-01.img");
    const mask = new Graphics();
    mask.beginFill(16711680, 0.5);
    mask.drawCircle(0, 0, 38 * 2 * submergeMaskScaleFactor);
    mask.position.set(0, 0);
    this.bodySubmergeSprite.addChild(mask);
    this.bodySubmergeSprite.mask = mask;
    this.bodySubmergeSprite.scale.set(0.5, 0.5);
  }
  updateSubmersion(dt, map) {
    const inWater = this.surface?.type == "water";
    let submersionAmount = 0;
    if (inWater) {
      const river = this.surface?.data.river;
      const inRiver = river && !map.isInOcean(this.m_pos);
      const dist = inRiver ? river.distanceToShore(this.m_pos) : map.distanceToShore(this.m_pos);
      const maxDist = inRiver ? 12 : 16;
      submersionAmount = math.remap(dist, 0, maxDist, 0.6, 1);
    }
    this.submersion = math.lerp(dt * 4, this.submersion, submersionAmount);
    const submersionAlpha = this.submersion * 0.8;
    const submersionScale = (0.9 - this.submersion * 0.4) * 2;
    const maskScale = 1 / (submersionScale * submergeMaskScaleFactor);
    this.bodySubmergeSprite.scale.set(submersionScale, submersionScale);
    this.bodySubmergeSprite.mask.scale.set(maskScale, maskScale);
    this.bodySubmergeSprite.alpha = submersionAlpha;
    this.bodySubmergeSprite.visible = submersionAlpha > 1e-3;
    if (inWater) {
      this.bodySubmergeSprite.tint = this.surface?.data.waterColor;
    }
    const limbs = [
      this.handLSubmergeSprite,
      this.handRSubmergeSprite,
      this.footLSubmergeSprite,
      this.footRSubmergeSprite
    ];
    for (let i2 = 0; i2 < limbs.length; i2++) {
      const limb = limbs[i2];
      limb.alpha = this.downed ? submersionAlpha : 0;
      limb.visible = limb.alpha > 1e-3;
      if (inWater) {
        limb.tint = this.surface?.data.waterColor;
      }
    }
  }
  updateFrozenState(dt) {
    const fadeDuration = 0.25;
    if (this.m_netData.m_frozen) {
      this.frozenTicker = fadeDuration;
    } else {
      this.frozenTicker -= dt;
      this.updateFrozenImage = true;
    }
    this.bodyEffectSprite.alpha = this.m_netData.m_frozen ? 1 : math.remap(this.frozenTicker, 0, fadeDuration, 0, 1);
    this.bodyEffectSprite.visible = this.frozenTicker > 0;
  }
  addRecoil(amount, leftHand, rightHand) {
    if (leftHand) {
      this.gunRecoilL += amount;
    }
    if (rightHand) {
      this.gunRecoilR += amount;
    }
  }
  isUnderground(map) {
    if (this.layer != 1) {
      return false;
    }
    const structures = map.m_structurePool.m_getPool();
    for (let i2 = 0; i2 < structures.length; i2++) {
      const s = structures[i2];
      if (s.layers.length >= 2) {
        const layer = s.layers[1];
        if (collider.intersectCircle(layer.collision, this.m_pos, this.m_rad)) {
          return layer.underground;
        }
      }
    }
    return true;
  }
}
class PlayerBarn {
  playerPool = new Pool(Player);
  playerInfo = {};
  playerIds = [];
  teamInfo = {};
  groupInfo = {};
  playerStatus = {};
  anonPlayerNames = false;
  onMapLoad(_e) {
  }
  m_update(dt, activeId, _r, renderer, particleBarn, camera, map, inputBinds, audioManager, ui2Manager, preventInput, displayingStats, isSpectating) {
    const players = this.playerPool.m_getPool();
    for (let i2 = 0; i2 < players.length; i2++) {
      const p = players[i2];
      if (p.active) {
        p.m_update(
          dt,
          this,
          map,
          audioManager,
          particleBarn,
          inputBinds,
          camera,
          renderer,
          ui2Manager,
          activeId,
          preventInput,
          displayingStats,
          isSpectating
        );
      }
    }
    const activeInfo = this.getPlayerInfo(activeId);
    const activePlayer = this.getPlayerById(activeId);
    this.setPlayerStatus(activeId, {
      pos: v2.copy(activePlayer.m_netData.m_pos),
      health: activePlayer.m_localData.m_health,
      disconnected: false,
      dead: activePlayer.m_netData.m_dead,
      downed: activePlayer.m_netData.m_downed,
      role: activePlayer.m_netData.m_role,
      visible: true
    });
    const statusUpdateRate = getPlayerStatusUpdateRate(map.factionMode);
    const keys = Object.keys(this.playerStatus);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const status = this.playerStatus[keys[i2]];
      const playerId = status.playerId;
      const playerInfo = this.getPlayerInfo(playerId);
      const player = this.getPlayerById(playerId);
      if (player) {
        status.posDelta = v2.length(v2.sub(player.m_netData.m_pos, status.pos));
        status.posTarget = v2.copy(player.m_netData.m_pos);
        status.posInterp = math.clamp(
          status.posInterp + dt * 0.2,
          dt / statusUpdateRate,
          1
        );
        status.dead = player.m_netData.m_dead;
        status.downed = player.m_netData.m_downed;
      } else {
        status.posInterp = dt / statusUpdateRate;
      }
      const move = v2.sub(status.posTarget, status.pos);
      const moveLen = v2.length(move);
      const moveDir = moveLen > 1e-4 ? v2.div(move, moveLen) : v2.create(1, 0);
      const moveAmt = math.min(moveLen, status.posDelta * status.posInterp);
      status.pos = v2.add(status.pos, v2.mul(moveDir, moveAmt));
      status.timeSinceVisible += dt;
      status.timeSinceUpdate += dt;
      const fade = !status.dead || playerInfo.teamId != activeInfo.teamId && status.role != "leader" ? 0 : 0.6;
      status.minimapAlpha = math.smoothstep(status.timeSinceVisible, 0, 0.1) * math.lerp(math.smoothstep(status.timeSinceUpdate, 2, 2.5), 1, fade);
      if (!map.factionMode && playerInfo.teamId != activeInfo.teamId) {
        status.minimapAlpha = 0;
      }
      status.minimapVisible = status.minimapAlpha > 0.01;
    }
  }
  m_render(camera, debug) {
    const players = this.playerPool.m_getPool();
    for (let i2 = 0; i2 < players.length; i2++) {
      const p = players[i2];
      if (p.active) {
        p.render(camera, debug);
      }
    }
  }
  getPlayerById(id) {
    const pool = this.playerPool.m_getPool();
    for (let i2 = 0; i2 < pool.length; i2++) {
      const p = pool[i2];
      if (p.active && p.__id === id) {
        return p;
      }
    }
    return null;
  }
  setPlayerInfo(info) {
    this.playerInfo[info.playerId] = {
      playerId: info.playerId,
      teamId: info.teamId,
      groupId: info.groupId,
      name: info.name,
      nameTruncated: helpers.truncateString(
        info.name || "",
        "bold 16px arial",
        180
      ),
      anonName: `Player${info.playerId - 2750}`,
      loadout: util.cloneDeep(info.loadout)
    };
    this.playerIds.push(info.playerId);
    this.playerIds.sort((a, b) => {
      return a - b;
    });
  }
  deletePlayerInfo(id) {
    const idx = this.playerIds.indexOf(id);
    if (idx !== -1) {
      this.playerIds.splice(idx, 1);
    }
    delete this.playerInfo[id];
    delete this.playerStatus[id];
  }
  getPlayerInfo(id) {
    return this.playerInfo[id] || {
      playerId: 0,
      group: 0,
      teamId: 0,
      name: "",
      nameTruncated: "",
      anonName: "",
      loadout: {}
    };
  }
  recomputeTeamData() {
    this.teamInfo = {};
    this.groupInfo = {};
    const keys = Object.keys(this.playerInfo);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const playerInfo = this.playerInfo[keys[i2]];
      const playerId = playerInfo.playerId;
      const teamId = playerInfo.teamId;
      this.teamInfo[teamId] = this.teamInfo[teamId] || {
        teamId,
        playerIds: []
      };
      this.teamInfo[teamId].playerIds.push(playerId);
      const groupId = playerInfo.groupId;
      this.groupInfo[groupId] = this.groupInfo[groupId] || {
        groupId,
        playerIds: []
      };
      this.groupInfo[groupId].playerIds.push(playerId);
    }
    const teams = Object.keys(this.teamInfo);
    for (let i2 = 0; i2 < teams.length; i2++) {
      this.teamInfo[teams[i2]].playerIds.sort((a, b) => {
        return a - b;
      });
    }
    const groups = Object.keys(this.groupInfo);
    for (let i2 = 0; i2 < groups.length; i2++) {
      this.groupInfo[groups[i2]].playerIds.sort((a, b) => {
        return a - b;
      });
    }
  }
  getTeamInfo(teamId) {
    return this.teamInfo[teamId];
  }
  getGroupInfo(groupId) {
    return this.groupInfo[groupId];
  }
  updatePlayerStatus(teamId, playerStatus, factionMode) {
    const team = this.getTeamInfo(teamId);
    const playerIds = factionMode ? this.playerIds : team.playerIds;
    if (playerIds.length != playerStatus.players.length) {
      errorLogManager.logError(
        `PlayerIds and playerStatus.players out of sync. OurLen: ${playerIds.length} MsgLen: ${playerStatus.players.length} FactionMode: ${factionMode}`
      );
      return;
    }
    for (let i2 = 0; i2 < playerIds.length; i2++) {
      const playerId = playerIds[i2];
      const status = playerStatus.players[i2];
      if (status.hasData) {
        this.setPlayerStatus(playerId, status);
      }
    }
  }
  setPlayerStatus(playerId, newStatus) {
    const status = this.playerStatus[playerId] || {
      playerId,
      pos: v2.copy(newStatus.pos),
      posTarget: v2.copy(newStatus.pos),
      posDelta: v2.create(0, 0),
      health: 100,
      posInterp: 0,
      visible: false,
      dead: false,
      downed: false,
      disconnected: false,
      role: "",
      timeSinceUpdate: 0,
      timeSinceVisible: 0,
      minimapAlpha: 0,
      minimapVisible: false
    };
    if (!status.minimapVisible) {
      status.pos = v2.copy(newStatus.pos);
      if (!status.visible && newStatus.visible) {
        status.timeSinceVisible = 0;
      }
    }
    status.visible = newStatus.visible;
    if (status.visible) {
      status.timeSinceUpdate = 0;
    }
    status.posTarget = v2.copy(newStatus.pos);
    status.posDelta = v2.length(v2.sub(newStatus.pos, status.pos));
    status.dead = newStatus.dead;
    status.downed = newStatus.downed;
    status.role = newStatus.role;
    if (newStatus.health !== void 0) {
      status.health = newStatus.health;
    }
    if (newStatus.disconnected !== void 0) {
      status.disconnected = newStatus.disconnected;
    }
    this.playerStatus[playerId] = status;
  }
  getPlayerStatus(playerId) {
    return this.playerStatus[playerId];
  }
  updateGroupStatus(groupId, groupStatus) {
    const info = this.getGroupInfo(groupId);
    if (info.playerIds.length != groupStatus.players.length) {
      errorLogManager.logError("PlayerIds and groupStatus.players out of sync");
      return;
    }
    for (let i2 = 0; i2 < info.playerIds.length; i2++) {
      const playerId = info.playerIds[i2];
      const playerStatus = groupStatus.players[i2];
      const status = this.getPlayerStatus(playerId);
      if (status) {
        status.health = playerStatus.health;
        status.disconnected = playerStatus.disconnected;
      }
    }
  }
  getGroupColor(playerId) {
    const playerInfo = this.getPlayerInfo(playerId);
    const group = this.getGroupInfo(playerInfo.groupId);
    const groupIdx = group ? group.playerIds.indexOf(playerId) : 0;
    if (groupIdx >= 0 && groupIdx < GameConfig.groupColors.length) {
      return GameConfig.groupColors[groupIdx];
    }
    return 16777215;
  }
  getTeamColor(teamId) {
    const teamIdx = teamId - 1;
    if (teamIdx >= 0 && teamIdx < GameConfig.teamColors.length) {
      return GameConfig.teamColors[teamIdx];
    }
    return 16777215;
  }
  getPlayerName(playerId, activePlayerId, truncateForKillfeed) {
    const info = this.getPlayerInfo(playerId);
    if (!info) {
      return "";
    }
    let name = info.name;
    if (truncateForKillfeed) {
      name = info.nameTruncated;
    }
    if (this.anonPlayerNames && this.getPlayerInfo(activePlayerId).groupId != info.groupId) {
      name = info.anonName;
    }
    return name;
  }
  addDeathEffect(targetId, killerId, _sourceType, audioManager, particleBarn) {
    const target = this.getPlayerById(targetId);
    const killer = this.getPlayerById(killerId);
    if (target && killer?.m_hasPerk("turkey_shoot")) {
      audioManager.playGroup("cluck", {
        soundPos: target.m_pos,
        layer: target.layer,
        muffled: true
      });
      audioManager.playSound("feather_01", {
        channel: "sfx",
        soundPos: target.m_pos,
        layer: target.layer,
        muffled: true
      });
      const numParticles = Math.floor(util.random(30, 35));
      for (let i2 = 0; i2 < numParticles; i2++) {
        const vel = v2.mul(v2.randomUnit(), util.random(5, 15));
        particleBarn.addParticle(
          "turkeyFeathersDeath",
          target.layer,
          target.m_pos,
          vel
        );
      }
    }
  }
}
class Smoke {
  __id;
  __type;
  active;
  m_particle;
  m_pos;
  m_rad;
  m_layer;
  m_interior;
  m_init() {
  }
  m_free() {
    this.m_particle.fadeOut();
    this.m_particle = null;
  }
  m_updateData(data, fullUpdate, isNew, ctx) {
    this.m_pos = v2.copy(data.pos);
    this.m_rad = data.rad;
    if (fullUpdate) {
      this.m_layer = data.layer;
      this.m_interior = data.interior;
    }
    if (isNew) {
      this.m_particle = ctx.smokeBarn.m_allocParticle();
      this.m_particle?.m_init(
        this.m_pos,
        this.m_rad,
        this.m_layer,
        this.m_interior
      );
    }
    this.m_particle.posTarget = v2.copy(this.m_pos);
    this.m_particle.radTarget = this.m_rad;
  }
}
const particles = ["part-smoke-02.img", "part-smoke-03.img"];
class SmokeParticle {
  active = false;
  zIdx = 0;
  sprite = Sprite.from(particles[Math.floor(Math.random() * particles.length)]);
  pos;
  posTarget;
  rad;
  radTarget;
  rot;
  rotVel;
  fade;
  fadeTicker;
  fadeDuration;
  tint;
  layer;
  interior;
  constructor() {
    this.sprite.anchor = new Point(0.5, 0.5);
    this.sprite.visible = false;
  }
  m_init(pos, rad, layer, interior) {
    this.pos = v2.copy(pos);
    this.posTarget = v2.copy(this.pos);
    this.rad = rad;
    this.radTarget = this.rad;
    this.rot = util.random(0, Math.PI * 2);
    this.rotVel = Math.PI * util.random(0.25, 0.5) * (Math.random() < 0.5 ? -1 : 1);
    this.fade = false;
    this.fadeTicker = 0;
    this.fadeDuration = util.random(0.5, 0.75);
    this.tint = util.rgbToInt(util.hsvToRgb(0, 0, util.random(0.9, 0.95)));
    this.layer = layer;
    this.interior = interior;
  }
  fadeOut() {
    this.fade = true;
  }
}
class SmokeBarn {
  m_smokePool = new Pool(Smoke);
  m_particles = [];
  zIdx = 2147483647;
  m_allocParticle() {
    let particle = null;
    for (let i2 = 0; i2 < this.m_particles.length; i2++) {
      if (!this.m_particles[i2].active) {
        particle = this.m_particles[i2];
        break;
      }
    }
    if (!particle) {
      particle = new SmokeParticle();
      this.m_particles.push(particle);
    }
    particle.active = true;
    particle.zIdx = this.zIdx--;
    return particle;
  }
  m_update(dt, camera, activePlayer, map, renderer) {
    for (let m2 = 0; m2 < this.m_particles.length; m2++) {
      const p = this.m_particles[m2];
      if (p.active) {
        p.rad = math.lerp(dt * 3, p.rad, p.radTarget);
        p.pos = math.v2lerp(dt * 3, p.pos, p.posTarget);
        p.rotVel *= 1 / (1 + dt * 0.1);
        p.rot += p.rotVel * dt;
        p.fadeTicker += p.fade ? dt : 0;
        p.active = p.fadeTicker < p.fadeDuration;
        const alpha = math.clamp(1 - p.fadeTicker / p.fadeDuration, 0, 1) * 0.9;
        let layer = p.layer;
        if ((!!util.sameLayer(p.layer, activePlayer.layer) || !!(activePlayer.layer & 2)) && (p.layer == 1 || !(activePlayer.layer & 2) || !map.insideStructureMask(collider.createCircle(p.pos, 1)))) {
          layer |= 2;
        }
        const zOrd = p.interior ? 500 : 1e3;
        renderer.addPIXIObj(p.sprite, layer, zOrd, p.zIdx);
        const screenPos = camera.m_pointToScreen(p.pos);
        const screenScale = camera.m_pixels(p.rad * 2 / camera.m_ppu);
        p.sprite.position.set(screenPos.x, screenPos.y);
        p.sprite.scale.set(screenScale, screenScale);
        p.sprite.rotation = p.rot;
        p.sprite.tint = p.tint;
        p.sprite.alpha = alpha;
        p.sprite.visible = p.active;
      }
    }
  }
}
function step(cur, target, rate) {
  const delta = target - cur;
  const step2 = delta * rate;
  return Math.abs(step2) < 0.01 ? delta : step2;
}
function createLayerMask() {
  const mask = new Graphics();
  mask.position.set(0, 0);
  mask.scale.set(1, 1);
  mask.__zOrd = 0;
  mask.__zIdx = 0;
  return mask;
}
function drawRect(gfx, x, y, w, h) {
  gfx.moveTo(x, y);
  gfx.lineTo(x, y + h);
  gfx.lineTo(x + w, y + h);
  gfx.lineTo(x + w, y);
  gfx.lineTo(x, y);
  gfx.closePath();
}
class Renderer {
  constructor(game, canvasMode) {
    this.game = game;
    this.canvasMode = canvasMode;
    for (let i2 = 0; i2 < 4; i2++) {
      this.layers.push(new RenderGroup(`layer_${i2}`));
    }
    this.ground.alpha = 0;
  }
  zIdx = 0;
  layer = 0;
  layerAlpha = 0;
  groundAlpha = 0;
  underground = false;
  layers = [];
  ground = new Graphics();
  layerMask = createLayerMask();
  debugLayerMask = null;
  layerMaskDirty = true;
  layerMaskActive = false;
  m_free() {
    this.layerMask.parent?.removeChild(this.layerMask);
    this.layerMask.destroy(true);
  }
  addPIXIObj(obj, layer, zOrd, zIdx) {
    if (!obj.transform) {
      const err = new Error();
      const str = JSON.stringify({
        type: "addChild",
        stack: err.stack,
        browser: navigator.userAgent,
        playing: this.game.m_playing,
        gameOver: this.game.m_gameOver,
        spectating: this.game.m_spectating,
        time: this.game.m_playingTicker,
        mode: this.game.teamMode,
        layer,
        zOrd,
        zIdx
      });
      errorLogManager.logError(str);
    }
    if (obj.__layerIdx === void 0) {
      obj.__layerIdx = -1;
      obj.__zOrd = -1;
      obj.__zIdx = -1;
    }
    let layerIdx = layer;
    const onStairs = layer & 2;
    if (onStairs) {
      layerIdx = zOrd >= 100 ? 3 : 2;
    }
    if (obj.parent == this.layers[layerIdx] && obj.__zOrd == zOrd && (zIdx === void 0 || obj.__zIdx == zIdx)) {
      return;
    }
    obj.__layerIdx = layerIdx;
    obj.__zOrd = zOrd;
    obj.__zIdx = zIdx !== void 0 ? zIdx : this.zIdx++;
    this.layers[layerIdx].addSortedChild(obj);
  }
  setActiveLayer(layer) {
    this.layer = layer;
  }
  setUnderground(underground) {
    this.underground = underground;
  }
  resize(map, camera) {
    const undergroundColor = map.mapLoaded ? map.getMapDef().biome.colors.underground : 1772803;
    this.ground.clear();
    this.ground.beginFill(undergroundColor);
    this.ground.drawRect(0, 0, camera.m_screenWidth, camera.m_screenHeight);
    this.ground.endFill();
    this.layerMaskDirty = true;
  }
  redrawLayerMask(camera, map) {
    const mask = this.layerMask;
    if (this.canvasMode) {
      mask.clear();
      if (this.layerMaskActive) {
        mask.beginFill(16777215, 1);
        mask.drawRect(0, 0, camera.m_screenWidth, camera.m_screenHeight);
        const structures = map.m_structurePool.m_getPool();
        for (let i2 = 0; i2 < structures.length; i2++) {
          const structure = structures[i2];
          if (!structure.active) {
            continue;
          }
          for (let j = 0; j < structure.mask.length; j++) {
            const m2 = structure.mask[j];
            const e = v2.mul(v2.sub(m2.max, m2.min), 0.5);
            const c = v2.add(m2.min, e);
            const ll = camera.m_pointToScreen(v2.sub(c, e));
            const tr = camera.m_pointToScreen(v2.add(c, e));
            mask.drawRect(ll.x, ll.y, tr.x - ll.x, tr.y - ll.y);
          }
        }
        mask.endFill();
      }
    } else {
      if (this.layerMaskDirty) {
        this.layerMaskDirty = false;
        mask.clear();
        mask.beginFill(16777215, 1);
        drawRect(mask, 0, 0, 1024, 1024);
        const structures = map.m_structurePool.m_getPool();
        for (let i2 = 0; i2 < structures.length; i2++) {
          const structure = structures[i2];
          if (!structure.active) {
            continue;
          }
          for (let j = 0; j < structure.mask.length; j++) {
            const m2 = structure.mask[j];
            const e = v2.mul(v2.sub(m2.max, m2.min), 0.5);
            const c = v2.add(m2.min, e);
            const x = c.x - e.x;
            const y = c.y - e.y;
            const w = e.x * 2;
            const h = e.y * 2;
            mask.beginHole();
            drawRect(mask, x, y, w, h);
            mask.endHole();
          }
        }
        mask.endFill();
      }
      const p0 = camera.m_pointToScreen(v2.create(0, 0));
      const s = camera.m_scaleToScreen(1);
      mask.position.set(p0.x, p0.y);
      mask.scale.set(s, -s);
    }
  }
  redrawDebugLayerMask(camera, map) {
    const mask = this.debugLayerMask;
    mask.clear();
    mask.beginFill(16711935, 1);
    const structures = map.m_structurePool.m_getPool();
    for (let i2 = 0; i2 < structures.length; i2++) {
      const structure = structures[i2];
      if (structure.active) {
        for (let s2 = 0; s2 < structure.mask.length; s2++) {
          const n = structure.mask[s2];
          const c = v2.mul(v2.sub(n.max, n.min), 0.5);
          const m2 = v2.add(n.min, c);
          const p = m2.x - c.x;
          const h = m2.y - c.y;
          const u = c.x * 2;
          const g = c.y * 2;
          drawRect(mask, p, h, u, g);
        }
      }
    }
    mask.endFill();
    const p0 = camera.m_pointToScreen(v2.create(0, 0));
    camera.m_pointToScreen(v2.create(1, 0));
    const s = camera.m_scaleToScreen(1);
    mask.position.set(p0.x, p0.y);
    mask.scale.set(s, -s);
  }
  m_update(dt, camera, map, _debug) {
    const alphaTarget = this.layer > 0 ? 1 : 0;
    this.layerAlpha += step(this.layerAlpha, alphaTarget, dt * 12);
    const groundTarget = this.layer == 1 && this.underground ? 1 : 0;
    this.groundAlpha += step(this.groundAlpha, groundTarget, dt * 12);
    this.layers[0].alpha = 1;
    this.layers[1].alpha = this.layerAlpha;
    this.layers[2].alpha = 1;
    this.layers[3].alpha = 1;
    this.ground.alpha = this.groundAlpha;
    this.layers[0].visible = this.groundAlpha < 1;
    this.layers[1].visible = this.layerAlpha > 0;
    this.ground.visible = this.groundAlpha > 0;
    this.redrawLayerMask(camera, map);
    const maskActive = this.layer == 0;
    if (maskActive && !this.layerMaskActive) {
      this.layers[2].mask = this.layerMask;
      this.layers[2].addChild(this.layerMask);
      this.layerMaskActive = true;
    } else if (!maskActive && this.layerMaskActive) {
      this.layers[2].mask = null;
      this.layers[2].removeChild(this.layerMask);
      this.layerMaskActive = false;
    }
    for (let i2 = 0; i2 < this.layers.length; i2++) {
      this.layers[i2].checkSort();
    }
  }
}
class RenderGroup extends Container {
  constructor(debugName = "") {
    super();
    this.debugName = debugName;
  }
  dirty = true;
  addSortedChild(child) {
    this.addChild(child);
    this.dirty = true;
  }
  checkSort() {
    if (this.dirty) {
      this.children.sort(
        (a, b) => a.__zOrd == b.__zOrd ? a.__zIdx - b.__zIdx : a.__zOrd - b.__zOrd
      );
      this.dirty = false;
      return true;
    }
    return false;
  }
}
const deadZone = 2;
const sensitivityThereshold = 1e-5;
class Touch2 {
  constructor(input, config) {
    this.input = input;
    this.config = config;
    const createPadSprite = function(parent, tint) {
      const pad = Sprite.from("pad.img");
      pad.anchor.set(0.5, 0.5);
      pad.scale.set(1, 1);
      pad.alpha = 0.2;
      pad.visible = false;
      pad.tint = tint;
      parent.addChild(pad);
      return pad;
    };
    const createPad = () => {
      return {
        touched: false,
        centerPos: v2.create(0, 0),
        touchPos: v2.create(0, 0),
        centerSprite: createPadSprite(this.container, 0),
        touchSprite: createPadSprite(this.container, 16777215)
      };
    };
    this.touchPads = [createPad(), createPad()];
    const validateTouchStyle = function(style) {
      if (!["locked", "anywhere"].includes(style)) {
        return "anywhere";
      }
      return style;
    };
    const moveStyle = validateTouchStyle(config.get("touchMoveStyle"));
    const aimStyle = validateTouchStyle(config.get("touchAimStyle"));
    this.setMoveStyle(moveStyle);
    this.setAimStyle(aimStyle);
    this.setTouchAimLine(!!config.get("touchAimLine"));
    this.init();
  }
  container = new Container();
  lineSprites = new LineSprites();
  padScaleBase = 1;
  padScaleDown = 0.6;
  padScalePos = 0.25;
  moveDetected = false;
  shotDetected = false;
  shotDetectedOld = false;
  touchingAim = false;
  display = true;
  moveStyle = "locked";
  aimStyle = "locked";
  touchAimLine = true;
  touchPads;
  playerMovement = {
    left: false,
    right: false,
    up: false,
    down: false,
    moveLen: 0
  };
  analogMovement = {
    toMoveDir: v2.create(1, 0),
    toMoveLen: 0
  };
  aimMovement = {
    toAimDir: v2.create(1, 0),
    toAimLen: 0
  };
  leftLockedPadCenter = v2.create(0, 0);
  rightLockedPadCenter = v2.create(0, 0);
  padPosBase = 48;
  padPosRange = 0;
  movePadDetectMult = 1;
  shotPadDetectMult = 1.075;
  turnDirCooldown = 0.5;
  turnDirTicker = 0;
  mobileOffsetLandscape = 25;
  mobileOffsetPortrait = 100;
  lockedPadOffsetLandscape = v2.create(126, 100);
  lockedPadOffsetPortrait = v2.create(96, 160);
  lockedPadOffsetYLandscapeSafari = 120;
  lockedPadOffsetYPortraitSafari = 240;
  getTouchMovement(camera) {
    return this.getMovement(camera);
  }
  getAimMovement(activePlayer, camera) {
    const isHoldingThrowable = activePlayer.m_localData.m_curWeapIdx == GameConfig.WeaponSlot.Throwable;
    return this.getAim(isHoldingThrowable, camera);
  }
  setAimDir(dir) {
    this.aimMovement.toAimDir = v2.copy(dir);
  }
  getMovement(camera) {
    let posDown = null;
    let pos = null;
    let touched = false;
    let toMoveDir;
    this.moveDetected = false;
    for (let i2 = 0; i2 < this.input.touches.length; i2++) {
      const t = this.input.touches[i2];
      if (!t.isDead && this.isLeftSideTouch(t.posDown.x, camera)) {
        const center = this.moveStyle == "anywhere" ? t.posDown : this.leftLockedPadCenter;
        const pull = v2.sub(t.pos, center);
        const dist = v2.length(pull);
        if (dist > deadZone) {
          const toMoveLen = (dist - deadZone) / (this.padPosRange / this.movePadDetectMult - deadZone);
          toMoveDir = toMoveLen > sensitivityThereshold ? v2.div(pull, toMoveLen) : this.analogMovement.toMoveDir;
          this.analogMovement = {
            toMoveDir: v2.create(toMoveDir.x, toMoveDir.y * -1),
            toMoveLen
          };
          this.moveDetected = true;
        }
        pos = this.getConstrainedPos(center, t.pos, dist);
        posDown = center;
        touched = true;
        break;
      }
    }
    const pad = this.touchPads[0];
    pad.touched = touched;
    if (touched && this.moveStyle == "anywhere") {
      pad.centerPos = v2.copy(posDown);
    } else {
      pad.centerPos = v2.copy(this.leftLockedPadCenter);
    }
    pad.touchPos.x = touched ? pos.x : this.leftLockedPadCenter.x;
    pad.touchPos.y = touched ? pos.y : this.leftLockedPadCenter.y;
    return this.analogMovement;
  }
  getAim(isHoldingThrowable, camera) {
    let touched = false;
    let posDown = null;
    let pos = null;
    let toAimDir;
    for (let i2 = 0; i2 < this.input.touches.length; i2++) {
      const t = this.input.touches[i2];
      if (!t.isDead && !this.isLeftSideTouch(t.posDown.x, camera)) {
        const center = this.aimStyle == "anywhere" ? t.posDown : this.rightLockedPadCenter;
        const pull = v2.sub(t.pos, center);
        const dist = v2.length(pull);
        if (dist > deadZone) {
          const toAimPos = v2.sub(t.pos, center);
          const toAimLen = v2.length(toAimPos);
          toAimDir = toAimLen > sensitivityThereshold ? v2.div(toAimPos, toAimLen) : this.aimMovement.toAimDir;
          this.aimMovement = {
            toAimDir: v2.create(toAimDir.x, toAimDir.y * -1),
            toAimLen
          };
        } else {
          this.aimMovement.toAimLen = 0;
        }
        pos = this.getConstrainedPos(center, t.pos, dist);
        posDown = center;
        touched = true;
        break;
      }
    }
    this.shotDetectedOld = this.shotDetected;
    this.shotDetected = this.aimMovement.toAimLen > this.padPosRange / this.shotPadDetectMult && touched;
    this.touchingAim = touched;
    if (isHoldingThrowable && this.shotDetectedOld && touched) {
      this.shotDetected = true;
    }
    const pad = this.touchPads[1];
    pad.touched = touched;
    if (touched && this.aimStyle == "anywhere") {
      pad.centerPos = v2.copy(posDown);
    } else {
      pad.centerPos = v2.copy(this.rightLockedPadCenter);
    }
    pad.touchPos.x = touched ? pos.x : this.rightLockedPadCenter.x;
    pad.touchPos.y = touched ? pos.y : this.rightLockedPadCenter.y;
    return {
      aimMovement: this.aimMovement,
      touched: pad.touched
    };
  }
  m_update(_dt, activePlayer, map, camera, renderer) {
    for (let i2 = 0; i2 < this.touchPads.length; i2++) {
      const pad = this.touchPads[i2];
      pad.centerSprite.position.x = pad.centerPos.x;
      pad.centerSprite.position.y = pad.centerPos.y;
      pad.centerSprite.scale.x = this.padScaleBase * this.padScaleDown;
      pad.centerSprite.scale.y = this.padScaleBase * this.padScaleDown;
      pad.centerSprite.visible = device.touch && this.display;
      pad.touchSprite.position.x = pad.touchPos.x;
      pad.touchSprite.position.y = pad.touchPos.y;
      pad.touchSprite.scale.x = this.padScaleBase * this.padScalePos;
      pad.touchSprite.scale.y = this.padScaleBase * this.padScalePos;
      pad.touchSprite.visible = device.touch && this.display;
    }
    this.lineSprites.update(this, activePlayer, map, camera, renderer);
  }
  isLeftSideTouch(posX, camera) {
    return posX < camera.m_screenWidth * 0.5;
  }
  getConstrainedPos(posDown, pos, dist) {
    if (dist <= this.padPosRange) {
      return pos;
    }
    const x = pos.x - posDown.x;
    const y = pos.y - posDown.y;
    const radians = Math.atan2(y, x);
    return v2.create(
      Math.cos(radians) * this.padPosRange + posDown.x,
      Math.sin(radians) * this.padPosRange + posDown.y
    );
  }
  getConstrainedPosDown(posDown, dir, dist) {
    const normalDir = v2.normalizeSafe(dir);
    return v2.add(posDown, v2.mul(normalDir, Math.max(0, dist - this.padPosRange)));
  }
  toggleMoveStyle() {
    this.setMoveStyle(this.moveStyle == "locked" ? "anywhere" : "locked");
  }
  setMoveStyle(style) {
    this.moveStyle = style;
    this.config.set("touchMoveStyle", style);
    const elem = document.getElementById("btn-game-move-style");
    if (elem) {
      if (this.moveStyle == "locked") {
        elem.classList.remove("unlocked-on-icon");
        elem.classList.add("locked-on-icon");
      } else {
        elem.classList.remove("locked-on-icon");
        elem.classList.add("unlocked-on-icon");
      }
    }
  }
  toggleAimStyle() {
    this.setAimStyle(this.aimStyle == "locked" ? "anywhere" : "locked");
  }
  setAimStyle(style) {
    this.aimStyle = style;
    this.config.set("touchAimStyle", style);
    const elem = document.getElementById("btn-game-aim-style");
    if (this.aimStyle == "locked") {
      elem.classList.remove("unlocked-on-icon");
      elem.classList.add("locked-on-icon");
    } else {
      elem.classList.remove("locked-on-icon");
      elem.classList.add("unlocked-on-icon");
    }
  }
  toggleAimLine() {
    this.setTouchAimLine(!this.touchAimLine);
  }
  setTouchAimLine(isOn) {
    this.touchAimLine = isOn;
    this.config.set("touchAimLine", this.touchAimLine);
    const elem = document.getElementById("btn-game-aim-line");
    if (this.touchAimLine) {
      elem.classList.remove("aim-line-off-icon");
      elem.classList.add("aim-line-on-icon");
    } else {
      elem.classList.remove("aim-line-on-icon");
      elem.classList.add("aim-line-off-icon");
    }
  }
  init() {
    this.resize();
  }
  resize() {
    const isLandscape = device.isLandscape;
    const lockedPadOffsetLandscape = this.lockedPadOffsetLandscape;
    const lockedPadOffsetPortrait = this.lockedPadOffsetPortrait;
    if (device.tablet) {
      lockedPadOffsetLandscape.x = lockedPadOffsetLandscape.x * 1;
      lockedPadOffsetPortrait.x = lockedPadOffsetPortrait.x * 1.25;
    }
    const leftLockedPadOffsetLandscape = v2.create(
      lockedPadOffsetLandscape.x,
      lockedPadOffsetLandscape.y
    );
    const leftLockedPadOffsetPortrait = v2.create(
      lockedPadOffsetPortrait.x,
      lockedPadOffsetPortrait.y
    );
    const rightLockedPadOffsetLandscape = v2.create(
      device.screenWidth - lockedPadOffsetLandscape.x,
      lockedPadOffsetLandscape.y
    );
    const rightLockedPadOffsetPortrait = v2.create(
      device.screenWidth - lockedPadOffsetPortrait.x,
      lockedPadOffsetPortrait.y
    );
    if (device.os == "ios") {
      if (device.model == "iphonex") {
        leftLockedPadOffsetLandscape.x = leftLockedPadOffsetLandscape.x + 56;
        rightLockedPadOffsetLandscape.x = rightLockedPadOffsetLandscape.x - 56;
        leftLockedPadOffsetLandscape.y = leftLockedPadOffsetLandscape.y * 0.9;
        rightLockedPadOffsetLandscape.y = rightLockedPadOffsetLandscape.y * 0.9;
      } else {
        let lockedPadOffsetYLandscapeSafari = this.lockedPadOffsetYLandscapeSafari;
        let lockedPadOffsetYPortraitSafari = this.lockedPadOffsetYPortraitSafari;
        if (device.tablet) {
          lockedPadOffsetYLandscapeSafari *= 1;
          lockedPadOffsetYPortraitSafari *= 1;
        }
        leftLockedPadOffsetLandscape.y = lockedPadOffsetYLandscapeSafari;
        leftLockedPadOffsetPortrait.y = lockedPadOffsetYPortraitSafari;
        rightLockedPadOffsetLandscape.y = lockedPadOffsetYLandscapeSafari;
        rightLockedPadOffsetPortrait.y = lockedPadOffsetYPortraitSafari;
      }
    }
    this.padScaleBase = isLandscape ? 1 : 0.8;
    this.padPosRange = this.padPosBase * this.padScaleBase;
    const leftOffset = isLandscape ? leftLockedPadOffsetLandscape : leftLockedPadOffsetPortrait;
    this.leftLockedPadCenter = v2.create(
      leftOffset.x,
      device.screenHeight - leftOffset.y
    );
    const rightOffset = isLandscape ? rightLockedPadOffsetLandscape : rightLockedPadOffsetPortrait;
    this.rightLockedPadCenter = v2.create(
      rightOffset.x,
      device.screenHeight - rightOffset.y
    );
    this.setMobileStyling(isLandscape);
  }
  setMobileStyling(isLandscape) {
    if (device.touch) {
      $("#btn-touch-styles").find(".btn-game-container").css("display", "inline-block");
      $("#ui-emote-button").css("display", "block");
    }
    if (device.uiLayout == device.UiLayout.Sm) {
      $("#ui-map-wrapper").addClass("ui-map-wrapper-mobile").removeClass("ui-map-wrapper-desktop");
      $("#ui-settings-container-mobile").css("display", "block");
      $("#ui-settings-container-desktop").css("display", "none");
      $("#ui-right-center").addClass("ui-right-center-mobile").removeClass("ui-right-center-desktop");
      $("#ui-leaderboard-wrapper").css("display", "none");
      $("#big-map-close").css("display", "block");
      $("#ui-game-menu").removeClass("ui-game-menu-desktop");
      $("#btn-game-tabs").css("display", "none");
      $("#ui-game-tab-settings").removeClass("ui-game-tab-settings-desktop");
      $(".ui-ability-key").css("display", "none");
    } else {
      $("#ui-map-wrapper").removeClass("ui-map-wrapper-mobile").addClass("ui-map-wrapper-desktop");
      $("#ui-settings-container-mobile").css("display", "none");
      $("#ui-settings-container-desktop").css("display", "block");
      $("#ui-right-center").removeClass("ui-right-center-mobile").addClass("ui-right-center-desktop");
      $("#ui-leaderboard-wrapper").css("display", "block");
      $("#big-map-close").css("display", "none");
      $("#ui-game-menu").addClass("ui-game-menu-desktop");
      $("#btn-game-tabs").css("display", "flex");
      $("#ui-game-tab-settings").addClass("ui-game-tab-settings-desktop");
      $(".ui-ability-key").css("display", "block");
    }
    if (device.tablet) {
      if (isLandscape) {
        if (device.os == "ios") {
          $("#ui-bottom-right").addClass("ui-bottom-right-tablet-ipad-browser");
          $("#ui-right-center").addClass("ui-right-center-tablet-ipad-browser");
        } else {
          $("#ui-bottom-right").addClass("ui-bottom-right-tablet");
          $("#ui-right-center").addClass("ui-right-center-tablet");
        }
        $("#ui-bottom-center-left").addClass("ui-bottom-center-left-tablet");
        $("#ui-bottom-center-right").addClass("ui-bottom-center-right-tablet");
        $("#ui-top-left").addClass("ui-top-left-tablet");
        $("#ui-spectate-options-wrapper").addClass(
          "ui-spectate-options-wrapper-tablet"
        );
        $("#ui-killfeed-wrapper").addClass("ui-killfeed-wrapper-tablet");
        $("#ui-kill-leader-wrapper").css("right", 144);
      } else {
        $("#ui-bottom-left").removeClass("ui-bottom-left-tablet");
        $("#ui-bottom-right").removeClass("ui-bottom-right-tablet");
        $("#ui-right-center").removeClass("ui-right-center-tablet");
        $("#ui-bottom-center-right").removeClass("ui-bottom-center-right-tablet");
        $("#ui-top-left").removeClass("ui-top-left-tablet");
        $("#ui-spectate-options-wrapper").removeClass(
          "ui-spectate-options-wrapper-tablet"
        );
        $("#ui-killfeed-wrapper-wrapper").removeClass(
          "ui-killfeed-wrapper-tablet"
        );
      }
    }
    if (device.os == "ios") {
      if (device.model == "iphonex") {
        const gameHeight = device.isLandscape ? "99%" : "90%";
        const topOffset = device.isLandscape ? 0 : 32;
        $("#ui-game").css({
          height: gameHeight,
          top: topOffset
        });
        $("#ui-stats-contents").css({
          transform: "translate(-50%) scale(0.95)",
          "transform-origin": "top"
        });
        if (isLandscape) {
          $("#ui-game").css({
            left: "50%",
            transform: "translateX(-50%)",
            width: "93%"
          });
        } else {
          $("#ui-game").css({
            left: "",
            transform: "",
            width: ""
          });
        }
      } else if (window.navigator.standalone && !device.tablet) {
        $("#ui-game").css({
          height: "95%"
        });
      } else {
        let marginBottom = device.isLandscape ? "86%" : "82%";
        if (device.tablet) {
          marginBottom = "100%";
        }
        $("#ui-game").css({
          height: marginBottom
        });
        const gameMarginTop = 6;
        const gameMarginElems = $(
          "#ui-right-center, #ui-top-center-scopes-wrapper, #ui-top-center, #ui-menu-display"
        );
        gameMarginElems.css({
          "margin-top": gameMarginTop
        });
      }
    }
    if (device.tablet || isLandscape) {
      $("#ui-loot-50AE").insertBefore("#ui-loot-556mm");
      $("#ui-loot-9mm").insertBefore("#ui-loot-556mm");
      $("#ui-loot-308sub").insertBefore("#ui-loot-556mm");
      $("#ui-loot-12gauge").insertBefore("#ui-loot-556mm");
      $("#ui-loot-flare").insertBefore("#ui-loot-556mm");
      $("#ui-loot-762mm").insertBefore("#ui-loot-556mm");
      $("#ui-loot-45acp").insertBefore("#ui-loot-556mm");
    } else {
      $("#ui-loot-9mm").insertBefore("#ui-loot-45acp");
      $("#ui-loot-12gauge").insertBefore("#ui-loot-45acp");
      $("#ui-loot-762mm").insertBefore("#ui-loot-45acp");
      $("#ui-loot-556mm").insertBefore("#ui-loot-45acp");
      $("#ui-loot-50AE").insertBefore("#ui-loot-45acp");
      $("#ui-loot-308sub").insertBefore("#ui-loot-45acp");
      $("#ui-loot-flare").insertBefore("#ui-loot-45acp");
    }
  }
  hideAll() {
    this.display = false;
  }
}
class LineSprites {
  container = new Container();
  dots = [];
  constructor() {
    this.container.visible = false;
  }
  createDot() {
    const dotSprite = new Sprite();
    dotSprite.texture = Texture.from("dot.img");
    dotSprite.anchor.set(0.5, 0.5);
    dotSprite.position.set(0, 0);
    dotSprite.scale.set(1, 1);
    dotSprite.tint = 16777215;
    dotSprite.alpha = 1;
    dotSprite.visible = false;
    return dotSprite;
  }
  update(touch, activePlayer, map, camera, renderer) {
    const visible = device.touch && touch.touchingAim && touch.touchAimLine;
    if (visible) {
      const curWeap = activePlayer.m_netData.m_activeWeapon;
      const curWeapDef = GameObjectDefs[curWeap];
      let maxRange = 30;
      if (curWeapDef.type == "gun") {
        const bulletDist = BulletDefs[curWeapDef.bulletType].distance;
        maxRange = curWeapDef.barrelLength + bulletDist;
      }
      const cameraZoom = activePlayer.m_getZoom();
      const cameraRad = Math.sqrt(cameraZoom * 1.414 * cameraZoom);
      maxRange = math.min(maxRange, cameraRad);
      const start = v2.copy(activePlayer.m_pos);
      let end = v2.add(start, v2.mul(activePlayer.m_dir, maxRange));
      const obstacles = map.m_obstaclePool.m_getPool();
      for (let i2 = 0; i2 < obstacles.length; i2++) {
        const obstacle = obstacles[i2];
        if (!!obstacle.active && !obstacle.dead && obstacle.height >= GameConfig.bullet.height && !!obstacle.collidable && !obstacle.isWindow && util.sameLayer(activePlayer.layer, obstacle.layer) && (curWeapDef.type != "throwable" || obstacle.height > GameConfig.projectile.maxHeight)) {
          const res = collider.intersectSegment(obstacle.collider, start, end);
          if (res) {
            const dist2 = v2.length(v2.sub(res.point, start));
            if (dist2 < maxRange) {
              maxRange = dist2;
              end = res.point;
            }
          }
        }
      }
      const startOffset = 3.5;
      const increment = 1.5;
      const dist = v2.length(v2.sub(end, start));
      const dotCount = Math.max(Math.ceil((dist - startOffset) / increment), 0);
      while (this.dots.length < dotCount) {
        const dot = this.createDot();
        this.container.addChild(dot);
        this.dots.push(dot);
      }
      for (let i2 = 0; i2 < this.dots.length; i2++) {
        const dot = this.dots[i2];
        const offset = startOffset + i2 * increment;
        const pos = v2.add(
          activePlayer.m_pos,
          v2.mul(activePlayer.m_dir, offset)
        );
        const scale = 1 / 32 * 0.375;
        dot.position.set(pos.x, pos.y);
        dot.scale.set(scale, scale);
        dot.visible = i2 < dotCount;
      }
      const p0 = camera.m_pointToScreen(v2.create(0, 0));
      const p1 = camera.m_pointToScreen(v2.create(1, 1));
      const R = v2.sub(p1, p0);
      this.container.position.set(p0.x, p0.y);
      this.container.scale.set(R.x, R.y);
      this.container.alpha = 0.3;
      renderer.addPIXIObj(this.container, activePlayer.layer, 19, 0);
    }
    this.container.visible = visible;
  }
}
class MapIndicatorBarn {
  constructor(mapSpriteBarn) {
    this.mapSpriteBarn = mapSpriteBarn;
  }
  mapIndicators = [];
  idToMapIdicator = {};
  updateIndicatorData(indicatorData) {
    for (let i2 = 0; i2 < indicatorData.length; i2++) {
      const data = indicatorData[i2];
      if (data.dead) {
        this.removeIndicator(data.id);
      } else {
        this.updateIndicator(data);
      }
    }
  }
  addIndicator(data) {
    const indicator = {
      id: data.id,
      type: data.type,
      pos: v2.copy(data.pos),
      equipped: data.equipped,
      mapSprite: this.mapSpriteBarn.addSprite(),
      pulseSprite: this.mapSpriteBarn.addSprite(),
      pulseScale: 0.5,
      pulseScaleMin: 0.5,
      pulseScaleMax: 1,
      pulseTicker: 0,
      pulseDir: 1,
      pulseSpeed: 0.3
    };
    this.mapIndicators.push(indicator);
    this.idToMapIdicator[data.id] = indicator;
    return indicator;
  }
  removeIndicator(id) {
    for (let i2 = 0; i2 < this.mapIndicators.length; i2++) {
      const indicator = this.mapIndicators[i2];
      if (indicator.id == id) {
        indicator.mapSprite.free();
        indicator.pulseSprite.free();
        this.mapIndicators.splice(i2, 1);
        delete this.idToMapIdicator[id];
        break;
      }
    }
  }
  updateIndicator(data) {
    let indicator = this.idToMapIdicator[data.id];
    indicator ||= this.addIndicator(data);
    indicator.pos = v2.copy(data.pos);
    indicator.equipped = data.equipped;
    const objDef = GameObjectDefs[indicator.type];
    const scale = (device.uiLayout == device.UiLayout.Sm ? 0.15 : 0.2) * 1.25;
    const zOrder = indicator.equipped ? 655350 : 1;
    const mapSprite = indicator.mapSprite;
    mapSprite.pos = v2.copy(indicator.pos);
    mapSprite.scale = scale;
    mapSprite.alpha = 1;
    mapSprite.zOrder = zOrder;
    mapSprite.visible = true;
    mapSprite.sprite.texture = Texture.from(objDef.mapIndicator?.sprite);
    mapSprite.sprite.tint = objDef.mapIndicator?.tint ?? 16777215;
    if (objDef.mapIndicator?.pulse) {
      const pulseSprite = indicator.pulseSprite;
      pulseSprite.pos = v2.copy(indicator.pos);
      pulseSprite.scale = 1;
      pulseSprite.zOrder = zOrder - 1;
      pulseSprite.visible = true;
      pulseSprite.sprite.texture = Texture.from("part-pulse-01.img");
      pulseSprite.sprite.tint = objDef.mapIndicator.pulseTint;
    }
  }
  updateIndicatorPulses(dt) {
    for (let i2 = 0; i2 < this.mapIndicators.length; i2++) {
      const indicator = this.mapIndicators[i2];
      indicator.pulseTicker = math.clamp(
        indicator.pulseTicker + dt * indicator.pulseDir * indicator.pulseSpeed,
        indicator.pulseScaleMin,
        1
      );
      indicator.pulseScale = indicator.pulseTicker * indicator.pulseScaleMax;
      if (indicator.pulseScale >= indicator.pulseScaleMax || indicator.pulseTicker <= indicator.pulseScaleMin) {
        indicator.pulseDir *= -1;
      }
      indicator.pulseSprite.scale = indicator.pulseScale;
      indicator.pulseSprite.visible = indicator.equipped;
    }
  }
}
class SortableSprite extends Sprite {
  /**
   *  zindex: A higher value will mean it will be rendered on top of other displayObjects within the same container.
   */
  __zOrder = -1;
  constructor() {
    super();
  }
}
class MapSprite {
  active = false;
  retained = true;
  sprite = new SortableSprite();
  pos = v2.create(0, 0);
  scale = 1;
  alpha = 1;
  visible = true;
  pulse = false;
  lifetime = 0;
  ticker = 0;
  zOrder = 0;
  constructor() {
    this.sprite.anchor.set(0.5, 0.5);
    this.sprite.scale.set(1, 1);
    this.sprite.visible = false;
  }
  init() {
    this.active = true;
    this.retained = true;
    this.pos = v2.create(0, 0);
    this.scale = 1;
    this.alpha = 1;
    this.pulse = false;
    this.visible = true;
    this.lifetime = Number.MAX_VALUE;
    this.ticker = 0;
    this.zOrder = 0;
  }
  free() {
    this.active = false;
    this.sprite.visible = false;
  }
  release() {
    this.retained = false;
  }
}
class MapSpriteBarn {
  container = new Container();
  mapSprites = [];
  free() {
    for (let i2 = 0; i2 < this.mapSprites.length; i2++) {
      const sprite = this.mapSprites[i2].sprite;
      sprite.parent?.removeChild(sprite);
      sprite.destroy({
        children: true
      });
    }
  }
  addSprite() {
    let mapSprite = null;
    for (let i2 = 0; i2 < this.mapSprites.length; i2++) {
      if (!this.mapSprites[i2].active) {
        mapSprite = this.mapSprites[i2];
        break;
      }
    }
    if (!mapSprite) {
      mapSprite = new MapSprite();
      this.mapSprites.push(mapSprite);
      this.container.addChild(mapSprite.sprite);
    }
    mapSprite.init();
    return mapSprite;
  }
  update(dt, uiManager, map) {
    let doSort = false;
    for (let i2 = 0; i2 < this.mapSprites.length; i2++) {
      const m2 = this.mapSprites[i2];
      if (m2.active) {
        if (m2.zOrder != m2.sprite.__zOrder) {
          m2.sprite.__zOrder = m2.zOrder;
          doSort = true;
        }
        m2.ticker += dt;
        if (m2.pulse) {
          m2.scale += dt / 2.5;
        }
        const pos = uiManager.getMapPosFromWorldPos(m2.pos, map);
        const scale = m2.scale;
        const fade = math.smoothstep(m2.ticker, 0, 0.1) * (1 - math.smoothstep(m2.ticker, m2.lifetime - 0.5, m2.lifetime));
        m2.sprite.position.set(pos.x, pos.y);
        m2.sprite.scale.set(scale, scale);
        m2.sprite.alpha = m2.alpha * fade;
        m2.sprite.visible = m2.visible && m2.sprite.alpha > 1e-4;
        if (m2.ticker >= m2.lifetime && !m2.retained) {
          m2.free();
        }
      }
    }
    if (doSort) {
      this.container.children.sort((a, b) => {
        return a.__zOrder - b.__zOrder;
      });
    }
  }
}
const fontWidth = 24;
class PieTimer {
  container = new Container();
  timerBackground = Sprite.from("timer-background.img");
  counterText = new Text();
  gfx = new Graphics();
  labelText = new Text();
  screenScaleFactor = 1;
  mobileOffset = 0;
  active = false;
  label = "";
  elapsed = 0;
  duration = 0;
  constructor() {
    this.container.visible = false;
    this.timerBackground.anchor.set(0.5, 0.5);
    this.timerBackground.scale.set(1, 1);
    this.container.addChild(this.timerBackground);
    this.container.addChild(this.gfx);
    this.counterText.anchor.set(0.5, 0.5);
    this.counterText.style = {
      fontFamily: "Roboto Condensed, Arial, sans-serif",
      fontWeight: "bold",
      fontSize: fontWidth,
      align: "center",
      fill: 16777215,
      stroke: 0,
      strokeThickness: 3
    };
    this.container.addChild(this.counterText);
    this.labelText.anchor.set(0.5, 0.5);
    this.labelText.style = {
      fontFamily: "Roboto Condensed, Arial, sans-serif",
      fontWeight: "100",
      fontSize: fontWidth,
      align: "center",
      fill: 16777215
    };
    this.container.addChild(this.labelText);
  }
  destroy() {
    this.container.removeChild(this.timerBackground);
    this.timerBackground.destroy({
      children: true
    });
    this.container.destroy({
      children: true,
      texture: true
    });
  }
  start(label, elapsed, duration) {
    this.active = true;
    this.label = label;
    this.elapsed = elapsed;
    this.duration = duration;
  }
  stop() {
    this.active = false;
  }
  resize(touch, screenScaleFactor) {
    this.screenScaleFactor = screenScaleFactor;
    if (device.uiLayout == device.UiLayout.Sm) {
      if (!device.tablet) {
        this.container.scale.set(0.5, 0.5);
      }
      this.mobileOffset = device.isLandscape ? touch.mobileOffsetLandscape : touch.mobileOffsetPortrait;
    } else {
      this.container.scale.set(1, 1);
      this.mobileOffset = 0;
    }
  }
  update(dt, camera) {
    if (!this.active) {
      this.container.visible = false;
      return;
    }
    this.elapsed = math.min(this.elapsed + dt, this.duration);
    const labelWidth = 56 + this.label.length * fontWidth * 0.45;
    const labelHeight = fontWidth * 1.5;
    const rectX = 0 - labelWidth / 2;
    const rectY = 87.5 - labelHeight / 2;
    const l = math.min(this.elapsed / this.duration, 1) * Math.PI * 2 - Math.PI * 0.5;
    this.gfx.clear();
    this.gfx.beginFill(0, 0.5);
    this.gfx.drawRoundedRect(rectX, rectY, labelWidth, labelHeight, 5);
    this.gfx.endFill();
    this.gfx.lineStyle(6, 16777215);
    this.gfx.arc(0, 0, 35, -Math.PI * 0.5, l, false);
    this.counterText.text = math.max(0, this.duration - this.elapsed).toFixed(1);
    this.labelText.position.y = 87.5;
    this.labelText.text = this.label;
    this.container.position.set(
      camera.m_screenWidth / 2,
      camera.m_screenHeight / 3 * this.screenScaleFactor + this.mobileOffset
    );
    this.container.visible = true;
  }
}
function humanizeTime$1(time) {
  const hours = Math.floor(time / 3600);
  const minutes = Math.floor(time / 60) % 60;
  const seconds = Math.floor(time) % 60;
  let timeText = "";
  if (hours > 0) {
    timeText += `${hours}h `;
  }
  if (hours > 0 || minutes > 0) {
    timeText += `${minutes}m `;
  }
  return timeText += `${seconds}s`;
}
function Interpolate(start, end, steps, count) {
  const f = start + (end - start) / steps * count;
  return Math.floor(f);
}
class Color {
  constructor(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
  }
  getColors() {
    return {
      r: this.r,
      g: this.g,
      b: this.b
    };
  }
}
class UiManager {
  constructor(game, audioManager, particleBarn, planeBarn, localization, canvasMode, touch, inputBinds, inputBindUi) {
    this.game = game;
    this.audioManager = audioManager;
    this.particleBarn = particleBarn;
    this.planeBarn = planeBarn;
    this.localization = localization;
    this.canvasMode = canvasMode;
    this.touch = touch;
    this.inputBinds = inputBinds;
    this.inputBindUi = inputBindUi;
    this.game = game;
    this.particleBarn = particleBarn;
    this.localization = localization;
    this.touch = touch;
    this.inputBinds = inputBinds;
    this.inputBindUi = inputBindUi;
    this.roleMenuConfirm.on("click", (e) => {
      e.stopPropagation();
      this.roleSelected = this.roleDisplayed;
      this.setRoleMenuActive(false);
    });
    $("#ui-map-wrapper").css("display", "block");
    $("#ui-team").css("display", "block");
    $(".ui-map-expand").on("mousedown", (e) => {
      e.stopPropagation();
    });
    $(".ui-map-expand").on("click", (_e) => {
      if (device.touch) {
        if (!this.bigmapDisplayed) {
          this.displayMapLarge();
        }
      } else if (device.uiLayout == device.UiLayout.Lg) {
        this.displayMapLarge(this.bigmapDisplayed);
      }
    });
    $("#ui-map-minimize").on("mousedown", (e) => {
      e.stopPropagation();
    });
    $("#ui-map-minimize").on("click", (e) => {
      e.stopPropagation();
      this.toggleMiniMap();
    });
    $("#ui-menu-display").on("click", (e) => {
      e.stopPropagation();
      this.toggleEscMenu();
    });
    this.moveStyleButton.on("touchstart", () => {
      touch.toggleMoveStyle();
    });
    this.aimStyleButton.on("touchstart", () => {
      touch.toggleAimStyle();
    });
    this.aimLineButton.on("touchstart", () => {
      touch.toggleAimLine();
    });
    this.onTouchScreen = (e) => {
      if (e.target?.id == "cvs") {
        this.toggleEscMenu(true);
      }
    };
    $(document).on("touchstart", this.onTouchScreen);
    this.bigmapClose = $("#big-map-close");
    this.bigmapClose.on("touchend", (e) => {
      e.stopPropagation();
      this.displayMapLarge(true);
    });
    this.bigmapClose.on("mousedown", (e) => {
      e.stopPropagation();
    });
    this.bigmapClose.on("click", (e) => {
      e.stopPropagation();
      this.displayMapLarge(true);
    });
    this.gameTabBtns.on("click", (e) => {
      this.setCurrentGameTab($(e.target).data("tab"));
    });
    this.setCurrentGameTab(this.currentGameTab);
    this.fullScreenButton.on("mousedown", (e) => {
      e.stopPropagation();
    });
    this.fullScreenButton.on("click", () => {
      helpers.toggleFullScreen();
      this.toggleEscMenu();
    });
    $("#btn-game-fullscreen").css("display", SDK.isAnySDK ? "none" : "block");
    this.resumeButton.on("mousedown", (e) => {
      e.stopPropagation();
    });
    this.resumeButton.on("click", () => {
      this.toggleEscMenu();
    });
    if (device.touch) {
      this.resumeButton.css("display", "none");
    }
    $("#btn-spectate-quit").on("click", () => {
      this.quitGame();
    });
    $("#btn-game-quit").on("mousedown", (e) => {
      e.stopPropagation();
    });
    $("#btn-game-quit").on("click", () => {
      this.game.m_updatePass = true;
      this.game.m_updatePassDelay = 1;
      this.quitGame();
    });
    this.specStatsButton.on("click", () => {
      this.toggleLocalStats();
    });
    this.specNextButton.on("click", () => {
      this.specNext = true;
    });
    this.specPrevButton.on("click", () => {
      this.specPrev = true;
    });
    this.interactionElems.css("pointer-events", "auto");
    this.interactionElems.on("touchstart", (e) => {
      e.stopPropagation();
      this.interactionTouched = true;
    });
    this.reloadElems.css("pointer-events", "auto");
    this.reloadElems.on("touchstart", (e) => {
      e.stopPropagation();
      this.reloadTouched = true;
    });
    this.gasRenderer = new GasRenderer(canvasMode, 0);
    this.resetWeapSlotStyling = () => {
      if (this.weapDraggedDiv) {
        this.weapSwitches.css({
          left: "",
          top: ""
        });
        $("#ui-game").css({
          "pointer-events": ""
        });
      }
      this.weapDraggedDiv = null;
      this.weapDragging = false;
      this.weapDropped = false;
      if (this.weapSwitches.hasClass("ui-weapon-dragged")) {
        this.weapSwitches.removeClass("ui-weapon-dragged");
      }
      if (!this.weapNoSwitches.hasClass("ui-outline-hover")) {
        this.weapNoSwitches.addClass("ui-outline-hover");
      }
    };
    if (!device.touch) {
      this.weapSwitches.on("mousedown", (e) => {
        const elem = e.currentTarget;
        if (e.button == 0) {
          this.weapDraggedDiv = $(elem);
          this.weapDraggedId = $(elem).data("slot");
        }
      });
      $("#ui-game").on("mousemove", (e) => {
        if (this.weapDraggedDiv && !this.weapDropped) {
          if (this.weapDragging) {
            this.weapDraggedDiv.css({
              left: e.pageX - 80,
              top: e.pageY - 30
            });
            this.weapDraggedDiv.addClass("ui-weapon-dragged");
          } else {
            $("#ui-game").css({
              "pointer-events": "initial"
            });
            this.weapNoSwitches.removeClass("ui-outline-hover");
            this.weapDragging = true;
          }
        }
      });
      $("#ui-game, #ui-weapon-id-1, #ui-weapon-id-2").on("mouseup", (e) => {
        if (e.button == 0 && this.weapDraggedDiv != null) {
          this.weapSwitches.each(() => {
            const id = $(e.currentTarget).data("slot");
            if ($(e.currentTarget).is(":hover") && this.weapDraggedId != id) {
              this.swapWeapSlots = true;
              this.weapDropped = true;
            }
          });
          if (!this.swapWeapSlots) {
            this.resetWeapSlotStyling();
          }
        }
      });
    }
    this.mapIndicatorBarn = new MapIndicatorBarn(this.mapSpriteBarn);
    this.container.mask = new Graphics();
    this.display = {
      gas: this.gasRenderer.display,
      gasSafeZone: this.gasSafeZoneRenderer.display,
      airstrikeZones: planeBarn.airstrikeZoneContainer,
      mapSprites: this.mapSpriteBarn.container,
      teammates: new Container(),
      player: new Container(),
      border: new Graphics()
    };
    this.mapSprite.anchor = new Point(0.5, 0.5);
    this.container.addChild(this.mapSprite);
    this.container.addChild(this.display.gas);
    this.container.addChild(this.display.gasSafeZone);
    this.container.addChild(this.display.airstrikeZones);
    this.container.addChild(this.display.mapSprites);
    this.container.addChild(this.display.teammates);
    this.container.addChild(this.display.player);
    this.container.addChild(this.display.border);
    const minimapMargin = this.getMinimapMargin();
    const minimapSize = this.getMinimapSize();
    this.minimapPos = v2.create(
      minimapMargin + minimapSize / 2,
      game.m_camera.m_screenHeight - minimapSize / 2 - minimapMargin
    );
    this.muteButtonImage = this.muteButton.find("img");
    const muteAudio = this.audioManager.mute;
    this.muteButtonImage.attr("src", muteAudio ? this.muteOffImg : this.muteOnImg);
    this.muteButton.on("mousedown", (e) => {
      e.stopPropagation();
    });
    this.muteButton.on("click", (_e) => {
      let muteAudio2 = this.audioManager.muteToggle();
      this.muteButtonImage.attr(
        "src",
        muteAudio2 ? this.muteOffImg : this.muteOnImg
      );
      muteAudio2 = null;
    });
    this.teamMemberHealthBarWidth = parseInt(
      $(".ui-team-member-health").find(".ui-bar-inner").css("width")
    );
    for (let i2 = 0; i2 < 4; i2++) {
      const parent = this.topLeft;
      const slotIdx = i2;
      this.teamSelectors.push({
        teamNameHtml: "",
        groupId: $(parent).find(`[data-id=${slotIdx}]`),
        groupIdDisplayed: false,
        teamName: $(parent).find(`[data-id=${slotIdx}]`).find(".ui-team-member-name"),
        teamIcon: $(parent).find(`[data-id=${slotIdx}]`).find(".ui-team-member-icon"),
        teamStatus: $(parent).find(`[data-id=${slotIdx}]`).find(".ui-team-member-status"),
        teamHealthInner: $(parent).find(`[data-id=${slotIdx}]`).find(".ui-health-actual"),
        teamColor: $(parent).find(`[data-id=${slotIdx}]`).find(".ui-team-member-color"),
        playerId: 0,
        prevHealth: 0,
        prevStatus: {
          disconnected: false,
          dead: false,
          downed: false,
          role: ""
        },
        indicators: {
          main: {
            elem: $("#ui-team-indicators").find(
              `.ui-indicator-main[data-id=${slotIdx}]`
            ),
            displayed: false
          }
        }
      });
    }
    this.init();
  }
  m_pieTimer = new PieTimer();
  gameElem = $("#ui-game");
  statsMain = $("#ui-stats");
  statsElem = $("#ui-stats-bg");
  statsContentsContainer = $("#ui-stats-contents");
  statsContents = $("#ui-stats-contents-inner");
  statsHeader = $("#ui-stats-header");
  statsInfoBox = $("#ui-stats-info-box");
  statsOptions = $("#ui-stats-options");
  statsAds = $(".ui-stats-ad-container");
  statsLogo = $("#ui-stats-logo");
  escMenuElem = $("#ui-game-menu");
  escMenuDisplayed = false;
  roleMenuElemWrapper = $("#ui-role-menu-wrapper");
  roleMenuElem = $("#ui-role-menu");
  roleMenuFooterEnterElem = $("#ui-role-footer-enter");
  roleMenuFooterHtml = "";
  roleMenuActive = false;
  roleMenuDisplayed = false;
  roleMenuTicker = 0;
  roleDisplayed = "";
  roleSelected = "";
  roleMenuConfirm = $("#ui-role-footer-enter");
  roleMenuInst = null;
  topLeft = $("#ui-top-left");
  waitingForPlayers = true;
  waitingText = $("#ui-waiting-text");
  spectating = false;
  prevSpectatorCount = 0;
  spectatorCount = 0;
  spectatorCounterDisplayed = false;
  spectatorCounterContainer = $("#ui-spec-counter");
  spectatorCounter = $("#ui-spec-counter-number");
  spectateMode = $(".ui-spectate-mode");
  spectatedPlayerText = $("#ui-spectate-text");
  spectatedPlayerName = "";
  spectatedPlayerId = 0;
  spectateModeStats = $("#ui-spectate-stats");
  spectateModeStatsData = $("#ui-spectate-stats-data");
  spectateOptionsWrapper = $("#ui-spectate-options-wrapper");
  rightCenter = $("#ui-right-center");
  leaderboardAlive = $("#ui-leaderboard-alive");
  playersAlive = $(".js-ui-players-alive");
  leaderboardAliveFaction = $("#ui-leaderboard-alive-faction");
  playersAliveRed = $(".js-ui-players-alive-red");
  playersAliveBlue = $(".js-ui-players-alive-blue");
  playersAliveRedCounter = 0;
  playersAliveBlueCounter = 0;
  playerKills = $(".js-ui-player-kills");
  announcement = $("#ui-announcement");
  killLeaderName = $("#ui-kill-leader-name");
  killLeaderCount = $("#ui-kill-leader-count");
  mapContainer = $("#ui-map-container");
  mapContainerBottom = 52;
  mapInfo = $("#ui-map-info");
  mapInfoBottom = 218;
  gasState = {};
  gasIcon = $("#ui-gas-icon");
  gasTimer = $("#ui-gas-timer");
  mapMinimizeButton = $("#ui-map-minimize");
  menuDisplayButton = $("#ui-menu-display");
  bottomCenterRight = $("#ui-bottom-center-right");
  actionSeq = -1;
  displayMapDirty = false;
  displayMapClear = false;
  // In-game menu
  gameTabs = $(".ui-game-tab");
  gameTabBtns = $(".btn-game-tab-select");
  gameKeybindBtns = $(".btn-keybind-desc");
  currentGameTab = "settings";
  onTouchScreen;
  bigmap = $("#big-map");
  bigmapCollision = $("#big-map-collision");
  bigmapClose = $("#big-map-close");
  moveStyleButton = $("#btn-game-move-style");
  aimLineButton = $("#btn-game-aim-line");
  aimStyleButton = $("#btn-game-aim-style");
  fullScreenButton = $("#btn-game-fullscreen");
  resumeButton = $("#btn-game-resume");
  specStatsButton = $("#btn-spectate-view-stats");
  specBegin = false;
  specNext = false;
  specPrev = false;
  specNextButton = $("#btn-spectate-next-player");
  specPrevButton = $("#btn-spectate-prev-player");
  // Touch specific buttons
  interactionElems = $("#ui-interaction-press, #ui-interaction");
  interactionTouched = false;
  reloadElems = $("#ui-current-clip, #ui-remaining-ammo, #ui-reload-button-container");
  reloadTouched = false;
  // Faction flair display
  flairElems = $(".ui-health-flair");
  flairId = 0;
  // Health bar values
  healthRed = new Color(255, 0, 0);
  healthDarkpink = new Color(255, 45, 45);
  healthLightpink = new Color(255, 112, 112);
  healthWhite = new Color(255, 255, 255);
  healthGrey = new Color(179, 179, 179);
  // Store minimap hidden
  minimapDisplayed = true;
  // Store UI visiblity mode
  visibilityMode = 0;
  hudVisible = true;
  gasRenderer;
  gasSafeZoneRenderer = new GasSafeZoneRenderer();
  sentAdStatus = false;
  frame = 0;
  weapsDirty = false;
  weapSwitches = $("#ui-weapon-id-1, #ui-weapon-id-2");
  weapNoSwitches = $("#ui-weapon-id-3, #ui-weapon-id-4");
  weapDraggedId = 0;
  swapWeapSlots = false;
  weapDraggedDiv = null;
  weapDragging = false;
  weapDropped = false;
  mapSpriteBarn = new MapSpriteBarn();
  mapIndicatorBarn;
  playerMapSprites = [];
  playerPingSprites = {};
  container = new Container();
  resetWeapSlotStyling;
  display;
  mapSprite = new Sprite(Texture.EMPTY);
  bigmapDisplayed = false;
  screenScaleFactor = 1;
  minimapPos;
  dead = false;
  // Audio
  muteButton = $("#ui-mute-ingame");
  muteButtonImage;
  muteOffImg = "audio-off.img";
  muteOnImg = "audio-on.img";
  displayingStats = false;
  teamMemberHealthBarWidth;
  teamMemberHeight = 48;
  groupPlayerCount = 0;
  teamSelectors = [];
  displayOldMapSprites = false;
  m_free() {
    this.gasRenderer.free();
    this.clearUI();
    this.roleMenuConfirm.off("click");
    $(".ui-role-option").off("click");
    $(".ui-map-expand").off("mousedown");
    $(".ui-map-expand").off("click");
    $("#ui-map-minimize").off("mousedown");
    $("#ui-map-minimize").off("click");
    $("#ui-menu-display").off("click");
    this.moveStyleButton.off("touchstart");
    this.aimStyleButton.off("touchstart");
    this.aimLineButton.off("touchstart");
    $(document).off("touchstart", this.onTouchScreen);
    this.bigmapClose.off("touchend");
    this.bigmapClose.off("mousedown");
    this.bigmapClose.off("click");
    this.gameTabBtns.off("click");
    this.fullScreenButton.off("mousedown");
    this.fullScreenButton.off("click");
    this.resumeButton.off("mousedown");
    this.resumeButton.off("click");
    $("#btn-spectate-quit").off("click");
    $("#btn-game-quit").off("mousedown");
    $("#btn-game-quit").off("click");
    this.specStatsButton.off("click");
    this.specNextButton.off("click");
    this.specPrevButton.off("click");
    this.interactionElems.off("touchstart");
    this.reloadElems.off("touchstart");
    this.weapSwitches.off("mousedown");
    $("#ui-game").off("mousemove");
    $("#ui-game").off("mouseup");
    $("#ui-weapon-id-1").off("mouseup");
    $("#ui-weapon-id-2").off("mouseup");
    this.muteButton.off("mousedown");
    this.muteButton.off("click");
    $(".ui-team-member-health").find(".ui-bar-inner").css("width", this.teamMemberHealthBarWidth);
    $("#ui-center").off("mouseenter mouseleave");
    this.inputBinds.menuHovered = false;
    if (!this.hudVisible) {
      this.cycleHud();
    }
    this.m_pieTimer.destroy();
    this.clearStatsElems();
    this.setRoleMenuActive(false);
    this.init();
  }
  init() {
    $(".js-ui-map-hidden").css("display", "block");
    $("#ui-map-counter-default").css("display", "inline-block");
    $("#ui-map-counter-faction").css("display", "none");
    this.flairElems.css("display", "none");
    this.clearStatsElems();
    this.setSpectating(false);
    this.updateSpectatorCountDisplay(true);
    this.resetWeapSlotStyling();
    this.dead = false;
    for (let i2 = 0; i2 < this.teamSelectors.length; i2++) {
      this.teamSelectors[i2].teamColor.removeAttr("style");
    }
  }
  onMapLoad(map, camera) {
    this.resize(map, camera);
    const displayLeader = map.getMapDef().gameMode.killLeaderEnabled;
    $("#ui-kill-leader-container").css("display", displayLeader ? "block" : "none");
    if (!device.mobile) {
      $("#ui-killfeed-wrapper").css("top", displayLeader ? "60px" : "12px");
    }
  }
  m_update(dt, player, map, gas, _i, playerBarn, camera, teamMode, factionMode) {
    const localPlayer = player;
    if (this.weapsDirty) {
      this.resetWeapSlotStyling();
    }
    this.weapsDirty = false;
    this.mapIndicatorBarn.updateIndicatorPulses(dt);
    const timeLeft = math.max(Math.floor(gas.duration * (1 - gas.circleT)), 0);
    const gasState = {
      mode: gas.mode,
      time: timeLeft
    };
    if (this.gasState.mode != gasState.mode || this.gasState.time != gasState.time) {
      this.gasState = gasState;
      const gasMoving = this.gasState.mode == GasMode.Moving;
      this.mapInfo.removeClass("icon-pulse");
      this.gasIcon.removeClass("gas-icon");
      this.gasIcon.removeClass("danger-icon");
      if (gasMoving) {
        this.mapInfo.addClass("icon-pulse");
      }
      this.gasIcon.addClass(gasMoving ? "danger-icon" : "gas-icon");
      const minutes = Math.floor(this.gasState.time / 60);
      const seconds = this.gasState.time % 60;
      const strSeconds = `0${seconds}`.slice(-2);
      this.gasTimer.html(`${minutes}:${strSeconds}`);
    }
    this.spectatorCount = player.m_localData.m_spectatorCount;
    this.updateSpectatorCountDisplay(false);
    if (player.m_netData.m_dead && !this.dead) {
      this.dead = true;
      this.m_pieTimer.stop();
    }
    if (localPlayer.downed || this.dead) {
      this.resetWeapSlotStyling();
    }
    if (this.actionSeq != player.m_action.seq && (this.actionSeq = player.m_action.seq, this.m_pieTimer.stop(), player.m_action.type != Action.None && !this.displayingStats)) {
      let desc = "";
      let actionTxt1 = "";
      let actionTxt2 = "";
      switch (player.m_action.type) {
        case Action.Reload:
        case Action.ReloadAlt:
          if (GameObjectDefs[player.m_action.item]) {
            actionTxt1 = this.localization.translate("game-reloading");
          }
          break;
        case Action.UseItem:
          if (GameObjectDefs[player.m_action.item]) {
            actionTxt1 = this.localization.translate("game-using");
            actionTxt2 = this.localization.translate(
              `game-${player.m_action.item}`
            );
          }
          break;
        case Action.Revive: {
          const targetName = playerBarn.getPlayerInfo(
            player.m_action.targetId
          ).name;
          actionTxt1 = this.localization.translate("game-reviving");
          actionTxt2 = localPlayer.downed ? "" : targetName;
          break;
        }
      }
      if (actionTxt1 != "" || actionTxt2 != "") {
        if (this.localization.translate("word-order") == "svo") {
          desc += actionTxt1 || "";
          desc += actionTxt2 ? ` ${actionTxt2}` : "";
        } else if (this.localization.translate("word-order") == "sov") {
          desc += actionTxt2 ? `${actionTxt2} ` : "";
          desc += actionTxt1 ? ` ${actionTxt1}` : "";
        }
        this.m_pieTimer.start(
          desc,
          player.m_action.time,
          player.m_action.duration
        );
      }
    }
    if (!this.bigmapDisplayed) {
      this.mapSprite.x = this.minimapPos.x + this.mapSprite.width / 2 - player.m_visualPos.x / map.width * this.mapSprite.width;
      this.mapSprite.y = this.minimapPos.y - this.mapSprite.height / 2 + player.m_visualPos.y / map.height * this.mapSprite.height;
    }
    const camExtents = v2.create(
      camera.m_screenWidth * 0.5 / camera.m_z(),
      camera.m_screenHeight * 0.5 / camera.m_z()
    );
    const camAabb = {
      min: v2.sub(camera.m_pos, camExtents),
      max: v2.add(camera.m_pos, camExtents)
    };
    const groupId = playerBarn.getPlayerInfo(player.__id).groupId;
    const groupInfo = playerBarn.getGroupInfo(groupId);
    if (!groupInfo) {
      const err = {
        playerId: player.__id,
        groupId,
        spectating: this.spectating,
        playing: this.game.m_playingTicker,
        groupInfo: playerBarn.groupInfo
      };
      errorLogManager.logError(`badTeamInfo_1: ${JSON.stringify(err)}`);
    }
    const layoutSm = device.uiLayout == device.UiLayout.Sm;
    const groupPlayerCount = groupInfo.playerIds.length;
    for (let i2 = 0; i2 < groupPlayerCount; i2++) {
      const teamElems = this.teamSelectors[i2];
      const playerId = groupInfo.playerIds[i2];
      const playerInfo = playerBarn.getPlayerInfo(playerId);
      const isLocalPlayer = playerId == localPlayer.__id;
      const playerStatus = playerBarn.getPlayerStatus(playerId);
      if (playerStatus && teamMode > TeamMode.Solo) {
        if (!teamElems.groupIdDisplayed) {
          teamElems.groupId.css("display", "block");
          teamElems.groupIdDisplayed = true;
        }
        this.updateTeam(
          i2,
          helpers.htmlEscape(playerInfo.name),
          playerStatus.health,
          {
            disconnected: playerStatus.disconnected,
            dead: playerStatus.dead,
            downed: playerStatus.downed,
            role: playerStatus.role
          },
          playerInfo.playerId,
          playerInfo.teamId,
          playerBarn
        );
        for (const key in teamElems.indicators) {
          if (teamElems.indicators.hasOwnProperty(key)) {
            const indicator = teamElems.indicators[key];
            const elem = indicator.elem;
            let hideIndicator = true;
            if ((!isLocalPlayer || indicator.displayAll) && !factionMode) {
              const playerPos = playerStatus.pos;
              const dir = v2.normalizeSafe(
                v2.sub(playerPos, camera.m_pos),
                v2.create(1, 0)
              );
              const edge = coldet.intersectRayAabb(
                camera.m_pos,
                dir,
                camAabb.min,
                camAabb.max
              );
              const rot = Math.atan2(dir.y, -dir.x) - Math.PI * 0.5;
              const screenEdge = camera.m_pointToScreen(edge);
              const onscreen = coldet.testCircleAabb(
                playerPos,
                GameConfig.player.radius,
                camAabb.min,
                camAabb.max
              );
              if (!playerStatus.dead && !onscreen) {
                let off = 32;
                let transform = `translate(-50%, -50%) rotate(${rot}rad)`;
                if (layoutSm) {
                  off = 16;
                  transform += " scale(0.5)";
                }
                hideIndicator = false;
                const heightAdjust = 0;
                elem.css({
                  left: math.clamp(
                    screenEdge.x,
                    off,
                    camera.m_screenWidth - off
                  ),
                  top: math.clamp(
                    screenEdge.y,
                    off,
                    camera.m_screenHeight - off - heightAdjust
                  ),
                  transform
                });
                if (!indicator.displayed) {
                  elem.css("display", "block");
                  indicator.displayed = true;
                }
              }
            }
            if (hideIndicator && indicator.displayed) {
              elem.css("display", "none");
              indicator.displayed = false;
            }
          }
        }
      }
    }
    for (let i2 = groupPlayerCount; i2 < this.teamSelectors.length; i2++) {
      const teamElems = this.teamSelectors[i2];
      for (const key in teamElems.indicators) {
        if (teamElems.indicators.hasOwnProperty(key)) {
          const indicator = teamElems.indicators[key];
          if (indicator.displayed) {
            indicator.elem.css("display", "none");
            indicator.displayed = false;
          }
        }
      }
      if (teamElems.groupIdDisplayed) {
        teamElems.groupId.css("display", "none");
        teamElems.groupIdDisplayed = false;
      }
    }
    if (map.factionMode) {
      const localPlayerInfo = playerBarn.getPlayerInfo(localPlayer.__id);
      if (this.flairId != localPlayerInfo.teamId) {
        this.flairId = localPlayerInfo.teamId;
        const flairColor = this.flairId == 1 ? "red" : "blue";
        this.flairElems.css({
          display: "block",
          "background-image": `url(../img/gui/player-patch-${flairColor}.svg)`
        });
      }
    }
    if (teamMode > TeamMode.Solo && this.groupPlayerCount != groupPlayerCount && device.uiLayout == device.UiLayout.Lg) {
      this.groupPlayerCount = groupPlayerCount;
      this.spectateOptionsWrapper.css({
        top: this.groupPlayerCount * this.teamMemberHeight + 12
      });
    } else if (teamMode == TeamMode.Solo) {
      this.spectateOptionsWrapper.css({
        top: 12
      });
    }
    this.updatePlayerMapSprites(dt, player, playerBarn, map);
    this.mapSpriteBarn.update(dt, this, map);
    this.m_pieTimer.update(dt, camera);
    if (this.roleMenuActive) {
      this.roleMenuTicker -= dt;
      const seconds = Math.ceil(this.roleMenuTicker);
      const html = `${this.localization.translate("game-enter-game")} (${seconds})`;
      if (html != this.roleMenuFooterHtml) {
        this.roleMenuFooterEnterElem.html(html);
        this.roleMenuFooterHtml = html;
      }
      if (!this.roleMenuInst && this.audioManager.isSoundLoaded("ambient_lab_01", "ambient")) {
        this.roleMenuInst = this.audioManager.playSound("ambient_lab_01", {
          channel: "ambient"
        });
      }
      if (this.roleMenuTicker <= 0) {
        this.roleSelected = this.roleDisplayed;
        this.setRoleMenuActive(false);
      }
    }
  }
  updatePlayerMapSprites(_dt, activePlayer, playerBarn, map) {
    const activePlayerInfo = playerBarn.getPlayerInfo(activePlayer.__id);
    let spriteIdx = 0;
    const addSprite = (pos, scale, alpha, visible, zOrder, texture, tint) => {
      if (spriteIdx >= this.playerMapSprites.length) {
        const m2 = this.mapSpriteBarn.addSprite();
        this.playerMapSprites.push(m2);
      }
      const mapSprite = this.playerMapSprites[spriteIdx++];
      mapSprite.pos = v2.copy(pos);
      mapSprite.scale = scale;
      mapSprite.alpha = alpha;
      mapSprite.visible = visible;
      mapSprite.zOrder = zOrder;
      mapSprite.sprite.texture = Texture.from(texture);
      mapSprite.sprite.tint = tint;
    };
    const keys = Object.keys(playerBarn.playerStatus);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const playerStatus = playerBarn.playerStatus[keys[i2]];
      const playerId = playerStatus.playerId;
      const playerInfo = playerBarn.getPlayerInfo(playerId);
      const sameGroup = playerInfo.groupId == activePlayerInfo.groupId;
      let zOrder = 65535 + playerId * 2;
      if (playerId == activePlayerInfo.playerId) {
        zOrder += 65535 * 2;
      }
      const roleDef = RoleDefs[playerStatus.role];
      const customMapIcon = roleDef?.mapIcon;
      if (customMapIcon) {
        zOrder += 65535;
      }
      let texture = "player-map-inner.img";
      if (customMapIcon && roleDef.mapIcon?.alive) {
        texture = roleDef.mapIcon.alive;
      }
      if (playerStatus.dead) {
        texture = "skull-outlined.img";
        if (roleDef?.mapIcon?.dead) {
          texture = roleDef.mapIcon.dead;
        }
      } else if (playerStatus.downed) {
        texture = sameGroup ? "player-map-inner.img" : "player-map-downed.img";
      }
      let tint = sameGroup ? playerBarn.getGroupColor(playerId) : playerBarn.getTeamColor(playerInfo.teamId);
      if (map.factionMode && customMapIcon) {
        tint = playerBarn.getTeamColor(playerInfo.teamId);
      }
      const dotScale = device.uiLayout == device.UiLayout.Sm ? 0.15 : 0.2;
      let scale = dotScale;
      scale = sameGroup ? playerStatus.dead ? dotScale * 1.5 : customMapIcon ? dotScale * 1.25 : dotScale * 1 : playerStatus.dead || playerStatus.downed || customMapIcon ? dotScale * 1.25 : dotScale * 0.75;
      addSprite(
        playerStatus.pos,
        scale,
        playerStatus.minimapAlpha,
        playerStatus.minimapVisible,
        zOrder,
        texture,
        tint
      );
      if (sameGroup) {
        const scale2 = device.uiLayout == device.UiLayout.Sm ? 0.25 : 0.3;
        const visible = playerStatus.minimapVisible && !customMapIcon;
        addSprite(
          playerStatus.pos,
          scale2,
          playerStatus.minimapAlpha,
          visible,
          zOrder - 1,
          "player-map-outer.img",
          16777215
        );
      }
    }
    for (let i2 = this.playerMapSprites.length - 1; i2 >= spriteIdx; i2--) {
      this.playerMapSprites[i2].visible = false;
    }
  }
  getMinimapMargin() {
    if (device.uiLayout == device.UiLayout.Sm) {
      return 4;
    }
    return 16;
  }
  getMinimapSize() {
    if (device.uiLayout == device.UiLayout.Sm) {
      return 192;
    }
    return 256;
  }
  getMinimapBorderWidth() {
    if (device.uiLayout == device.UiLayout.Sm) {
      return 1;
    }
    return 4;
  }
  createPing(pingType, pos, playerId, activePlayerId, playerBarn, _factionMode) {
    const pingDef = PingDefs[pingType];
    if (pingDef) {
      const createPingSprite = (scale, tint) => {
        const s = this.mapSpriteBarn.addSprite();
        s.pos = v2.copy(pos);
        s.scale = scale;
        s.lifetime = pingDef.mapLife;
        s.pulse = false;
        s.zOrder = 100;
        s.sprite.texture = Texture.from(pingDef.mapTexture);
        s.sprite.tint = tint;
        return s;
      };
      const createPulseSprite = (tint) => {
        const s = this.mapSpriteBarn.addSprite();
        s.pos = v2.copy(pos);
        s.scale = 0;
        s.lifetime = pingDef.pingLife;
        s.pulse = true;
        s.zOrder = 99;
        s.sprite.texture = Texture.from("ping-map-pulse.img");
        s.sprite.tint = tint;
        return s;
      };
      if (pingDef.mapEvent) {
        const scale = (device.uiLayout == device.UiLayout.Sm ? 0.15 : 0.2) * 1.5;
        createPingSprite(scale, pingDef.tint).release();
        createPulseSprite(pingDef.tint).release();
      } else {
        let tint = 16777215;
        const activePlayerInfo = playerBarn.getPlayerInfo(activePlayerId);
        const playerInfo = playerBarn.getPlayerInfo(playerId);
        const playerStatus = playerBarn.getPlayerStatus(playerId);
        if (activePlayerInfo && playerInfo && playerStatus) {
          if (playerStatus.role == "leader") {
            tint = 65280;
          } else if (activePlayerInfo.groupId == playerInfo.groupId) {
            tint = playerBarn.getGroupColor(playerId);
          } else {
            tint = playerBarn.getTeamColor(playerInfo.teamId);
          }
        }
        if (!this.playerPingSprites[playerId]) {
          this.playerPingSprites[playerId] = [];
        }
        const pingSprites = this.playerPingSprites[playerId];
        for (let i2 = 0; i2 < pingSprites.length; i2++) {
          pingSprites[i2].free();
        }
        const scale = device.uiLayout == device.UiLayout.Sm ? 0.15 : 0.2;
        const pingSprite = createPingSprite(scale, tint);
        const pulseSprite = createPulseSprite(tint);
        pingSprites.push(pingSprite);
        pingSprites.push(pulseSprite);
      }
    }
  }
  /* not used? */
  updateMapSprite(mapSprite, sprite, spriteVisible, dt) {
    if (mapSprite.displayed) {
      if (mapSprite.life != void 0) {
        mapSprite.life -= dt;
        mapSprite.displayed = mapSprite.life > 0;
        if (mapSprite.maxLife - mapSprite.life < 0.1) {
          sprite.alpha = (mapSprite.maxLife - mapSprite.life) / 0.1;
        } else if (mapSprite.life < 0.5) {
          sprite.alpha = math.max(mapSprite.life / 0.5, 0);
        } else {
          sprite.alpha = 1;
        }
      }
      if (mapSprite.pulse && mapSprite.displayed) {
        mapSprite.scale = mapSprite.scale + dt / 2.5;
        sprite.scale.set(mapSprite.scale, mapSprite.scale);
      }
      sprite.visible = spriteVisible && sprite.alpha > 0;
    }
  }
  updateMapIndicators(data) {
    this.mapIndicatorBarn.updateIndicatorData(data);
  }
  getMapPosFromWorldPos(worldPos, map) {
    const xPos = this.mapSprite.x - this.mapSprite.width / 2 + worldPos.x / map.width * this.mapSprite.width;
    const yPos = this.mapSprite.y + this.mapSprite.height / 2 - worldPos.y / map.height * this.mapSprite.height;
    return v2.create(xPos, yPos);
  }
  getWorldPosFromMapPos(screenPos, map, camera) {
    let insideMap = false;
    if (this.bigmapDisplayed) {
      const xBuffer = (camera.m_screenWidth - this.mapSprite.width) / 2;
      let yBuffer = (camera.m_screenHeight - this.mapSprite.height) / 2;
      if (device.uiLayout == device.UiLayout.Sm && !device.isLandscape) {
        yBuffer = 0;
      }
      insideMap = screenPos.x > xBuffer && screenPos.x < camera.m_screenWidth - xBuffer && screenPos.y > yBuffer && screenPos.y < camera.m_screenHeight - yBuffer;
    } else if (this.minimapDisplayed) {
      const thisMinimapSize = this.getMinimapSize();
      const thisMinimapMargin = this.getMinimapMargin();
      const minimapSize = thisMinimapSize * this.screenScaleFactor;
      const halfSize = (minimapSize + thisMinimapMargin) * 0.5;
      insideMap = screenPos.x > this.minimapPos.x - halfSize && screenPos.x < this.minimapPos.x + halfSize && screenPos.y > this.minimapPos.y - halfSize && screenPos.y < this.minimapPos.y + halfSize;
    }
    if (insideMap) {
      const mapOrigin = v2.create(
        this.mapSprite.x - this.mapSprite.width / 2,
        this.mapSprite.y + this.mapSprite.height / 2
      );
      const xWorldPos = (screenPos.x - mapOrigin.x) / this.mapSprite.width * map.width;
      const yWorldPos = (mapOrigin.y - screenPos.y) / this.mapSprite.height * map.height;
      return v2.create(xWorldPos, yWorldPos);
    }
    return false;
  }
  hideAll() {
    this.gameElem.css("display", "none");
  }
  showAll() {
    this.gameElem.css("display", "block");
  }
  setLocalKills(kills) {
    this.playerKills.html(kills);
  }
  removeAds() {
    SDK.removeAllAds();
    if (!window.aiptag) return;
    const ads = ["728x90", "300x250_2"];
    for (let i2 = 0; i2 < ads.length; i2++) {
      const ad = ads[i2];
      window.aiptag.cmd.display.push(() => {
        window.aipDisplayTag.destroy(`${void 0}_${ad}`);
      });
    }
  }
  refreshMainPageAds() {
    const ads = ["728x90"];
    if (SDK.isCrazyGames) {
      for (let i2 = 0; i2 < ads.length; i2++) {
        SDK.requestAd(ads[i2]);
      }
    }
    if (!window.aiptag) return;
    for (let i2 = 0; i2 < ads.length; i2++) {
      const ad = ads[i2];
      window.aiptag.cmd.display.push(() => {
        window.aipDisplayTag.display(`${void 0}_${ad}`);
      });
    }
  }
  clearUI() {
    this.m_pieTimer.stop();
    this.curAction = {
      type: Action.None
    };
    this.displayMapLarge(true);
    this.displayMiniMap();
    this.clearStatsElems();
    this.clearTeamUI();
    this.toggleEscMenu(true);
    this.toggleLocalStats(true);
    this.visibilityMode = 0;
    this.spectatorCount = 0;
    this.setLocalKills(0);
  }
  beginSpectating() {
    this.specBegin = true;
  }
  hideStats() {
    this.displayingStats = false;
    this.statsMain.css("display", "none");
    this.statsElem.stop().css({
      display: "none",
      opacity: 0
    });
    this.statsContents.stop().hide();
  }
  teamModeToString(teamMode) {
    const l10nMap = {
      unknown: "game-rank",
      [TeamMode.Solo]: "game-solo-rank",
      [TeamMode.Duo]: "game-duo-rank",
      [TeamMode.Squad]: "game-squad-rank"
    };
    const val = l10nMap[teamMode] || l10nMap.unknown;
    return this.localization.translate(val);
  }
  getTitleVictoryText(spectatingAnotherTeam, gameMode) {
    if (spectatingAnotherTeam) {
      return `${this.spectatedPlayerName} ${this.localization.translate(
        "game-won-the-game"
      )}`;
    }
    let chickenTxt = "game-chicken";
    if (gameMode.turkeyMode) {
      chickenTxt = "game-turkey";
    }
    return this.localization.translate(chickenTxt);
  }
  getTitleDefeatText(teamMode, spectatingAnotherTeam) {
    if (spectatingAnotherTeam) {
      return `${this.spectatedPlayerName} ${this.localization.translate(
        "game-player-died"
      )}.`;
    }
    if (teamMode > TeamMode.Solo) {
      return this.localization.translate("game-team-eliminated");
    }
    return `${this.localization.translate(
      "game-You"
    )} ${this.localization.translate("game-you-died")}.`;
  }
  getOverviewElems(teamMode, teamRank, teamKills, factionMode) {
    if (factionMode) {
      const redTeamTxt = this.localization.translate("game-red-team");
      const blueTeamTxt = this.localization.translate("game-blue-team");
      return `<div class="ui-stats-header-right ui-stats-header-red-team"><span class="ui-stats-header-stat">${redTeamTxt} </span><span class="ui-stats-header-value">${this.playersAliveRedCounter}</span></div><div class="ui-stats-header-left ui-stats-header-blue-team"><span class="ui-stats-header-stat">${blueTeamTxt} </span><span class="ui-stats-header-value">${this.playersAliveBlueCounter}</span></div>`;
    }
    if (teamMode == TeamMode.Solo) {
      return `<div><span class="ui-stats-header-stat">${this.teamModeToString(
        teamMode
      )} </span><span class="ui-stats-header-value">#${teamRank}</span></div>`;
    }
    return `<div class="ui-stats-header-right"><span class="ui-stats-header-stat">${this.teamModeToString(
      teamMode
    )} </span><span class="ui-stats-header-value">#${teamRank}</span></div><div class="ui-stats-header-left"><span class="ui-stats-header-stat">${this.localization.translate(
      "game-team-kills"
    )} </span><span class="ui-stats-header-value">${teamKills}</span></div>`;
  }
  quitGame() {
    this.game.m_gameOver = true;
    this.refreshMainPageAds();
    this.game.onQuit();
  }
  showStats(playerStats, teamId, teamRank, winningTeamId, gameOver, localTeamId, teamMode, spectating, playerBarn, _audioManager, map, ui2) {
    if (!spectating || teamId == localTeamId || gameOver) {
      this.toggleEscMenu(true);
      this.displayingStats = true;
      this.m_pieTimer.stop();
      this.displayMapLarge(true);
      this.clearStatsElems();
      this.setSpectating(false, teamMode);
      this.removeAds();
      this.statsMain.css("display", "block");
      this.statsLogo.css("display", "block");
      this.statsContentsContainer.css({
        top: ""
      });
      this.statsInfoBox.css({
        height: ""
      });
      const victory = localTeamId == winningTeamId;
      const statsDelay = victory ? 1750 : 2500;
      this.setBannerAd(statsDelay, ui2);
      const isLocalTeamWinner = localTeamId == winningTeamId || spectating && winningTeamId == teamId;
      const spectatingAnotherTeam = spectating && localTeamId != teamId;
      const S = isLocalTeamWinner ? this.getTitleVictoryText(
        spectatingAnotherTeam,
        map.getMapDef().gameMode
      ) : this.getTitleDefeatText(teamMode, spectatingAnotherTeam);
      let teamKills = 0;
      for (let i2 = 0; i2 < playerStats.length; i2++) {
        teamKills += playerStats[i2].kills;
      }
      const z = this.getOverviewElems(
        teamMode,
        teamRank,
        teamKills,
        map.getMapDef().gameMode.factionMode
      );
      const I = $("<div/>").append(
        $("<div/>", {
          class: "ui-stats-header-title",
          html: S
        })
      ).append(
        $("<div/>", {
          class: "ui-stats-header-overview",
          html: z
        })
      );
      this.statsHeader.html(I);
      const T = (e, t) => $("<div/>", {
        class: "ui-stats-info"
      }).append(
        $("<div/>", {
          html: e
        })
      ).append(
        $("<div/>", {
          html: t
        })
      );
      const M = device.uiLayout != device.UiLayout.Sm || device.tablet ? 250 : 125;
      let P = 0;
      P -= (playerStats.length - 1) * M / 2;
      P -= (playerStats.length - 1) * 10;
      for (let C = 0; C < playerStats.length; C++) {
        const stats = playerStats[C];
        const playerInfo = playerBarn.getPlayerInfo(stats.playerId);
        const D = humanizeTime$1(stats.timeAlive);
        let E = "ui-stats-info-player";
        E += stats.dead ? " ui-stats-info-status" : "";
        const B = ((e) => $("<div/>", {
          class: e
        }))(E);
        B.css("left", P);
        B.append(
          $("<div/>", {
            class: "ui-stats-info-player-name",
            html: helpers.htmlEscape(playerInfo.name)
          })
        );
        B.append(T(this.localization.translate("game-kills"), `${stats.kills}`)).append(
          T(
            this.localization.translate("game-damage-dealt"),
            stats.damageDealt
          )
        ).append(
          T(
            this.localization.translate("game-damage-taken"),
            stats.damageTaken
          )
        ).append(T(this.localization.translate("game-survived"), D));
        if (map.getMapDef().gameMode.factionMode && gameOver) {
          switch (C) {
            case 1:
              B.append(
                $("<div/>", {
                  class: "ui-stats-info-player-badge ui-stats-info-player-red-leader"
                })
              );
              break;
            case 2:
              B.append(
                $("<div/>", {
                  class: "ui-stats-info-player-badge ui-stats-info-player-blue-leader"
                })
              );
              break;
            case 3: {
              const R = playerInfo.teamId == 1 ? "ui-stats-info-player-red-ribbon" : "ui-stats-info-player-blue-ribbon";
              B.append(
                $("<div/>", {
                  class: `ui-stats-info-player-badge ${R}`
                })
              );
            }
          }
        }
        this.statsInfoBox.append(B);
        P += 10;
      }
      const restartButton = $("<a/>", {
        class: "ui-stats-restart btn-green btn-darken menu-option",
        html: this.localization.translate("game-play-new-game")
      });
      restartButton.on("click", () => {
        this.quitGame();
      });
      this.statsOptions.append(restartButton);
      if (gameOver || this.waitingForPlayers) {
        restartButton.css({
          width: device.uiLayout != device.UiLayout.Sm || device.tablet ? 225 : 130
        });
      } else {
        restartButton.css({
          left: device.uiLayout != device.UiLayout.Sm || device.tablet ? -72 : -46
        });
        const q = $("<a/>", {
          class: "btn-green btn-darken menu-option ui-stats-spectate",
          html: this.localization.translate("game-spectate")
        });
        q.on("click", this.beginSpectating.bind(this));
        this.statsOptions.append(q);
      }
      let elemIdx = 0;
      const elemFadeTime = 500;
      const elemDelay = 250 / math.max(1, playerStats.length);
      const baseDelay = 750 / math.max(1, playerStats.length);
      this.statsInfoBox.children().each((idx, elem) => {
        const e = $(elem);
        e.css("opacity", 0);
        e.delay(statsDelay + baseDelay + (elemIdx + idx) * elemDelay).animate(
          {
            opacity: 1
          },
          elemFadeTime,
          () => {
            e.children().each((idx2, elem2) => {
              $(elem2).delay(idx2 * elemDelay).animate(
                {
                  opacity: 1
                },
                elemFadeTime
              );
            });
          }
        );
        e.children().each((_idx, elem2) => {
          $(elem2).css("opacity", 0);
          elemIdx++;
        });
        elemIdx++;
      });
      this.statsOptions.children().each((idx, elem) => {
        const e = $(elem);
        e.hide();
        const delay = statsDelay + baseDelay + (elemIdx + idx) * elemDelay + 500;
        e.delay(delay).fadeIn(elemFadeTime);
        elemIdx++;
      });
      this.statsElem.stop();
      this.statsElem.css("display", "block");
      this.statsElem.delay(statsDelay).animate(
        {
          opacity: 1
        },
        1e3
      );
      this.statsContents.stop();
      this.statsContents.css("display", "block");
      this.statsContents.delay(statsDelay).animate(
        {
          opacity: 1
        },
        1e3
      );
    }
  }
  clearStatsElems() {
    this.statsHeader.empty();
    this.statsInfoBox.empty();
    this.statsOptions.empty();
    this.statsAds.css("display", "none");
    this.statsContents.stop();
    this.statsContents.css({
      display: "none",
      opacity: 0
    });
    this.statsElem.stop();
    this.statsElem.css({
      display: "none",
      opacity: 0
    });
    this.statsMain.css("display", "none");
  }
  showTeamAd(playerStats, _ui2Manager) {
    this.toggleEscMenu(true);
    this.displayMapLarge(true);
    this.clearStatsElems();
    this.statsMain.css("display", "block");
    this.statsLogo.css("display", "none");
    this.m_pieTimer.stop();
    this.displayingStats = true;
    this.statsHeader.html(
      (() => {
        let t = this.localization.translate("game-You");
        t += " ";
        t += this.localization.translate("game-you-died");
        t += ".";
        let a2 = `<div><span class="ui-stats-header-stat">${this.localization.translate(
          "game-kills"
        )} </span>`;
        a2 += `<span class="ui-stats-header-value">${playerStats.kills}</span></div>`;
        return $("<div/>", {
          class: ""
        }).append(
          $("<div/>", {
            class: "ui-stats-header-title",
            html: t
          })
        ).append(
          $("<div/>", {
            class: "ui-stats-header-overview",
            html: a2
          })
        );
      })()
    );
    this.statsContentsContainer.css({
      top: "10%"
    });
    this.statsInfoBox.css({
      height: 0
    });
    const a = $("<a/>", {
      class: "ui-stats-restart btn-green btn-darken menu-option",
      html: this.localization.translate("game-play-new-game")
    });
    a.on("click", () => {
      this.quitGame();
    });
    this.statsOptions.append(a);
    a.css({
      left: device.uiLayout != device.UiLayout.Sm || device.tablet ? -72 : -46
    });
    const i2 = $("<a/>", {
      class: "btn-green btn-darken menu-option ui-stats-spectate",
      html: this.localization.translate("game-spectate")
    });
    i2.on("click", this.beginSpectating.bind(this));
    this.statsOptions.append(i2);
    let elemIdx = 0;
    this.statsOptions.children().each((idx, elem) => {
      const e = $(elem);
      e.hide();
      const delay = 4100 + (elemIdx + idx) * 300 + 300;
      e.delay(delay).fadeIn(750);
      elemIdx++;
    });
    this.statsElem.stop();
    this.statsElem.css("display", "block");
    this.statsElem.delay(2500).animate(
      {
        opacity: 1
      },
      1e3
    );
    this.statsContents.stop();
    this.statsContents.css("display", "block");
    this.statsContents.delay(2500).animate(
      {
        opacity: 1
      },
      1e3
    );
  }
  setBannerAd(time, ui2) {
    if (!window.aiptag) return;
    let delay = Math.max(time - 150, 0);
    setTimeout(() => {
      const bannerAd = $("#ui-stats-ad-container-desktop");
      bannerAd.css("display", "inline-block");
      window.aiptag.cmd.display.push(() => {
        window.aipDisplayTag.display(`${void 0}_300x250_2`);
      });
      ui2.hideKillMessage();
    }, delay);
  }
  setSpectateTarget(targetId, localId, teamMode, playerBarn) {
    if (targetId != this.spectatedPlayerId) {
      this.setSpectating(true, teamMode);
      const name = playerBarn.getPlayerName(targetId, localId, false);
      this.spectatedPlayerId = targetId;
      this.spectatedPlayerName = helpers.htmlEscape(name);
      this.spectatedPlayerText.find("#spectate-player").html(this.spectatedPlayerName);
      this.actionSeq = -1;
      this.m_pieTimer.stop();
    }
  }
  setSpectating(spectating, teamMode) {
    if (this.spectating != spectating) {
      this.spectating = spectating;
      if (this.spectating) {
        this.spectateMode.css("display", "block");
        $(".ui-zoom").removeClass("ui-zoom-hover");
        const hideSpec = teamMode == TeamMode.Solo;
        this.specPrevButton.css("display", hideSpec ? "none" : "block");
        this.specNextButton.css("display", hideSpec ? "none" : "block");
        this.hideStats();
      } else {
        this.spectateMode.css("display", "none");
        $(".ui-zoom").addClass("ui-zoom-hover");
      }
    }
  }
  setLocalStats(stats) {
    const displayStats = {
      kills: this.localization.translate("game-kills"),
      damageDealt: this.localization.translate("game-damage-dealt"),
      damageTaken: this.localization.translate("game-damage-taken"),
      timeAlive: this.localization.translate("game-survived")
    };
    this.spectateModeStatsData.empty();
    for (const k in displayStats) {
      if (displayStats.hasOwnProperty(k)) {
        const text = displayStats[k];
        const stat = k == "timeAlive" ? humanizeTime$1(stats[k]) : stats[k];
        const html = `<tr><td class="ui-spectate-stats-category">${text}</td><td class="ui-spectate-stats-value">${stat}</td></tr>`;
        this.spectateModeStatsData.append(html);
      }
    }
  }
  toggleLocalStats(hide = false) {
    const display = this.spectateModeStats.css("display") == "none" && !hide;
    this.spectateModeStats.css("display", display ? "inline-block" : "none");
    this.specStatsButton.html(
      display ? this.localization.translate("game-hide-match-stats") : this.localization.translate("game-view-match-stats")
    );
  }
  updatePlayersAlive(alive) {
    this.playersAlive.html(alive);
    this.leaderboardAlive.css("display", "block");
    this.leaderboardAliveFaction.css("display", "none");
  }
  updatePlayersAliveRed(alive) {
    this.playersAliveRed.html(alive);
    this.playersAliveRedCounter = alive;
    this.leaderboardAlive.css("display", "none");
    this.leaderboardAliveFaction.css("display", "block");
    $("#ui-map-counter-default").css("display", "none");
    $("#ui-map-counter-faction").css("display", "inline-block");
  }
  updatePlayersAliveBlue(alive) {
    this.playersAliveBlue.html(alive);
    this.playersAliveBlueCounter = alive;
    this.leaderboardAlive.css("display", "none");
    this.leaderboardAliveFaction.css("display", "block");
    $("#ui-map-counter-default").css("display", "none");
    $("#ui-map-counter-faction").css("display", "inline-block");
  }
  updateKillLeader(playerId, playerName, kills, gameMode) {
    const valid = playerId != 0;
    const waitTxt = gameMode?.sniperMode ? this.localization.translate("game-waiting-for-hunted") : this.localization.translate("game-waiting-for-new-leader");
    this.killLeaderName.html(valid ? playerName : waitTxt);
    this.killLeaderCount.html(valid ? kills : 0);
  }
  displayMapLarge(clear) {
    this.bigmapDisplayed = !clear && !this.bigmapDisplayed;
    if (this.bigmapDisplayed) {
      this.container.alpha = 1;
    } else {
      this.container.alpha = this.minimapDisplayed ? 1 : 0;
    }
    let mapHidden = device.uiLayout == device.UiLayout.Sm ? ".js-ui-mobile-map-hidden" : "js-ui-desktop-map-hidden";
    mapHidden += ", .js-ui-map-hidden";
    $(this.visibilityMode == 2 ? ".js-ui-hud-show" : mapHidden).css(
      "display",
      this.bigmapDisplayed ? "none" : "block"
    );
    $(".js-ui-map-show").css("display", this.bigmapDisplayed ? "block" : "none");
    this.updateSpectatorCountDisplay(true);
    this.redraw(this.game.m_camera);
  }
  updateSpectatorCountDisplay(dirty) {
    const displayCounter = !this.bigmapDisplayed && this.spectatorCount > 0;
    dirty = dirty || this.spectatorCount > 0 && !this.spectatorCounterDisplayed || this.spectatorCount == 0 && this.spectatorCounterDisplayed;
    if (this.spectatorCount != this.prevSpectatorCount) {
      this.spectatorCounter.html(this.spectatorCount);
      this.prevSpectatorCount = this.spectatorCount;
    }
    if (dirty) {
      this.spectatorCounterContainer.css(
        "display",
        displayCounter ? "block" : "none"
      );
      this.spectatorCounterDisplayed = displayCounter;
    }
  }
  toggleMiniMap() {
    if (this.minimapDisplayed) {
      this.hideMiniMap();
    } else {
      this.displayMiniMap();
    }
  }
  cycleVisibilityMode() {
    if (!this.bigmapDisplayed) {
      switch (this.visibilityMode) {
        case 0:
          this.hideMiniMap();
          this.visibilityMode = 1;
          break;
        case 1:
          this.displayMiniMap();
          this.visibilityMode = 0;
      }
    }
  }
  cycleHud() {
    if (this.gameElem.css("display") == "none") {
      this.gameElem.css("display", "block");
      this.displayMiniMap();
      this.hudVisible = true;
    } else {
      this.gameElem.css("display", "none");
      this.hideMiniMap();
      this.hudVisible = false;
    }
  }
  hideMiniMap() {
    if (!this.bigmapDisplayed) {
      this.minimapDisplayed = false;
      this.container.alpha = 0;
      this.mapInfo.css("bottom", "auto");
      this.spectatorCounterContainer.css({
        bottom: 6,
        left: 98
      });
    }
  }
  displayMiniMap() {
    if (!this.bigmapDisplayed) {
      const layoutSm = device.uiLayout == device.UiLayout.Sm;
      this.minimapDisplayed = true;
      this.container.alpha = 1;
      this.mapInfo.css("bottom", this.mapInfoBottom);
      this.spectatorCounterContainer.css({
        bottom: layoutSm ? 0 : 218,
        left: layoutSm ? 0 : 6
      });
    }
  }
  displayAnnouncement(message) {
    if (message) {
      this.announcement.html(message);
      this.announcement.fadeIn(400, () => {
        setTimeout(() => {
          this.announcement.fadeOut(800);
        }, 3e3);
      });
    }
  }
  displayGasAnnouncement(type, timeLeft) {
    let message = "";
    switch (type) {
      case GasMode.Waiting: {
        message = this.localization.translate("game-red-zone-advances");
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft - minutes * 60;
        message += minutes > 1 ? ` ${minutes} ${this.localization.translate("game-minutes")}` : "";
        message += minutes == 1 ? ` ${minutes} ${this.localization.translate("game-minute")}` : "";
        message += seconds > 0 ? ` ${Math.floor(seconds)} ${this.localization.translate(
          "game-seconds"
        )}` : "";
        break;
      }
      case GasMode.Moving:
        message = this.localization.translate("game-red-zone-advancing");
        break;
    }
    this.displayAnnouncement(message);
  }
  setWaitingForPlayers(waiting) {
    this.waitingForPlayers = waiting;
    this.waitingText.css("display", waiting ? "block" : "none");
  }
  m_render(playerPos, gas, _camera, map, planeBarn, debug) {
    const circle = gas.getCircle(1);
    const gasPos = this.getMapPosFromWorldPos(circle.pos, map);
    const gasEdge = this.getMapPosFromWorldPos(
      v2.add(circle.pos, v2.create(circle.rad, 0)),
      map
    );
    const gasRad = v2.length(v2.sub(gasEdge, gasPos));
    this.gasRenderer.render(gasPos, gasRad, gas.isActive());
    const circleSafe = gas.circleNew;
    const safePos = this.getMapPosFromWorldPos(circleSafe.pos, map);
    const safeEdge = this.getMapPosFromWorldPos(
      v2.add(circleSafe.pos, v2.create(circleSafe.rad, 0)),
      map
    );
    const safeRad = v2.length(v2.sub(safeEdge, safePos));
    const playerMapPos = this.getMapPosFromWorldPos(playerPos, map);
    const drawCircle = gas.isActive();
    const drawLine2 = gas.isActive() && !this.bigmapDisplayed;
    this.gasSafeZoneRenderer.render(
      safePos,
      safeRad,
      playerMapPos,
      drawCircle,
      drawLine2
    );
    planeBarn.renderAirstrikeZones(this, map, debug);
  }
  updateHealthBar(innerWidth, selectorInner, selectorDepleted, status) {
    const healthBarWidth = innerWidth;
    let uiHealth = status.health * 0.01 * healthBarWidth;
    uiHealth = status.dead ? 0 : math.max(uiHealth, 1);
    selectorInner.css("width", uiHealth);
    if (uiHealth > 0) {
      selectorDepleted?.css("width", uiHealth);
    }
    const val = status.health;
    let l = this.healthRed;
    let c = this.healthDarkpink;
    if (val > 25) {
      if (status.downed) {
        selectorInner.css({
          backgroundColor: "red"
        });
      } else {
        if (math.eqAbs(val, 100, 0.2)) {
          l = this.healthGrey;
          c = this.healthGrey;
        } else if (math.eqAbs(val, 75, 0.2) || val >= 75) {
          l = this.healthWhite;
          c = this.healthWhite;
        } else {
          l = this.healthDarkpink;
          c = this.healthLightpink;
        }
        const m2 = l.getColors();
        const p = c.getColors();
        const h = Interpolate(m2.r, p.r, 45, val);
        const d = Interpolate(m2.g, p.g, 45, val);
        const u = Interpolate(m2.b, p.b, 45, val);
        selectorInner.css({
          backgroundColor: `rgba(${h},${d},${u},1)`
        });
      }
      selectorInner.removeClass("ui-bar-danger");
    } else {
      selectorInner.addClass("ui-bar-danger");
    }
  }
  updateTeam(slotIdx, name, health, status, playerId, _o, _s) {
    const groupId = this.teamSelectors[slotIdx].groupId;
    const teamName = this.teamSelectors[slotIdx].teamName;
    const prevHealth = this.teamSelectors[slotIdx].prevHealth;
    const prevStatus = this.teamSelectors[slotIdx].prevStatus;
    const statusChange = status.dead != prevStatus.dead || status.disconnected != prevStatus.disconnected || status.downed != prevStatus.downed || status.role != prevStatus.role;
    if (this.teamSelectors[slotIdx].playerId != playerId || health != prevHealth || statusChange) {
      const teamStatus = this.teamSelectors[slotIdx].teamStatus;
      const teamHealthInner = this.teamSelectors[slotIdx].teamHealthInner;
      this.teamSelectors[slotIdx].playerId = playerId;
      this.teamSelectors[slotIdx].teamNameHtml = name;
      teamName.html(name);
      this.updateHealthBar(this.teamMemberHealthBarWidth, teamHealthInner, null, {
        health,
        dead: status.dead,
        downed: status.downed
      });
      if (statusChange) {
        teamStatus.attr("class", "ui-team-member-status");
        if (status.disconnected) {
          teamStatus.addClass("ui-team-member-status-disconnected");
        } else if (status.dead) {
          teamStatus.addClass("ui-team-member-status-dead");
        } else if (status.downed) {
          teamStatus.addClass("ui-team-member-status-downed").addClass("icon-pulse");
        }
        teamName.css("opacity", status.disconnected || status.dead ? 0.3 : 1);
      }
      groupId.css("display", "block");
      this.teamSelectors[slotIdx].prevStatus = status;
      this.teamSelectors[slotIdx].prevHealth = health;
    }
  }
  clearTeamUI() {
    $(".ui-team-member").css("display", "none");
    $(".ui-team-indicator").css("display", "none");
    $(".ui-team-member-name").removeAttr("style");
    $(".ui-team-member-status").removeAttr("style");
    $(".ui-team-member-status").removeClass(
      "ui-team-member-status-downed ui-team-member-status-dead ui-team-member-status-disconnected icon-pulse"
    );
    this.teamSelectors = [];
  }
  resize(map, camera) {
    this.screenScaleFactor = device.uiLayout == device.UiLayout.Sm ? 0.5626 : math.min(
      1,
      math.clamp(camera.m_screenWidth / 1280, 0.75, 1) * math.clamp(camera.m_screenHeight / 1024, 0.75, 1)
    );
    this.m_pieTimer.resize(this.touch, this.screenScaleFactor);
    this.gasRenderer.resize();
    this.mapSprite.texture = map.getMapTexture();
    const roleMenuScale = math.min(
      1,
      math.min(camera.m_screenWidth / 1200, camera.m_screenHeight / 900)
    );
    this.roleMenuElem.css(
      "transform",
      `translateX(-50%) translateY(-50%) scale(${roleMenuScale})`
    );
    this.redraw(camera);
  }
  redraw(camera) {
    const screenWidth = camera.m_screenWidth;
    const screenHeight = camera.m_screenHeight;
    const thisMinimapMargin = this.getMinimapMargin();
    let thisMinimapMarginXAdjust = 0;
    let thisMinimapMarginYAdjust = 0;
    if (device.model == "iphonex") {
      if (device.isLandscape) {
        thisMinimapMarginXAdjust += 28;
      } else {
        thisMinimapMarginYAdjust += 32;
      }
    }
    const thisMinimapSize = this.getMinimapSize();
    const thisMinimapBorderWidth = this.getMinimapBorderWidth();
    const layoutSm = device.uiLayout == device.UiLayout.Sm;
    this.display.border.clear();
    this.container.mask?.clear();
    if (this.bigmapDisplayed) {
      const smallestDim = math.min(screenWidth, screenHeight);
      this.mapSprite.width = smallestDim;
      this.mapSprite.height = smallestDim;
      this.mapSprite.x = screenWidth / 2;
      this.mapSprite.y = screenHeight / 2;
      this.mapSprite.alpha = 1;
      this.container.mask.beginFill(16777215, 1);
      this.container.mask.drawRect(
        this.mapSprite.x - this.mapSprite.width / 2,
        this.mapSprite.y - this.mapSprite.height / 2,
        this.mapSprite.width,
        this.mapSprite.height
      );
      this.container.mask.endFill();
      if (device.touch) {
        this.bigmapCollision.css({
          width: screenHeight,
          height: screenWidth
        });
      }
    } else {
      const minimapScale = this.screenScaleFactor * 1600 / 1.2;
      const minimapSize = thisMinimapSize * this.screenScaleFactor;
      this.mapSprite.width = minimapScale;
      this.mapSprite.height = minimapScale;
      this.mapSprite.alpha = 0.8;
      let scaleCss = {
        zoom: this.screenScaleFactor
      };
      if (document.body) {
        if ("WebkitTransform" in document.body.style) {
          scaleCss = {
            "-webkit-transform": `scale(${this.screenScaleFactor})`
          };
        } else if ("transform" in document.body.style) {
          scaleCss = {
            transform: `scale(${this.screenScaleFactor})`
          };
        }
      }
      this.mapContainer.css(scaleCss);
      this.mapContainer.css(
        "bottom",
        this.mapContainerBottom * this.screenScaleFactor
      );
      const minimapPosY = layoutSm ? minimapSize / 2 + thisMinimapMargin : screenHeight - minimapSize / 2 - thisMinimapMargin;
      this.minimapPos.x = thisMinimapMargin + minimapSize / 2 + thisMinimapMarginXAdjust;
      this.minimapPos.y = minimapPosY + thisMinimapMarginYAdjust;
      this.display.border.lineStyle(thisMinimapBorderWidth, 0);
      this.display.border.beginFill(0, 0);
      const u = layoutSm ? thisMinimapMargin + thisMinimapBorderWidth / 2 : screenHeight - minimapSize - thisMinimapMargin + thisMinimapBorderWidth / 2;
      this.display.border.drawRect(
        thisMinimapMargin + thisMinimapBorderWidth / 2 + thisMinimapMarginXAdjust,
        u + thisMinimapMarginYAdjust,
        minimapSize - thisMinimapBorderWidth,
        minimapSize - thisMinimapBorderWidth
      );
      this.display.border.endFill();
      const minimapMaskAnchorY = layoutSm ? thisMinimapMargin : screenHeight - minimapSize - thisMinimapMargin;
      this.container.mask.beginFill(16777215, 1);
      this.container.mask.drawRect(
        thisMinimapMargin + thisMinimapMarginXAdjust,
        minimapMaskAnchorY - 0.5 + thisMinimapMarginYAdjust,
        minimapSize,
        minimapSize
      );
      this.container.mask.endFill();
    }
  }
  toggleEscMenu(clear = false) {
    if (!this.displayingStats) {
      if (this.escMenuDisplayed || clear) {
        this.escMenuDisplayed = false;
        this.escMenuElem.css("display", "none");
        this.setCurrentGameTab("settings");
        $("#ui-center").off("mouseenter mouseleave");
        this.inputBinds.menuHovered = false;
        if (this.roleMenuActive) {
          this.displayRoleMenu();
        }
      } else if (this.bigmapDisplayed) {
        this.displayMapLarge(true);
      } else {
        if (this.visibilityMode == 2) {
          this.cycleVisibilityMode();
        }
        this.escMenuDisplayed = true;
        this.escMenuElem.css("display", "block");
        $("#ui-center").hover(
          () => {
            this.inputBinds.menuHovered = true;
          },
          () => {
            this.inputBinds.menuHovered = false;
          }
        );
        this.inputBinds.menuHovered = false;
        if (this.roleMenuActive) {
          this.hideRoleMenu();
        }
      }
    }
  }
  setCurrentGameTab(tab) {
    this.currentGameTab = tab;
    this.gameTabs.css("display", "none");
    this.gameTabBtns.removeClass("btn-game-menu-selected");
    $(`#ui-game-tab-${this.currentGameTab}`).css("display", "block");
    $(`#btn-game-${this.currentGameTab}`).addClass("btn-game-menu-selected");
    if (this.currentGameTab == "keybinds") {
      this.inputBindUi.refresh();
    } else {
      this.inputBindUi.cancelBind();
    }
  }
  setRoleMenuActive(active) {
    this.roleMenuActive = active;
    if (this.roleMenuActive) {
      this.roleMenuTicker = GameConfig.player.perkModeRoleSelectDuration;
      this.displayRoleMenu();
    } else {
      if (this.roleMenuInst) {
        this.audioManager.stopSound(this.roleMenuInst);
        this.roleMenuInst = null;
      }
      this.hideRoleMenu();
    }
  }
  displayRoleMenu() {
    this.roleMenuElemWrapper.css("display", "block");
  }
  hideRoleMenu() {
    this.roleMenuElemWrapper.css("display", "none");
  }
  setRoleMenuOptions(role, roles) {
    $("#ui-role-header").html("");
    for (let a = 0; a < roles.length; a++) {
      const role2 = roles[a];
      const roleDef = GameObjectDefs[role2];
      const roleOption = $("<div/>", {
        class: "ui-role-option",
        "data-role": role2
      });
      roleOption.css({
        "background-image": `url('${roleDef.guiImg}')`
      });
      $("#ui-role-header").append(roleOption);
    }
    $(".ui-role-option").on("click", (e) => {
      e.stopPropagation();
      const el = $(e.currentTarget);
      this.setRoleMenuInfo(el.data("role"));
    });
    let selectedRole = roles[0];
    if (roles.includes(role)) {
      selectedRole = role;
    }
    this.setRoleMenuInfo(selectedRole);
  }
  setRoleMenuInfo(role) {
    const roleDef = GameObjectDefs[role];
    $(".ui-role-option").css({
      "background-size": 132,
      opacity: 0.5
    });
    $("#ui-role-header").find(`[data-role=${role}]`).css({
      "background-size": 164,
      opacity: 1
    });
    const roleBodyLeft = $("<div/>", {
      class: "ui-role-body-left"
    });
    const roleBodyName = $("<div/>", {
      class: "ui-role-body-name"
    });
    const roleBodyImg = $("<div/>", {
      class: "ui-role-body-image"
    });
    const roleName = this.localization.translate(`game-${role}`);
    roleBodyName.html(roleName);
    roleBodyImg.css({
      "background-image": `url('${roleDef.guiImg}')`
    });
    const borderColor = roleDef.color ? helpers.colorToHexString(roleDef.color) : "default";
    this.roleMenuElem.css("border-color", borderColor);
    roleBodyLeft.append(roleBodyName).append(roleBodyImg);
    const roleBodyRight = $("<div/>", {
      class: "ui-role-body-right"
    });
    const rolePerks = roleDef.perks;
    for (let i2 = 0; i2 < rolePerks.length; i2++) {
      const perk = rolePerks[i2];
      const perkElem = $("<div/>", {
        class: "ui-role-body-perk"
      });
      const perkElemImg = $("<div/>", {
        class: "ui-role-body-perk-image-wrapper"
      }).append(
        $("<div/>", {
          class: "ui-role-body-perk-image-icon"
        })
      );
      const perkElemName = $("<div/>", {
        class: "ui-role-body-perk-name"
      });
      const perkImg = helpers.getSvgFromGameType(
        perk instanceof Function ? perk() : perk
      );
      perkElemImg.find(".ui-role-body-perk-image-icon").css({
        "background-image": `url('${perkImg}')`
      });
      const perkName = this.localization.translate(`game-${perk}`);
      perkElemName.html(perkName);
      perkElem.append(perkElemImg).append(perkElemName);
      roleBodyRight.append(perkElem);
    }
    $("#ui-role-body").html("").append(roleBodyLeft).append(roleBodyRight);
    this.roleDisplayed = role;
  }
}
const maxKillFeedLines = 6;
const touchHoldDuration = 0.75 * 1e3;
const perkUiCount = 4;
const WeaponSlotToBind = {
  [GameConfig.WeaponSlot.Primary]: Input.EquipPrimary,
  [GameConfig.WeaponSlot.Secondary]: Input.EquipSecondary,
  [GameConfig.WeaponSlot.Melee]: Input.EquipMelee,
  [GameConfig.WeaponSlot.Throwable]: Input.EquipThrowable
};
function domElemById(id) {
  return document.getElementById(id);
}
function isLmb(e) {
  return e.button == 0;
}
function isRmb(e) {
  if ("which" in e) {
    return e.which == 3;
  }
  return e.button == 2;
}
function copy(src, dst, path) {
  if (src instanceof Array) {
    for (let i2 = 0; i2 < src.length; i2++) {
      copy(src[i2], path !== void 0 ? dst[path] : dst, i2);
    }
  } else if (src instanceof Object) {
    const keys = Object.keys(src);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const key = keys[i2];
      copy(src[key], path !== void 0 ? dst[path] : dst, key);
    }
  } else {
    dst[path] = src;
  }
}
function diff(a, b, all) {
  if (b instanceof Array) {
    const patch = [];
    for (let i2 = 0; i2 < b.length; i2++) {
      patch[i2] = diff(a[i2], b[i2], all);
    }
    return patch;
  }
  if (b instanceof Object) {
    const patch = {};
    const keys = Object.keys(b);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const key = keys[i2];
      patch[key] = diff(a[key], b[key], all);
    }
    return patch;
  }
  return a != b || all;
}
function m() {
  const e = Object.keys(GameObjectDefs);
  const t = [];
  for (let r = 0; r < e.length; r++) {
    const a = e[r];
    const i2 = GameObjectDefs[a];
    if (!i2.hideUi && (i2.type == "heal" || i2.type == "boost" || i2.type == "ammo")) {
      t.push(a);
    }
  }
  return t;
}
class UiState {
  mobile = false;
  touch = false;
  rareLootMessage = {
    lootType: "",
    ticker: 0,
    duration: 0,
    opacity: 0
  };
  pickupMessage = {
    message: "",
    ticker: 0,
    duration: 0,
    opacity: 0
  };
  killMessage = {
    text: "",
    count: "",
    ticker: 0,
    duration: 0,
    opacity: 0
  };
  killFeed = Array.from({ length: maxKillFeedLines }, () => ({
    text: "",
    color: "#000000",
    offset: 0,
    opacity: 0,
    ticker: Number.MAX_VALUE
  }));
  ammo = {
    current: 0,
    remaining: 0,
    displayCurrent: false,
    displayRemaining: false
  };
  interaction = {
    type: 0,
    text: "",
    key: "",
    usable: false
  };
  weapons = Array.from({ length: GameConfig.WeaponSlot.Count }, (_, i2) => ({
    slot: i2,
    type: "",
    ammo: 0,
    equipped: false,
    selectable: false,
    opacity: 0,
    width: 0,
    ticker: 0,
    bind: WeaponSlotToBind[i2],
    bindStr: ""
  }));
  scopes = SCOPE_LEVELS.map((type) => ({
    type,
    visible: false,
    equipped: false,
    selectable: false
  }));
  loot = m().map((type) => ({
    type,
    count: 0,
    maximum: 0,
    selectable: false,
    width: 0,
    ticker: 0
  }));
  perks = Array.from({ length: perkUiCount }, () => ({
    type: "",
    droppable: false,
    width: 0,
    ticker: 0,
    pulse: false
  }));
  gear = GEAR_TYPES.map((type) => ({
    type,
    item: "",
    selectable: false,
    width: 0,
    ticker: 0,
    rot: 0
  }));
  health = GameConfig.player.health;
  boost = 0;
  downed = false;
}
class UiManager2 {
  constructor(localization, inputBinds) {
    this.localization = localization;
    this.inputBinds = inputBinds;
    for (let i2 = 0; i2 < maxKillFeedLines; i2++) {
      const lineId = `ui-killfeed-${i2}`;
      let line = domElemById(lineId);
      if (!line) {
        line = document.createElement("div");
        line.id = lineId;
        line.classList.add("killfeed-div");
        const child = document.createElement("div");
        child.classList.add("killfeed-text");
        line.appendChild(child);
        this.dom.killFeed.div.appendChild(line);
      }
      this.dom.killFeed.lines.push({
        line,
        text: line.firstElementChild
      });
    }
    for (let i2 = 0; i2 < GameConfig.WeaponSlot.Count; i2++) {
      const weapon = domElemById(`ui-weapon-id-${i2 + 1}`);
      const weaponData = {
        div: weapon,
        type: weapon.getElementsByClassName("ui-weapon-name")[0],
        number: weapon.getElementsByClassName(
          "ui-weapon-number"
        )[0],
        image: weapon.getElementsByClassName(
          "ui-weapon-image"
        )[0],
        ammo: weapon.getElementsByClassName(
          "ui-weapon-ammo-counter"
        )[0]
      };
      this.dom.weapons.push(weaponData);
    }
    for (let i2 = 0; i2 < SCOPE_LEVELS.length; i2++) {
      const scopeType = SCOPE_LEVELS[i2];
      const x = {
        scopeType,
        div: domElemById(`ui-scope-${scopeType}`)
      };
      this.dom.scopes.push(x);
    }
    for (let S = m(), v = 0; v < S.length; v++) {
      const I = S[v];
      const T = domElemById(`ui-loot-${I}`);
      if (T) {
        const P = {
          lootType: I,
          div: T,
          count: T.getElementsByClassName("ui-loot-count")[0],
          image: T.getElementsByClassName(
            "ui-loot-image"
          )[0],
          overlay: T.getElementsByClassName(
            "ui-loot-overlay"
          )[0]
        };
        this.dom.loot.push(P);
      }
    }
    for (let i2 = 0; i2 < GEAR_TYPES.length; i2++) {
      const gearType = GEAR_TYPES[i2];
      const div = domElemById(`ui-armor-${gearType}`);
      const L = {
        gearType,
        div,
        level: div.getElementsByClassName("ui-armor-level")[0],
        image: div.getElementsByClassName(
          "ui-armor-image"
        )[0]
      };
      this.dom.gear.push(L);
    }
    for (let i2 = 0; i2 < perkUiCount; i2++) {
      const perk = domElemById(`ui-perk-${i2}`);
      const perkData = {
        perkType: "",
        div: perk,
        divTitle: perk.getElementsByClassName("tooltip-title")[0],
        divDesc: perk.getElementsByClassName("tooltip-desc")[0],
        image: perk.getElementsByClassName(
          "ui-armor-image"
        )[0]
      };
      this.dom.perks.push(perkData);
    }
    const setEventListener = (event, elem, fn) => {
      this.eventListeners.push({
        event,
        elem,
        fn
      });
      elem.addEventListener(event, fn);
    };
    const addItemAction = (action, type, data, div) => {
      this.itemActions.push({
        action,
        type,
        data,
        div,
        actionQueued: false,
        actionTime: 0
      });
    };
    for (let i2 = 0; i2 < this.dom.weapons.length; i2++) {
      addItemAction(
        "use",
        "weapon",
        i2,
        this.dom.weapons[i2].div
      );
      addItemAction(
        "drop",
        "weapon",
        i2,
        this.dom.weapons[i2].div
      );
    }
    for (let i2 = 0; i2 < this.dom.scopes.length; i2++) {
      const W = this.dom.scopes[i2];
      addItemAction("use", "scope", W.scopeType, W.div);
      if (W.scopeType != "1xscope") {
        addItemAction("drop", "loot", W.scopeType, W.div);
      }
    }
    for (let i2 = 0; i2 < this.dom.loot.length; i2++) {
      const loot = this.dom.loot[i2];
      const def2 = GameObjectDefs[loot.lootType];
      if (def2.type == "heal" || def2.type == "boost") {
        addItemAction("use", "loot", loot.lootType, loot.div);
      }
      addItemAction("drop", "loot", loot.lootType, loot.div);
    }
    for (let i2 = 0; i2 < this.dom.gear.length; i2++) {
      const gear = this.dom.gear[i2];
      if (gear.gearType != "backpack") {
        addItemAction("drop", "loot", gear.gearType, gear.div);
      }
    }
    for (let i2 = 0; i2 < this.dom.perks.length; i2++) {
      addItemAction("drop", "perk", i2, this.dom.perks[i2].div);
    }
    for (let i2 = 0; i2 < this.itemActions.length; i2++) {
      const item = this.itemActions[i2];
      setEventListener("mousedown", item.div, (e) => {
        if (item.action == "use" && isLmb(e) || item.action == "drop" && isRmb(e)) {
          e.stopPropagation();
          item.actionQueued = true;
        }
      });
      setEventListener("mouseup", item.div, (e) => {
        if (item.actionQueued && (item.action == "use" && isLmb(e) || item.action == "drop" && isRmb(e))) {
          e.stopPropagation();
          this.pushAction(item);
          item.actionQueued = false;
        }
      });
      setEventListener("touchstart", item.div, (e) => {
        if (e.changedTouches.length > 0) {
          e.stopPropagation();
          item.actionQueued = true;
          item.actionTime = (/* @__PURE__ */ new Date()).getTime();
          item.touchOsId = e.changedTouches[0].identifier;
        }
      });
      setEventListener("touchend", item.div, (_e) => {
        if ((/* @__PURE__ */ new Date()).getTime() - item.actionTime < touchHoldDuration && item.actionQueued && item.action == "use") {
          this.pushAction(item);
        }
        item.actionQueued = false;
      });
      setEventListener("touchcancel", item.div, (_e) => {
        item.actionQueued = false;
      });
    }
    const canvas = document.getElementById("cvs");
    this.clearQueuedItemActions = () => {
      for (let i2 = 0; i2 < this.itemActions.length; i2++) {
        this.itemActions[i2].actionQueued = false;
      }
      if (device.touch) {
        canvas.focus();
      }
    };
    window.addEventListener("mouseup", this.clearQueuedItemActions);
    window.addEventListener("focus", this.clearQueuedItemActions);
    this.onKeyUp = (e) => {
      const keyCode = e.which || e.keyCode;
      const bind = this.inputBinds.getBind(Input.Fullscreen);
      if (bind && keyCode == bind.code) {
        helpers.toggleFullScreen();
      }
    };
    window.addEventListener("keyup", this.onKeyUp);
  }
  // Ui state
  oldState = new UiState();
  newState = new UiState();
  frameCount = 0;
  // DOM
  dom = {
    debugButton: domElemById("ui-debug-button"),
    emoteButton: domElemById("ui-emote-button"),
    menu: {
      touchStyles: domElemById("btn-touch-styles"),
      aimLine: domElemById("btn-game-aim-line")
    },
    rareLootMessage: {
      icon: domElemById("ui-perk-message-image-icon"),
      imageWrapper: domElemById("ui-perk-message-image-wrapper"),
      wrapper: domElemById("ui-perk-message-wrapper"),
      name: domElemById("ui-perk-message-name"),
      desc: domElemById("ui-perk-message-acquired")
    },
    pickupMessage: domElemById("ui-pickup-message"),
    killMessage: {
      div: domElemById("ui-kills"),
      text: domElemById("ui-kill-text"),
      count: domElemById("ui-kill-count")
    },
    killFeed: {
      div: domElemById("ui-killfeed-contents"),
      lines: []
    },
    weapons: [],
    ammo: {
      current: domElemById("ui-current-clip"),
      remaining: domElemById("ui-remaining-ammo"),
      reloadButton: domElemById("ui-reload-button-container")
    },
    interaction: {
      div: domElemById("ui-interaction"),
      key: domElemById("ui-interaction-press"),
      text: domElemById("ui-interaction-description")
    },
    health: {
      inner: domElemById("ui-health-actual"),
      depleted: domElemById("ui-health-depleted")
    },
    boost: {
      div: domElemById("ui-boost-counter"),
      bars: [
        domElemById("ui-boost-counter-0").firstElementChild,
        domElemById("ui-boost-counter-1").firstElementChild,
        domElemById("ui-boost-counter-2").firstElementChild,
        domElemById("ui-boost-counter-3").firstElementChild
      ]
    },
    scopes: [],
    loot: [],
    gear: [],
    perks: []
  };
  rareLootMessageQueue = [];
  uiEvents = [];
  eventListeners = [];
  clearQueuedItemActions;
  onKeyUp;
  // Game-item handling. Game item UIs support two actions:
  // left-click to use, and right-click to drop.
  itemActions = [];
  m_free() {
    for (let i2 = 0; i2 < this.eventListeners.length; i2++) {
      const e = this.eventListeners[i2];
      e.elem.removeEventListener(e.event, e.fn);
    }
    window.removeEventListener("focus", this.clearQueuedItemActions);
    window.removeEventListener("mouseup", this.clearQueuedItemActions);
    window.removeEventListener("keyup", this.onKeyUp);
  }
  pushAction(itemAction) {
    this.uiEvents.push({
      action: itemAction.action,
      type: itemAction.type,
      data: itemAction.data
    });
  }
  flushInput() {
    this.uiEvents = [];
  }
  m_update(dt, activePlayer, spectating, playerBarn, lootBarn, map, inputBinds) {
    const state = this.newState;
    state.mobile = device.mobile;
    state.touch = device.touch;
    if (state.touch) {
      for (let i2 = 0; i2 < this.itemActions.length; i2++) {
        const itemAction = this.itemActions[i2];
        if (itemAction.actionQueued && itemAction.action == "drop") {
          const time = (/* @__PURE__ */ new Date()).getTime();
          const elapsed = time - itemAction.actionTime;
          if (elapsed >= touchHoldDuration) {
            this.pushAction(itemAction);
            itemAction.actionTime = time;
            itemAction.actionQueued = false;
          }
        }
      }
    }
    if (state.rareLootMessage.ticker >= state.rareLootMessage.duration && // Create a new message if we aren't displaying one
    this.rareLootMessageQueue.length > 0) {
      const lootType = this.rareLootMessageQueue.shift();
      state.rareLootMessage.lootType = lootType;
      state.rareLootMessage.ticker = 0;
      state.rareLootMessage.duration = this.rareLootMessageQueue.length > 0 ? 2 : 4;
      state.rareLootMessage.opacity = 0;
    }
    state.rareLootMessage.ticker += dt;
    const g = state.rareLootMessage.ticker;
    const f = state.rareLootMessage.duration;
    state.rareLootMessage.opacity = 1 - math.smoothstep(g, f - 0.2, f);
    state.pickupMessage.ticker += dt;
    const x = state.pickupMessage.ticker;
    const z = state.pickupMessage.duration;
    state.pickupMessage.opacity = math.smoothstep(x, 0, 0.2) * (1 - math.smoothstep(x, z, z + 0.2)) * (1 - state.rareLootMessage.opacity);
    state.killMessage.ticker += dt;
    const I = state.killMessage.ticker;
    const T = state.killMessage.duration;
    state.killMessage.opacity = (1 - math.smoothstep(I, T - 0.2, T)) * (1 - state.rareLootMessage.opacity);
    let offset = 0;
    for (let i2 = 0; i2 < state.killFeed.length; i2++) {
      const line = state.killFeed[i2];
      line.ticker += dt;
      const E = line.ticker;
      line.offset = offset;
      line.opacity = math.smoothstep(E, 0, 0.25) * (1 - math.smoothstep(E, 6, 6.5));
      offset += math.min(E / 0.25, 1);
      if (device.mobile) {
        line.opacity = E < 6.5 ? 1 : 0;
      }
    }
    state.health = activePlayer.m_netData.m_dead ? 0 : math.max(activePlayer.m_localData.m_health, 1);
    state.boost = activePlayer.m_localData.m_boost;
    state.downed = activePlayer.m_netData.m_downed;
    let interactionType = 0;
    let interactionObject = null;
    let interactionUsable = true;
    if (activePlayer.canInteract(map)) {
      let closestObj = null;
      let closestPen = 0;
      const obstacles = map.m_obstaclePool.m_getPool();
      for (let i2 = 0; i2 < obstacles.length; i2++) {
        const obstacle = obstacles[i2];
        if (obstacle.active && !obstacle.dead && util.sameLayer(obstacle.layer, activePlayer.layer)) {
          const interact = obstacle.getInteraction();
          if (interact) {
            const res = collider.intersectCircle(
              obstacle.collider,
              activePlayer.m_netData.m_pos,
              interact.rad + activePlayer.m_rad
            );
            if (res && res.pen >= closestPen) {
              closestObj = obstacle;
              closestPen = res.pen;
            }
          }
        }
      }
      if (closestObj) {
        interactionType = 4;
        interactionObject = closestObj;
        interactionUsable = true;
      }
      const loot = lootBarn.getClosestLoot();
      if (loot && !activePlayer.m_netData.m_downed) {
        const itemDef = GameObjectDefs[loot.type];
        const X = activePlayer.m_hasWeaponInSlot(GameConfig.WeaponSlot.Primary);
        const K = activePlayer.m_hasWeaponInSlot(GameConfig.WeaponSlot.Secondary);
        const Z = X && K;
        const usable = itemDef.type != "gun" || !Z || activePlayer.m_equippedWeaponType() == "gun";
        let J = false;
        if (state.touch && itemDef.type == "helmet" && activePlayer.m_getHelmetLevel() == itemDef.level && loot.type != activePlayer.m_netData.m_helmet || itemDef.type == "chest" && activePlayer.m_getChestLevel() == itemDef.level && loot.type != activePlayer.m_netData.m_chest) {
          J = true;
        }
        if (usable || device.uiLayout == device.UiLayout.Sm) {
          interactionType = 2;
          interactionObject = loot;
        }
        interactionUsable = usable && (!state.touch || itemDef.type == "gun" || itemDef.type == "melee" || itemDef.type == "outfit" || itemDef.type == "perk" || J);
      }
      const canSelfRevive = activePlayer.m_hasPerk("self_revive");
      if (activePlayer.m_action.type == Action.None && (!activePlayer.m_netData.m_downed || canSelfRevive)) {
        const ourTeamId = playerBarn.getPlayerInfo(activePlayer.__id).teamId;
        const players = playerBarn.playerPool.m_getPool();
        for (let i2 = 0; i2 < players.length; i2++) {
          const p = players[i2];
          if (p.active) {
            const theirTeamId = playerBarn.getPlayerInfo(p.__id).teamId;
            if ((p.__id != activePlayer.__id || canSelfRevive) && ourTeamId == theirTeamId && p.m_netData.m_downed && !p.m_netData.m_dead && p.m_action.type != Action.Revive) {
              const dist = v2.length(
                v2.sub(p.m_netData.m_pos, activePlayer.m_netData.m_pos)
              );
              if (dist < GameConfig.player.reviveRange && util.sameLayer(p.layer, activePlayer.layer)) {
                interactionType = 3;
                interactionObject = p;
                interactionUsable = true;
              }
            }
          }
        }
      }
      if (activePlayer.m_action.type == Action.Revive && activePlayer.m_netData.m_downed && !canSelfRevive) {
        interactionType = 0;
        interactionObject = null;
        interactionUsable = false;
      }
      if ((activePlayer.m_action.type == Action.UseItem || activePlayer.m_action.type == Action.Revive && (!activePlayer.m_netData.m_downed || !!canSelfRevive)) && !spectating) {
        interactionType = 1;
        interactionObject = null;
        interactionUsable = true;
      }
    }
    state.interaction.type = interactionType;
    state.interaction.text = this.getInteractionText(
      interactionType,
      interactionObject,
      activePlayer
    );
    state.interaction.key = this.getInteractionKey(interactionType);
    state.interaction.usable = interactionUsable && !spectating;
    for (let oe = 0; oe < activePlayer.m_localData.m_weapons.length; oe++) {
      const se = activePlayer.m_localData.m_weapons[oe];
      const ne = state.weapons[oe];
      ne.type = se.type;
      ne.ammo = se.ammo;
      if (oe == GameConfig.WeaponSlot.Throwable) {
        ne.ammo = activePlayer.m_localData.m_inventory[se.type] || 0;
      }
      const le = ne.equipped;
      ne.equipped = oe == activePlayer.m_localData.m_curWeapIdx;
      ne.selectable = (se.type != "" || oe == 0 || oe == 1) && !spectating;
      const ce = ne.equipped ? 1 : 0.6;
      const me = ce - ne.opacity;
      const pe = math.min(me, math.sign(me) * dt / 0.15);
      ne.opacity = math.clamp(ne.opacity + pe, 0, 1);
      if (device.mobile) {
        ne.opacity = ce;
      }
      if (ne.type == "bugle" && ne.ammo == 0) {
        ne.opacity = 0.25;
      }
      ne.ticker += dt;
      if (!ne.equipped || !le) {
        ne.ticker = 0;
      }
      if (this.frameCount < 2) {
        ne.ticker = 1;
      }
      const he = math.min(ne.ticker / 0.09, Math.PI);
      const de = Math.sin(he);
      ne.width = de < 1e-3 ? 0 : de;
      if (device.mobile) {
        ne.width = 0;
      }
      const ue = inputBinds.getBind(ne.bind);
      ne.bindStr = ue ? ue.toString() : "";
    }
    const ge = state.weapons[activePlayer.m_localData.m_curWeapIdx];
    const weaponDef = GameObjectDefs[ge.type];
    const we = ge.ammo;
    const fe = weaponDef.type == "gun" ? weaponDef.ammoInfinite || activePlayer.m_hasPerk("endless_ammo") && !weaponDef.ignoreEndlessAmmo ? Number.MAX_VALUE : activePlayer.m_localData.m_inventory[weaponDef.ammo] : 0;
    state.ammo.current = we;
    state.ammo.remaining = fe;
    state.ammo.displayCurrent = weaponDef.type != "melee";
    state.ammo.displayRemaining = fe > 0;
    for (let _e = 0; _e < state.scopes.length; _e++) {
      const be = state.scopes[_e];
      be.visible = activePlayer.m_localData.m_inventory[be.type] > 0;
      be.equipped = be.visible && activePlayer.m_localData.m_scope == be.type;
      be.selectable = be.visible && !spectating;
    }
    for (let xe = activePlayer.m_getBagLevel(), Se = 0; Se < state.loot.length; Se++) {
      const ve = state.loot[Se];
      const ke = ve.count;
      ve.count = activePlayer.m_localData.m_inventory[ve.type] || 0;
      ve.maximum = GameConfig.bagSizes[ve.type][xe];
      ve.selectable = ve.count > 0 && !spectating;
      if (ve.count > ke) {
        ve.ticker = 0;
      }
      if (this.frameCount < 2) {
        ve.ticker = 1;
      }
      ve.ticker += dt;
      const ze = math.min(ve.ticker / 0.05, Math.PI);
      const Ie = Math.sin(ze);
      ve.width = Ie < 1e-3 ? 0 : Ie;
      if (device.mobile) {
        ve.width = 0;
      }
    }
    for (let Te = 0; Te < state.gear.length; Te++) {
      const Me = state.gear[Te];
      let Pe = "";
      if (Me.type == "chest") {
        Pe = activePlayer.m_netData.m_chest;
      } else if (Me.type == "helmet") {
        Pe = activePlayer.m_netData.m_helmet;
      } else if (Me.type == "backpack" && (Pe = activePlayer.m_netData.m_backpack) == "backpack00") {
        Pe = "";
      }
      const Ce = Me.item;
      Me.item = Pe;
      Me.selectable = Pe != "" && !spectating;
      if (Ce != Me.item) {
        Me.ticker = 0;
      }
      if (this.frameCount < 2) {
        Me.ticker = 1;
      }
      Me.ticker += dt;
      const Ae = math.min(Me.ticker / 0.05, Math.PI);
      const Oe = Math.sin(Ae);
      Me.width = Oe < 1e-3 ? 0 : Oe;
      if (device.mobile) {
        Me.width = 0;
      }
    }
    for (let De = 0; De < state.perks.length; De++) {
      const Ee = state.perks[De];
      if (activePlayer.perks.length > De) {
        const Be = activePlayer.perks[De];
        Ee.type = Be.type;
        Ee.droppable = Be.droppable;
        if (Be.isNew) {
          Ee.ticker = 0;
        }
        if (this.frameCount < 2) {
          Ee.ticker = 1;
        }
        Ee.ticker += dt;
        const Re = math.min(Ee.ticker / 0.05, Math.PI);
        const Le = Math.sin(Re);
        Ee.width = Le < 1e-3 ? 0 : Le;
        if (device.mobile) {
          Ee.width = 0;
        }
        Ee.pulse = !device.mobile && Ee.ticker < 4;
      } else {
        Ee.type = "";
      }
    }
    const patch = diff(this.oldState, this.newState, this.frameCount++ == 0);
    this.render(patch, this.newState);
    copy(this.newState, this.oldState);
  }
  render(patch, state) {
    const dom = this.dom;
    if (patch.touch) {
      dom.interaction.key.style.backgroundImage = state.touch ? "url('img/gui/tap.svg')" : "none";
      if (state.touch) {
        dom.interaction.key.innerHTML = "";
      }
      dom.menu.touchStyles.style.display = state.touch ? "flex" : "none";
      dom.menu.aimLine.style.display = state.touch ? "block" : "none";
      dom.ammo.reloadButton.style.display = state.touch ? "block" : "none";
      dom.emoteButton.style.display = state.touch ? "block" : "none";
      if (dom.debugButton) {
        dom.debugButton.style.display = state.touch ? "block" : "none";
      }
    }
    if (patch.rareLootMessage.lootType) {
      const lootType = state.rareLootMessage.lootType;
      const lootDef = GameObjectDefs[lootType];
      if (lootDef && lootDef.type == "xp") {
        const lootDesc = this.localization.translate("game-xp-drop-desc");
        dom.rareLootMessage.desc.innerHTML = `+${lootDef.xp} ${lootDesc}`;
      } else {
        dom.rareLootMessage.desc.innerHTML = "";
      }
      const bgImg = lootDef?.lootImg?.border ? `url(img/loot/${lootDef.lootImg.border.slice(0, -4)}.svg)` : "none";
      dom.rareLootMessage.imageWrapper.style.backgroundImage = bgImg;
      const lootImg = helpers.getSvgFromGameType(lootType);
      dom.rareLootMessage.icon.style.backgroundImage = lootImg ? `url('${lootImg}')` : "none";
      const lootName = this.localization.translate(`game-${lootType}`);
      dom.rareLootMessage.name.innerHTML = lootName;
    }
    if (patch.rareLootMessage.opacity) {
      dom.rareLootMessage.wrapper.style.opacity = String(
        state.rareLootMessage.opacity
      );
    }
    if (patch.pickupMessage.message) {
      dom.pickupMessage.innerHTML = state.pickupMessage.message;
    }
    if (patch.pickupMessage.opacity) {
      dom.pickupMessage.style.opacity = String(state.pickupMessage.opacity);
    }
    if (patch.killMessage.text || patch.killMessage.count) {
      dom.killMessage.text.innerHTML = state.killMessage.text;
      dom.killMessage.count.innerHTML = state.killMessage.count;
    }
    if (patch.killMessage.opacity) {
      dom.killMessage.div.style.opacity = String(state.killMessage.opacity);
    }
    for (let i2 = 0; i2 < patch.killFeed.length; i2++) {
      const patchK = patch.killFeed[i2];
      const domK = dom.killFeed.lines[i2];
      const x = state.killFeed[i2];
      if (patchK.text) {
        domK.text.innerHTML = x.text;
      }
      if (patchK.offset) {
        const top = device.uiLayout != device.UiLayout.Sm || device.tablet ? 35 : 15;
        domK.line.style.top = `${Math.floor(x.offset * top)}px`;
      }
      if (patchK.color) {
        domK.text.style.color = x.color;
      }
      if (patchK.opacity) {
        domK.line.style.opacity = String(x.opacity);
      }
    }
    if (patch.health || patch.downed) {
      const steps = [
        {
          health: 100,
          color: [179, 179, 179]
        },
        {
          health: 100,
          color: [255, 255, 255]
        },
        {
          health: 75,
          color: [255, 255, 255]
        },
        {
          health: 75,
          color: [255, 158, 158]
        },
        {
          health: 25,
          color: [255, 82, 82]
        },
        {
          health: 25,
          color: [255, 0, 0]
        },
        {
          health: 0,
          color: [255, 0, 0]
        }
      ];
      let endIdx = 0;
      const health = Math.ceil(state.health);
      while (steps[endIdx].health > health && endIdx < steps.length - 1) {
        endIdx++;
      }
      const stepA = steps[math.max(endIdx - 1, 0)];
      const stepB = steps[endIdx];
      const t = math.delerp(state.health, stepA.health, stepB.health);
      let rgb = [
        Math.floor(math.lerp(t, stepA.color[0], stepB.color[0])),
        Math.floor(math.lerp(t, stepA.color[1], stepB.color[1])),
        Math.floor(math.lerp(t, stepA.color[2], stepB.color[2]))
      ];
      if (state.downed) {
        rgb = [255, 0, 0];
      }
      dom.health.inner.style.backgroundColor = `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, 1.0)`;
      dom.health.inner.style.width = `${state.health}%`;
      dom.health.depleted.style.width = `${state.health}%`;
      dom.health.depleted.style.display = state.health > 0 ? "block" : "none";
      if (state.health > 25) {
        dom.health.inner.classList.remove("ui-bar-danger");
      } else {
        dom.health.inner.classList.add("ui-bar-danger");
      }
    }
    if (patch.boost) {
      const v = GameConfig.player.boostBreakpoints;
      let I = 0;
      for (let T = 0; T < v.length; T++) {
        I += v[T];
      }
      for (let P = state.boost / 100, C = 0; C < dom.boost.bars.length; C++) {
        const A = v[C] / I;
        const O = math.clamp(P / A, 0, 1);
        P = math.max(P - A, 0);
        dom.boost.bars[C].style.width = `${O * 100}%`;
      }
      dom.boost.div.style.opacity = String(state.boost == 0 ? 0 : 1);
    }
    if (patch.interaction.type) {
      dom.interaction.div.style.display = state.interaction.type == 0 ? "none" : "flex";
    }
    if (patch.interaction.text) {
      dom.interaction.text.innerHTML = state.interaction.text;
    }
    if (patch.interaction.key) {
      dom.interaction.key.innerHTML = state.touch ? "" : state.interaction.key;
      dom.interaction.key.className = dom.interaction.key.innerHTML.length > 1 ? "ui-interaction-small" : "ui-interaction-large";
    }
    if (patch.interaction.usable) {
      dom.interaction.key.style.display = state.interaction.usable ? "block" : "none";
    }
    for (let E = 0; E < patch.weapons.length; E++) {
      const B = patch.weapons[E];
      const R = dom.weapons[E];
      const L = state.weapons[E];
      if (B.type) {
        let q = "";
        let F = "";
        const j = GameObjectDefs[L.type];
        if (j) {
          q = this.localization.translate(`game-hud-${L.type}`) || this.localization.translate(`game-${L.type}`);
          F = helpers.getCssTransformFromGameType(L.type);
        }
        R.type.innerHTML = q;
        R.image.src = helpers.getSvgFromGameType(L.type);
        R.image.style.display = j ? "inline" : "none";
        R.image.style.transform = F;
      }
      if (B.equipped) {
        R.div.style.backgroundColor = L.equipped ? "rgba(0, 0, 0, 0.4)" : "rgba(0, 0, 0, 0)";
      }
      if (B.selectable) {
        R.div.style.pointerEvents = L.type != "" || L.selectable ? "auto" : "none";
      }
      if (B.width) {
        const N = math.lerp(L.width, 83.33, 100);
        R.div.style.width = `${N}%`;
      }
      if (B.opacity) {
        R.div.style.opacity = String(L.opacity);
      }
      if (B.ammo && R.ammo) {
        R.ammo.innerHTML = String(L.ammo);
        R.ammo.style.display = L.ammo > 0 ? "block" : "none";
      }
      if (B.bindStr) {
        R.number.innerHTML = L.bindStr[0] || "";
      }
    }
    if (patch.ammo.current) {
      const H = state.ammo.current;
      dom.ammo.current.innerHTML = String(H);
      dom.ammo.current.style.color = H > 0 ? "white" : "red";
    }
    if (patch.ammo.remaining) {
      const V = state.ammo.remaining;
      dom.ammo.remaining.innerHTML = String(V == Number.MAX_VALUE ? "&#8734;" : V);
      dom.ammo.remaining.style.color = V != 0 ? "white" : "red";
    }
    if (patch.ammo.displayCurrent) {
      dom.ammo.current.style.opacity = String(state.ammo.displayCurrent ? 1 : 0);
    }
    if (patch.ammo.displayRemaining) {
      dom.ammo.remaining.style.opacity = String(
        state.ammo.displayRemaining ? 1 : 0
      );
      dom.ammo.reloadButton.style.opacity = String(
        state.ammo.displayRemaining ? 1 : 0
      );
    }
    for (let U = 0; U < patch.scopes.length; U++) {
      const W = patch.scopes[U];
      const G = dom.scopes[U];
      const X = state.scopes[U];
      if (W.visible) {
        if (X.visible) {
          G.div.classList.remove("ui-hidden");
        } else {
          G.div.classList.add("ui-hidden");
        }
      }
      if (W.equipped) {
        if (X.equipped) {
          G.div.classList.add("ui-zoom-active");
          G.div.classList.remove("ui-zoom-inactive");
        } else {
          G.div.classList.remove("ui-zoom-active");
          G.div.classList.add("ui-zoom-inactive");
        }
      }
      if (W.selectable) {
        G.div.style.pointerEvents = X.selectable ? "auto" : "none";
      }
    }
    for (let K = 0; K < patch.loot.length; K++) {
      const Z = patch.loot[K];
      const Y = dom.loot[K];
      const J = state.loot[K];
      if (Z && Y && J) {
        if (Z.count || Z.maximum) {
          Y.count.innerHTML = String(J.count);
          Y.div.style.opacity = String(
            GameObjectDefs[Y.lootType].special && J.count == 0 ? 0 : J.count > 0 ? 1 : 0.25
          );
          Y.div.style.color = J.count == J.maximum ? "#ff9900" : "#ffffff";
        }
        if (Z.width) {
          const Q = 1 + J.width * 0.33;
          const $2 = `scale(${Q}, ${Q})`;
          Y.image.style.transform = $2;
          if (Y.overlay) {
            Y.overlay.style.transform = $2;
          }
        }
        if (Z.selectable) {
          Y.div.style.pointerEvents = J.selectable ? "auto" : "none";
        }
      }
    }
    for (let ee = 0; ee < patch.gear.length; ee++) {
      const te = patch.gear[ee];
      const re = dom.gear[ee];
      const ae = state.gear[ee];
      if (te.item) {
        const ie = ae.item ? GameObjectDefs[ae.item] : null;
        const oe = ie ? ie.level : 0;
        re.div.style.display = ie ? "block" : "none";
        re.level.innerHTML = this.localization.translate(`game-level-${oe}`);
        re.level.style.color = oe >= 3 ? "#ff9900" : "#ffffff";
        re.image.src = helpers.getSvgFromGameType(ae.item);
      }
      if (te.selectable) {
        re.div.style.pointerEvents = ae.selectable ? "auto" : "none";
      }
      if (te.width) {
        const se = 1 + ae.width * 0.33;
        let ne = `scale(${se}, ${se})`;
        const le = GameObjectDefs[ae.item];
        if (le?.lootImg.rot !== void 0) {
          ne += ` rotate(${le.lootImg.rot}rad)`;
        }
        re.image.style.transform = ne;
      }
    }
    for (let ce = 0; ce < patch.perks.length; ce++) {
      const me = patch.perks[ce];
      const pe = dom.perks[ce];
      const he = state.perks[ce];
      if (me.type) {
        pe.perkType = he.type;
        pe.divTitle.innerHTML = this.localization.translate(`game-${he.type}`);
        pe.divDesc.innerHTML = this.localization.translate(
          `game-${he.type}-desc`
        );
        pe.div.style.display = he.type ? "block" : "none";
        pe.image.src = he.type ? helpers.getSvgFromGameType(he.type) : "";
      }
      if (me.droppable) {
        if (he.droppable) {
          pe.div.classList.add("ui-outline-hover");
          pe.div.classList.remove("ui-perk-no-drop");
        } else {
          pe.div.classList.remove("ui-outline-hover");
          pe.div.classList.add("ui-perk-no-drop");
        }
      }
      if (me.pulse) {
        if (he.pulse) {
          pe.div.classList.add("ui-perk-pulse");
        } else {
          pe.div.classList.remove("ui-perk-pulse");
        }
      }
      if (me.width) {
        const de = 1 + he.width * 0.33;
        pe.image.style.transform = `scale(${de}, ${de})`;
      }
    }
  }
  displayPickupMessage(type) {
    const p = this.newState.pickupMessage;
    p.message = this.getPickupMessageText(type);
    p.ticker = 0;
    p.duration = 3;
  }
  displayKillMessage(text, count) {
    const p = this.newState.killMessage;
    p.text = text;
    p.count = count;
    p.ticker = 0;
    p.duration = 7;
  }
  hideKillMessage() {
    this.newState.killMessage.ticker = math.max(
      this.newState.killMessage.ticker,
      this.newState.killMessage.duration - 0.2
    );
  }
  addRareLootMessage(lootType, clearQueue) {
    if (clearQueue) {
      this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration;
      this.rareLootMessageQueue = [];
    }
    this.rareLootMessageQueue.push(lootType);
  }
  removeRareLootMessage(lootType) {
    const idx = this.rareLootMessageQueue.indexOf(lootType);
    if (idx >= 0) {
      this.rareLootMessageQueue.splice(idx, 1);
    }
    if (this.newState.rareLootMessage.lootType == lootType) {
      this.newState.rareLootMessage.ticker = this.newState.rareLootMessage.duration;
    }
  }
  getRareLootMessageText(perk) {
    if (GameObjectDefs[perk]) {
      return `Acquired perk: ${this.localization.translate(`game-${perk}`)}`;
    }
    return "";
  }
  addKillFeedMessage(text, color) {
    const killFeed = this.newState.killFeed;
    const oldest = killFeed[killFeed.length - 1];
    oldest.text = text;
    oldest.color = color;
    oldest.ticker = 0;
    killFeed.sort((a, b) => {
      return a.ticker - b.ticker;
    });
  }
  getKillFeedText(targetName, killerName, sourceType, damageType, downed) {
    switch (damageType) {
      case DamageType.Player:
        return `${killerName} ${this.localization.translate(
          downed ? "game-knocked-out" : "game-killed"
        )} ${targetName} ${this.localization.translate(
          "game-with"
        )} ${this.localization.translate(`game-${sourceType}`)}`;
      case DamageType.Bleeding: {
        const killTxt = this.localization.translate(
          killerName ? "game-finally-killed" : "game-finally-bled-out"
        );
        if (killerName) {
          return `${killerName} ${killTxt} ${targetName}`;
        }
        return `${targetName} ${killTxt}`;
      }
      case DamageType.Gas: {
        let killName;
        let killTxt;
        if (downed) {
          killName = this.localization.translate("game-the-red-zone");
          killTxt = this.localization.translate("game-knocked-out");
        } else {
          killTxt = this.localization.translate(
            killerName ? "game-finally-killed" : "game-died-outside"
          );
        }
        if (killName) {
          return `${killName} ${killTxt} ${targetName}`;
        }
        return `${targetName} ${killTxt}`;
      }
      case DamageType.Airdrop: {
        const mapObj = MapObjectDefs[sourceType];
        const killName = this.localization.translate("game-the-air-drop");
        const killTxt = downed ? this.localization.translate("game-knocked-out") : mapObj && !mapObj.airdropCrate ? this.localization.translate("game-killed") : this.localization.translate("game-crushed");
        return `${killName} ${killTxt} ${targetName}`;
      }
      case DamageType.Airstrike: {
        const killTxt = this.localization.translate(
          downed ? "game-knocked-out" : "game-killed"
        );
        if (killerName) {
          return `${killerName} ${killTxt} ${targetName} ${this.localization.translate(
            "game-with"
          )} ${this.localization.translate("game-an-air-strike")}`;
        }
        return `${this.localization.translate(
          "game-the-air-strike"
        )} ${killTxt} ${targetName}`;
      }
      default:
        return "";
    }
  }
  getKillFeedColor(activeTeamId, targetTeamId, killerTeamId, factionMode) {
    if (factionMode) {
      return "#efeeee";
    }
    if (activeTeamId == targetTeamId) {
      return "#d1777c";
    }
    if (activeTeamId == killerTeamId) {
      return "#00bfff";
    }
    return "#efeeee";
  }
  getRoleKillFeedColor(role, teamId, playerBarn) {
    const roleDef = GameObjectDefs[role];
    if (roleDef?.killFeed?.color) {
      return roleDef.killFeed.color;
    }
    return helpers.colorToHexString(playerBarn.getTeamColor(teamId));
  }
  getRoleTranslation(role, teamId) {
    let roleTxt = `game-${role}`;
    if (role == "leader") {
      roleTxt = teamId == 1 ? "game-red-leader" : "game-blue-leader";
    }
    return this.localization.translate(roleTxt);
  }
  getRoleAnnouncementText(role, teamId) {
    return `${this.localization.translate(
      "game-youve-been-promoted-to"
    )} ${this.getRoleTranslation(role, teamId)}!`;
  }
  getRoleAssignedKillFeedText(role, teamId, playerName) {
    const roleTxt = this.getRoleTranslation(role, teamId);
    return `${playerName} ${this.localization.translate(
      "game-promoted-to"
    )} ${roleTxt}!`;
  }
  getRoleKilledKillFeedText(role, teamId, killerName) {
    const roleTxt = this.getRoleTranslation(role, teamId);
    if (killerName) {
      return `${killerName} ${this.localization.translate(
        "game-killed"
      )} ${roleTxt}!`;
    }
    return `${roleTxt} ${this.localization.translate("game-is-dead")}!`;
  }
  getKillText(killerName, targetName, completeKill, downed, killed, suicide, sourceType, damageType, spectating) {
    const knockedOut = downed && !killed;
    const youTxt = spectating ? killerName : this.localization.translate("game-you").toUpperCase();
    const killKey = knockedOut ? "game-knocked-out" : completeKill ? "game-killed" : "game-finally-killed";
    const killTxt = this.localization.translate(killKey);
    const targetTxt = suicide ? spectating ? this.localization.translate("game-themselves") : this.localization.translate("game-yourself").toUpperCase() : targetName;
    const damageTxt = this.localization.translate(
      damageType == GameConfig.DamageType.Airstrike ? "game-an-air-strike" : `game-${sourceType}`
    );
    const withTxt = this.localization.translate("game-with");
    if (damageTxt && (completeKill || knockedOut)) {
      return `${youTxt} ${killTxt} ${targetTxt} ${withTxt} ${damageTxt}`;
    }
    return `${youTxt} ${killTxt} ${targetTxt}`;
  }
  getKillCountText(killCount) {
    return `${killCount} ${this.localization.translate(
      killCount != 1 ? "game-kills" : "game-kill"
    )}`;
  }
  getDownedText(killerName, targetName, sourceType, damageType, spectating) {
    const youTxt = spectating ? targetName : this.localization.translate("game-you").toUpperCase();
    let killerTxt = killerName;
    if (!killerTxt) {
      if (damageType == GameConfig.DamageType.Gas) {
        killerTxt = this.localization.translate("game-the-red-zone");
      } else if (damageType == GameConfig.DamageType.Airdrop) {
        killerTxt = this.localization.translate("game-the-air-drop");
      } else if (damageType == GameConfig.DamageType.Airstrike) {
        killerTxt = this.localization.translate("game-the-air-strike");
      }
    }
    let damageTxt = this.localization.translate(`game-${sourceType}`);
    if (killerName && damageType == GameConfig.DamageType.Airstrike) {
      damageTxt = this.localization.translate("game-an-air-strike");
    }
    const withTxt = this.localization.translate("game-with");
    if (damageTxt) {
      return `${killerTxt} knocked ${youTxt} out ${withTxt} ${damageTxt}`;
    }
    return `${killerTxt} knocked ${youTxt} out`;
  }
  getPickupMessageText(type) {
    const typeMap = {
      [PickupMsgType.Full]: "game-not-enough-space",
      [PickupMsgType.AlreadyOwned]: "game-item-already-owned",
      [PickupMsgType.AlreadyEquipped]: "game-item-already-equipped",
      [PickupMsgType.BetterItemEquipped]: "game-better-item-equipped",
      [PickupMsgType.GunCannotFire]: "game-gun-cannot-fire"
    };
    const key = typeMap[type] || typeMap[PickupMsgType.Full];
    return this.localization.translate(key);
  }
  getInteractionText(type, object, player) {
    switch (type) {
      case 0:
        return "";
      case 1:
        return this.localization.translate("game-cancel");
      case 3:
        if (object && player && (object == player || player.downed) && player.m_hasPerk("self_revive")) {
          return this.localization.translate("game-revive-self");
        }
        return this.localization.translate("game-revive-teammate");
      case 4: {
        const x = object.getInteraction();
        return `${this.localization.translate(
          x.action
        )} ${this.localization.translate(x.object)}`;
      }
      case 2: {
        const loot = object;
        let txt = this.localization.translate(`game-${loot.type}`) || loot.type;
        if (loot.count > 1) {
          txt += ` (${loot.count})`;
        }
        return txt;
      }
      default:
        return "";
    }
  }
  getInteractionKey(type) {
    let bind = null;
    switch (type) {
      case 1:
        bind = this.inputBinds.getBind(Input.Cancel);
        break;
      case 2:
        bind = this.inputBinds.getBind(Input.Loot) || this.inputBinds.getBind(Input.Interact);
        break;
      case 4:
        bind = this.inputBinds.getBind(Input.Use) || this.inputBinds.getBind(Input.Interact);
        break;
      case 3:
        bind = this.inputBinds.getBind(Input.Revive) || this.inputBinds.getBind(Input.Interact);
        break;
      case 0:
      default:
        bind = this.inputBinds.getBind(Input.Use);
    }
    if (bind) {
      return bind.toString();
    }
    return "<Unbound>";
  }
}
function loadStaticDomImages() {
  const lootImages = {
    "ui-loot-bandage": "img/loot/loot-medical-bandage.svg",
    "ui-loot-healthkit": "img/loot/loot-medical-healthkit.svg",
    "ui-loot-soda": "img/loot/loot-medical-soda.svg",
    "ui-loot-painkiller": "img/loot/loot-medical-pill.svg",
    "ui-loot-9mm": "img/loot/loot-ammo-box.svg",
    "ui-loot-12gauge": "img/loot/loot-ammo-box.svg",
    "ui-loot-762mm": "img/loot/loot-ammo-box.svg",
    "ui-loot-556mm": "img/loot/loot-ammo-box.svg",
    "ui-loot-50AE": "img/loot/loot-ammo-box.svg",
    "ui-loot-308sub": "img/loot/loot-ammo-box.svg",
    "ui-loot-flare": "img/loot/loot-ammo-box.svg",
    "ui-loot-45acp": "img/loot/loot-ammo-box.svg"
  };
  for (const [id, img] of Object.entries(lootImages)) {
    domElemById(id).getElementsByClassName("ui-loot-image")[0].src = img;
  }
  domElemById("mag-glass-white").src = "img/gui/mag-glass.svg";
  domElemById("ui-minimize-img").src = "img/gui/minimize.svg";
}
class Game {
  constructor(m_pixi, m_audioManager, m_localization, m_config, m_input, m_inputBinds, m_inputBindUi, m_ambience, m_resourceManager, onJoin, onQuit) {
    this.m_pixi = m_pixi;
    this.m_audioManager = m_audioManager;
    this.m_localization = m_localization;
    this.m_config = m_config;
    this.m_input = m_input;
    this.m_inputBinds = m_inputBinds;
    this.m_inputBindUi = m_inputBindUi;
    this.m_ambience = m_ambience;
    this.m_resourceManager = m_resourceManager;
    this.onJoin = onJoin;
    this.onQuit = onQuit;
    this.m_pixi = m_pixi;
    this.m_audioManager = m_audioManager;
    this.m_ambience = m_ambience;
    this.m_localization = m_localization;
    this.m_config = m_config;
    this.m_input = m_input;
    this.m_inputBinds = m_inputBinds;
    this.m_inputBindUi = m_inputBindUi;
    this.m_resourceManager = m_resourceManager;
  }
  initialized = false;
  teamMode = TeamMode.Solo;
  victoryMusic = null;
  m_ws = null;
  connecting = false;
  connected = false;
  m_touch;
  m_camera;
  m_renderer;
  m_particleBarn;
  m_decalBarn;
  m_map;
  m_playerBarn;
  m_bulletBarn;
  m_flareBarn;
  m_projectileBarn;
  m_explosionBarn;
  m_planeBarn;
  m_airdropBarn;
  m_smokeBarn;
  m_deadBodyBarn;
  m_lootBarn;
  m_gas;
  m_uiManager;
  m_ui2Manager;
  m_emoteBarn;
  m_shotBarn;
  m_objectCreator;
  m_debugDisplay;
  m_canvasMode;
  m_updatePass;
  m_updatePassDelay;
  m_disconnectMsg;
  m_playing;
  m_gameOver;
  m_spectating;
  m_inputMsgTimeout;
  m_prevInputMsg;
  m_playingTicker;
  m_updateRecvCount;
  m_localId;
  m_activeId;
  m_activePlayer;
  m_validateAlpha;
  m_targetZoom;
  m_debugZoom;
  m_useDebugZoom;
  editor;
  seq;
  seqInFlight;
  seqSendTime;
  pings;
  debugPingTime;
  lastUpdateTime;
  updateIntervals;
  tryJoinGame(url, matchPriv, loadoutPriv, questPriv, onConnectFail) {
    if (!this.connecting && !this.connected && !this.initialized) {
      if (this.m_ws) {
        this.m_ws.onerror = function() {
        };
        this.m_ws.onopen = function() {
        };
        this.m_ws.onmessage = function() {
        };
        this.m_ws.onclose = function() {
        };
        this.m_ws.close();
        this.m_ws = null;
      }
      this.connecting = true;
      this.connected = false;
      try {
        this.m_ws = new WebSocket(url);
        this.m_ws.binaryType = "arraybuffer";
        this.m_ws.onerror = (_err) => {
          this.m_ws?.close();
        };
        this.m_ws.onopen = () => {
          this.connecting = false;
          this.connected = true;
          const name = this.m_config.get("playerName");
          const joinMessage = new JoinMsg();
          joinMessage.protocol = GameConfig.protocolVersion;
          joinMessage.matchPriv = matchPriv;
          joinMessage.loadoutPriv = loadoutPriv;
          joinMessage.questPriv = questPriv;
          joinMessage.name = name;
          joinMessage.useTouch = device.touch;
          joinMessage.isMobile = device.mobile || window.mobile;
          joinMessage.bot = false;
          joinMessage.loadout = this.m_config.get("loadout");
          this.m_sendMessage(MsgType.Join, joinMessage, 8192);
        };
        this.m_ws.onmessage = (e) => {
          const msgStream = new MsgStream(e.data);
          while (true) {
            const type = msgStream.deserializeMsgType();
            if (type == MsgType.None) {
              break;
            }
            this.m_onMsg(type, msgStream.getStream());
          }
        };
        this.m_ws.onclose = () => {
          const displayingStats = this.m_uiManager?.displayingStats;
          const connecting = this.connecting;
          const connected = this.connected;
          this.connecting = false;
          this.connected = false;
          if (connecting) {
            onConnectFail();
          } else if (connected && !this.m_gameOver && !displayingStats) {
            const errMsg = this.m_disconnectMsg || "index-host-closed";
            this.onQuit(errMsg);
          }
        };
      } catch (err) {
        console.error(err);
        this.connecting = false;
        this.connected = false;
        onConnectFail();
      }
    }
  }
  init() {
    window.game = this;
    this.m_canvasMode = this.m_pixi.renderer.type == RENDERER_TYPE.CANVAS;
    this.m_touch = new Touch2(this.m_input, this.m_config);
    this.m_camera = new Camera();
    this.m_renderer = new Renderer(this, this.m_canvasMode);
    this.m_particleBarn = new ParticleBarn(this.m_renderer);
    this.m_decalBarn = new DecalBarn();
    this.m_map = new Map(this.m_decalBarn);
    this.m_playerBarn = new PlayerBarn();
    this.m_bulletBarn = new BulletBarn();
    this.m_flareBarn = new FlareBarn();
    this.m_projectileBarn = new ProjectileBarn();
    this.m_explosionBarn = new ExplosionBarn();
    this.m_planeBarn = new PlaneBarn(this.m_audioManager);
    this.m_airdropBarn = new AirdropBarn();
    this.m_smokeBarn = new SmokeBarn();
    this.m_deadBodyBarn = new DeadBodyBarn();
    this.m_lootBarn = new LootBarn();
    this.m_gas = new Gas(this.m_canvasMode);
    this.m_uiManager = new UiManager(
      this,
      this.m_audioManager,
      this.m_particleBarn,
      this.m_planeBarn,
      this.m_localization,
      this.m_canvasMode,
      this.m_touch,
      this.m_inputBinds,
      this.m_inputBindUi
    );
    this.m_ui2Manager = new UiManager2(this.m_localization, this.m_inputBinds);
    this.m_emoteBarn = new EmoteBarn(
      this.m_audioManager,
      this.m_uiManager,
      this.m_playerBarn,
      this.m_camera,
      this.m_map
    );
    this.m_shotBarn = new ShotBarn();
    const TypeToPool = {
      [ObjectType.Player]: this.m_playerBarn.playerPool,
      [ObjectType.Obstacle]: this.m_map.m_obstaclePool,
      [ObjectType.Loot]: this.m_lootBarn.lootPool,
      [ObjectType.DeadBody]: this.m_deadBodyBarn.deadBodyPool,
      [ObjectType.Building]: this.m_map.m_buildingPool,
      [ObjectType.Structure]: this.m_map.m_structurePool,
      [ObjectType.Decal]: this.m_decalBarn.decalPool,
      [ObjectType.Projectile]: this.m_projectileBarn.projectilePool,
      [ObjectType.Smoke]: this.m_smokeBarn.m_smokePool,
      [ObjectType.Airdrop]: this.m_airdropBarn.airdropPool
    };
    this.m_objectCreator = new Creator();
    for (const type in TypeToPool) {
      if (TypeToPool.hasOwnProperty(type)) {
        this.m_objectCreator.m_registerType(
          type,
          TypeToPool[type]
        );
      }
    }
    this.m_debugDisplay = new Graphics();
    const pixiContainers = [
      this.m_map.display.ground,
      this.m_renderer.layers[0],
      this.m_renderer.ground,
      this.m_renderer.layers[1],
      this.m_renderer.layers[2],
      this.m_renderer.layers[3],
      this.m_debugDisplay,
      this.m_gas.gasRenderer.display,
      this.m_touch.container,
      this.m_emoteBarn.container,
      this.m_uiManager.container,
      this.m_uiManager.m_pieTimer.container,
      this.m_emoteBarn.indContainer
    ];
    for (let i2 = 0; i2 < pixiContainers.length; i2++) {
      const container = pixiContainers[i2];
      if (container) {
        container.interactiveChildren = false;
        this.m_pixi.stage.addChild(container);
      }
    }
    this.m_disconnectMsg = "";
    this.m_playing = false;
    this.m_gameOver = false;
    this.m_spectating = false;
    this.m_inputMsgTimeout = 0;
    this.m_prevInputMsg = new InputMsg();
    this.m_playingTicker = 0;
    this.m_updateRecvCount = 0;
    this.m_updatePass = false;
    this.m_updatePassDelay = 0;
    this.m_localId = 0;
    this.m_activeId = 0;
    this.m_activePlayer = null;
    this.m_validateAlpha = false;
    this.m_targetZoom = 1;
    this.m_debugZoom = 1;
    this.m_useDebugZoom = false;
    this.seq = 0;
    this.seqInFlight = false;
    this.seqSendTime = 0;
    this.pings = [];
    this.updateIntervals = [];
    this.lastUpdateTime = 0;
    this.debugPingTime = 0;
    this.m_camera.m_setShakeEnabled(this.m_config.get("screenShake"));
    this.m_camera.m_setInterpEnabled(this.m_config.get("interpolation"));
    this.m_camera.m_setRotationEnabled(this.m_config.get("localRotation"));
    this.m_playerBarn.anonPlayerNames = this.m_config.get("anonPlayerNames");
    this.initialized = true;
  }
  free() {
    if (this.m_ws) {
      this.m_ws.onmessage = function() {
      };
      this.m_ws.close();
      this.m_ws = null;
    }
    this.connecting = false;
    this.connected = false;
    if (this.initialized) {
      this.initialized = false;
      this.m_updatePass = false;
      this.m_updatePassDelay = 0;
      this.m_emoteBarn.m_free();
      this.m_ui2Manager.m_free();
      this.m_uiManager.m_free();
      this.m_gas.m_free();
      this.m_airdropBarn.m_free();
      this.m_planeBarn.m_free();
      this.m_map.m_free();
      this.m_particleBarn.m_free();
      this.m_renderer.m_free();
      this.m_input.m_free();
      this.m_audioManager.stopAll();
      while (this.m_pixi.stage.children.length > 0) {
        const c = this.m_pixi.stage.children[0];
        this.m_pixi.stage.removeChild(c);
        c.destroy({
          children: true
        });
      }
    }
  }
  warnPageReload() {
    return this.initialized && this.m_playing && !this.m_spectating && !this.m_uiManager.displayingStats;
  }
  update(dt) {
    let debug;
    {
      debug = {
        render: {}
      };
    }
    const smokeParticles = this.m_smokeBarn.m_particles;
    if (this.m_playing) {
      this.m_playingTicker += dt;
    }
    this.m_playerBarn.m_update(
      dt,
      this.m_activeId,
      this.teamMode,
      this.m_renderer,
      this.m_particleBarn,
      this.m_camera,
      this.m_map,
      this.m_inputBinds,
      this.m_audioManager,
      this.m_ui2Manager,
      this.m_emoteBarn.wheelKeyTriggered,
      this.m_uiManager.displayingStats,
      this.m_spectating
    );
    this.updateAmbience();
    this.m_camera.m_pos = v2.copy(this.m_activePlayer.m_visualPos);
    this.m_camera.m_applyShake();
    const zoom = this.m_activePlayer.m_getZoom();
    const minDim = math.min(
      this.m_camera.m_screenWidth,
      this.m_camera.m_screenHeight
    );
    const maxDim = math.max(
      this.m_camera.m_screenWidth,
      this.m_camera.m_screenHeight
    );
    const maxScreenDim = math.max(minDim * (16 / 9), maxDim);
    this.m_camera.m_targetZoom = maxScreenDim * 0.5 / (zoom * this.m_camera.m_ppu);
    const zoomLerpIn = this.m_activePlayer.zoomFast ? 3 : 2;
    const zoomLerpOut = this.m_activePlayer.zoomFast ? 3 : 1.4;
    const zoomLerp = this.m_camera.m_targetZoom > this.m_camera.m_zoom ? zoomLerpIn : zoomLerpOut;
    this.m_camera.m_zoom = math.lerp(
      dt * zoomLerp,
      this.m_camera.m_zoom,
      this.m_camera.m_targetZoom
    );
    this.m_audioManager.cameraPos = v2.copy(this.m_camera.m_pos);
    if (this.m_input.keyPressed(Key.Escape)) {
      this.m_uiManager.toggleEscMenu();
    }
    if (this.m_inputBinds.isBindPressed(Input.ToggleMap) || this.m_input.keyPressed(Key.G) && !this.m_inputBinds.isKeyBound(Key.G)) {
      this.m_uiManager.displayMapLarge(false);
    }
    if (this.m_inputBinds.isBindPressed(Input.CycleUIMode)) {
      this.m_uiManager.cycleVisibilityMode();
    }
    if (this.m_inputBinds.isBindPressed(Input.HideUI) || this.m_input.keyPressed(Key.Escape) && !this.m_uiManager.hudVisible) {
      this.m_uiManager.cycleHud();
    }
    const playerPos = this.m_activePlayer.m_pos;
    const mousePos = v2.create(
      this.m_activePlayer.m_pos.x + (this.m_input.mousePos.x - this.m_camera.m_screenWidth * 0.5) / this.m_camera.m_z(),
      this.m_activePlayer.m_pos.y + (this.m_camera.m_screenHeight * 0.5 - this.m_input.mousePos.y) / this.m_camera.m_z()
    );
    const toMousePos = v2.sub(mousePos, playerPos);
    let toMouseLen = v2.length(toMousePos);
    let toMouseDir = toMouseLen > 1e-5 ? v2.div(toMousePos, toMouseLen) : v2.create(1, 0);
    if (this.m_emoteBarn.wheelDisplayed) {
      toMouseLen = this.m_prevInputMsg.toMouseLen;
      toMouseDir = this.m_prevInputMsg.toMouseDir;
    }
    const inputMsg = new InputMsg();
    inputMsg.seq = this.seq;
    if (!this.m_spectating) {
      if (device.touch) {
        const touchPlayerMovement = this.m_touch.getTouchMovement(this.m_camera);
        const touchAimMovement = this.m_touch.getAimMovement(
          this.m_activePlayer,
          this.m_camera
        );
        let aimDir = v2.copy(touchAimMovement.aimMovement.toAimDir);
        this.m_touch.turnDirTicker -= dt;
        if (this.m_touch.moveDetected && !touchAimMovement.touched) {
          const touchDir = v2.normalizeSafe(
            touchPlayerMovement.toMoveDir,
            v2.create(1, 0)
          );
          const modifiedAimDir = this.m_touch.turnDirTicker < 0 ? touchDir : touchAimMovement.aimMovement.toAimDir;
          this.m_touch.setAimDir(modifiedAimDir);
          aimDir = modifiedAimDir;
        }
        if (touchAimMovement.touched) {
          this.m_touch.turnDirTicker = this.m_touch.turnDirCooldown;
        }
        if (this.m_touch.moveDetected) {
          inputMsg.touchMoveDir = v2.normalizeSafe(
            touchPlayerMovement.toMoveDir,
            v2.create(1, 0)
          );
          inputMsg.touchMoveLen = Math.round(
            math.clamp(touchPlayerMovement.toMoveLen, 0, 1) * 255
          );
        } else {
          inputMsg.touchMoveLen = 0;
        }
        inputMsg.touchMoveActive = true;
        const aimLen = touchAimMovement.aimMovement.toAimLen;
        const toTouchLenAdjusted = math.clamp(aimLen / this.m_touch.padPosRange, 0, 1) * GameConfig.player.throwableMaxMouseDist;
        inputMsg.toMouseLen = toTouchLenAdjusted;
        inputMsg.toMouseDir = aimDir;
      } else {
        inputMsg.moveLeft = this.m_inputBinds.isBindDown(Input.MoveLeft) || this.m_input.keyDown(Key.Left) && !this.m_inputBinds.isKeyBound(Key.Left);
        inputMsg.moveRight = this.m_inputBinds.isBindDown(Input.MoveRight) || this.m_input.keyDown(Key.Right) && !this.m_inputBinds.isKeyBound(Key.Right);
        inputMsg.moveUp = this.m_inputBinds.isBindDown(Input.MoveUp) || this.m_input.keyDown(Key.Up) && !this.m_inputBinds.isKeyBound(Key.Up);
        inputMsg.moveDown = this.m_inputBinds.isBindDown(Input.MoveDown) || this.m_input.keyDown(Key.Down) && !this.m_inputBinds.isKeyBound(Key.Down);
        inputMsg.toMouseDir = v2.copy(toMouseDir);
        inputMsg.toMouseLen = toMouseLen;
      }
      inputMsg.touchMoveDir = v2.normalizeSafe(
        inputMsg.touchMoveDir,
        v2.create(1, 0)
      );
      inputMsg.touchMoveLen = math.clamp(inputMsg.touchMoveLen, 0, 255);
      inputMsg.toMouseDir = v2.normalizeSafe(inputMsg.toMouseDir, v2.create(1, 0));
      inputMsg.toMouseLen = math.clamp(
        inputMsg.toMouseLen,
        0,
        Constants.MouseMaxDist
      );
      inputMsg.shootStart = this.m_inputBinds.isBindPressed(Input.Fire) || this.m_touch.shotDetected;
      inputMsg.shootHold = this.m_inputBinds.isBindDown(Input.Fire) || this.m_touch.shotDetected;
      inputMsg.portrait = this.m_camera.m_screenWidth < this.m_camera.m_screenHeight;
      const checkInputs = [
        Input.Reload,
        Input.Revive,
        Input.Use,
        Input.Loot,
        Input.Cancel,
        Input.EquipPrimary,
        Input.EquipSecondary,
        Input.EquipThrowable,
        Input.EquipMelee,
        Input.EquipNextWeap,
        Input.EquipPrevWeap,
        Input.EquipLastWeap,
        Input.EquipOtherGun,
        Input.EquipPrevScope,
        Input.EquipNextScope,
        Input.StowWeapons
      ];
      for (let i2 = 0; i2 < checkInputs.length; i2++) {
        const input = checkInputs[i2];
        if (this.m_inputBinds.isBindPressed(input)) {
          inputMsg.addInput(input);
        }
      }
      if (this.m_inputBinds.isBindPressed(Input.Interact)) {
        const inputs = [];
        const interactBinds = [Input.Revive, Input.Use, Input.Loot];
        for (let i2 = 0; i2 < interactBinds.length; i2++) {
          const b = interactBinds[i2];
          if (!this.m_inputBinds.getBind(b)) {
            inputs.push(b);
          }
        }
        if (inputs.length == interactBinds.length) {
          inputMsg.addInput(Input.Interact);
        } else {
          for (let i2 = 0; i2 < inputs.length; i2++) {
            inputMsg.addInput(inputs[i2]);
          }
        }
      }
      if (this.m_inputBinds.isBindPressed(Input.SwapWeapSlots) || this.m_uiManager.swapWeapSlots) {
        inputMsg.addInput(Input.SwapWeapSlots);
        this.m_activePlayer.gunSwitchCooldown = 0;
      }
      if (this.m_uiManager.reloadTouched) {
        inputMsg.addInput(Input.Reload);
      }
      if (this.m_uiManager.interactionTouched) {
        inputMsg.addInput(Input.Interact);
        inputMsg.addInput(Input.Cancel);
      }
      for (let i2 = 0; i2 < this.m_ui2Manager.uiEvents.length; i2++) {
        const e = this.m_ui2Manager.uiEvents[i2];
        if (e.action == "use") {
          if (e.type == "weapon") {
            const weapIdxToInput = {
              [WeaponSlot.Primary]: Input.EquipPrimary,
              [WeaponSlot.Secondary]: Input.EquipSecondary,
              [WeaponSlot.Melee]: Input.EquipMelee,
              [WeaponSlot.Throwable]: Input.EquipThrowable
            };
            const input = weapIdxToInput[e.data];
            if (input) {
              inputMsg.addInput(input);
            }
          } else {
            inputMsg.useItem = e.data;
          }
        }
      }
      if (this.m_inputBinds.isBindPressed(Input.UseBandage)) {
        inputMsg.useItem = "bandage";
      } else if (this.m_inputBinds.isBindPressed(Input.UseHealthKit)) {
        inputMsg.useItem = "healthkit";
      } else if (this.m_inputBinds.isBindPressed(Input.UseSoda)) {
        inputMsg.useItem = "soda";
      } else if (this.m_inputBinds.isBindPressed(Input.UsePainkiller)) {
        inputMsg.useItem = "painkiller";
      }
      let playDropSound = false;
      for (let X = 0; X < this.m_ui2Manager.uiEvents.length; X++) {
        const uiEvent = this.m_ui2Manager.uiEvents[X];
        if (uiEvent.action == "drop") {
          const dropMsg = new DropItemMsg();
          if (uiEvent.type == "weapon") {
            const eventData = uiEvent.data;
            const Y = this.m_activePlayer.m_localData.m_weapons;
            dropMsg.item = Y[eventData].type;
            dropMsg.weapIdx = eventData;
          } else if (uiEvent.type == "perk") {
            const eventData = uiEvent.data;
            const J = this.m_activePlayer.m_netData.m_perks;
            const Q = J.length > eventData ? J[eventData] : null;
            if (Q?.droppable) {
              dropMsg.item = Q.type;
            }
          } else {
            const item = uiEvent.data == "helmet" ? this.m_activePlayer.m_netData.m_helmet : uiEvent.data == "chest" ? this.m_activePlayer.m_netData.m_chest : uiEvent.data;
            dropMsg.item = item;
          }
          if (dropMsg.item != "") {
            this.m_sendMessage(MsgType.DropItem, dropMsg, 128);
            if (dropMsg.item != "fists") {
              playDropSound = true;
            }
          }
        }
      }
      if (playDropSound) {
        this.m_audioManager.playSound("loot_drop_01", {
          channel: "ui"
        });
      }
      if (this.m_uiManager.roleSelected) {
        const roleSelectMessage = new PerkModeRoleSelectMsg();
        roleSelectMessage.role = this.m_uiManager.roleSelected;
        this.m_sendMessage(
          MsgType.PerkModeRoleSelect,
          roleSelectMessage,
          128
        );
        this.m_config.set("perkModeRole", roleSelectMessage.role);
      }
    }
    const specBegin = this.m_uiManager.specBegin;
    const specNext = this.m_uiManager.specNext || this.m_spectating && this.m_input.keyPressed(Key.Right);
    const specPrev = this.m_uiManager.specPrev || this.m_spectating && this.m_input.keyPressed(Key.Left);
    const specForce = this.m_input.keyPressed(Key.Right) || this.m_input.keyPressed(Key.Left);
    if (specBegin || this.m_spectating && specNext || specPrev) {
      const specMsg = new SpectateMsg();
      specMsg.specBegin = specBegin;
      specMsg.specNext = specNext;
      specMsg.specPrev = specPrev;
      specMsg.specForce = specForce;
      this.m_sendMessage(MsgType.Spectate, specMsg, 128);
    }
    this.m_uiManager.specBegin = false;
    this.m_uiManager.specNext = false;
    this.m_uiManager.specPrev = false;
    this.m_uiManager.reloadTouched = false;
    this.m_uiManager.interactionTouched = false;
    this.m_uiManager.swapWeapSlots = false;
    this.m_uiManager.roleSelected = "";
    let diff2 = false;
    for (const k in inputMsg) {
      if (inputMsg.hasOwnProperty(k)) {
        if (k == "inputs") {
          diff2 = inputMsg[k].length > 0;
        } else if (k == "toMouseDir" || k == "touchMoveDir") {
          const dot = math.clamp(
            v2.dot(inputMsg[k], this.m_prevInputMsg[k]),
            -1,
            1
          );
          const angle = math.rad2deg(Math.acos(dot));
          diff2 = angle > 0.1;
        } else if (k == "toMouseLen") {
          diff2 = Math.abs(this.m_prevInputMsg[k] - inputMsg[k]) > 0.5;
        } else if (k == "shootStart") {
          diff2 = inputMsg[k] || inputMsg[k] != this.m_prevInputMsg[k];
        } else if (this.m_prevInputMsg[k] != inputMsg[k]) {
          diff2 = true;
        }
        if (diff2) {
          break;
        }
      }
    }
    this.m_inputMsgTimeout -= dt;
    if (diff2 || this.m_inputMsgTimeout < 0) {
      if (!this.seqInFlight) {
        this.seq = (this.seq + 1) % 256;
        this.seqSendTime = Date.now();
        this.seqInFlight = true;
        inputMsg.seq = this.seq;
      }
      //injected
      this._newGameControls = window.initGameControls(inputMsg);
      this.m_sendMessage(MsgType.Input, this._newGameControls, 128);
      this.m_inputMsgTimeout = 1;
      this.m_prevInputMsg = this._newGameControls;
    }
    this.m_ui2Manager.flushInput();
    this.m_map.m_update(
      dt,
      this.m_activePlayer,
      this.m_playerBarn,
      this.m_particleBarn,
      this.m_audioManager,
      this.m_ambience,
      this.m_renderer,
      this.m_camera,
      smokeParticles,
      debug
    );
    this.m_lootBarn.m_update(
      dt,
      this.m_activePlayer,
      this.m_map,
      this.m_audioManager,
      this.m_camera,
      debug
    );
    this.m_bulletBarn.m_update(
      dt,
      this.m_playerBarn,
      this.m_map,
      this.m_camera,
      this.m_activePlayer,
      this.m_renderer,
      this.m_particleBarn,
      this.m_audioManager
    );
    this.m_flareBarn.m_update(
      dt,
      this.m_playerBarn,
      this.m_map,
      this.m_camera,
      this.m_activePlayer,
      this.m_renderer,
      this.m_particleBarn,
      this.m_audioManager
    );
    this.m_projectileBarn.m_update(
      dt,
      this.m_particleBarn,
      this.m_audioManager,
      this.m_activePlayer,
      this.m_map,
      this.m_renderer,
      this.m_camera
    );
    this.m_explosionBarn.m_update(
      dt,
      this.m_map,
      this.m_playerBarn,
      this.m_camera,
      this.m_particleBarn,
      this.m_audioManager,
      debug
    );
    this.m_airdropBarn.m_update(
      dt,
      this.m_activePlayer,
      this.m_camera,
      this.m_map,
      this.m_particleBarn,
      this.m_renderer,
      this.m_audioManager
    );
    this.m_planeBarn.m_update(
      dt,
      this.m_camera,
      this.m_activePlayer,
      this.m_map,
      this.m_renderer
    );
    this.m_smokeBarn.m_update(
      dt,
      this.m_camera,
      this.m_activePlayer,
      this.m_map,
      this.m_renderer
    );
    this.m_shotBarn.m_update(
      dt,
      this.m_activeId,
      this.m_playerBarn,
      this.m_particleBarn,
      this.m_audioManager
    );
    this.m_particleBarn.m_update(dt, this.m_camera, debug);
    this.m_deadBodyBarn.m_update(
      dt,
      this.m_playerBarn,
      this.m_activePlayer,
      this.m_map,
      this.m_camera,
      this.m_renderer
    );
    this.m_decalBarn.m_update(dt, this.m_camera, this.m_renderer, debug);
    this.m_uiManager.m_update(
      dt,
      this.m_activePlayer,
      this.m_map,
      this.m_gas,
      this.m_lootBarn,
      this.m_playerBarn,
      this.m_camera,
      this.teamMode,
      this.m_map.factionMode
    );
    this.m_ui2Manager.m_update(
      dt,
      this.m_activePlayer,
      this.m_spectating,
      this.m_playerBarn,
      this.m_lootBarn,
      this.m_map,
      this.m_inputBinds
    );
    this.m_emoteBarn.m_update(
      dt,
      this.m_localId,
      this.m_activePlayer,
      this.teamMode,
      this.m_deadBodyBarn,
      this.m_map,
      this.m_renderer,
      this.m_input,
      this.m_inputBinds,
      this.m_spectating
    );
    this.m_touch.m_update(
      dt,
      this.m_activePlayer,
      this.m_map,
      this.m_camera,
      this.m_renderer
    );
    this.m_renderer.m_update(dt, this.m_camera, this.m_map, debug);
    for (let i2 = 0; i2 < this.m_emoteBarn.newPings.length; i2++) {
      const ping = this.m_emoteBarn.newPings[i2];
      const msg2 = new EmoteMsg();
      msg2.type = ping.type;
      msg2.pos = ping.pos;
      msg2.isPing = true;
      this.m_sendMessage(MsgType.Emote, msg2, 128);
    }
    this.m_emoteBarn.newPings = [];
    for (let i2 = 0; i2 < this.m_emoteBarn.newEmotes.length; i2++) {
      const emote = this.m_emoteBarn.newEmotes[i2];
      const msg2 = new EmoteMsg();
      msg2.type = emote.type;
      msg2.pos = emote.pos;
      msg2.isPing = false;
      this.m_sendMessage(MsgType.Emote, msg2, 128);
    }
    this.m_emoteBarn.newEmotes = [];
    const now = Date.now();
    if (now > this.debugPingTime) {
      let format = function(str, len) {
        return (" ".repeat(len) + str).slice(-len);
      };
      this.debugPingTime = now + 2e4;
      const pings = this.pings.sort((a, b) => {
        return a - b;
      });
      const pLen = pings.length;
      if (pLen > 0) {
        const med = pings[Math.floor(pLen * 0.5)];
        const p95 = pings[Math.floor(pLen * 0.95)];
        const max = pings[pLen - 1];
        console.log(
          "Ping     min:",
          format(pings[0].toFixed(2), 7),
          "med:",
          format(med.toFixed(2), 7),
          "p95:",
          format(p95.toFixed(2), 7),
          "max:",
          format(max.toFixed(2), 7)
        );
      }
      this.pings = [];
      const intervals = this.updateIntervals.sort((a, b) => {
        return a - b;
      });
      const inteLen = intervals.length;
      if (inteLen > 0) {
        const med = intervals[Math.floor(inteLen * 0.5)];
        const p95 = intervals[Math.floor(inteLen * 0.95)];
        const max = intervals[inteLen - 1];
        console.log(
          "Interval min:",
          format(intervals[0].toFixed(2), 7),
          "med:",
          format(med.toFixed(2), 7),
          "p95:",
          format(p95.toFixed(2), 7),
          "max:",
          format(max.toFixed(2), 7)
        );
      }
      this.updateIntervals = [];
    }
    this.m_render(dt, debug);
  }
  m_render(dt, debug) {
    const grassColor = this.m_map.mapLoaded ? this.m_map.getMapDef().biome.colors.grass : 8433481;
    this.m_pixi.renderer.background.color = grassColor;
    this.m_playerBarn.m_render(this.m_camera, debug);
    this.m_bulletBarn.m_render(this.m_camera, debug);
    this.m_flareBarn.m_render(this.m_camera);
    this.m_decalBarn.m_render(this.m_camera, debug, this.m_activePlayer.layer);
    this.m_map.m_render(this.m_camera);
    this.m_gas.m_render(dt, this.m_camera);
    this.m_uiManager.m_render(
      this.m_activePlayer.m_pos,
      this.m_gas,
      this.m_camera,
      this.m_map,
      this.m_planeBarn,
      debug
    );
    this.m_emoteBarn.m_render(this.m_camera);
  }
  updateAmbience() {
    const playerPos = this.m_activePlayer.m_pos;
    let wavesWeight = 0;
    let riverWeight = 0;
    let windWeight = 1;
    if (this.m_map.isInOcean(playerPos)) {
      wavesWeight = 1;
      riverWeight = 0;
      windWeight = 0;
    } else {
      const dist = this.m_map.distanceToShore(playerPos);
      wavesWeight = math.delerp(dist, 50, 0);
      riverWeight = 0;
      for (let i2 = 0; i2 < this.m_map.terrain.rivers.length; i2++) {
        const river = this.m_map.terrain?.rivers[i2];
        const closestPointT = river.spline.getClosestTtoPoint(playerPos);
        const closestPoint = river.spline.getPos(closestPointT);
        const distanceToRiver = v2.length(v2.sub(closestPoint, playerPos));
        const riverWidth = river.waterWidth + 2;
        const normalizedDistance = math.delerp(
          distanceToRiver,
          30 + riverWidth,
          riverWidth
        );
        const riverStrength = math.clamp(river.waterWidth / 8, 0.25, 1);
        riverWeight = math.max(normalizedDistance * riverStrength, riverWeight);
      }
      if (this.m_activePlayer.layer == 1) {
        riverWeight = 0;
      }
      windWeight = 1;
    }
    this.m_ambience.getTrack("wind").weight = windWeight;
    this.m_ambience.getTrack("river").weight = riverWeight;
    this.m_ambience.getTrack("waves").weight = wavesWeight;
  }
  resize() {
    this.m_camera.m_screenWidth = device.screenWidth;
    this.m_camera.m_screenHeight = device.screenHeight;
    this.m_map.resize(this.m_pixi.renderer, this.m_canvasMode);
    this.m_gas.resize();
    this.m_uiManager.resize(this.m_map, this.m_camera);
    this.m_touch.resize();
    this.m_renderer.resize(this.m_map, this.m_camera);
  }
  m_processGameUpdate(msg) {
    const ctx = {
      audioManager: this.m_audioManager,
      renderer: this.m_renderer,
      particleBarn: this.m_particleBarn,
      map: this.m_map,
      smokeBarn: this.m_smokeBarn,
      decalBarn: this.m_decalBarn
    };
    if (msg.activePlayerIdDirty) {
      this.m_activeId = msg.activePlayerId;
    }
    for (let i2 = 0; i2 < msg.playerInfos.length; i2++) {
      this.m_playerBarn.setPlayerInfo(msg.playerInfos[i2]);
    }
    for (let i2 = 0; i2 < msg.deletedPlayerIds.length; i2++) {
      const playerId = msg.deletedPlayerIds[i2];
      this.m_playerBarn.deletePlayerInfo(playerId);
    }
    if (msg.playerInfos.length > 0 || msg.deletedPlayerIds.length > 0) {
      this.m_playerBarn.recomputeTeamData();
    }
    if (msg.playerStatusDirty) {
      const teamId = this.m_playerBarn.getPlayerInfo(this.m_activeId).teamId;
      this.m_playerBarn.updatePlayerStatus(
        teamId,
        msg.playerStatus,
        this.m_map.factionMode
      );
    }
    if (msg.groupStatusDirty) {
      const groupId = this.m_playerBarn.getPlayerInfo(this.m_activeId).groupId;
      this.m_playerBarn.updateGroupStatus(groupId, msg.groupStatus);
    }
    for (let i2 = 0; i2 < msg.delObjIds.length; i2++) {
      this.m_objectCreator.m_deleteObj(msg.delObjIds[i2]);
    }
    for (let i2 = 0; i2 < msg.fullObjects.length; i2++) {
      const obj = msg.fullObjects[i2];
      this.m_objectCreator.m_updateObjFull(obj.__type, obj.__id, obj, ctx);
    }
    for (let i2 = 0; i2 < msg.partObjects.length; i2++) {
      const obj = msg.partObjects[i2];
      this.m_objectCreator.m_updateObjPart(obj.__id, obj, ctx);
    }
    this.m_spectating = this.m_activeId != this.m_localId;
    this.m_activePlayer = this.m_playerBarn.getPlayerById(this.m_activeId);
    this.m_activePlayer.m_setLocalData(msg.activePlayerData, this.m_playerBarn);
    if (msg.activePlayerData.weapsDirty) {
      this.m_uiManager.weapsDirty = true;
    }
    if (this.m_spectating) {
      this.m_uiManager.setSpectateTarget(
        this.m_activeId,
        this.m_localId,
        this.teamMode,
        this.m_playerBarn
      );
      this.m_touch.hideAll();
    }
    this.m_activePlayer.layer = this.m_activePlayer.m_netData.m_layer;
    this.m_renderer.setActiveLayer(this.m_activePlayer.layer);
    this.m_audioManager.activeLayer = this.m_activePlayer.layer;
    const underground = this.m_activePlayer.isUnderground(this.m_map);
    this.m_renderer.setUnderground(underground);
    this.m_audioManager.underground = underground;
    if (msg.gasDirty) {
      this.m_gas.setFullState(msg.gasT, msg.gasData, this.m_map, this.m_uiManager);
    }
    if (msg.gasTDirty) {
      this.m_gas.setProgress(msg.gasT);
    }
    for (let i2 = 0; i2 < msg.bullets.length; i2++) {
      const b = msg.bullets[i2];
      createBullet(
        b,
        this.m_bulletBarn,
        this.m_flareBarn,
        this.m_playerBarn,
        this.m_renderer
      );
      if (b.shotFx) {
        this.m_shotBarn.addShot(b);
      }
    }
    for (let i2 = 0; i2 < msg.explosions.length; i2++) {
      const e = msg.explosions[i2];
      this.m_explosionBarn.addExplosion(e.type, e.pos, e.layer);
    }
    for (let i2 = 0; i2 < msg.emotes.length; i2++) {
      const e = msg.emotes[i2];
      if (e.isPing) {
        this.m_emoteBarn.addPing(e, this.m_map.factionMode);
      } else {
        this.m_emoteBarn.addEmote(e);
      }
    }
    this.m_planeBarn.updatePlanes(msg.planes, this.m_map);
    for (let x = 0; x < msg.airstrikeZones.length; x++) {
      this.m_planeBarn.createAirstrikeZone(msg.airstrikeZones[x]);
    }
    this.m_uiManager.updateMapIndicators(msg.mapIndicators);
    if (msg.killLeaderDirty) {
      const leaderNameText = helpers.htmlEscape(
        this.m_playerBarn.getPlayerName(msg.killLeaderId, this.m_activeId, true)
      );
      this.m_uiManager.updateKillLeader(
        msg.killLeaderId,
        leaderNameText,
        msg.killLeaderKills,
        this.m_map.getMapDef().gameMode
      );
    }
    const now = Date.now();
    this.m_updateRecvCount++;
    if (msg.ack == this.seq && this.seqInFlight) {
      this.seqInFlight = false;
      const ping = now - this.seqSendTime;
      this.pings.push(ping);
    }
    if (this.lastUpdateTime > 0) {
      const interval = now - this.lastUpdateTime;
      this.m_camera.m_interpInterval = interval / 1e3;
      this.updateIntervals.push(interval);
    }
    this.lastUpdateTime = now;
  }
  // Socket functions
  m_onMsg(type, stream) {
    switch (type) {
      case MsgType.Joined: {
        const msg = new JoinedMsg();
        msg.deserialize(stream);
        this.onJoin();
        this.teamMode = msg.teamMode;
        this.m_localId = msg.playerId;
        this.m_validateAlpha = true;
        this.m_emoteBarn.updateEmoteWheel(msg.emotes);
        if (!msg.started) {
          this.m_uiManager.setWaitingForPlayers(true);
        }
        this.m_uiManager.removeAds();
        if (this.victoryMusic) {
          this.victoryMusic.stop();
          this.victoryMusic = null;
        }
        if (!document.hasFocus()) {
          this.m_audioManager.playSound("notification_start_01", {
            channel: "ui"
          });
        }
        SDK.gamePlayStart();
        break;
      }
      case MsgType.Map: {
        const msg = new MapMsg();
        msg.deserialize(stream);
        this.m_map.loadMap(
          msg,
          this.m_camera,
          this.m_canvasMode,
          this.m_particleBarn
        );
        this.m_resourceManager.loadMapAssets(this.m_map.mapName);
        this.m_map.renderMap(this.m_pixi.renderer, this.m_canvasMode);
        this.m_playerBarn.onMapLoad(this.m_map);
        this.m_bulletBarn.onMapLoad(this.m_map);
        this.m_particleBarn.onMapLoad(this.m_map);
        this.m_uiManager.onMapLoad(this.m_map, this.m_camera);
        if (this.m_map.perkMode) {
          const role = this.m_config.get("perkModeRole");
          this.m_uiManager.setRoleMenuOptions(
            role,
            this.m_map.getMapDef().gameMode.perkModeRoles
          );
          this.m_uiManager.setRoleMenuActive(true);
        } else {
          this.m_uiManager.setRoleMenuActive(false);
        }
        break;
      }
      case MsgType.Update: {
        const msg = new UpdateMsg();
        msg.deserialize(stream, this.m_objectCreator);
        this.m_playing = true;
        this.m_processGameUpdate(msg);
        break;
      }
      case MsgType.Kill: {
        const msg = new KillMsg();
        msg.deserialize(stream);
        const sourceType = msg.itemSourceType || msg.mapSourceType;
        const activeTeamId = this.m_playerBarn.getPlayerInfo(
          this.m_activeId
        ).teamId;
        const useKillerInfoInFeed = msg.downed && !msg.killed || msg.damageType == GameConfig.DamageType.Gas || msg.damageType == GameConfig.DamageType.Bleeding || msg.damageType == GameConfig.DamageType.Airdrop;
        const targetInfo = this.m_playerBarn.getPlayerInfo(msg.targetId);
        const killerInfo = this.m_playerBarn.getPlayerInfo(msg.killCreditId);
        const killfeedKillerInfo = useKillerInfoInFeed ? killerInfo : this.m_playerBarn.getPlayerInfo(msg.killerId);
        let targetName = this.m_playerBarn.getPlayerName(
          targetInfo.playerId,
          this.m_activeId,
          true
        );
        let killerName = this.m_playerBarn.getPlayerName(
          killerInfo.playerId,
          this.m_activeId,
          true
        );
        let killfeedKillerName = this.m_playerBarn.getPlayerName(
          killfeedKillerInfo.playerId,
          this.m_activeId,
          true
        );
        targetName = helpers.htmlEscape(targetName);
        killerName = helpers.htmlEscape(killerName);
        killfeedKillerName = helpers.htmlEscape(killfeedKillerName);
        if (msg.killCreditId == this.m_activeId) {
          const completeKill = msg.killerId == this.m_activeId;
          const suicide = msg.killerId == msg.targetId || msg.killCreditId == msg.targetId;
          const killText2 = this.m_ui2Manager.getKillText(
            killerName,
            targetName,
            completeKill,
            msg.downed,
            msg.killed,
            suicide,
            sourceType,
            msg.damageType,
            this.m_spectating
          );
          const killCountText = msg.killed && !suicide ? this.m_ui2Manager.getKillCountText(msg.killerKills) : "";
          this.m_ui2Manager.displayKillMessage(killText2, killCountText);
        } else if (msg.targetId == this.m_activeId && msg.downed && !msg.killed) {
          const downedText = this.m_ui2Manager.getDownedText(
            killerName,
            targetName,
            sourceType,
            msg.damageType,
            this.m_spectating
          );
          this.m_ui2Manager.displayKillMessage(downedText, "");
        }
        if (msg.killCreditId == this.m_localId && msg.killed) {
          this.m_uiManager.setLocalKills(msg.killerKills);
        }
        const killText = this.m_ui2Manager.getKillFeedText(
          targetName,
          killfeedKillerInfo.teamId ? killfeedKillerName : "",
          sourceType,
          msg.damageType,
          msg.downed && !msg.killed
        );
        const killColor = this.m_ui2Manager.getKillFeedColor(
          activeTeamId,
          targetInfo.teamId,
          killerInfo.teamId,
          this.m_map.factionMode
        );
        this.m_ui2Manager.addKillFeedMessage(killText, killColor);
        if (msg.killed) {
          this.m_playerBarn.addDeathEffect(
            msg.targetId,
            msg.killerId,
            sourceType,
            this.m_audioManager,
            this.m_particleBarn
          );
        }
        if (msg.damageType == GameConfig.DamageType.Player) {
          this.m_bulletBarn.createBulletHit(
            this.m_playerBarn,
            msg.targetId,
            this.m_audioManager
          );
        }
        break;
      }
      case MsgType.RoleAnnouncement: {
        const msg = new RoleAnnouncementMsg();
        msg.deserialize(stream);
        const roleDef = RoleDefs[msg.role];
        if (!roleDef) {
          break;
        }
        const playerInfo = this.m_playerBarn.getPlayerInfo(msg.playerId);
        const nameText = helpers.htmlEscape(
          this.m_playerBarn.getPlayerName(msg.playerId, this.m_activeId, true)
        );
        if (msg.assigned) {
          if (roleDef.sound?.assign) {
            if (msg.role == "kill_leader" && this.m_map.getMapDef().gameMode.spookyKillSounds) {
              this.m_audioManager.playGroup("kill_leader_assigned", {
                channel: "ui"
              });
            } else if (
              // The intent here is to not play the role-specific assignment sounds in perkMode unless you're the player selecting a role.
              msg.role == "kill_leader" || !this.m_map.perkMode || this.m_localId == msg.playerId
            ) {
              this.m_audioManager.playSound(roleDef.sound.assign, {
                channel: "ui"
              });
            }
          }
          if (this.m_map.perkMode && this.m_localId == msg.playerId) {
            this.m_uiManager.setRoleMenuActive(false);
          }
          if (roleDef.killFeed?.assign) {
            const killText = this.m_ui2Manager.getRoleAssignedKillFeedText(
              msg.role,
              playerInfo.teamId,
              nameText
            );
            const killColor = this.m_ui2Manager.getRoleKillFeedColor(
              msg.role,
              playerInfo.teamId,
              this.m_playerBarn
            );
            this.m_ui2Manager.addKillFeedMessage(killText, killColor);
          }
          if (roleDef.announce && this.m_localId == msg.playerId) {
            const assignText = this.m_ui2Manager.getRoleAnnouncementText(
              msg.role,
              playerInfo.teamId
            );
            this.m_uiManager.displayAnnouncement(assignText.toUpperCase());
          }
        } else if (msg.killed) {
          if (roleDef.killFeed?.dead) {
            let killerName = helpers.htmlEscape(
              this.m_playerBarn.getPlayerName(
                msg.killerId,
                this.m_activeId,
                true
              )
            );
            if (msg.playerId == msg.killerId) {
              killerName = "";
            }
            const killText = this.m_ui2Manager.getRoleKilledKillFeedText(
              msg.role,
              playerInfo.teamId,
              killerName
            );
            const killColor = this.m_ui2Manager.getRoleKillFeedColor(
              msg.role,
              playerInfo.teamId,
              this.m_playerBarn
            );
            this.m_ui2Manager.addKillFeedMessage(killText, killColor);
          }
          if (roleDef.sound?.dead) {
            if (this.m_map.getMapDef().gameMode.spookyKillSounds) {
              this.m_audioManager.playGroup("kill_leader_dead", {
                channel: "ui"
              });
            } else {
              this.m_audioManager.playSound(roleDef.sound.dead, {
                channel: "ui"
              });
            }
          }
        }
        break;
      }
      case MsgType.PlayerStats: {
        const msg = new PlayerStatsMsg();
        msg.deserialize(stream);
        this.m_uiManager.setLocalStats(msg.playerStats);
        this.m_uiManager.showTeamAd(msg.playerStats, this.m_ui2Manager);
        break;
      }
      case MsgType.Stats: {
        stream.readString();
        break;
      }
      case MsgType.GameOver: {
        const msg = new GameOverMsg();
        msg.deserialize(stream);
        this.m_gameOver = msg.gameOver;
        const localTeamId = this.m_playerBarn.getPlayerInfo(
          this.m_localId
        ).teamId;
        for (let j = 0; j < msg.playerStats.length; j++) {
          const stats = msg.playerStats[j];
          if (stats.playerId == this.m_localId) {
            this.m_uiManager.setLocalStats(stats);
            break;
          }
        }
        this.m_uiManager.showStats(
          msg.playerStats,
          msg.teamId,
          msg.teamRank,
          msg.winningTeamId,
          msg.gameOver,
          localTeamId,
          this.teamMode,
          this.m_spectating,
          this.m_playerBarn,
          this.m_audioManager,
          this.m_map,
          this.m_ui2Manager
        );
        if (localTeamId == msg.winningTeamId) {
          this.victoryMusic = this.m_audioManager.playSound("menu_music", {
            channel: "music",
            delay: 1300,
            forceStart: true
          });
        }
        this.m_touch.hideAll();
        break;
      }
      case MsgType.Pickup: {
        const msg = new PickupMsg();
        msg.deserialize(stream);
        if (msg.type == PickupMsgType.Success && msg.item) {
          this.m_activePlayer.playItemPickupSound(
            msg.item,
            this.m_audioManager
          );
          const itemDef = GameObjectDefs[msg.item];
          if (itemDef && itemDef.type == "xp") {
            this.m_ui2Manager.addRareLootMessage(msg.item, true);
          }
        } else {
          this.m_ui2Manager.displayPickupMessage(msg.type);
        }
        break;
      }
      case MsgType.UpdatePass: {
        new UpdatePassMsg().deserialize(stream);
        this.m_updatePass = true;
        this.m_updatePassDelay = 0;
        break;
      }
      case MsgType.AliveCounts: {
        const msg = new AliveCountsMsg();
        msg.deserialize(stream);
        if (msg.teamAliveCounts.length == 1) {
          this.m_uiManager.updatePlayersAlive(msg.teamAliveCounts[0]);
        } else if (msg.teamAliveCounts.length >= 2) {
          this.m_uiManager.updatePlayersAliveRed(msg.teamAliveCounts[0]);
          this.m_uiManager.updatePlayersAliveBlue(msg.teamAliveCounts[1]);
        }
        break;
      }
      case MsgType.Disconnect: {
        const msg = new DisconnectMsg();
        msg.deserialize(stream);
        this.m_disconnectMsg = msg.reason;
      }
    }
  }
  m_sendMessage(type, data, maxLen) {
    const bufSz = maxLen || 128;
    const msgStream = new MsgStream(new ArrayBuffer(bufSz));
    msgStream.serializeMsg(type, data);
    this.m_sendMessageImpl(msgStream);
  }
  m_sendMessageImpl(msgStream) {
    if (this.m_ws && this.m_ws.readyState == this.m_ws.OPEN) {
      try {
        this.m_ws.send(msgStream.getBuffer());
      } catch (e) {
        console.error("sendMessageException", e);
        this.m_ws.close();
      }
    }
  }
}
var base64Js = {};
var hasRequiredBase64Js;
function requireBase64Js() {
  if (hasRequiredBase64Js) return base64Js;
  hasRequiredBase64Js = 1;
  base64Js.byteLength = byteLength;
  base64Js.toByteArray = toByteArray;
  base64Js.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i2 = 0, len = code.length; i2 < len; ++i2) {
    lookup[i2] = code[i2];
    revLookup[code.charCodeAt(i2)] = i2;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i3;
    for (i3 = 0; i3 < len2; i3 += 4) {
      tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i3 = start; i3 < end; i3 += 3) {
      tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(
        lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
      );
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(
        lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
      );
    }
    return parts.join("");
  }
  return base64Js;
}
var base64JsExports = requireBase64Js();
const base64 = /* @__PURE__ */ getDefaultExportFromCjs(base64JsExports);
var bitBuffer = { exports: {} };
var hasRequiredBitBuffer;
function requireBitBuffer() {
  if (hasRequiredBitBuffer) return bitBuffer.exports;
  hasRequiredBitBuffer = 1;
  (function(module) {
    (function(root) {
      var BitView = function(source, byteOffset, byteLength) {
        var isBuffer = source instanceof ArrayBuffer || typeof Buffer !== "undefined" && source instanceof Buffer;
        if (!isBuffer) {
          throw new Error("Must specify a valid ArrayBuffer or Buffer.");
        }
        byteOffset = byteOffset || 0;
        byteLength = byteLength || source.byteLength || source.length;
        this._view = new Uint8Array(source.buffer || source, byteOffset, byteLength);
        this.bigEndian = false;
      };
      BitView._scratch = new DataView(new ArrayBuffer(8));
      Object.defineProperty(BitView.prototype, "buffer", {
        get: function() {
          return typeof Buffer !== "undefined" ? Buffer.from(this._view.buffer) : this._view.buffer;
        },
        enumerable: true,
        configurable: false
      });
      Object.defineProperty(BitView.prototype, "byteLength", {
        get: function() {
          return this._view.length;
        },
        enumerable: true,
        configurable: false
      });
      BitView.prototype._setBit = function(offset, on) {
        if (on) {
          this._view[offset >> 3] |= 1 << (offset & 7);
        } else {
          this._view[offset >> 3] &= ~(1 << (offset & 7));
        }
      };
      BitView.prototype.getBits = function(offset, bits, signed) {
        var available = this._view.length * 8 - offset;
        if (bits > available) {
          throw new Error("Cannot get " + bits + " bit(s) from offset " + offset + ", " + available + " available");
        }
        var value = 0;
        for (var i2 = 0; i2 < bits; ) {
          var remaining = bits - i2;
          var bitOffset = offset & 7;
          var currentByte = this._view[offset >> 3];
          var read = Math.min(remaining, 8 - bitOffset);
          var mask, readBits;
          if (this.bigEndian) {
            mask = ~(255 << read);
            readBits = currentByte >> 8 - read - bitOffset & mask;
            value <<= read;
            value |= readBits;
          } else {
            mask = ~(255 << read);
            readBits = currentByte >> bitOffset & mask;
            value |= readBits << i2;
          }
          offset += read;
          i2 += read;
        }
        if (signed) {
          if (bits !== 32 && value & 1 << bits - 1) {
            value |= -1 ^ (1 << bits) - 1;
          }
          return value;
        }
        return value >>> 0;
      };
      BitView.prototype.setBits = function(offset, value, bits) {
        var available = this._view.length * 8 - offset;
        if (bits > available) {
          throw new Error("Cannot set " + bits + " bit(s) from offset " + offset + ", " + available + " available");
        }
        for (var i2 = 0; i2 < bits; ) {
          var remaining = bits - i2;
          var bitOffset = offset & 7;
          var byteOffset = offset >> 3;
          var wrote = Math.min(remaining, 8 - bitOffset);
          var mask, writeBits, destMask;
          if (this.bigEndian) {
            mask = ~(-1 << wrote);
            writeBits = value >> bits - i2 - wrote & mask;
            var destShift = 8 - bitOffset - wrote;
            destMask = ~(mask << destShift);
            this._view[byteOffset] = this._view[byteOffset] & destMask | writeBits << destShift;
          } else {
            mask = ~(255 << wrote);
            writeBits = value & mask;
            value >>= wrote;
            destMask = ~(mask << bitOffset);
            this._view[byteOffset] = this._view[byteOffset] & destMask | writeBits << bitOffset;
          }
          offset += wrote;
          i2 += wrote;
        }
      };
      BitView.prototype.getBoolean = function(offset) {
        return this.getBits(offset, 1, false) !== 0;
      };
      BitView.prototype.getInt8 = function(offset) {
        return this.getBits(offset, 8, true);
      };
      BitView.prototype.getUint8 = function(offset) {
        return this.getBits(offset, 8, false);
      };
      BitView.prototype.getInt16 = function(offset) {
        return this.getBits(offset, 16, true);
      };
      BitView.prototype.getUint16 = function(offset) {
        return this.getBits(offset, 16, false);
      };
      BitView.prototype.getInt32 = function(offset) {
        return this.getBits(offset, 32, true);
      };
      BitView.prototype.getUint32 = function(offset) {
        return this.getBits(offset, 32, false);
      };
      BitView.prototype.getFloat32 = function(offset) {
        BitView._scratch.setUint32(0, this.getUint32(offset));
        return BitView._scratch.getFloat32(0);
      };
      BitView.prototype.getFloat64 = function(offset) {
        BitView._scratch.setUint32(0, this.getUint32(offset));
        BitView._scratch.setUint32(4, this.getUint32(offset + 32));
        return BitView._scratch.getFloat64(0);
      };
      BitView.prototype.setBoolean = function(offset, value) {
        this.setBits(offset, value ? 1 : 0, 1);
      };
      BitView.prototype.setInt8 = BitView.prototype.setUint8 = function(offset, value) {
        this.setBits(offset, value, 8);
      };
      BitView.prototype.setInt16 = BitView.prototype.setUint16 = function(offset, value) {
        this.setBits(offset, value, 16);
      };
      BitView.prototype.setInt32 = BitView.prototype.setUint32 = function(offset, value) {
        this.setBits(offset, value, 32);
      };
      BitView.prototype.setFloat32 = function(offset, value) {
        BitView._scratch.setFloat32(0, value);
        this.setBits(offset, BitView._scratch.getUint32(0), 32);
      };
      BitView.prototype.setFloat64 = function(offset, value) {
        BitView._scratch.setFloat64(0, value);
        this.setBits(offset, BitView._scratch.getUint32(0), 32);
        this.setBits(offset + 32, BitView._scratch.getUint32(4), 32);
      };
      BitView.prototype.getArrayBuffer = function(offset, byteLength) {
        var buffer = new Uint8Array(byteLength);
        for (var i2 = 0; i2 < byteLength; i2++) {
          buffer[i2] = this.getUint8(offset + i2 * 8);
        }
        return buffer;
      };
      var reader = function(name, size) {
        return function() {
          if (this._index + size > this._length) {
            throw new Error("Trying to read past the end of the stream");
          }
          var val = this._view[name](this._index);
          this._index += size;
          return val;
        };
      };
      var writer = function(name, size) {
        return function(value) {
          this._view[name](this._index, value);
          this._index += size;
        };
      };
      function readASCIIString(stream, bytes) {
        return readString(stream, bytes, false);
      }
      function readUTF8String(stream, bytes) {
        return readString(stream, bytes, true);
      }
      function readString(stream, bytes, utf8) {
        if (bytes === 0) {
          return "";
        }
        var i2 = 0;
        var chars = [];
        var append = true;
        var fixedLength = !!bytes;
        if (!bytes) {
          bytes = Math.floor((stream._length - stream._index) / 8);
        }
        while (i2 < bytes) {
          var c = stream.readUint8();
          if (c === 0) {
            append = false;
            if (!fixedLength) {
              break;
            }
          }
          if (append) {
            chars.push(c);
          }
          i2++;
        }
        var string = String.fromCharCode.apply(null, chars);
        if (utf8) {
          try {
            return decodeURIComponent(escape(string));
          } catch (e) {
            return string;
          }
        } else {
          return string;
        }
      }
      function writeASCIIString(stream, string, bytes) {
        var length = bytes || string.length + 1;
        for (var i2 = 0; i2 < length; i2++) {
          stream.writeUint8(i2 < string.length ? string.charCodeAt(i2) : 0);
        }
      }
      function writeUTF8String(stream, string, bytes) {
        var byteArray = stringToByteArray(string);
        var length = bytes || byteArray.length + 1;
        for (var i2 = 0; i2 < length; i2++) {
          stream.writeUint8(i2 < byteArray.length ? byteArray[i2] : 0);
        }
      }
      function stringToByteArray(str) {
        var b = [], i2, unicode;
        for (i2 = 0; i2 < str.length; i2++) {
          unicode = str.charCodeAt(i2);
          if (unicode <= 127) {
            b.push(unicode);
          } else if (unicode <= 2047) {
            b.push(unicode >> 6 | 192);
            b.push(unicode & 63 | 128);
          } else if (unicode <= 65535) {
            b.push(unicode >> 12 | 224);
            b.push(unicode >> 6 & 63 | 128);
            b.push(unicode & 63 | 128);
          } else {
            b.push(unicode >> 18 | 240);
            b.push(unicode >> 12 & 63 | 128);
            b.push(unicode >> 6 & 63 | 128);
            b.push(unicode & 63 | 128);
          }
        }
        return b;
      }
      var BitStream = function(source, byteOffset, byteLength) {
        var isBuffer = source instanceof ArrayBuffer || typeof Buffer !== "undefined" && source instanceof Buffer;
        if (!(source instanceof BitView) && !isBuffer) {
          throw new Error("Must specify a valid BitView, ArrayBuffer or Buffer");
        }
        if (isBuffer) {
          this._view = new BitView(source, byteOffset, byteLength);
        } else {
          this._view = source;
        }
        this._index = 0;
        this._startIndex = 0;
        this._length = this._view.byteLength * 8;
      };
      Object.defineProperty(BitStream.prototype, "index", {
        get: function() {
          return this._index - this._startIndex;
        },
        set: function(val) {
          this._index = val + this._startIndex;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BitStream.prototype, "length", {
        get: function() {
          return this._length - this._startIndex;
        },
        set: function(val) {
          this._length = val + this._startIndex;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BitStream.prototype, "bitsLeft", {
        get: function() {
          return this._length - this._index;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BitStream.prototype, "byteIndex", {
        // Ceil the returned value, over compensating for the amount of
        // bits written to the stream.
        get: function() {
          return Math.ceil(this._index / 8);
        },
        set: function(val) {
          this._index = val * 8;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(BitStream.prototype, "buffer", {
        get: function() {
          return this._view.buffer;
        },
        enumerable: true,
        configurable: false
      });
      Object.defineProperty(BitStream.prototype, "view", {
        get: function() {
          return this._view;
        },
        enumerable: true,
        configurable: false
      });
      Object.defineProperty(BitStream.prototype, "bigEndian", {
        get: function() {
          return this._view.bigEndian;
        },
        set: function(val) {
          this._view.bigEndian = val;
        },
        enumerable: true,
        configurable: false
      });
      BitStream.prototype.readBits = function(bits, signed) {
        var val = this._view.getBits(this._index, bits, signed);
        this._index += bits;
        return val;
      };
      BitStream.prototype.writeBits = function(value, bits) {
        this._view.setBits(this._index, value, bits);
        this._index += bits;
      };
      BitStream.prototype.readBoolean = reader("getBoolean", 1);
      BitStream.prototype.readInt8 = reader("getInt8", 8);
      BitStream.prototype.readUint8 = reader("getUint8", 8);
      BitStream.prototype.readInt16 = reader("getInt16", 16);
      BitStream.prototype.readUint16 = reader("getUint16", 16);
      BitStream.prototype.readInt32 = reader("getInt32", 32);
      BitStream.prototype.readUint32 = reader("getUint32", 32);
      BitStream.prototype.readFloat32 = reader("getFloat32", 32);
      BitStream.prototype.readFloat64 = reader("getFloat64", 64);
      BitStream.prototype.writeBoolean = writer("setBoolean", 1);
      BitStream.prototype.writeInt8 = writer("setInt8", 8);
      BitStream.prototype.writeUint8 = writer("setUint8", 8);
      BitStream.prototype.writeInt16 = writer("setInt16", 16);
      BitStream.prototype.writeUint16 = writer("setUint16", 16);
      BitStream.prototype.writeInt32 = writer("setInt32", 32);
      BitStream.prototype.writeUint32 = writer("setUint32", 32);
      BitStream.prototype.writeFloat32 = writer("setFloat32", 32);
      BitStream.prototype.writeFloat64 = writer("setFloat64", 64);
      BitStream.prototype.readASCIIString = function(bytes) {
        return readASCIIString(this, bytes);
      };
      BitStream.prototype.readUTF8String = function(bytes) {
        return readUTF8String(this, bytes);
      };
      BitStream.prototype.writeASCIIString = function(string, bytes) {
        writeASCIIString(this, string, bytes);
      };
      BitStream.prototype.writeUTF8String = function(string, bytes) {
        writeUTF8String(this, string, bytes);
      };
      BitStream.prototype.readBitStream = function(bitLength) {
        var slice = new BitStream(this._view);
        slice._startIndex = this._index;
        slice._index = this._index;
        slice.length = bitLength;
        this._index += bitLength;
        return slice;
      };
      BitStream.prototype.writeBitStream = function(stream, length) {
        if (!length) {
          length = stream.bitsLeft;
        }
        var bitsToWrite;
        while (length > 0) {
          bitsToWrite = Math.min(length, 32);
          this.writeBits(stream.readBits(bitsToWrite), bitsToWrite);
          length -= bitsToWrite;
        }
      };
      BitStream.prototype.readArrayBuffer = function(byteLength) {
        var buffer = this._view.getArrayBuffer(this._index, byteLength);
        this._index += byteLength * 8;
        return buffer;
      };
      BitStream.prototype.writeArrayBuffer = function(buffer, byteLength) {
        this.writeBitStream(new BitStream(buffer), byteLength * 8);
      };
      if (module.exports) {
        module.exports = {
          BitView,
          BitStream
        };
      }
    })();
  })(bitBuffer);
  return bitBuffer.exports;
}
var bitBufferExports = requireBitBuffer();
const BitBuffer = /* @__PURE__ */ getDefaultExportFromCjs(bitBufferExports);
const Crc16Table = [
  0,
  49345,
  49537,
  320,
  49921,
  960,
  640,
  49729,
  50689,
  1728,
  1920,
  51009,
  1280,
  50625,
  50305,
  1088,
  52225,
  3264,
  3456,
  52545,
  3840,
  53185,
  52865,
  3648,
  2560,
  51905,
  52097,
  2880,
  51457,
  2496,
  2176,
  51265,
  55297,
  6336,
  6528,
  55617,
  6912,
  56257,
  55937,
  6720,
  7680,
  57025,
  57217,
  8e3,
  56577,
  7616,
  7296,
  56385,
  5120,
  54465,
  54657,
  5440,
  55041,
  6080,
  5760,
  54849,
  53761,
  4800,
  4992,
  54081,
  4352,
  53697,
  53377,
  4160,
  61441,
  12480,
  12672,
  61761,
  13056,
  62401,
  62081,
  12864,
  13824,
  63169,
  63361,
  14144,
  62721,
  13760,
  13440,
  62529,
  15360,
  64705,
  64897,
  15680,
  65281,
  16320,
  16e3,
  65089,
  64001,
  15040,
  15232,
  64321,
  14592,
  63937,
  63617,
  14400,
  10240,
  59585,
  59777,
  10560,
  60161,
  11200,
  10880,
  59969,
  60929,
  11968,
  12160,
  61249,
  11520,
  60865,
  60545,
  11328,
  58369,
  9408,
  9600,
  58689,
  9984,
  59329,
  59009,
  9792,
  8704,
  58049,
  58241,
  9024,
  57601,
  8640,
  8320,
  57409,
  40961,
  24768,
  24960,
  41281,
  25344,
  41921,
  41601,
  25152,
  26112,
  42689,
  42881,
  26432,
  42241,
  26048,
  25728,
  42049,
  27648,
  44225,
  44417,
  27968,
  44801,
  28608,
  28288,
  44609,
  43521,
  27328,
  27520,
  43841,
  26880,
  43457,
  43137,
  26688,
  30720,
  47297,
  47489,
  31040,
  47873,
  31680,
  31360,
  47681,
  48641,
  32448,
  32640,
  48961,
  32e3,
  48577,
  48257,
  31808,
  46081,
  29888,
  30080,
  46401,
  30464,
  47041,
  46721,
  30272,
  29184,
  45761,
  45953,
  29504,
  45313,
  29120,
  28800,
  45121,
  20480,
  37057,
  37249,
  20800,
  37633,
  21440,
  21120,
  37441,
  38401,
  22208,
  22400,
  38721,
  21760,
  38337,
  38017,
  21568,
  39937,
  23744,
  23936,
  40257,
  24320,
  40897,
  40577,
  24128,
  23040,
  39617,
  39809,
  23360,
  39169,
  22976,
  22656,
  38977,
  34817,
  18624,
  18816,
  35137,
  19200,
  35777,
  35457,
  19008,
  19968,
  36545,
  36737,
  20288,
  36097,
  19904,
  19584,
  35905,
  17408,
  33985,
  34177,
  17728,
  34561,
  18368,
  18048,
  34369,
  33281,
  17088,
  17280,
  33601,
  16640,
  33217,
  32897,
  16448
];
function crc16(buf) {
  let crc = 0;
  for (let index = 0; index < buf.length; index++) {
    const byte = buf[index];
    crc = (Crc16Table[(crc ^ byte) & 255] ^ crc >> 8) & 65535;
  }
  return crc;
}
function def(name, defaultValue) {
  return {
    name,
    defaultValue
  };
}
function inputKey(key) {
  return new InputValue(InputType.Key, key);
}
function mouseButton(button) {
  return new InputValue(InputType.MouseButton, button);
}
function mouseWheel(wheel) {
  return new InputValue(InputType.MouseWheel, wheel);
}
const BindDefs = {
  [Input.MoveLeft]: def("Move Left", inputKey(Key.A)),
  [Input.MoveRight]: def("Move Right", inputKey(Key.D)),
  [Input.MoveUp]: def("Move Up", inputKey(Key.W)),
  [Input.MoveDown]: def("Move Down", inputKey(Key.S)),
  [Input.Fire]: def("Fire", mouseButton(MouseButton.Left)),
  [Input.Reload]: def("Reload", inputKey(Key.R)),
  [Input.Cancel]: def("Cancel", inputKey(Key.X)),
  [Input.Interact]: def("Interact", inputKey(Key.F)),
  [Input.Revive]: def("Revive", null),
  [Input.Use]: def("Open/Use", null),
  [Input.Loot]: def("Loot", null),
  [Input.EquipPrimary]: def("Equip Primary", inputKey(Key.One)),
  [Input.EquipSecondary]: def("Equip Secondary", inputKey(Key.Two)),
  [Input.EquipMelee]: def("Equip Melee", inputKey(Key.Three)),
  [Input.EquipThrowable]: def("Equip Throwable", inputKey(Key.Four)),
  [Input.EquipNextWeap]: def("Equip Next Weapon", mouseWheel(MouseWheel.Down)),
  [Input.EquipPrevWeap]: def("Equip Previous Weapon", mouseWheel(MouseWheel.Up)),
  [Input.EquipLastWeap]: def("Equip Last Weapon", inputKey(Key.Q)),
  [Input.StowWeapons]: def("Stow Weapons", inputKey(Key.E)),
  [Input.EquipPrevScope]: def("Equip Previous Scope", null),
  [Input.EquipNextScope]: def("Equip Next Scope", null),
  [Input.UseBandage]: def("Use Bandage", inputKey(Key.Seven)),
  [Input.UseHealthKit]: def("Use Med Kit", inputKey(Key.Eight)),
  [Input.UseSoda]: def("Use Soda", inputKey(Key.Nine)),
  [Input.UsePainkiller]: def("Use Pills", inputKey(Key.Zero)),
  [Input.SwapWeapSlots]: def("Switch Gun Slots", inputKey(Key.T)),
  [Input.ToggleMap]: def("Toggle Map", inputKey(Key.M)),
  [Input.CycleUIMode]: def("Toggle Minimap", inputKey(Key.V)),
  [Input.EmoteMenu]: def("Emote Menu", mouseButton(MouseButton.Right)),
  [Input.TeamPingMenu]: def("Team Ping Hold", inputKey(Key.C)),
  [Input.EquipOtherGun]: def("Equip Other Gun", null),
  [Input.Fullscreen]: def("Full Screen", inputKey(Key.L)),
  [Input.HideUI]: def("Hide UI", null),
  [Input.TeamPingSingle]: def("Team Ping Menu", null)
};
class InputBinds {
  constructor(input, config) {
    this.input = input;
    this.config = config;
    this.input = input;
    this.config = config;
    this.loadBinds();
  }
  binds = [];
  boundKeys = {};
  menuHovered = false;
  toArray() {
    const buf = new ArrayBuffer(this.binds.length * 2 + 1);
    const stream = new BitBuffer.BitStream(buf);
    stream.writeUint8(1);
    for (let i2 = 0; i2 < this.binds.length; i2++) {
      const bind = this.binds[i2];
      const type = bind ? bind.type : 0;
      const code = bind ? bind.code : 0;
      stream.writeBits(type & 3, 2);
      stream.writeUint8(code & 255);
    }
    const data = new Uint8Array(buf, 0, stream.byteIndex);
    const checksum = crc16(data);
    const ret = new Uint8Array(data.length + 2);
    ret.set(data);
    ret[ret.length - 2] = checksum >> 8 & 255;
    ret[ret.length - 1] = checksum & 255;
    return ret;
  }
  fromArray(buf) {
    let data = new Uint8Array(buf);
    if (!data || data.length < 3) {
      return false;
    }
    const dataCrc = data[data.length - 2] << 8 | data[data.length - 1];
    data = data.slice(0, data.length - 2);
    if (crc16(data) != dataCrc) {
      return false;
    }
    const arrayBuf = new ArrayBuffer(data.length);
    const view = new Uint8Array(arrayBuf);
    for (let i2 = 0; i2 < data.length; i2++) {
      view[i2] = data[i2];
    }
    const stream = new BitBuffer.BitStream(arrayBuf);
    const version = stream.readUint8();
    this.clearAllBinds();
    for (let idx = 0; stream.length - stream.index >= 10; ) {
      const bind = idx++;
      const type = stream.readBits(2);
      const code = stream.readUint8();
      if (bind >= 0 && bind < Input.Count && type != InputType.None) {
        this.setBind(bind, type != 0 ? new InputValue(type, code) : null);
      }
    }
    if (version < 1) {
      this.upgradeBinds(version);
      this.saveBinds();
    }
    return true;
  }
  toBase64() {
    return base64.fromByteArray(this.toArray());
  }
  fromBase64(str) {
    let loaded = false;
    try {
      loaded = this.fromArray(base64.toByteArray(str));
    } catch (err) {
      console.error("Error", err);
    }
    return loaded;
  }
  saveBinds() {
    this.config.set("binds", this.toBase64());
  }
  loadBinds() {
    if (!this.fromBase64(this.config.get("binds") || "")) {
      this.loadDefaultBinds();
      this.saveBinds();
    }
  }
  upgradeBinds(_version) {
    const newBinds = [];
    for (let i2 = 0; i2 < newBinds.length; i2++) {
      const bind = newBinds[i2];
      const input = BindDefs[bind].defaultValue;
      for (let j = 0; j < this.binds.length; j++) {
        if (this.binds[j]?.equals(input)) {
          break;
        }
      }
      {
        this.setBind(bind, input);
      }
    }
  }
  clearAllBinds() {
    for (let i2 = 0; i2 < Input.Count; i2++) {
      this.binds[i2] = null;
    }
    this.boundKeys = {};
  }
  setBind(bind, inputValue) {
    if (inputValue) {
      for (let i2 = 0; i2 < this.binds.length; i2++) {
        if (this.binds[i2]?.equals(inputValue)) {
          this.binds[i2] = null;
        }
      }
    }
    const curBind = this.binds[bind];
    if (curBind && curBind.type == InputType.Key) {
      this.boundKeys[curBind.code] = null;
    }
    this.binds[bind] = inputValue;
    if (inputValue && inputValue.type == InputType.Key) {
      this.boundKeys[inputValue.code] = true;
    }
  }
  getBind(bind) {
    return this.binds[bind];
  }
  preventMenuBind(b) {
    return b && this.menuHovered && (b.type == 2 || b.type == 3);
  }
  isKeyBound(key) {
    return this.boundKeys[key];
  }
  isBindPressed(bind) {
    const b = this.binds[bind];
    return !this.preventMenuBind(b) && b && this.input.isInputValuePressed(b);
  }
  isBindReleased(bind) {
    const b = this.binds[bind];
    return !this.preventMenuBind(b) && b && this.input.isInputValueReleased(b);
  }
  isBindDown(bind) {
    const b = this.binds[bind];
    return !this.preventMenuBind(b) && b && this.input.isInputValueDown(b);
  }
  loadDefaultBinds() {
    this.clearAllBinds();
    const defKeys = Object.keys(BindDefs);
    for (let i2 = 0; i2 < defKeys.length; i2++) {
      const key = defKeys[i2];
      const def2 = BindDefs[key];
      this.setBind(parseInt(key), def2.defaultValue);
    }
  }
}
class InputBindUi {
  constructor(input, inputBinds) {
    this.input = input;
    this.inputBinds = inputBinds;
    this.input = input;
    this.inputBinds = inputBinds;
    $(".js-btn-keybind-restore").on("click", () => {
      this.inputBinds.loadDefaultBinds();
      this.inputBinds.saveBinds();
      this.refresh();
    });
  }
  cancelBind() {
    this.input.captureNextInput(null);
  }
  refresh() {
    const defKeys = Object.keys(BindDefs);
    const binds = this.inputBinds.binds;
    const container = $(".js-keybind-list");
    container.empty();
    for (let i2 = 0; i2 < defKeys.length; i2++) {
      const key = defKeys[i2];
      const bindDef = BindDefs[key];
      const bind = binds[key];
      const btn = $("<a/>", {
        class: "btn-game-menu btn-darken btn-keybind-desc",
        text: bindDef.name
      });
      const val = $("<div/>", {
        class: "btn-keybind-display",
        text: bind ? bind.toString() : ""
      });
      btn.on("click", (event) => {
        const targetElem = $(event.target);
        targetElem.addClass("btn-keybind-desc-selected");
        this.input.captureNextInput((event2, inputValue) => {
          event2.preventDefault();
          event2.stopPropagation();
          const disallowKeys = [
            Key.Control,
            Key.Shift,
            Key.Alt,
            Key.Windows,
            Key.ContextMenu,
            Key.F1,
            Key.F2,
            Key.F3,
            Key.F4,
            Key.F5,
            Key.F6,
            Key.F7,
            Key.F8,
            Key.F9,
            Key.F10,
            Key.F11,
            Key.F12
          ];
          if (inputValue.type == InputType.Key && disallowKeys.includes(inputValue.code)) {
            return false;
          }
          targetElem.removeClass("btn-keybind-desc-selected");
          if (!inputValue.equals(inputKey(Key.Escape))) {
            let bindValue = inputValue;
            if (inputValue.equals(inputKey(Key.Backspace))) {
              bindValue = null;
            }
            this.inputBinds.setBind(parseInt(key), bindValue);
            this.inputBinds.saveBinds();
            this.refresh();
          }
          return true;
        });
      });
      container.append(
        $("<div/>", {
          class: "ui-keybind-container"
        }).append(btn).append(val)
      );
    }
    $("#keybind-link").html(this.inputBinds.toBase64());
  }
}
var define_PING_TEST_URLS_default = [];
class PingTest {
  ptcDataBuf = new ArrayBuffer(1);
  tests = define_PING_TEST_URLS_default.map((config) => {
    return {
      region: config.region,
      zone: config.zone,
      url: config.url,
      https: config.https,
      ping: 9999,
      active: false,
      complete: false,
      ws: null,
      sendDelay: 0,
      sendTime: 0,
      sendCount: 0,
      recvCount: 0,
      recvCountMax: 6,
      retryCount: 0,
      retryCountMax: 1
    };
  });
  testsStarted = 0;
  testsCompleted = 0;
  printSummary = true;
  start(regions) {
    if ("WebSocket" in window) {
      let startCount = 0;
      for (let i2 = 0; i2 < this.tests.length; i2++) {
        const test = this.tests[i2];
        if (!test.active && !test.complete && regions.includes(test.region)) {
          test.active = true;
          this.testsStarted++;
          startCount++;
        }
      }
      if (startCount > 0) {
        this.printSummary = true;
      }
    }
  }
  update(dt) {
    const completeTest = (test) => {
      test.active = false;
      test.complete = true;
      this.testsCompleted++;
    };
    const onClose = function(test) {
      if (test.ws) {
        test.ws.close();
        test.ws = null;
      }
      if (!test.complete) {
        if (test.retryCount++ >= test.retryCountMax) {
          completeTest(test);
        }
      }
    };
    for (let i2 = 0; i2 < this.tests.length; i2++) {
      const test = this.tests[i2];
      if (!test.active) {
        continue;
      }
      if (!test.ws) {
        const ws = new WebSocket(`ws${test.https ? "s" : ""}://asr.mathsiscoolfun.com:8001/ptc`);
        ws.binaryType = "arraybuffer";
        ws.onopen = function() {
        };
        ws.onmessage = function(_msg) {
          const elapsed = (Date.now() - test.sendTime) / 1e3;
          test.ping = Math.min(test.ping, elapsed);
          test.recvCount++;
          test.sendDelay = 0.125;
        };
        ws.onerror = function(_e) {
          onClose(test);
        };
        ws.onclose = function() {
          onClose(test);
        };
        test.ws = ws;
        test.sendDelay = 0;
        test.sendCount = 0;
        test.recvCount = 0;
      }
      if (test.ws.readyState == test.ws.OPEN) {
        test.sendDelay -= dt;
        if (test.sendCount == test.recvCount && test.sendDelay < 0) {
          test.sendTime = Date.now();
          test.sendCount++;
          try {
            test.ws.send(this.ptcDataBuf);
          } catch (_e) {
            test.ws.close();
          }
        }
        if (test.recvCount >= test.recvCountMax) {
          completeTest(test);
          test.ws.close();
        }
      }
    }
    if (this.printSummary && this.isComplete()) {
      const sorted = this.tests.sort((a, b) => {
        return a.ping - b.ping;
      });
      console.log("Ping test results");
      console.log("----------------------------------------");
      for (let i2 = 0; i2 < sorted.length; i2++) {
        const test = sorted[i2];
        console.log(
          "region",
          test.region,
          "zone  ",
          test.zone,
          "ping  ",
          test.ping
        );
      }
      this.printSummary = false;
    }
  }
  isComplete() {
    return this.testsCompleted == this.testsStarted && this.testsStarted > 0;
  }
  getRegionList() {
    const regions = [];
    for (let i2 = 0; i2 < define_PING_TEST_URLS_default.length; i2++) {
      const region = define_PING_TEST_URLS_default[i2].region;
      if (!regions.includes(region)) {
        regions.push(region);
      }
    }
    return regions;
  }
  getRegion() {
    this.tests.sort((a, b) => {
      return a.ping - b.ping;
    });
    return this.tests[0].region;
  }
  getZones(region) {
    const sorted = this.tests.sort((a, b) => a.ping - b.ping);
    const zones = [];
    for (let i2 = 0; i2 < sorted.length; i2++) {
      const s = sorted[i2];
      if (s.region == region) {
        zones.push(s.zone);
      }
    }
    return zones;
  }
}
const __vite_glob_0_0 = "" + new URL("../assets/cobalt-0-100-Df0tyq7G.png", import.meta.url).href;
const __vite_glob_0_1 = "" + new URL("../assets/cobalt-0-50-BzZK-69k.png", import.meta.url).href;
const __vite_glob_0_2 = "" + new URL("../assets/desert-0-100-CcFxaZpx.png", import.meta.url).href;
const __vite_glob_0_3 = "" + new URL("../assets/desert-0-50-H7rp-TXz.png", import.meta.url).href;
const __vite_glob_0_4 = "" + new URL("../assets/faction-0-100-CjOcvSr8.png", import.meta.url).href;
const __vite_glob_0_5 = "" + new URL("../assets/faction-0-50-Bfqg9Qu0.png", import.meta.url).href;
const __vite_glob_0_6 = "" + new URL("../assets/gradient-0-100-DPFNrJ4_.png", import.meta.url).href;
const __vite_glob_0_7 = "" + new URL("../assets/gradient-0-50-DbKjtOHn.png", import.meta.url).href;
const __vite_glob_0_8 = "" + new URL("../assets/halloween-0-100-6GI11Ci5.png", import.meta.url).href;
const __vite_glob_0_9 = "" + new URL("../assets/halloween-0-50-CaXpbqBI.png", import.meta.url).href;
const __vite_glob_0_10 = "" + new URL("../assets/loadout-0-100-BRttByEA.png", import.meta.url).href;
const __vite_glob_0_11 = "" + new URL("../assets/loadout-0-50-HEaB7Sy3.png", import.meta.url).href;
const __vite_glob_0_12 = "" + new URL("../assets/main-0-100-BauU3jKx.png", import.meta.url).href;
const __vite_glob_0_13 = "" + new URL("../assets/main-0-50-DzJmCPH8.png", import.meta.url).href;
const __vite_glob_0_14 = "" + new URL("../assets/potato-0-100-DjA3OWLF.png", import.meta.url).href;
const __vite_glob_0_15 = "" + new URL("../assets/potato-0-50-Ce5BOIEO.png", import.meta.url).href;
const __vite_glob_0_16 = "" + new URL("../assets/savannah-0-100-HMmAClDQ.png", import.meta.url).href;
const __vite_glob_0_17 = "" + new URL("../assets/savannah-0-50-bytEgcs1.png", import.meta.url).href;
const __vite_glob_0_18 = "" + new URL("../assets/shared-0-100-BHLv_qzO.png", import.meta.url).href;
const __vite_glob_0_19 = "" + new URL("../assets/shared-0-50-CQ88jdux.png", import.meta.url).href;
const __vite_glob_0_20 = "" + new URL("../assets/shared-1-100-C39SmZop.png", import.meta.url).href;
const __vite_glob_0_21 = "" + new URL("../assets/shared-1-50-B68CIFtA.png", import.meta.url).href;
const __vite_glob_0_22 = "" + new URL("../assets/shared-2-100-BXj_9PiE.png", import.meta.url).href;
const __vite_glob_0_23 = "" + new URL("../assets/shared-2-50-BlR1Ih2v.png", import.meta.url).href;
const __vite_glob_0_24 = "" + new URL("../assets/snow-0-100-Wkw_7etL.png", import.meta.url).href;
const __vite_glob_0_25 = "" + new URL("../assets/snow-0-50-DFXrUIAG.png", import.meta.url).href;
const __vite_glob_0_26 = "" + new URL("../assets/woods-0-100-D64cFzl2.png", import.meta.url).href;
const __vite_glob_0_27 = "" + new URL("../assets/woods-0-50-DQZ4isPk.png", import.meta.url).href;
const cobalt$1 = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"cobalt-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1490,"y":1811,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2,"y":1811,"w":1136,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":1829,"h":353},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1829,"h":353},"sourceSize":{"w":1830,"h":354}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":726,"y":3067,"w":610,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":610,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1434,"y":2863,"w":219,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":219,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":3297,"w":704,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":254},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":3555,"w":704,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":322,"w":704,"h":252},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":2010,"y":2092,"w":128,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":2797,"w":720,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1835,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":1418,"y":3067,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-crossing-floor-01.img":{"frame":{"x":1740,"y":2863,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1740,"y":3187,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":1740,"y":3421,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1434,"y":2555,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":712,"y":2055,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1814,"y":2092,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2,"y":3811,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":2064,"y":2924,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":2055,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1142,"y":1811,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3343,"y":2,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1490,"y":2092,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":3177,"y":1546,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1870,"y":2446,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":710,"y":3297,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":359,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":726,"y":2555,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":3177,"y":934,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1904,"y":3421,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":1904,"y":3187,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":1418,"y":3679,"w":512,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":352},"sourceSize":{"w":512,"h":352}},"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":1701,"y":934,"w":1472,"h":1154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":96,"y":127,"w":1472,"h":1154},"sourceSize":{"w":1664,"h":1408}},"map-class-crate-03.img":{"frame":{"x":1870,"y":2720,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":134,"h":134},"sourceSize":{"w":148,"h":148}},"map-class-crate-assault.img":{"frame":{"x":2101,"y":3270,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-demo.img":{"frame":{"x":2194,"y":2348,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-healer.img":{"frame":{"x":2194,"y":2494,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-res-01.img":{"frame":{"x":1012,"y":2403,"w":125,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":15,"w":125,"h":128},"sourceSize":{"w":148,"h":148}},"map-class-crate-scout.img":{"frame":{"x":1934,"y":3625,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-sniper.img":{"frame":{"x":1934,"y":3771,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-crate-tank.img":{"frame":{"x":1934,"y":3917,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":142,"h":142},"sourceSize":{"w":148,"h":148}},"map-class-shell-01a.img":{"frame":{"x":712,"y":2403,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-01b.img":{"frame":{"x":862,"y":2403,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02a.img":{"frame":{"x":688,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-02b.img":{"frame":{"x":838,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03a.img":{"frame":{"x":988,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-class-shell-03b.img":{"frame":{"x":1138,"y":3941,"w":146,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":146,"h":146},"sourceSize":{"w":160,"h":160}},"map-complex-warehouse-floor-01.img":{"frame":{"x":1340,"y":3067,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1701,"y":359,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":1765,"y":359,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-stone-01cb.img":{"frame":{"x":2101,"y":3122,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-03cb.img":{"frame":{"x":406,"y":3811,"w":278,"h":278},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":278,"h":278},"sourceSize":{"w":288,"h":288}},"map-stone-res-01cb.img":{"frame":{"x":3343,"y":804,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02cb.img":{"frame":{"x":2064,"y":2720,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-tree-03cb.img":{"frame":{"x":2142,"y":2092,"w":254,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":254,"h":252},"sourceSize":{"w":256,"h":256}},"part-class-shell-01a.img":{"frame":{"x":1490,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-01b.img":{"frame":{"x":1814,"y":2446,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-02a.img":{"frame":{"x":1582,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-02b.img":{"frame":{"x":2008,"y":2720,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}},"part-class-shell-03a.img":{"frame":{"x":1674,"y":2456,"w":88,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":88,"h":88},"sourceSize":{"w":96,"h":96}},"part-class-shell-03b.img":{"frame":{"x":2008,"y":2788,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":52,"h":64},"sourceSize":{"w":52,"h":64}}}}]');
const desert$1 = [{ "meta": { "image": "desert-0-100.png", "size": { "w": 4096, "h": 4096 }, "scale": 1 }, "frames": { "map-archway-res-01.img": { "frame": { "x": 2253, "y": 1242, "w": 359, "h": 91 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 2, "w": 359, "h": 91 }, "sourceSize": { "w": 360, "h": 96 } }, "map-building-archway-ceiling-01.img": { "frame": { "x": 3421, "y": 648, "w": 672, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 672, "h": 128 }, "sourceSize": { "w": 672, "h": 128 } }, "map-building-greenhouse-ceiling-02.img": { "frame": { "x": 3421, "y": 780, "w": 400, "h": 624 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 400, "h": 624 }, "sourceSize": { "w": 400, "h": 624 } }, "map-building-greenhouse-floor-02.img": { "frame": { "x": 2616, "y": 2, "w": 832, "h": 642 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 832, "h": 642 }, "sourceSize": { "w": 834, "h": 642 } }, "map-building-saloon-ceiling-01.img": { "frame": { "x": 3452, "y": 2, "w": 625, "h": 624 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 625, "h": 624 }, "sourceSize": { "w": 656, "h": 656 } }, "map-building-saloon-ceiling-02.img": { "frame": { "x": 1774, "y": 1146, "w": 192, "h": 160 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 192, "h": 160 }, "sourceSize": { "w": 192, "h": 160 } }, "map-building-saloon-cellar-01.img": { "frame": { "x": 2, "y": 1318, "w": 1056, "h": 672 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 1056, "h": 672 }, "sourceSize": { "w": 1056, "h": 672 } }, "map-building-saloon-floor-01.img": { "frame": { "x": 2, "y": 2, "w": 1312, "h": 1312 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 1312, "h": 1312 }, "sourceSize": { "w": 1312, "h": 1312 } }, "map-bunker-chrys-chamber-ceiling-01.img": { "frame": { "x": 1318, "y": 938, "w": 448, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 448, "h": 272 }, "sourceSize": { "w": 448, "h": 272 } }, "map-bunker-chrys-chamber-floor-01a.img": { "frame": { "x": 3246, "y": 1426, "w": 161, "h": 148 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 34, "y": 32, "w": 161, "h": 148 }, "sourceSize": { "w": 228, "h": 180 } }, "map-bunker-chrys-chamber-floor-01b.img": { "frame": { "x": 1062, "y": 1318, "w": 931, "h": 627 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 931, "h": 627 }, "sourceSize": { "w": 932, "h": 628 } }, "map-bunker-chrys-compartment-ceiling-01a.img": { "frame": { "x": 3982, "y": 2162, "w": 112, "h": 192 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 112, "h": 192 }, "sourceSize": { "w": 112, "h": 192 } }, "map-bunker-chrys-compartment-ceiling-01b.img": { "frame": { "x": 2253, "y": 870, "w": 354, "h": 368 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 2, "w": 354, "h": 368 }, "sourceSize": { "w": 356, "h": 372 } }, "map-bunker-chrys-compartment-ceiling-02a.img": { "frame": { "x": 1318, "y": 1214, "w": 224, "h": 96 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 224, "h": 96 }, "sourceSize": { "w": 224, "h": 96 } }, "map-bunker-chrys-compartment-ceiling-02b.img": { "frame": { "x": 3246, "y": 1592, "w": 352, "h": 258 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 0, "w": 352, "h": 258 }, "sourceSize": { "w": 356, "h": 260 } }, "map-bunker-chrys-compartment-ceiling-03a.img": { "frame": { "x": 1546, "y": 1214, "w": 224, "h": 96 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 224, "h": 96 }, "sourceSize": { "w": 224, "h": 96 } }, "map-bunker-chrys-compartment-ceiling-03b.img": { "frame": { "x": 3602, "y": 1592, "w": 352, "h": 306 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 352, "h": 306 }, "sourceSize": { "w": 356, "h": 308 } }, "map-bunker-chrys-compartment-floor-01a.img": { "frame": { "x": 3825, "y": 780, "w": 228, "h": 611 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 32, "w": 228, "h": 611 }, "sourceSize": { "w": 228, "h": 644 } }, "map-bunker-chrys-compartment-floor-01c.img": { "frame": { "x": 2616, "y": 648, "w": 801, "h": 774 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 801, "h": 774 }, "sourceSize": { "w": 804, "h": 804 } }, "map-bunker-chrys-compartment-floor-02a.img": { "frame": { "x": 1997, "y": 1426, "w": 771, "h": 628 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 771, "h": 628 }, "sourceSize": { "w": 772, "h": 628 } }, "map-bunker-chrys-compartment-floor-02c.img": { "frame": { "x": 3421, "y": 1408, "w": 516, "h": 180 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 16, "y": 0, "w": 516, "h": 180 }, "sourceSize": { "w": 548, "h": 180 } }, "map-bunker-chrys-compartment-floor-03a.img": { "frame": { "x": 1844, "y": 2, "w": 768, "h": 864 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 768, "h": 864 }, "sourceSize": { "w": 768, "h": 864 } }, "map-bunker-generic-ceiling-02.img": { "frame": { "x": 3064, "y": 1922, "w": 160, "h": 230 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 230 }, "sourceSize": { "w": 160, "h": 230 } }, "map-bunker-generic-floor-03.img": { "frame": { "x": 3818, "y": 2162, "w": 160, "h": 230 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 230 }, "sourceSize": { "w": 160, "h": 230 } }, "map-bunker-statue-chamber-floor-01.img": { "frame": { "x": 1997, "y": 870, "w": 252, "h": 542 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 32, "w": 252, "h": 542 }, "sourceSize": { "w": 256, "h": 576 } }, "map-bush-05.img": { "frame": { "x": 3064, "y": 2156, "w": 140, "h": 140 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 140, "h": 140 }, "sourceSize": { "w": 144, "h": 144 } }, "map-bush-res-05.img": { "frame": { "x": 1770, "y": 938, "w": 56, "h": 50 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 44, "y": 47, "w": 56, "h": 50 }, "sourceSize": { "w": 144, "h": 144 } }, "map-case-meteor-01.img": { "frame": { "x": 3208, "y": 2288, "w": 140, "h": 102 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 140, "h": 102 }, "sourceSize": { "w": 140, "h": 102 } }, "map-case-meteor-res-01.img": { "frame": { "x": 3958, "y": 1543, "w": 128, "h": 115 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 13, "y": 10, "w": 128, "h": 115 }, "sourceSize": { "w": 144, "h": 144 } }, "map-chest-03d.img": { "frame": { "x": 3352, "y": 2288, "w": 140, "h": 102 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 140, "h": 102 }, "sourceSize": { "w": 140, "h": 102 } }, "map-complex-warehouse-floor-05.img": { "frame": { "x": 1318, "y": 2, "w": 522, "h": 932 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1008, "w": 522, "h": 932 }, "sourceSize": { "w": 1296, "h": 2048 } }, "map-crate-02f.img": { "frame": { "x": 3941, "y": 1395, "w": 144, "h": 144 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 144 }, "sourceSize": { "w": 144, "h": 144 } }, "map-crate-18.img": { "frame": { "x": 3228, "y": 2140, "w": 144, "h": 144 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 144 }, "sourceSize": { "w": 144, "h": 144 } }, "map-crate-22.img": { "frame": { "x": 3376, "y": 2140, "w": 144, "h": 144 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 144 }, "sourceSize": { "w": 144, "h": 144 } }, "map-planter-06.img": { "frame": { "x": 1844, "y": 870, "w": 144, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 272 }, "sourceSize": { "w": 144, "h": 272 } }, "map-planter-07.img": { "frame": { "x": 3958, "y": 1784, "w": 100, "h": 100 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 100, "h": 100 }, "sourceSize": { "w": 100, "h": 100 } }, "map-planter-res-02.img": { "frame": { "x": 3982, "y": 2358, "w": 76, "h": 134 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 5, "y": 1, "w": 76, "h": 134 }, "sourceSize": { "w": 86, "h": 136 } }, "map-planter-res-03.img": { "frame": { "x": 2253, "y": 1337, "w": 82, "h": 74 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 6, "w": 82, "h": 74 }, "sourceSize": { "w": 86, "h": 86 } }, "map-statue-03.img": { "frame": { "x": 3246, "y": 1854, "w": 288, "h": 282 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 67, "y": 67, "w": 288, "h": 282 }, "sourceSize": { "w": 416, "h": 416 } }, "map-statue-04.img": { "frame": { "x": 2772, "y": 1922, "w": 288, "h": 282 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 67, "y": 67, "w": 288, "h": 282 }, "sourceSize": { "w": 416, "h": 416 } }, "map-stone-03b.img": { "frame": { "x": 3538, "y": 2034, "w": 276, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 6, "y": 8, "w": 276, "h": 272 }, "sourceSize": { "w": 288, "h": 288 } }, "map-stone-06.img": { "frame": { "x": 3538, "y": 1902, "w": 288, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 288, "h": 128 }, "sourceSize": { "w": 288, "h": 128 } }, "map-stone-res-01b.img": { "frame": { "x": 3958, "y": 1662, "w": 118, "h": 118 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 118, "h": 118 }, "sourceSize": { "w": 120, "h": 120 } }, "map-tree-05c.img": { "frame": { "x": 2772, "y": 1426, "w": 470, "h": 492 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 21, "y": 10, "w": 470, "h": 492 }, "sourceSize": { "w": 512, "h": 512 } }, "map-tree-06.img": { "frame": { "x": 3830, "y": 1902, "w": 256, "h": 256 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 256, "h": 256 }, "sourceSize": { "w": 256, "h": 256 } } } }];
const faction$1 = [{ "meta": { "image": "faction-0-100.png", "size": { "w": 4096, "h": 4096 }, "scale": 1 }, "frames": { "map-airdrop-03.img": { "frame": { "x": 3770, "y": 1461, "w": 256, "h": 256 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 256, "h": 256 }, "sourceSize": { "w": 256, "h": 256 } }, "map-airdrop-04.img": { "frame": { "x": 3770, "y": 1721, "w": 256, "h": 256 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 256, "h": 256 }, "sourceSize": { "w": 256, "h": 256 } }, "map-building-bridge-xlg-floor.img": { "frame": { "x": 2, "y": 2, "w": 2464, "h": 960 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 2464, "h": 960 }, "sourceSize": { "w": 2464, "h": 960 } }, "map-building-greenhouse-ceiling-01.img": { "frame": { "x": 1712, "y": 2020, "w": 401, "h": 314 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 401, "h": 314 }, "sourceSize": { "w": 404, "h": 316 } }, "map-building-greenhouse-floor-01.img": { "frame": { "x": 774, "y": 966, "w": 832, "h": 641 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 832, "h": 641 }, "sourceSize": { "w": 834, "h": 642 } }, "map-bunker-chrys-chamber-ceiling-01.img": { "frame": { "x": 1712, "y": 1744, "w": 448, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 448, "h": 272 }, "sourceSize": { "w": 448, "h": 272 } }, "map-bunker-chrys-chamber-floor-01a.img": { "frame": { "x": 750, "y": 1887, "w": 161, "h": 148 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 34, "y": 32, "w": 161, "h": 148 }, "sourceSize": { "w": 228, "h": 180 } }, "map-bunker-chrys-chamber-floor-01b.img": { "frame": { "x": 2, "y": 2054, "w": 931, "h": 627 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 931, "h": 627 }, "sourceSize": { "w": 932, "h": 628 } }, "map-bunker-chrys-compartment-ceiling-01a.img": { "frame": { "x": 166, "y": 3833, "w": 112, "h": 192 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 112, "h": 192 }, "sourceSize": { "w": 112, "h": 192 } }, "map-bunker-chrys-compartment-ceiling-01b.img": { "frame": { "x": 2, "y": 2685, "w": 354, "h": 368 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 2, "w": 354, "h": 368 }, "sourceSize": { "w": 356, "h": 372 } }, "map-bunker-chrys-compartment-ceiling-02a.img": { "frame": { "x": 522, "y": 1834, "w": 224, "h": 96 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 224, "h": 96 }, "sourceSize": { "w": 224, "h": 96 } }, "map-bunker-chrys-compartment-ceiling-02b.img": { "frame": { "x": 2, "y": 3057, "w": 352, "h": 258 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 0, "w": 352, "h": 258 }, "sourceSize": { "w": 356, "h": 260 } }, "map-bunker-chrys-compartment-ceiling-03a.img": { "frame": { "x": 522, "y": 1934, "w": 224, "h": 96 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 224, "h": 96 }, "sourceSize": { "w": 224, "h": 96 } }, "map-bunker-chrys-compartment-ceiling-03b.img": { "frame": { "x": 2, "y": 3319, "w": 352, "h": 306 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 352, "h": 306 }, "sourceSize": { "w": 356, "h": 308 } }, "map-bunker-chrys-compartment-floor-01a.img": { "frame": { "x": 3770, "y": 2, "w": 228, "h": 611 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 32, "w": 228, "h": 611 }, "sourceSize": { "w": 228, "h": 644 } }, "map-bunker-chrys-compartment-floor-01b.img": { "frame": { "x": 1610, "y": 966, "w": 801, "h": 774 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 801, "h": 774 }, "sourceSize": { "w": 804, "h": 804 } }, "map-bunker-chrys-compartment-floor-02a.img": { "frame": { "x": 937, "y": 1744, "w": 771, "h": 628 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 771, "h": 628 }, "sourceSize": { "w": 772, "h": 628 } }, "map-bunker-chrys-compartment-floor-02b.img": { "frame": { "x": 2, "y": 1834, "w": 516, "h": 180 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 16, "y": 0, "w": 516, "h": 180 }, "sourceSize": { "w": 548, "h": 180 } }, "map-bunker-chrys-compartment-floor-03a.img": { "frame": { "x": 2, "y": 966, "w": 768, "h": 864 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 768, "h": 864 }, "sourceSize": { "w": 768, "h": 864 } }, "map-bunker-generic-ceiling-02.img": { "frame": { "x": 2, "y": 3629, "w": 160, "h": 230 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 230 }, "sourceSize": { "w": 160, "h": 230 } }, "map-bunker-generic-floor-03.img": { "frame": { "x": 2, "y": 3863, "w": 160, "h": 230 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 230 }, "sourceSize": { "w": 160, "h": 230 } }, "map-chest-03f.img": { "frame": { "x": 282, "y": 3981, "w": 140, "h": 102 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 140, "h": 102 }, "sourceSize": { "w": 140, "h": 102 } }, "map-complex-warehouse-floor-01.img": { "frame": { "x": 4030, "y": 1461, "w": 60, "h": 224 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 60, "h": 224 }, "sourceSize": { "w": 60, "h": 224 } }, "map-complex-warehouse-floor-02.img": { "frame": { "x": 4002, "y": 2, "w": 60, "h": 528 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 60, "h": 528 }, "sourceSize": { "w": 60, "h": 528 } }, "map-complex-warehouse-floor-03.img": { "frame": { "x": 4030, "y": 1689, "w": 60, "h": 224 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 60, "h": 224 }, "sourceSize": { "w": 60, "h": 224 } }, "map-complex-warehouse-floor-04.img": { "frame": { "x": 2470, "y": 2, "w": 1296, "h": 2048 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 1296, "h": 2048 }, "sourceSize": { "w": 1296, "h": 2048 } }, "map-crate-02f.img": { "frame": { "x": 282, "y": 3833, "w": 144, "h": 144 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 144 }, "sourceSize": { "w": 144, "h": 144 } }, "map-crate-12.img": { "frame": { "x": 3770, "y": 1981, "w": 240, "h": 240 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 240, "h": 240 }, "sourceSize": { "w": 240, "h": 240 } }, "map-crate-13.img": { "frame": { "x": 2117, "y": 2030, "w": 240, "h": 240 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 240, "h": 240 }, "sourceSize": { "w": 240, "h": 240 } }, "map-crate-22.img": { "frame": { "x": 358, "y": 3057, "w": 144, "h": 144 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 144 }, "sourceSize": { "w": 144, "h": 144 } }, "map-planter-01.img": { "frame": { "x": 774, "y": 1611, "w": 144, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 272 }, "sourceSize": { "w": 144, "h": 272 } }, "map-planter-02.img": { "frame": { "x": 3770, "y": 1185, "w": 144, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 272 }, "sourceSize": { "w": 144, "h": 272 } }, "map-planter-03.img": { "frame": { "x": 3918, "y": 1185, "w": 144, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 272 }, "sourceSize": { "w": 144, "h": 272 } }, "map-planter-04.img": { "frame": { "x": 2361, "y": 2030, "w": 100, "h": 100 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 100, "h": 100 }, "sourceSize": { "w": 100, "h": 100 } }, "map-planter-05.img": { "frame": { "x": 426, "y": 3981, "w": 100, "h": 100 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 100, "h": 100 }, "sourceSize": { "w": 100, "h": 100 } }, "map-planter-res-01.img": { "frame": { "x": 4014, "y": 1981, "w": 76, "h": 134 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 5, "y": 1, "w": 76, "h": 134 }, "sourceSize": { "w": 86, "h": 136 } }, "map-statue-01.img": { "frame": { "x": 2164, "y": 1744, "w": 282, "h": 282 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 67, "y": 67, "w": 282, "h": 282 }, "sourceSize": { "w": 416, "h": 416 } }, "map-statue-top-01.img": { "frame": { "x": 3770, "y": 617, "w": 279, "h": 142 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 131, "y": 133, "w": 279, "h": 142 }, "sourceSize": { "w": 416, "h": 416 } }, "map-statue-top-02.img": { "frame": { "x": 3770, "y": 763, "w": 279, "h": 142 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 131, "y": 133, "w": 279, "h": 142 }, "sourceSize": { "w": 416, "h": 416 } }, "map-stone-03f.img": { "frame": { "x": 3770, "y": 909, "w": 276, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 6, "y": 8, "w": 276, "h": 272 }, "sourceSize": { "w": 288, "h": 288 } }, "map-stone-res-02f.img": { "frame": { "x": 166, "y": 3629, "w": 200, "h": 200 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 200, "h": 200 }, "sourceSize": { "w": 200, "h": 200 } } } }];
const gradient$1 = [{ "meta": { "image": "gradient-0-100.png", "size": { "w": 1024, "h": 1024 }, "scale": 1 }, "frames": { "map-barrel-res-01.img": { "frame": { "x": 2, "y": 264, "w": 227, "h": 218 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 15, "y": 20, "w": 227, "h": 218 }, "sourceSize": { "w": 256, "h": 256 } }, "map-building-club-gradient-01.img": { "frame": { "x": 2, "y": 2, "w": 234, "h": 258 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 33, "y": 9, "w": 234, "h": 258 }, "sourceSize": { "w": 292, "h": 280 } }, "map-building-mansion-gradient-01.img": { "frame": { "x": 240, "y": 2, "w": 234, "h": 204 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 8, "w": 234, "h": 204 }, "sourceSize": { "w": 248, "h": 220 } }, "map-bush-01.img": { "frame": { "x": 770, "y": 280, "w": 126, "h": 130 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 8, "y": 7, "w": 126, "h": 130 }, "sourceSize": { "w": 144, "h": 144 } }, "map-bush-01cb.img": { "frame": { "x": 630, "y": 2, "w": 142, "h": 142 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 142, "h": 142 }, "sourceSize": { "w": 144, "h": 144 } }, "map-bush-03.img": { "frame": { "x": 478, "y": 2, "w": 148, "h": 152 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 0, "w": 148, "h": 152 }, "sourceSize": { "w": 152, "h": 152 } }, "map-bush-04.img": { "frame": { "x": 776, "y": 146, "w": 136, "h": 130 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 9, "w": 136, "h": 130 }, "sourceSize": { "w": 150, "h": 150 } }, "map-bush-04cb.img": { "frame": { "x": 630, "y": 148, "w": 136, "h": 130 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 10, "w": 136, "h": 130 }, "sourceSize": { "w": 150, "h": 150 } }, "map-decal-flyer-01.img": { "frame": { "x": 478, "y": 158, "w": 36, "h": 44 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 6, "y": 2, "w": 36, "h": 44 }, "sourceSize": { "w": 48, "h": 48 } }, "map-light-01.img": { "frame": { "x": 776, "y": 2, "w": 140, "h": 140 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 140, "h": 140 }, "sourceSize": { "w": 144, "h": 144 } }, "map-plane-01.img": { "frame": { "x": 233, "y": 264, "w": 180, "h": 200 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 38, "y": 11, "w": 180, "h": 200 }, "sourceSize": { "w": 256, "h": 256 } }, "map-plane-02.img": { "frame": { "x": 417, "y": 210, "w": 84, "h": 170 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 86, "y": 2, "w": 84, "h": 170 }, "sourceSize": { "w": 256, "h": 256 } } } }];
const halloween$1 = [{ "meta": { "image": "halloween-0-100.png", "size": { "w": 2048, "h": 2048 }, "scale": 1 }, "frames": { "map-airdrop-01h.img": { "frame": { "x": 710, "y": 1e3, "w": 160, "h": 160 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 160 }, "sourceSize": { "w": 160, "h": 160 } }, "map-airdrop-02h.img": { "frame": { "x": 710, "y": 1164, "w": 160, "h": 160 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 160 }, "sourceSize": { "w": 160, "h": 160 } }, "map-bunker-eye-chamber-ceiling-01.img": { "frame": { "x": 2, "y": 1350, "w": 320, "h": 544 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 320, "h": 544 }, "sourceSize": { "w": 320, "h": 544 } }, "map-bunker-eye-chamber-floor-01a.img": { "frame": { "x": 2, "y": 2, "w": 704, "h": 1344 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 32, "w": 704, "h": 1344 }, "sourceSize": { "w": 704, "h": 1376 } }, "map-bunker-eye-chamber-floor-01b.img": { "frame": { "x": 326, "y": 1674, "w": 192, "h": 256 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 192, "h": 256 }, "sourceSize": { "w": 192, "h": 256 } }, "map-bunker-eye-compartment-ceiling-01.img": { "frame": { "x": 326, "y": 1350, "w": 320, "h": 320 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 320, "h": 320 }, "sourceSize": { "w": 320, "h": 320 } }, "map-bunker-eye-compartment-floor-01.img": { "frame": { "x": 710, "y": 2, "w": 704, "h": 704 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 704, "h": 704 }, "sourceSize": { "w": 704, "h": 704 } }, "map-bush-06.img": { "frame": { "x": 650, "y": 1350, "w": 190, "h": 188 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 2, "w": 190, "h": 188 }, "sourceSize": { "w": 192, "h": 192 } }, "map-bush-07sp.img": { "frame": { "x": 152, "y": 1898, "w": 135, "h": 143 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 6, "y": 0, "w": 135, "h": 143 }, "sourceSize": { "w": 144, "h": 144 } }, "map-bush-res-06.img": { "frame": { "x": 1934, "y": 296, "w": 50, "h": 48 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 47, "y": 48, "w": 50, "h": 48 }, "sourceSize": { "w": 144, "h": 144 } }, "map-crate-11h.img": { "frame": { "x": 2, "y": 1898, "w": 146, "h": 146 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 146, "h": 146 }, "sourceSize": { "w": 148, "h": 148 } }, "map-pumpkin-01.img": { "frame": { "x": 866, "y": 710, "w": 140, "h": 140 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 140, "h": 140 }, "sourceSize": { "w": 144, "h": 144 } }, "map-pumpkin-02.img": { "frame": { "x": 866, "y": 854, "w": 140, "h": 140 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 140, "h": 140 }, "sourceSize": { "w": 144, "h": 144 } }, "map-pumpkin-03.img": { "frame": { "x": 291, "y": 1934, "w": 95, "h": 97 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 22, "y": 25, "w": 95, "h": 97 }, "sourceSize": { "w": 144, "h": 144 } }, "map-pumpkin-res-01.img": { "frame": { "x": 1010, "y": 710, "w": 135, "h": 132 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 8, "w": 135, "h": 132 }, "sourceSize": { "w": 144, "h": 144 } }, "map-pumpkin-res-03.img": { "frame": { "x": 1934, "y": 210, "w": 86, "h": 82 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 5, "y": 9, "w": 86, "h": 82 }, "sourceSize": { "w": 96, "h": 96 } }, "map-tree-04h.img": { "frame": { "x": 1934, "y": 2, "w": 112, "h": 112 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 112, "h": 112 }, "sourceSize": { "w": 112, "h": 112 } }, "map-tree-05.img": { "frame": { "x": 1418, "y": 516, "w": 490, "h": 480 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 11, "y": 17, "w": 490, "h": 480 }, "sourceSize": { "w": 512, "h": 512 } }, "map-tree-07.img": { "frame": { "x": 522, "y": 1674, "w": 256, "h": 256 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 256, "h": 256 }, "sourceSize": { "w": 256, "h": 256 } }, "map-tree-08.img": { "frame": { "x": 1418, "y": 2, "w": 512, "h": 510 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 512, "h": 510 }, "sourceSize": { "w": 512, "h": 512 } }, "map-web-01.img": { "frame": { "x": 710, "y": 710, "w": 152, "h": 158 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 152, "h": 158 }, "sourceSize": { "w": 152, "h": 160 } }, "part-airdrop-01h.img": { "frame": { "x": 1934, "y": 118, "w": 88, "h": 88 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 4, "y": 4, "w": 88, "h": 88 }, "sourceSize": { "w": 96, "h": 96 } }, "part-airdrop-02h.img": { "frame": { "x": 390, "y": 1934, "w": 80, "h": 80 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 80 }, "sourceSize": { "w": 80, "h": 80 } } } }];
const loadout$1 = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"loadout-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"acorn.img":{"frame":{"x":2505,"y":1335,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"ammo-12gauge.img":{"frame":{"x":2249,"y":1694,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-308sub.img":{"frame":{"x":2085,"y":1777,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-45acp.img":{"frame":{"x":1969,"y":1884,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-50AE.img":{"frame":{"x":1837,"y":1946,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-556mm.img":{"frame":{"x":1705,"y":1964,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-762mm.img":{"frame":{"x":1573,"y":1982,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-9mm.img":{"frame":{"x":1437,"y":2036,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-box.img":{"frame":{"x":2498,"y":1796,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"ammo-flare.img":{"frame":{"x":2365,"y":1808,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":112},"sourceSize":{"w":128,"h":128}},"audio-off.img":{"frame":{"x":759,"y":842,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"audio-on.img":{"frame":{"x":938,"y":2276,"w":92,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":24,"w":92,"h":80},"sourceSize":{"w":128,"h":128}},"baguette.img":{"frame":{"x":3627,"y":1976,"w":98,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":98,"h":98},"sourceSize":{"w":128,"h":128}},"bugle-final-blue.img":{"frame":{"x":2699,"y":1562,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"bugle-final-red.img":{"frame":{"x":2573,"y":1678,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-blue.img":{"frame":{"x":2368,"y":1340,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"bugle-inspiration-red.img":{"frame":{"x":2242,"y":1419,"w":88,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":6,"w":88,"h":116},"sourceSize":{"w":128,"h":128}},"bullets.img":{"frame":{"x":3784,"y":124,"w":86,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":86,"h":124},"sourceSize":{"w":128,"h":128}},"campfire.img":{"frame":{"x":2403,"y":874,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"candy-corn.img":{"frame":{"x":3657,"y":508,"w":104,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":122},"sourceSize":{"w":128,"h":128}},"cattle.img":{"frame":{"x":3737,"y":1099,"w":118,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":118,"h":112},"sourceSize":{"w":128,"h":128}},"checked.img":{"frame":{"x":2387,"y":262,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"chick.img":{"frame":{"x":2201,"y":1810,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"chicken-dinner.img":{"frame":{"x":1383,"y":1664,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"chicken.img":{"frame":{"x":1637,"y":2265,"w":106,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":23,"w":106,"h":82},"sourceSize":{"w":128,"h":128}},"close.img":{"frame":{"x":1403,"y":1322,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"cobalt.img":{"frame":{"x":2807,"y":1562,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":42,"h":42},"sourceSize":{"w":48,"h":48}},"coconut.img":{"frame":{"x":2307,"y":1924,"w":110,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":19,"w":110,"h":90},"sourceSize":{"w":128,"h":128}},"cog.img":{"frame":{"x":398,"y":2370,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"copy.img":{"frame":{"x":3237,"y":1693,"w":88,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":16,"w":88,"h":96},"sourceSize":{"w":128,"h":128}},"crab.img":{"frame":{"x":3419,"y":1952,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":100,"h":100},"sourceSize":{"w":128,"h":128}},"crosshair.img":{"frame":{"x":3523,"y":2066,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"crown.img":{"frame":{"x":1383,"y":1790,"w":54,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":54,"h":46},"sourceSize":{"w":64,"h":64}},"cupcake.img":{"frame":{"x":3765,"y":633,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"danger.img":{"frame":{"x":3227,"y":991,"w":118,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":10,"w":118,"h":108},"sourceSize":{"w":128,"h":128}},"dc.img":{"frame":{"x":3231,"y":872,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"donut.img":{"frame":{"x":3165,"y":626,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"dot.img":{"frame":{"x":3657,"y":382,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":32,"h":32},"sourceSize":{"w":36,"h":36}},"down.img":{"frame":{"x":1037,"y":2177,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"egg.img":{"frame":{"x":3289,"y":743,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"eggplant.img":{"frame":{"x":1527,"y":2198,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"emote-circle-outer.img":{"frame":{"x":767,"y":330,"w":252,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":252,"h":254},"sourceSize":{"w":256,"h":256}},"emote-medical-healthkit.img":{"frame":{"x":3105,"y":980,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"emote.img":{"frame":{"x":2961,"y":258,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"eye.img":{"frame":{"x":1212,"y":1534,"w":128,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":128,"h":82},"sourceSize":{"w":128,"h":128}},"face-alien.img":{"frame":{"x":2574,"y":262,"w":124,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":125},"sourceSize":{"w":128,"h":128}},"face-angel-treat.img":{"frame":{"x":1441,"y":1790,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"face-angry.img":{"frame":{"x":2483,"y":723,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-bandaged.img":{"frame":{"x":2576,"y":520,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-dab.img":{"frame":{"x":562,"y":1013,"w":144,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":23,"w":144,"h":98},"sourceSize":{"w":144,"h":144}},"face-disappoint.img":{"frame":{"x":2698,"y":391,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-happy.img":{"frame":{"x":2702,"y":261,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-headshot.img":{"frame":{"x":2101,"y":134,"w":127,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":24,"w":127,"h":88},"sourceSize":{"w":128,"h":128}},"face-heart.img":{"frame":{"x":2707,"y":131,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-imp-trick.img":{"frame":{"x":2115,"y":388,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"face-imp.img":{"frame":{"x":2131,"y":226,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":126,"h":124},"sourceSize":{"w":128,"h":128}},"face-joy.img":{"frame":{"x":2762,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-monocle.img":{"frame":{"x":2890,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-picasso.img":{"frame":{"x":3018,"y":2,"w":122,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":122,"h":124},"sourceSize":{"w":128,"h":128}},"face-poo.img":{"frame":{"x":2193,"y":2,"w":126,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":126,"h":127},"sourceSize":{"w":128,"h":128}},"face-sad.img":{"frame":{"x":3144,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sob.img":{"frame":{"x":3272,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-sunglass.img":{"frame":{"x":3400,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"face-thinking.img":{"frame":{"x":2006,"y":651,"w":124,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":126},"sourceSize":{"w":128,"h":128}},"face-upsidedown.img":{"frame":{"x":3528,"y":2,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"fish.img":{"frame":{"x":984,"y":1270,"w":128,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":128,"h":92},"sourceSize":{"w":128,"h":128}},"flag-albania.img":{"frame":{"x":1573,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-algeria.img":{"frame":{"x":1403,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-argentina.img":{"frame":{"x":1270,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-australia.img":{"frame":{"x":1705,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-austria.img":{"frame":{"x":1837,"y":2,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-azerbaijan.img":{"frame":{"x":1573,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belarus.img":{"frame":{"x":1403,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-belgium.img":{"frame":{"x":1270,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bolivia.img":{"frame":{"x":1705,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":1837,"y":134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-brazil.img":{"frame":{"x":1573,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-canada.img":{"frame":{"x":1403,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-chile.img":{"frame":{"x":1227,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-china.img":{"frame":{"x":1023,"y":323,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-colombia.img":{"frame":{"x":1705,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-croatia.img":{"frame":{"x":1837,"y":266,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-czech-republic.img":{"frame":{"x":1023,"y":455,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-denmark.img":{"frame":{"x":1023,"y":587,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-dominican-republic.img":{"frame":{"x":1146,"y":719,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ecuador.img":{"frame":{"x":1227,"y":851,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-egypt.img":{"frame":{"x":1227,"y":983,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-estonia.img":{"frame":{"x":1155,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-finland.img":{"frame":{"x":1155,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-france.img":{"frame":{"x":1278,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-georgia.img":{"frame":{"x":1287,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-germany.img":{"frame":{"x":1287,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-greece.img":{"frame":{"x":1359,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-guatemala.img":{"frame":{"x":1410,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-honduras.img":{"frame":{"x":1359,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hong-kong.img":{"frame":{"x":1361,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-hungary.img":{"frame":{"x":1403,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-india.img":{"frame":{"x":1478,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-indonesia.img":{"frame":{"x":1482,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-israel.img":{"frame":{"x":1515,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-italy.img":{"frame":{"x":1419,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-japan.img":{"frame":{"x":1419,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-kazakhstan.img":{"frame":{"x":1491,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-latvia.img":{"frame":{"x":1491,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-lithuania.img":{"frame":{"x":1542,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-malaysia.img":{"frame":{"x":1493,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-mexico.img":{"frame":{"x":1535,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-moldova.img":{"frame":{"x":1610,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-morocco.img":{"frame":{"x":1614,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-netherlands.img":{"frame":{"x":1551,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-new-zealand.img":{"frame":{"x":1551,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-norway.img":{"frame":{"x":1623,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-palestine.img":{"frame":{"x":1705,"y":1718,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-peru.img":{"frame":{"x":1623,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-philippines.img":{"frame":{"x":1674,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-portugal.img":{"frame":{"x":1625,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-republic-of-poland.img":{"frame":{"x":1667,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-romania.img":{"frame":{"x":1742,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-russia.img":{"frame":{"x":1874,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-serbia.img":{"frame":{"x":1683,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-singapore.img":{"frame":{"x":1683,"y":398,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-slovakia.img":{"frame":{"x":1874,"y":530,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-south-korea.img":{"frame":{"x":1874,"y":662,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-spain.img":{"frame":{"x":1874,"y":794,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-sweden.img":{"frame":{"x":1755,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-switzerland.img":{"frame":{"x":1757,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-taiwan.img":{"frame":{"x":1799,"y":1190,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-thailand.img":{"frame":{"x":1887,"y":926,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-trinidad-and-tobago.img":{"frame":{"x":1889,"y":1058,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-turkey.img":{"frame":{"x":1874,"y":1322,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-ukraine.img":{"frame":{"x":1746,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-arab-emirates.img":{"frame":{"x":1878,"y":1454,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-kingdom.img":{"frame":{"x":1573,"y":1718,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-united-states-of-america.img":{"frame":{"x":1647,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-uruguay.img":{"frame":{"x":1573,"y":1850,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-venezuela.img":{"frame":{"x":1779,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flag-vietnam.img":{"frame":{"x":1911,"y":1586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"flex.img":{"frame":{"x":2893,"y":1286,"w":109,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":109,"h":116},"sourceSize":{"w":128,"h":128}},"forest.img":{"frame":{"x":3391,"y":751,"w":120,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":15,"w":120,"h":98},"sourceSize":{"w":128,"h":128}},"gas.img":{"frame":{"x":2613,"y":1442,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"gg.img":{"frame":{"x":2807,"y":1638,"w":114,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":28,"w":114,"h":72},"sourceSize":{"w":128,"h":128}},"ghost-base.img":{"frame":{"x":2755,"y":1326,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"globe.img":{"frame":{"x":2834,"y":1832,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"gun-an94-01.img":{"frame":{"x":344,"y":592,"w":41,"h":204},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":28,"w":41,"h":204},"sourceSize":{"w":56,"h":232}},"gun-awc-01.img":{"frame":{"x":2,"y":717,"w":45,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":45,"h":226},"sourceSize":{"w":60,"h":236}},"gun-awc-02.img":{"frame":{"x":51,"y":717,"w":45,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":45,"h":226},"sourceSize":{"w":60,"h":236}},"gun-bar-01.img":{"frame":{"x":100,"y":717,"w":59,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":32,"w":59,"h":216},"sourceSize":{"w":176,"h":248}},"gun-bugle-01.img":{"frame":{"x":764,"y":1077,"w":64,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":89,"w":64,"h":143},"sourceSize":{"w":96,"h":232}},"gun-deagle-01.img":{"frame":{"x":4020,"y":122,"w":40,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":108,"w":40,"h":124},"sourceSize":{"w":56,"h":232}},"gun-dp28-01.img":{"frame":{"x":988,"y":2,"w":34,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":4,"w":34,"h":228},"sourceSize":{"w":56,"h":232}},"gun-dp28-top-01.img":{"frame":{"x":354,"y":2458,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":70,"h":70}},"gun-famas-01.img":{"frame":{"x":249,"y":1134,"w":36,"h":166},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":42,"w":36,"h":166},"sourceSize":{"w":48,"h":208}},"gun-flare-01.img":{"frame":{"x":2505,"y":1218,"w":24,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":136,"w":24,"h":96},"sourceSize":{"w":56,"h":232}},"gun-garand-01.img":{"frame":{"x":163,"y":726,"w":32,"h":212},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":20,"w":32,"h":212},"sourceSize":{"w":48,"h":232}},"gun-groza-01.img":{"frame":{"x":425,"y":1170,"w":37,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":62,"w":37,"h":146},"sourceSize":{"w":48,"h":208}},"gun-grozas-01.img":{"frame":{"x":302,"y":938,"w":37,"h":189},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":19,"w":37,"h":189},"sourceSize":{"w":48,"h":208}},"gun-long-01.img":{"frame":{"x":435,"y":922,"w":28,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":184},"sourceSize":{"w":28,"h":184}},"gun-m1014-01.img":{"frame":{"x":389,"y":592,"w":45,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":40,"w":45,"h":192},"sourceSize":{"w":56,"h":232}},"gun-m249-bot-01.img":{"frame":{"x":698,"y":2419,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":40},"sourceSize":{"w":72,"h":40}},"gun-m249-top-01.img":{"frame":{"x":462,"y":508,"w":36,"h":214},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":18,"w":36,"h":214},"sourceSize":{"w":56,"h":232}},"gun-m4a1-01.img":{"frame":{"x":389,"y":788,"w":42,"h":187},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":9,"w":42,"h":187},"sourceSize":{"w":48,"h":196}},"gun-med-01.img":{"frame":{"x":4064,"y":2,"w":28,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":124},"sourceSize":{"w":28,"h":124}},"gun-mp220-01.img":{"frame":{"x":1806,"y":662,"w":38,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":38,"h":128},"sourceSize":{"w":40,"h":128}},"gun-ots38-01.img":{"frame":{"x":175,"y":1163,"w":34,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":132,"w":34,"h":100},"sourceSize":{"w":56,"h":232}},"gun-p30l-01.img":{"frame":{"x":3693,"y":256,"w":31,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":112,"w":31,"h":120},"sourceSize":{"w":56,"h":232}},"gun-pkp-bot-01.img":{"frame":{"x":1278,"y":794,"w":76,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":44},"sourceSize":{"w":76,"h":44}},"gun-pkp-top-01.img":{"frame":{"x":438,"y":726,"w":34,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":40,"w":34,"h":192},"sourceSize":{"w":56,"h":232}},"gun-potato-cannon-01.img":{"frame":{"x":796,"y":44,"w":56,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":248},"sourceSize":{"w":56,"h":248}},"gun-potato-smg-01.img":{"frame":{"x":199,"y":726,"w":99,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":38,"w":99,"h":210},"sourceSize":{"w":176,"h":248}},"gun-potato-smg-top-01.img":{"frame":{"x":222,"y":2488,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":64,"h":64},"sourceSize":{"w":80,"h":80}},"gun-qbb97-bot-01.img":{"frame":{"x":519,"y":1384,"w":60,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":60,"h":30},"sourceSize":{"w":64,"h":32}},"gun-qbb97-top-01.img":{"frame":{"x":213,"y":1134,"w":32,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":40,"w":32,"h":168},"sourceSize":{"w":48,"h":208}},"gun-saiga-01.img":{"frame":{"x":299,"y":1131,"w":40,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":40,"h":174},"sourceSize":{"w":48,"h":196}},"gun-scarssr-01.img":{"frame":{"x":924,"y":2,"w":60,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":248},"sourceSize":{"w":60,"h":248}},"gun-scorpion-01.img":{"frame":{"x":344,"y":800,"w":39,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":39,"h":198},"sourceSize":{"w":48,"h":208}},"gun-short-01.img":{"frame":{"x":3521,"y":386,"w":28,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":96},"sourceSize":{"w":28,"h":96}},"gun-usas-01.img":{"frame":{"x":714,"y":717,"w":41,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":24,"w":41,"h":208},"sourceSize":{"w":56,"h":232}},"gun-vss-01.img":{"frame":{"x":302,"y":726,"w":38,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":38,"h":208},"sourceSize":{"w":48,"h":208}},"hamburger.img":{"frame":{"x":2010,"y":1418,"w":128,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":128,"h":104},"sourceSize":{"w":128,"h":128}},"hatchet.img":{"frame":{"x":2523,"y":851,"w":44,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":44,"h":38},"sourceSize":{"w":48,"h":48}},"heart.img":{"frame":{"x":3656,"y":2,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"hide.img":{"frame":{"x":1101,"y":2044,"w":128,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":128,"h":106},"sourceSize":{"w":128,"h":128}},"ice-cream.img":{"frame":{"x":3565,"y":130,"w":66,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":31,"y":3,"w":66,"h":122},"sourceSize":{"w":128,"h":128}},"indicator.img":{"frame":{"x":1755,"y":794,"w":90,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":0,"w":90,"h":128},"sourceSize":{"w":128,"h":128}},"keyboard.img":{"frame":{"x":2027,"y":2321,"w":104,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":33,"w":104,"h":62},"sourceSize":{"w":128,"h":128}},"leek.img":{"frame":{"x":1403,"y":2268,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"link.img":{"frame":{"x":715,"y":1991,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"loadout-boost.img":{"frame":{"x":3083,"y":1088,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"loadout-crosshair.img":{"frame":{"x":574,"y":2003,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loadout-emote.img":{"frame":{"x":3656,"y":128,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loadout-heal.img":{"frame":{"x":2460,"y":1455,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"loadout-kill-icon.img":{"frame":{"x":3163,"y":750,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"loadout-melee.img":{"frame":{"x":3937,"y":506,"w":123,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":123,"h":121},"sourceSize":{"w":128,"h":128}},"loadout-outfit.img":{"frame":{"x":2334,"y":1460,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loadout-player-icon.img":{"frame":{"x":2085,"y":1893,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"lock.img":{"frame":{"x":2893,"y":1204,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"logo-caduceus.img":{"frame":{"x":1441,"y":1922,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-chrysanthemum.img":{"frame":{"x":969,"y":1931,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-cloud.img":{"frame":{"x":1837,"y":1718,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-conch.img":{"frame":{"x":1837,"y":1832,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-crossing.img":{"frame":{"x":1705,"y":1850,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-egg.img":{"frame":{"x":2,"y":2008,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hatchet.img":{"frame":{"x":1305,"y":2032,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-hydra.img":{"frame":{"x":1931,"y":1190,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-meteor.img":{"frame":{"x":442,"y":2002,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-storm.img":{"frame":{"x":290,"y":2022,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-surviv.img":{"frame":{"x":134,"y":2048,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-swine.img":{"frame":{"x":2,"y":2122,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"logo-twins.img":{"frame":{"x":2006,"y":1304,"w":128,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":128,"h":110},"sourceSize":{"w":128,"h":128}},"loot-ammo-box.img":{"frame":{"x":266,"y":2136,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-chest-01.img":{"frame":{"x":2859,"y":834,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-chest-02.img":{"frame":{"x":1146,"y":851,"w":76,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":4,"w":76,"h":120},"sourceSize":{"w":128,"h":128}},"loot-chest-03.img":{"frame":{"x":3992,"y":1005,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-circle-outer-01.img":{"frame":{"x":710,"y":929,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-02.img":{"frame":{"x":550,"y":1707,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-03.img":{"frame":{"x":466,"y":1170,"w":146,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":146,"h":126},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-04.img":{"frame":{"x":983,"y":1367,"w":140,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":140,"h":133},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-05.img":{"frame":{"x":552,"y":1547,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-circle-outer-06.img":{"frame":{"x":585,"y":1384,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":144,"h":144},"sourceSize":{"w":146,"h":146}},"loot-helmet-01.img":{"frame":{"x":1821,"y":2062,"w":112,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":13,"w":112,"h":102},"sourceSize":{"w":128,"h":128}},"loot-helmet-02.img":{"frame":{"x":3859,"y":1112,"w":118,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":26,"w":118,"h":76},"sourceSize":{"w":128,"h":128}},"loot-helmet-03.img":{"frame":{"x":1689,"y":2080,"w":112,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":21,"w":112,"h":86},"sourceSize":{"w":128,"h":128}},"loot-medical-bandage.img":{"frame":{"x":2163,"y":1539,"w":106,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":6,"w":106,"h":116},"sourceSize":{"w":128,"h":128}},"loot-medical-healthkit.img":{"frame":{"x":2533,"y":1018,"w":118,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":12,"w":118,"h":104},"sourceSize":{"w":128,"h":128}},"loot-medical-heart.img":{"frame":{"x":2735,"y":892,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-medical-pill.img":{"frame":{"x":2411,"y":1124,"w":118,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":19,"w":118,"h":90},"sourceSize":{"w":128,"h":128}},"loot-medical-soda.img":{"frame":{"x":2381,"y":1576,"w":60,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":9,"w":60,"h":110},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-rugged.img":{"frame":{"x":3877,"y":633,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bayonet-woodland.img":{"frame":{"x":3728,"y":256,"w":36,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":5,"w":36,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bonesaw-healer.img":{"frame":{"x":334,"y":1804,"w":60,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":10,"w":60,"h":155},"sourceSize":{"w":168,"h":168}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":342,"y":1561,"w":54,"h":155},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":81,"y":22,"w":54,"h":155},"sourceSize":{"w":192,"h":192}},"loot-melee-bowie-frontier.img":{"frame":{"x":1178,"y":162,"w":42,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":5,"w":42,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-bowie-vintage.img":{"frame":{"x":3765,"y":508,"w":42,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":5,"w":42,"h":118},"sourceSize":{"w":128,"h":128}},"loot-melee-crowbar-recon.img":{"frame":{"x":992,"y":1504,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"loot-melee-crowbar-scout.img":{"frame":{"x":1033,"y":1504,"w":37,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":7,"w":37,"h":138},"sourceSize":{"w":160,"h":160}},"loot-melee-fireaxe.img":{"frame":{"x":136,"y":1968,"w":150,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":150,"h":76},"sourceSize":{"w":152,"h":76}},"loot-melee-hook-silver.img":{"frame":{"x":1224,"y":162,"w":42,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":43,"y":25,"w":42,"h":78},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-burnished.img":{"frame":{"x":4064,"y":130,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-huntsman-rugged.img":{"frame":{"x":668,"y":1263,"w":24,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":52,"y":6,"w":24,"h":116},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-drowned.img":{"frame":{"x":3419,"y":2056,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-prismatic.img":{"frame":{"x":863,"y":1976,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-karambit-rugged.img":{"frame":{"x":1155,"y":662,"w":100,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":43,"w":100,"h":42},"sourceSize":{"w":128,"h":128}},"loot-melee-katana-demo.img":{"frame":{"x":2,"y":947,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-orchid.img":{"frame":{"x":232,"y":508,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana-rusted.img":{"frame":{"x":2,"y":508,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-katana.img":{"frame":{"x":232,"y":550,"w":226,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":226,"h":38},"sourceSize":{"w":230,"h":40}},"loot-melee-knuckles-heroic.img":{"frame":{"x":2480,"y":522,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-knuckles-rusted.img":{"frame":{"x":3583,"y":1604,"w":92,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":35,"w":92,"h":58},"sourceSize":{"w":128,"h":128}},"loot-melee-kukri-sniper.img":{"frame":{"x":1026,"y":2,"w":40,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":2,"w":40,"h":156},"sourceSize":{"w":160,"h":160}},"loot-melee-kukri-trad.img":{"frame":{"x":1070,"y":2,"w":40,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":54,"y":2,"w":40,"h":156},"sourceSize":{"w":160,"h":160}},"loot-melee-machete-taiga.img":{"frame":{"x":249,"y":1304,"w":44,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":3,"w":44,"h":164},"sourceSize":{"w":168,"h":168}},"loot-melee-naginata.img":{"frame":{"x":508,"y":2,"w":345,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":14,"w":345,"h":38},"sourceSize":{"w":350,"h":54}},"loot-melee-pan-black-side.img":{"frame":{"x":1155,"y":224,"w":19,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":55,"y":7,"w":19,"h":113},"sourceSize":{"w":128,"h":128}},"loot-melee-pan-black.img":{"frame":{"x":3859,"y":1192,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":21,"w":118,"h":86},"sourceSize":{"w":128,"h":128}},"loot-melee-sledgehammer.img":{"frame":{"x":1026,"y":162,"w":148,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":58},"sourceSize":{"w":148,"h":58}},"loot-melee-spade-assault.img":{"frame":{"x":367,"y":1186,"w":54,"h":150},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":53,"y":5,"w":54,"h":150},"sourceSize":{"w":160,"h":160}},"loot-melee-stonehammer.img":{"frame":{"x":410,"y":1110,"w":148,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":148,"h":56},"sourceSize":{"w":148,"h":60}},"loot-melee-warhammer-tank.img":{"frame":{"x":508,"y":330,"w":255,"h":131},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":255,"h":131},"sourceSize":{"w":264,"h":152}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":290,"y":1964,"w":148,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":54},"sourceSize":{"w":148,"h":54}},"loot-melee-woodaxe.img":{"frame":{"x":398,"y":1866,"w":148,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":54},"sourceSize":{"w":148,"h":54}},"loot-pack-00.img":{"frame":{"x":2311,"y":1147,"w":90,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":5,"w":90,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-01.img":{"frame":{"x":2043,"y":1646,"w":94,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":6,"w":94,"h":116},"sourceSize":{"w":128,"h":128}},"loot-pack-02.img":{"frame":{"x":2854,"y":1082,"w":88,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":5,"w":88,"h":118},"sourceSize":{"w":128,"h":128}},"loot-pack-03.img":{"frame":{"x":2793,"y":1714,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-perk-aoe-heal.img":{"frame":{"x":2006,"y":520,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"loot-perk-ap-rounds.img":{"frame":{"x":1553,"y":2098,"w":112,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":16,"w":112,"h":96},"sourceSize":{"w":128,"h":128}},"loot-perk-assume-leadership.img":{"frame":{"x":1037,"y":2270,"w":93,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":17,"w":93,"h":94},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-45.img":{"frame":{"x":2983,"y":834,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-9mm.img":{"frame":{"x":2523,"y":894,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-bonus-assault.img":{"frame":{"x":3515,"y":759,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-broken-arrow.img":{"frame":{"x":2381,"y":1692,"w":113,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":5,"w":113,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-chambered.img":{"frame":{"x":3391,"y":853,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-endless-ammo.img":{"frame":{"x":3664,"y":1876,"w":102,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":15,"w":102,"h":96},"sourceSize":{"w":128,"h":128}},"loot-perk-explosive.img":{"frame":{"x":2592,"y":1914,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"loot-perk-fabricate.img":{"frame":{"x":2946,"y":1164,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"loot-perk-field-medic.img":{"frame":{"x":3202,"y":384,"w":98,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":11,"w":98,"h":112},"sourceSize":{"w":128,"h":128}},"loot-perk-final-bugle.img":{"frame":{"x":2273,"y":1576,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-perk-firepower.img":{"frame":{"x":2063,"y":1171,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-flak-jacket.img":{"frame":{"x":2137,"y":2262,"w":102,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":105},"sourceSize":{"w":128,"h":128}},"loot-perk-gotw.img":{"frame":{"x":134,"y":2162,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-halloween-mystery.img":{"frame":{"x":3639,"y":759,"w":108,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":120},"sourceSize":{"w":128,"h":128}},"loot-perk-hotw.img":{"frame":{"x":3977,"y":755,"w":106,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":106,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-hunted.img":{"frame":{"x":3087,"y":258,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-inspiration.img":{"frame":{"x":3325,"y":1221,"w":115,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":4,"w":115,"h":116},"sourceSize":{"w":128,"h":128}},"loot-perk-leadership.img":{"frame":{"x":2,"y":2236,"w":128,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":128,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-martyrdom.img":{"frame":{"x":1747,"y":2280,"w":106,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":13,"w":106,"h":102},"sourceSize":{"w":128,"h":128}},"loot-perk-rare-potato.img":{"frame":{"x":3213,"y":258,"w":90,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":3,"w":90,"h":122},"sourceSize":{"w":128,"h":128}},"loot-perk-scavenger.img":{"frame":{"x":2069,"y":2007,"w":108,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":14,"w":108,"h":100},"sourceSize":{"w":128,"h":128}},"loot-perk-scavenger_adv.img":{"frame":{"x":2655,"y":1124,"w":118,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":27,"w":118,"h":74},"sourceSize":{"w":128,"h":128}},"loot-perk-self-revive.img":{"frame":{"x":2232,"y":133,"w":126,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":31,"w":126,"h":66},"sourceSize":{"w":128,"h":128}},"loot-perk-small-arms.img":{"frame":{"x":2481,"y":1912,"w":107,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":107,"h":111},"sourceSize":{"w":128,"h":128}},"loot-perk-splinter.img":{"frame":{"x":2835,"y":130,"w":116,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":116,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-steelskin.img":{"frame":{"x":733,"y":1411,"w":82,"h":117},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":5,"w":82,"h":117},"sourceSize":{"w":128,"h":128}},"loot-perk-takedown.img":{"frame":{"x":1623,"y":2351,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-targeting.img":{"frame":{"x":2955,"y":130,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-12g.img":{"frame":{"x":3515,"y":867,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-556.img":{"frame":{"x":3751,"y":759,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-762.img":{"frame":{"x":3751,"y":867,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-9mm.img":{"frame":{"x":3875,"y":881,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-treat-super.img":{"frame":{"x":2138,"y":1297,"w":126,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":19,"w":126,"h":90},"sourceSize":{"w":128,"h":128}},"loot-perk-tree-climbing.img":{"frame":{"x":3729,"y":1990,"w":94,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":94,"h":96},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-chatty.img":{"frame":{"x":2834,"y":1908,"w":110,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":10,"w":110,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-drain.img":{"frame":{"x":2533,"y":1126,"w":118,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":22,"w":118,"h":83},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-m9.img":{"frame":{"x":3107,"y":872,"w":120,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":12,"w":120,"h":104},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-nothing.img":{"frame":{"x":2401,"y":2027,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-trick-size.img":{"frame":{"x":2286,"y":2130,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"loot-perk-turkey_shoot.img":{"frame":{"x":2295,"y":2018,"w":102,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":102,"h":108},"sourceSize":{"w":128,"h":128}},"loot-perk-windwalk.img":{"frame":{"x":1023,"y":719,"w":86,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":6,"w":86,"h":119},"sourceSize":{"w":128,"h":128}},"loot-scope-00.img":{"frame":{"x":847,"y":2045,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-01.img":{"frame":{"x":706,"y":2105,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-02.img":{"frame":{"x":554,"y":2135,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-03.img":{"frame":{"x":398,"y":2238,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-scope-04.img":{"frame":{"x":266,"y":2268,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-shirt-01.img":{"frame":{"x":3190,"y":1223,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitBase.img":{"frame":{"x":3444,"y":1221,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCamo.img":{"frame":{"x":3564,"y":1252,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":3444,"y":1337,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":3684,"y":1328,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":3564,"y":1368,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":3804,"y":1404,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":3684,"y":1444,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitDev.img":{"frame":{"x":3924,"y":1493,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitHeaven.img":{"frame":{"x":3804,"y":1520,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":3924,"y":1609,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitLumber.img":{"frame":{"x":3006,"y":1324,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitMod.img":{"frame":{"x":2863,"y":1406,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParma.img":{"frame":{"x":2733,"y":1446,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":3126,"y":1339,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRed.img":{"frame":{"x":2983,"y":1440,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":2853,"y":1522,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":3246,"y":1341,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitTurkey.img":{"frame":{"x":3103,"y":1455,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWheat.img":{"frame":{"x":2973,"y":1556,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWhite.img":{"frame":{"x":3366,"y":1453,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-shirt-outfitWoodland.img":{"frame":{"x":3223,"y":1457,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag-egg.img":{"frame":{"x":2178,"y":2152,"w":94,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":11,"w":94,"h":106},"sourceSize":{"w":128,"h":128}},"loot-throwable-frag.img":{"frame":{"x":3315,"y":1952,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"loot-throwable-mirv.img":{"frame":{"x":3434,"y":511,"w":82,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":8,"w":82,"h":112},"sourceSize":{"w":128,"h":128}},"loot-throwable-potato.img":{"frame":{"x":4000,"y":1958,"w":92,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":12,"w":92,"h":104},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke-egg.img":{"frame":{"x":3823,"y":1756,"w":82,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":82,"h":114},"sourceSize":{"w":128,"h":128}},"loot-throwable-smoke.img":{"frame":{"x":3307,"y":374,"w":84,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":3,"w":84,"h":122},"sourceSize":{"w":128,"h":128}},"loot-throwable-snowball.img":{"frame":{"x":266,"y":2400,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":22,"w":84,"h":84},"sourceSize":{"w":128,"h":128}},"loot-throwable-strobe.img":{"frame":{"x":3237,"y":1807,"w":104,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":23,"w":104,"h":89},"sourceSize":{"w":128,"h":128}},"loot-weapon-ak.img":{"frame":{"x":3639,"y":883,"w":102,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":4,"w":102,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-an94.img":{"frame":{"x":3083,"y":130,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-awc.img":{"frame":{"x":3395,"y":386,"w":122,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":6,"w":122,"h":121},"sourceSize":{"w":128,"h":128}},"loot-weapon-bar.img":{"frame":{"x":2151,"y":1041,"w":126,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":126,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-blr.img":{"frame":{"x":3093,"y":1571,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-bugle.img":{"frame":{"x":3521,"y":509,"w":122,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":7,"w":122,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45-dual.img":{"frame":{"x":2279,"y":911,"w":120,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":120,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-colt45.img":{"frame":{"x":3287,"y":867,"w":96,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":4,"w":96,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle-dual.img":{"frame":{"x":134,"y":2288,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-deagle.img":{"frame":{"x":2141,"y":1659,"w":104,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":7,"w":104,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-dp28.img":{"frame":{"x":2193,"y":1167,"w":114,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":114,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-famas.img":{"frame":{"x":3511,"y":1099,"w":112,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":112,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-fists.img":{"frame":{"x":2511,"y":2027,"w":74,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":24,"w":74,"h":79},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":979,"y":2045,"w":110,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":110,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-flare-gun.img":{"frame":{"x":3486,"y":1484,"w":82,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":82,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-garand.img":{"frame":{"x":1969,"y":1766,"w":112,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":112,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock-dual.img":{"frame":{"x":2830,"y":384,"w":122,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":122,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-glock.img":{"frame":{"x":2201,"y":1926,"w":90,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":9,"w":90,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-groza.img":{"frame":{"x":3101,"y":1811,"w":104,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":14,"w":104,"h":100},"sourceSize":{"w":128,"h":128}},"loot-weapon-grozas.img":{"frame":{"x":2323,"y":2,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-hk416.img":{"frame":{"x":3627,"y":1007,"w":106,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":4,"w":106,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-l86.img":{"frame":{"x":2983,"y":942,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1014.img":{"frame":{"x":2264,"y":648,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1100.img":{"frame":{"x":3869,"y":989,"w":119,"h":119},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":119,"h":119},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911-dual.img":{"frame":{"x":2,"y":2362,"w":128,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":128,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1911.img":{"frame":{"x":3515,"y":975,"w":108,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":4,"w":108,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m1a1.img":{"frame":{"x":3201,"y":130,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-m249.img":{"frame":{"x":2956,"y":384,"w":116,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":116,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-m39.img":{"frame":{"x":2826,"y":498,"w":108,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":108,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-m4a1.img":{"frame":{"x":2243,"y":354,"w":116,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-m870.img":{"frame":{"x":3349,"y":1101,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-cursed.img":{"frame":{"x":2859,"y":958,"w":98,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":98,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9-dual.img":{"frame":{"x":1969,"y":2,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m9.img":{"frame":{"x":3627,"y":1130,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r-dual.img":{"frame":{"x":1969,"y":124,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-m93r.img":{"frame":{"x":1969,"y":256,"w":100,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":0,"w":100,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-mac10.img":{"frame":{"x":3345,"y":1844,"w":103,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":103,"h":104},"sourceSize":{"w":128,"h":128}},"loot-weapon-mk12.img":{"frame":{"x":2704,"y":519,"w":114,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":114,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-mkg45.img":{"frame":{"x":2587,"y":132,"w":116,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":116,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-model94.img":{"frame":{"x":3727,"y":1215,"w":118,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":109},"sourceSize":{"w":128,"h":128}},"loot-weapon-mosin.img":{"frame":{"x":3203,"y":1103,"w":118,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":118,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp220.img":{"frame":{"x":3025,"y":1687,"w":114,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":11,"w":114,"h":106},"sourceSize":{"w":128,"h":128}},"loot-weapon-mp5.img":{"frame":{"x":2901,"y":1790,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38-dual.img":{"frame":{"x":2261,"y":203,"w":122,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":122,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ot38.img":{"frame":{"x":3143,"y":1693,"w":90,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":7,"w":90,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38-dual.img":{"frame":{"x":2006,"y":388,"w":105,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":105,"h":128},"sourceSize":{"w":128,"h":128}},"loot-weapon-ots38.img":{"frame":{"x":2647,"y":894,"w":81,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":4,"w":81,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l-dual.img":{"frame":{"x":3319,"y":130,"w":124,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":124,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-p30l.img":{"frame":{"x":1421,"y":2152,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":8,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-pkp.img":{"frame":{"x":3447,"y":130,"w":114,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":114,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-cannon.img":{"frame":{"x":3076,"y":384,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-potato-smg.img":{"frame":{"x":2647,"y":2,"w":111,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":111,"h":125},"sourceSize":{"w":128,"h":128}},"loot-weapon-qbb97.img":{"frame":{"x":2732,"y":1000,"w":118,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":118,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-saiga.img":{"frame":{"x":3319,"y":246,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-scar.img":{"frame":{"x":3572,"y":1484,"w":104,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":6,"w":104,"h":116},"sourceSize":{"w":128,"h":128}},"loot-weapon-scarssr.img":{"frame":{"x":3565,"y":256,"w":124,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":124,"h":122},"sourceSize":{"w":128,"h":128}},"loot-weapon-scorpion.img":{"frame":{"x":3436,"y":258,"w":113,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":113,"h":124},"sourceSize":{"w":128,"h":128}},"loot-weapon-scout.img":{"frame":{"x":3068,"y":1210,"w":118,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":118,"h":110},"sourceSize":{"w":128,"h":128}},"loot-weapon-spas12.img":{"frame":{"x":3001,"y":1797,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"loot-weapon-sv98.img":{"frame":{"x":3308,"y":621,"w":121,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":121,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-svd.img":{"frame":{"x":2267,"y":484,"w":110,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":110,"h":126},"sourceSize":{"w":128,"h":128}},"loot-weapon-ump9.img":{"frame":{"x":2655,"y":1202,"w":114,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":114,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-usas.img":{"frame":{"x":3433,"y":627,"w":121,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":121,"h":120},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector.img":{"frame":{"x":1093,"y":2154,"w":110,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":8,"w":110,"h":112},"sourceSize":{"w":128,"h":128}},"loot-weapon-vector45.img":{"frame":{"x":3981,"y":1127,"w":104,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":5,"w":104,"h":118},"sourceSize":{"w":128,"h":128}},"loot-weapon-vss.img":{"frame":{"x":2363,"y":333,"w":108,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":108,"h":126},"sourceSize":{"w":128,"h":128}},"loot-xp-bone-01.img":{"frame":{"x":2614,"y":1798,"w":102,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":102,"h":112},"sourceSize":{"w":128,"h":128}},"loot-xp-book-01.img":{"frame":{"x":3981,"y":1249,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-02.img":{"frame":{"x":2533,"y":1213,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-03.img":{"frame":{"x":2405,"y":1218,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-04.img":{"frame":{"x":3849,"y":1282,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-05.img":{"frame":{"x":2268,"y":1297,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-book-06.img":{"frame":{"x":2142,"y":1391,"w":96,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":5,"w":96,"h":118},"sourceSize":{"w":128,"h":128}},"loot-xp-compass-01.img":{"frame":{"x":3624,"y":2078,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":96,"h":96},"sourceSize":{"w":128,"h":128}},"loot-xp-donut-01.img":{"frame":{"x":2706,"y":1944,"w":110,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":110,"h":110},"sourceSize":{"w":128,"h":128}},"loot-xp-glasses-01.img":{"frame":{"x":3452,"y":1844,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"loot-xp-stump-01.img":{"frame":{"x":3949,"y":1371,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"mag-glass.img":{"frame":{"x":2411,"y":1002,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":118,"h":118},"sourceSize":{"w":128,"h":128}},"minimize.img":{"frame":{"x":938,"y":2177,"w":95,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":95,"h":95},"sourceSize":{"w":128,"h":128}},"mobile-gas.img":{"frame":{"x":2363,"y":463,"w":14,"h":13},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":13},"sourceSize":{"w":14,"h":13}},"movement.img":{"frame":{"x":1857,"y":2326,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"news.img":{"frame":{"x":2720,"y":1832,"w":110,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":110,"h":108},"sourceSize":{"w":128,"h":128}},"ok.img":{"frame":{"x":2611,"y":648,"w":84,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":5,"w":84,"h":118},"sourceSize":{"w":128,"h":128}},"pad.img":{"frame":{"x":502,"y":717,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":208},"sourceSize":{"w":208,"h":208}},"part-airdrop-01.img":{"frame":{"x":838,"y":2177,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"part-airdrop-01x.img":{"frame":{"x":686,"y":2237,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"part-airdrop-02.img":{"frame":{"x":136,"y":1640,"w":38,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-02x.img":{"frame":{"x":136,"y":1804,"w":38,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":160},"sourceSize":{"w":38,"h":160}},"part-airdrop-03.img":{"frame":{"x":178,"y":1640,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"part-airdrop-04.img":{"frame":{"x":2073,"y":256,"w":54,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"part-aura-circle-01.img":{"frame":{"x":508,"y":44,"w":284,"h":282},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":284,"h":282},"sourceSize":{"w":288,"h":288}},"part-blossom-01.img":{"frame":{"x":2069,"y":2111,"w":105,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":10,"w":105,"h":108},"sourceSize":{"w":128,"h":128}},"part-blossom-02.img":{"frame":{"x":2592,"y":2026,"w":105,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":10,"w":105,"h":109},"sourceSize":{"w":128,"h":128}},"part-blossom-03.img":{"frame":{"x":2580,"y":1562,"w":115,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":115,"h":112},"sourceSize":{"w":128,"h":128}},"part-blossom-04.img":{"frame":{"x":2454,"y":1575,"w":115,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":115,"h":113},"sourceSize":{"w":128,"h":128}},"part-book-01.img":{"frame":{"x":978,"y":988,"w":104,"h":138},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":3,"w":104,"h":138},"sourceSize":{"w":144,"h":144}},"part-boost-basic.img":{"frame":{"x":2773,"y":1204,"w":116,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":116,"h":118},"sourceSize":{"w":128,"h":128}},"part-boost-naturalize.img":{"frame":{"x":3864,"y":378,"w":92,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":2,"w":92,"h":124},"sourceSize":{"w":128,"h":128}},"part-boost-shuriken.img":{"frame":{"x":3680,"y":1560,"w":116,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":116,"h":112},"sourceSize":{"w":128,"h":128}},"part-boost-star.img":{"frame":{"x":2633,"y":1324,"w":118,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":118,"h":114},"sourceSize":{"w":128,"h":128}},"part-cloth-01.img":{"frame":{"x":774,"y":2441,"w":70,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":72},"sourceSize":{"w":72,"h":72}},"part-feather-01.img":{"frame":{"x":3387,"y":977,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"part-feather-02.img":{"frame":{"x":3745,"y":975,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"part-flare-01.img":{"frame":{"x":882,"y":2360,"w":92,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":92,"h":92},"sourceSize":{"w":100,"h":100}},"part-frag-burst-01.img":{"frame":{"x":1206,"y":2276,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-02.img":{"frame":{"x":1134,"y":2342,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-frag-burst-03.img":{"frame":{"x":398,"y":1924,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"part-frag-lever-01.img":{"frame":{"x":3770,"y":1936,"w":48,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":44,"w":48,"h":40},"sourceSize":{"w":128,"h":128}},"part-frag-pin-01.img":{"frame":{"x":1965,"y":2326,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"part-heal-basic.img":{"frame":{"x":3800,"y":1636,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-heal-heart.img":{"frame":{"x":3343,"y":1569,"w":116,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":12,"w":116,"h":114},"sourceSize":{"w":128,"h":128}},"part-heal-moon.img":{"frame":{"x":3213,"y":1573,"w":112,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":6,"w":112,"h":116},"sourceSize":{"w":128,"h":128}},"part-heal-tomoe.img":{"frame":{"x":3202,"y":500,"w":102,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":102,"h":122},"sourceSize":{"w":128,"h":128}},"part-leaf-01.img":{"frame":{"x":3308,"y":511,"w":122,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":11,"w":122,"h":106},"sourceSize":{"w":128,"h":128}},"part-leaf-01sv.img":{"frame":{"x":1937,"y":2114,"w":108,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":12,"w":108,"h":104},"sourceSize":{"w":128,"h":128}},"part-leaf-02.img":{"frame":{"x":1805,"y":2168,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":108,"h":108},"sourceSize":{"w":128,"h":128}},"part-leaf-03.img":{"frame":{"x":3920,"y":1725,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-04.img":{"frame":{"x":3463,"y":1604,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-05.img":{"frame":{"x":3329,"y":1687,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-leaf-06.img":{"frame":{"x":3583,"y":1676,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"part-log-01.img":{"frame":{"x":3960,"y":378,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"part-note-01.img":{"frame":{"x":2480,"y":392,"w":84,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":84,"h":126},"sourceSize":{"w":128,"h":128}},"part-note-02.img":{"frame":{"x":2101,"y":2,"w":88,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":88,"h":128},"sourceSize":{"w":128,"h":128}},"part-panel-01.img":{"frame":{"x":832,"y":1077,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-plank-01.img":{"frame":{"x":858,"y":842,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"part-plate-01.img":{"frame":{"x":1004,"y":842,"w":138,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":138,"h":132},"sourceSize":{"w":144,"h":144}},"part-pot-01.img":{"frame":{"x":1125,"y":1118,"w":94,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":4,"w":94,"h":136},"sourceSize":{"w":144,"h":144}},"part-potato-01.img":{"frame":{"x":1204,"y":2346,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-potato-02.img":{"frame":{"x":3999,"y":881,"w":94,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":4,"w":94,"h":120},"sourceSize":{"w":128,"h":128}},"part-pulse-01.img":{"frame":{"x":3724,"y":2090,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-pumpkin-01.img":{"frame":{"x":2027,"y":2223,"w":106,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":106,"h":94},"sourceSize":{"w":128,"h":128}},"part-shell-01.img":{"frame":{"x":1245,"y":1902,"w":56,"h":133},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":133},"sourceSize":{"w":56,"h":133}},"part-shell-02.img":{"frame":{"x":232,"y":940,"w":63,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":190},"sourceSize":{"w":63,"h":190}},"part-shell-03.img":{"frame":{"x":343,"y":1002,"w":63,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":180},"sourceSize":{"w":63,"h":180}},"part-shell-04.img":{"frame":{"x":175,"y":1306,"w":55,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":55,"h":164},"sourceSize":{"w":55,"h":164}},"part-shell-05.img":{"frame":{"x":857,"y":2,"w":63,"h":260},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":260},"sourceSize":{"w":63,"h":260}},"part-smoke-01.img":{"frame":{"x":4026,"y":1845,"w":68,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":68,"h":66},"sourceSize":{"w":72,"h":72}},"part-smoke-02.img":{"frame":{"x":508,"y":465,"w":254,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":254,"h":248},"sourceSize":{"w":256,"h":256}},"part-smoke-03.img":{"frame":{"x":766,"y":588,"w":253,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":253,"h":250},"sourceSize":{"w":256,"h":256}},"part-snow-01.img":{"frame":{"x":1134,"y":2270,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":68,"h":68},"sourceSize":{"w":72,"h":72}},"part-spark-01.img":{"frame":{"x":3449,"y":1724,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"part-spark-02.img":{"frame":{"x":3703,"y":1756,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"part-splat-01.img":{"frame":{"x":2568,"y":392,"w":126,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":9,"w":126,"h":124},"sourceSize":{"w":144,"h":144}},"part-splat-02.img":{"frame":{"x":1350,"y":1394,"w":124,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":8,"w":124,"h":130},"sourceSize":{"w":144,"h":144}},"part-splat-03.img":{"frame":{"x":3937,"y":631,"w":123,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":6,"w":123,"h":120},"sourceSize":{"w":144,"h":144}},"part-strobe-01.img":{"frame":{"x":1274,"y":2376,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"part-takedown-01.img":{"frame":{"x":2281,"y":1041,"w":126,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":13,"w":126,"h":102},"sourceSize":{"w":128,"h":128}},"part-wedge-01.img":{"frame":{"x":163,"y":550,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"part-woodchip-01.img":{"frame":{"x":839,"y":1223,"w":141,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":141,"h":140},"sourceSize":{"w":144,"h":144}},"pass.img":{"frame":{"x":2019,"y":911,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"pilgrim-hat.img":{"frame":{"x":2916,"y":635,"w":120,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":20,"w":120,"h":88},"sourceSize":{"w":128,"h":128}},"pineapple.img":{"frame":{"x":1233,"y":2044,"w":68,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":1,"w":68,"h":112},"sourceSize":{"w":128,"h":128}},"ping-border.img":{"frame":{"x":616,"y":1115,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"ping-indicator.img":{"frame":{"x":3703,"y":1676,"w":88,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":60,"w":88,"h":68},"sourceSize":{"w":128,"h":128}},"ping-map-airdrop.img":{"frame":{"x":3366,"y":1341,"w":74,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":10,"w":74,"h":106},"sourceSize":{"w":128,"h":128}},"ping-map-airstrike.img":{"frame":{"x":1178,"y":284,"w":44,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":13,"w":44,"h":103},"sourceSize":{"w":128,"h":128}},"ping-map-coming.img":{"frame":{"x":222,"y":592,"w":112,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":112,"h":128},"sourceSize":{"w":128,"h":256}},"ping-map-danger.img":{"frame":{"x":1359,"y":266,"w":40,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":44,"y":0,"w":40,"h":128},"sourceSize":{"w":128,"h":128}},"ping-map-help.img":{"frame":{"x":3560,"y":1860,"w":100,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":13,"w":100,"h":102},"sourceSize":{"w":128,"h":128}},"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":502,"h":502},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":502,"h":502},"sourceSize":{"w":512,"h":512}},"ping-map-unlock.img":{"frame":{"x":716,"y":2337,"w":60,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":25,"w":60,"h":78},"sourceSize":{"w":128,"h":128}},"ping-map-woods-king.img":{"frame":{"x":786,"y":2277,"w":92,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":22,"w":92,"h":84},"sourceSize":{"w":128,"h":128}},"ping-part-circle-auto-highlight.img":{"frame":{"x":1482,"y":1586,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":29,"h":29},"sourceSize":{"w":29,"h":29}},"ping-part-circle-auto-outer.img":{"frame":{"x":3949,"y":1282,"w":28,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":28,"h":26},"sourceSize":{"w":28,"h":28}},"ping-part-circle-auto.img":{"frame":{"x":1637,"y":2198,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":28},"sourceSize":{"w":28,"h":28}},"ping-part-circle-highlight.img":{"frame":{"x":3949,"y":1312,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-circle.img":{"frame":{"x":1637,"y":2230,"w":28,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":50,"w":28,"h":28},"sourceSize":{"w":128,"h":128}},"ping-part-eighth-highlight.img":{"frame":{"x":1969,"y":1718,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"ping-part-eighth.img":{"frame":{"x":882,"y":2277,"w":51,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":20,"w":51,"h":43},"sourceSize":{"w":128,"h":128}},"ping-part-quarter-highlight.img":{"frame":{"x":624,"y":2337,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"ping-part-quarter.img":{"frame":{"x":530,"y":2366,"w":88,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":1,"w":88,"h":51},"sourceSize":{"w":128,"h":128}},"ping-team-airdrop.img":{"frame":{"x":2124,"y":781,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-airstrike.img":{"frame":{"x":2134,"y":651,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-coming.img":{"frame":{"x":2137,"y":518,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-danger.img":{"frame":{"x":2021,"y":1041,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-help.img":{"frame":{"x":2149,"y":911,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"ping-team-unlock.img":{"frame":{"x":2254,"y":781,"w":126,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":126},"sourceSize":{"w":128,"h":128}},"player-armor-base-01.img":{"frame":{"x":698,"y":1695,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-base-01.img":{"frame":{"x":969,"y":1793,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-02.img":{"frame":{"x":1070,"y":1646,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitDC.img":{"frame":{"x":1074,"y":1504,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitHeaven.img":{"frame":{"x":1127,"y":1258,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitLumber.img":{"frame":{"x":1223,"y":1118,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitParmaPrestige.img":{"frame":{"x":1107,"y":1784,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitSpetsnaz.img":{"frame":{"x":1208,"y":1642,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitTurkey.img":{"frame":{"x":1212,"y":1396,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-base-outfitWheat.img":{"frame":{"x":1265,"y":1256,"w":134,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":134,"h":134},"sourceSize":{"w":140,"h":140}},"player-bullet-trail-02.img":{"frame":{"x":466,"y":1300,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"player-bullet-trail-03.img":{"frame":{"x":136,"y":1341,"w":35,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":35,"h":54},"sourceSize":{"w":36,"h":56}},"player-captain.img":{"frame":{"x":1513,"y":2304,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":21,"w":106,"h":106},"sourceSize":{"w":148,"h":148}},"player-circle-base-01.img":{"frame":{"x":700,"y":1532,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-circle-base-02.img":{"frame":{"x":715,"y":1843,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":144,"h":144},"sourceSize":{"w":148,"h":148}},"player-emote.img":{"frame":{"x":1305,"y":2146,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":9,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-feet-01.img":{"frame":{"x":3209,"y":1811,"w":24,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":24,"h":36},"sourceSize":{"w":38,"h":38}},"player-feet-02.img":{"frame":{"x":786,"y":2237,"w":24,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":24,"h":36},"sourceSize":{"w":38,"h":38}},"player-gui.img":{"frame":{"x":1953,"y":2000,"w":112,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":112,"h":110},"sourceSize":{"w":128,"h":128}},"player-hands-01.img":{"frame":{"x":698,"y":2463,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":72,"h":72},"sourceSize":{"w":76,"h":76}},"player-hands-02.img":{"frame":{"x":486,"y":2421,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":72,"h":72},"sourceSize":{"w":76,"h":76}},"player-helmet-bugler.img":{"frame":{"x":2381,"y":463,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-captain.img":{"frame":{"x":2378,"y":614,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-forest.img":{"frame":{"x":2,"y":989,"w":148,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":176},"sourceSize":{"w":176,"h":176}},"player-helmet-grenadier.img":{"frame":{"x":2384,"y":744,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-last-man-01.img":{"frame":{"x":984,"y":1130,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":20,"w":137,"h":136},"sourceSize":{"w":176,"h":176}},"player-helmet-last-man-02.img":{"frame":{"x":1086,"y":978,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":20,"w":137,"h":136},"sourceSize":{"w":176,"h":176}},"player-helmet-leader.img":{"frame":{"x":2477,"y":593,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-lieutenant.img":{"frame":{"x":2387,"y":132,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-marksman.img":{"frame":{"x":2449,"y":2,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-medic.img":{"frame":{"x":2475,"y":262,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-moon.img":{"frame":{"x":594,"y":1855,"w":117,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":16,"w":117,"h":144},"sourceSize":{"w":176,"h":176}},"player-helmet-potato.img":{"frame":{"x":2486,"y":132,"w":97,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":97,"h":126},"sourceSize":{"w":176,"h":176}},"player-helmet-recon.img":{"frame":{"x":2548,"y":2,"w":95,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":28,"y":25,"w":95,"h":126},"sourceSize":{"w":176,"h":176}},"player-king-woods.img":{"frame":{"x":839,"y":1367,"w":140,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":140,"h":134},"sourceSize":{"w":148,"h":148}},"player-map-downed.img":{"frame":{"x":2777,"y":1124,"w":72,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":7,"w":72,"h":62},"sourceSize":{"w":72,"h":72}},"player-map-inner.img":{"frame":{"x":2511,"y":2110,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-map-outer.img":{"frame":{"x":622,"y":2392,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"player-mash-01.img":{"frame":{"x":988,"y":234,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"player-mash-02.img":{"frame":{"x":519,"y":1300,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"player-mash-03.img":{"frame":{"x":442,"y":1924,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":148,"h":74},"sourceSize":{"w":160,"h":160}},"player-medic.img":{"frame":{"x":2611,"y":770,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":14,"w":120,"h":120},"sourceSize":{"w":148,"h":148}},"player-patch-01.img":{"frame":{"x":3040,"y":759,"w":116,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":71},"sourceSize":{"w":160,"h":160}},"player-patch-02.img":{"frame":{"x":3569,"y":1796,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":1,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"player-patch-blue.img":{"frame":{"x":856,"y":266,"w":116,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":50,"w":116,"h":60},"sourceSize":{"w":160,"h":160}},"player-patch-red.img":{"frame":{"x":858,"y":988,"w":116,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":44,"w":116,"h":72},"sourceSize":{"w":160,"h":160}},"player-ripple-01.img":{"frame":{"x":926,"y":1649,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":140,"h":140},"sourceSize":{"w":142,"h":142}},"player-snow-01.img":{"frame":{"x":270,"y":1472,"w":160,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":85},"sourceSize":{"w":160,"h":160}},"player-snow-02.img":{"frame":{"x":547,"y":929,"w":145,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":145,"h":80},"sourceSize":{"w":160,"h":160}},"player-snow-03.img":{"frame":{"x":367,"y":1340,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":148,"h":74},"sourceSize":{"w":160,"h":160}},"player-star.img":{"frame":{"x":398,"y":1720,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"player-the-hunted.img":{"frame":{"x":848,"y":1505,"w":140,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":140,"h":140},"sourceSize":{"w":144,"h":144}},"player-visor-assault.img":{"frame":{"x":3209,"y":1900,"w":102,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":68,"y":36,"w":102,"h":104},"sourceSize":{"w":176,"h":176}},"player-visor-demo.img":{"frame":{"x":2498,"y":1692,"w":65,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":39,"w":65,"h":98},"sourceSize":{"w":176,"h":176}},"player-visor-healer.img":{"frame":{"x":1127,"y":1396,"w":63,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":95,"y":36,"w":63,"h":104},"sourceSize":{"w":176,"h":176}},"player-visor-scout.img":{"frame":{"x":3784,"y":252,"w":76,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":77,"y":26,"w":76,"h":124},"sourceSize":{"w":176,"h":176}},"player-visor-sniper.img":{"frame":{"x":2181,"y":2040,"w":101,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":65,"y":34,"w":101,"h":108},"sourceSize":{"w":176,"h":176}},"player-visor-tank.img":{"frame":{"x":3823,"y":1874,"w":71,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":85,"y":32,"w":71,"h":112},"sourceSize":{"w":176,"h":176}},"player-wading-01.img":{"frame":{"x":2,"y":1169,"w":169,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":169,"h":168},"sourceSize":{"w":172,"h":172}},"police.img":{"frame":{"x":3553,"y":382,"w":100,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":2,"w":100,"h":123},"sourceSize":{"w":128,"h":128}},"potato.img":{"frame":{"x":3523,"y":1966,"w":100,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":16,"w":100,"h":96},"sourceSize":{"w":128,"h":128}},"proj-bomb-iron-01.img":{"frame":{"x":297,"y":1309,"w":66,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":1,"w":66,"h":158},"sourceSize":{"w":160,"h":160}},"proj-frag-nopin-01.img":{"frame":{"x":3558,"y":634,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-02.img":{"frame":{"x":2938,"y":510,"w":109,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":109,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":3671,"y":634,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":2822,"y":624,"w":90,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":6,"w":90,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-01.img":{"frame":{"x":2704,"y":645,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-02.img":{"frame":{"x":3051,"y":510,"w":110,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":110,"h":121},"sourceSize":{"w":128,"h":128}},"proj-frag-pin-part.img":{"frame":{"x":624,"y":2267,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":35,"y":35,"w":58,"h":58},"sourceSize":{"w":128,"h":128}},"proj-martyrdom-01.img":{"frame":{"x":3693,"y":380,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":124,"h":124},"sourceSize":{"w":128,"h":128}},"proj-mirv-mini-01.img":{"frame":{"x":134,"y":2420,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"proj-mirv-mini-02.img":{"frame":{"x":2,"y":2486,"w":84,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":10,"w":84,"h":76},"sourceSize":{"w":96,"h":96}},"proj-mirv-nopin-nolever.img":{"frame":{"x":846,"y":1680,"w":76,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":76,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-nopin.img":{"frame":{"x":863,"y":1828,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-mirv-pin.img":{"frame":{"x":733,"y":1263,"w":102,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":102,"h":144},"sourceSize":{"w":128,"h":148}},"proj-potato-01.img":{"frame":{"x":1207,"y":2160,"w":94,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":8,"w":94,"h":112},"sourceSize":{"w":128,"h":128}},"proj-potato-02.img":{"frame":{"x":1305,"y":2260,"w":94,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":8,"w":94,"h":112},"sourceSize":{"w":128,"h":128}},"proj-smoke-nopin-nolever.img":{"frame":{"x":467,"y":929,"w":76,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":7,"w":76,"h":146},"sourceSize":{"w":160,"h":160}},"proj-smoke-nopin.img":{"frame":{"x":1114,"y":2,"w":152,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":152,"h":156},"sourceSize":{"w":160,"h":160}},"proj-smoke-pin.img":{"frame":{"x":178,"y":1804,"w":152,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":152,"h":156},"sourceSize":{"w":160,"h":160}},"proj-snowball-01.img":{"frame":{"x":2396,"y":2137,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-snowball-02.img":{"frame":{"x":2276,"y":2240,"w":106,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":106,"h":106},"sourceSize":{"w":128,"h":128}},"proj-strobe-armed.img":{"frame":{"x":1107,"y":1922,"w":134,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":26,"w":134,"h":118},"sourceSize":{"w":160,"h":160}},"proj-strobe-arming.img":{"frame":{"x":1245,"y":1780,"w":134,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":26,"w":134,"h":118},"sourceSize":{"w":160,"h":160}},"proj-strobe-unarmed.img":{"frame":{"x":434,"y":1418,"w":147,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":25,"w":147,"h":125},"sourceSize":{"w":160,"h":160}},"proj-wedge-01.img":{"frame":{"x":154,"y":989,"w":55,"h":170},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":170},"sourceSize":{"w":63,"h":180}},"pumpkin-play.img":{"frame":{"x":550,"y":1855,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"pumpkin.img":{"frame":{"x":2681,"y":1680,"w":108,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":7,"w":108,"h":114},"sourceSize":{"w":128,"h":128}},"question.img":{"frame":{"x":2655,"y":1018,"w":68,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":13,"w":68,"h":102},"sourceSize":{"w":128,"h":128}},"quit.img":{"frame":{"x":270,"y":1561,"w":68,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":28,"w":68,"h":72},"sourceSize":{"w":128,"h":128}},"rainbow.img":{"frame":{"x":3040,"y":635,"w":119,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":119,"h":120},"sourceSize":{"w":128,"h":128}},"reload.img":{"frame":{"x":3874,"y":250,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"resume.img":{"frame":{"x":3827,"y":1990,"w":64,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":31,"w":64,"h":66},"sourceSize":{"w":128,"h":128}},"ribbon-blue.img":{"frame":{"x":1733,"y":2386,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"ribbon-red.img":{"frame":{"x":3898,"y":1958,"w":98,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":22,"w":98,"h":104},"sourceSize":{"w":148,"h":148}},"role-assault.img":{"frame":{"x":2,"y":1341,"w":130,"h":165},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":165},"sourceSize":{"w":176,"h":176}},"role-demo.img":{"frame":{"x":2,"y":550,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-healer.img":{"frame":{"x":2,"y":1510,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-scout.img":{"frame":{"x":2,"y":1676,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-sniper.img":{"frame":{"x":2,"y":1842,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"role-tank.img":{"frame":{"x":136,"y":1474,"w":130,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":6,"w":130,"h":162},"sourceSize":{"w":176,"h":176}},"salt.img":{"frame":{"x":3784,"y":2,"w":124,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":124,"h":118},"sourceSize":{"w":128,"h":128}},"santa-hat.img":{"frame":{"x":3909,"y":1845,"w":113,"h":109},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":113,"h":109},"sourceSize":{"w":128,"h":128}},"skull-leader.img":{"frame":{"x":530,"y":2267,"w":90,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":90,"h":95},"sourceSize":{"w":96,"h":96}},"skull-outlined.img":{"frame":{"x":342,"y":1720,"w":52,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":60},"sourceSize":{"w":64,"h":64}},"skull-team.img":{"frame":{"x":3770,"y":1876,"w":48,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":48,"h":56},"sourceSize":{"w":64,"h":64}},"skull.img":{"frame":{"x":2735,"y":770,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":120,"h":118},"sourceSize":{"w":128,"h":128}},"sleepy.img":{"frame":{"x":3912,"y":2,"w":124,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":124,"h":116},"sourceSize":{"w":128,"h":128}},"snowflake.img":{"frame":{"x":2006,"y":781,"w":114,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":114,"h":126},"sourceSize":{"w":128,"h":128}},"snowman.img":{"frame":{"x":3877,"y":755,"w":96,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":3,"w":96,"h":122},"sourceSize":{"w":128,"h":128}},"star-blue.img":{"frame":{"x":1305,"y":1902,"w":132,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":132,"h":126},"sourceSize":{"w":148,"h":148}},"star-red.img":{"frame":{"x":1346,"y":1534,"w":132,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":132,"h":126},"sourceSize":{"w":148,"h":148}},"star.img":{"frame":{"x":400,"y":1561,"w":148,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":148,"h":142},"sourceSize":{"w":148,"h":148}},"submit.img":{"frame":{"x":3827,"y":2060,"w":66,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":66,"h":66},"sourceSize":{"w":72,"h":72}},"surviv.img":{"frame":{"x":2835,"y":258,"w":122,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":122,"h":122},"sourceSize":{"w":128,"h":128}},"tap.img":{"frame":{"x":2925,"y":1672,"w":96,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":7,"w":96,"h":114},"sourceSize":{"w":128,"h":128}},"target.img":{"frame":{"x":2043,"y":1526,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"teabag.img":{"frame":{"x":1669,"y":2170,"w":107,"h":91},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":19,"w":107,"h":91},"sourceSize":{"w":128,"h":128}},"thumbs-up.img":{"frame":{"x":3912,"y":122,"w":104,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":104,"h":124},"sourceSize":{"w":128,"h":128}},"timer-background.img":{"frame":{"x":780,"y":2365,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"timer.img":{"frame":{"x":422,"y":2116,"w":128,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":128,"h":118},"sourceSize":{"w":128,"h":128}},"tombstone.img":{"frame":{"x":3821,"y":506,"w":112,"h":123},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":112,"h":123},"sourceSize":{"w":128,"h":128}},"trash.img":{"frame":{"x":3986,"y":250,"w":108,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":108,"h":124},"sourceSize":{"w":128,"h":128}},"trunk.img":{"frame":{"x":1917,"y":2222,"w":106,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":14,"w":106,"h":100},"sourceSize":{"w":128,"h":128}},"turkey-animal.img":{"frame":{"x":2916,"y":727,"w":120,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":103},"sourceSize":{"w":128,"h":128}},"unlock.img":{"frame":{"x":2948,"y":1908,"w":48,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":48,"h":64},"sourceSize":{"w":64,"h":64}},"whale.img":{"frame":{"x":2961,"y":1066,"w":118,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":17,"w":118,"h":94},"sourceSize":{"w":128,"h":128}}}}]');
const main$1 = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"main-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-greenhouse-ceiling-01.img":{"frame":{"x":710,"y":3733,"w":401,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":401,"h":314},"sourceSize":{"w":404,"h":316}},"map-building-greenhouse-floor-01.img":{"frame":{"x":2,"y":1811,"w":832,"h":641},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":641},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":3641,"y":2922,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1918,"y":3333,"w":161,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":161,"h":148},"sourceSize":{"w":228,"h":180}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":2841,"y":934,"w":931,"h":627},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":931,"h":627},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1662,"y":3871,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":2473,"y":1178,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1462,"y":3399,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1439,"y":3609,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1690,"y":3399,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1462,"y":3089,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3863,"y":2307,"w":228,"h":611},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":228,"h":611},"sourceSize":{"w":228,"h":644}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":838,"y":1811,"w":801,"h":774},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":801,"h":774},"sourceSize":{"w":804,"h":804}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":2456,"w":771,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":771,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":2447,"y":2631,"w":516,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":0,"w":516,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1701,"y":1178,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1058,"y":3089,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":1701,"y":934,"w":1136,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1136,"h":240},"sourceSize":{"w":1136,"h":240}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":1829,"h":353},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1829,"h":353},"sourceSize":{"w":1830,"h":354}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":2447,"y":2433,"w":610,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":610,"h":194},"sourceSize":{"w":610,"h":194}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":1439,"y":3871,"w":219,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":219,"h":193},"sourceSize":{"w":230,"h":194}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":3832,"w":704,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":320,"w":704,"h":254},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2447,"y":2177,"w":704,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":322,"w":704,"h":252},"sourceSize":{"w":736,"h":576}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1701,"y":359,"w":128,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":304},"sourceSize":{"w":128,"h":304}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":777,"y":2589,"w":720,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":496},"sourceSize":{"w":720,"h":496}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":1835,"y":2,"w":1504,"h":928},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1504,"h":928},"sourceSize":{"w":1504,"h":928}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":3776,"y":804,"w":318,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":318,"h":608},"sourceSize":{"w":320,"h":608}},"map-bunker-crossing-floor-01.img":{"frame":{"x":2021,"y":2706,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1255,"y":3089,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":2239,"y":3766,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":3641,"y":3198,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1697,"y":2706,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1501,"y":2706,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1058,"y":3333,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1818,"y":3054,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":3341,"y":1565,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":2,"y":3088,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3343,"y":2,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1115,"y":3609,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1643,"y":2046,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1795,"y":3506,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":350,"y":3089,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":359,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":3155,"y":2307,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":2473,"y":1565,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":2379,"y":3506,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-complex-warehouse-floor-01.img":{"frame":{"x":2379,"y":2706,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":3061,"y":2433,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2967,"y":2631,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-planter-01.img":{"frame":{"x":1795,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-02.img":{"frame":{"x":1943,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-03.img":{"frame":{"x":2091,"y":3780,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-04.img":{"frame":{"x":1462,"y":3499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-05.img":{"frame":{"x":1566,"y":3499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-01.img":{"frame":{"x":1818,"y":3252,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-tree-07sp.img":{"frame":{"x":2119,"y":3506,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08sp.img":{"frame":{"x":3125,"y":2819,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}}}}]');
const potato$1 = [{ "meta": { "image": "potato-0-100.png", "size": { "w": 2048, "h": 2048 }, "scale": 1 }, "frames": { "map-building-shilo-ceiling-01.img": { "frame": { "x": 2, "y": 2, "w": 960, "h": 768 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 960, "h": 768 }, "sourceSize": { "w": 960, "h": 768 } }, "map-building-shilo-floor-01.img": { "frame": { "x": 966, "y": 2, "w": 960, "h": 768 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 960, "h": 768 }, "sourceSize": { "w": 960, "h": 768 } }, "map-egg-01.img": { "frame": { "x": 1930, "y": 2, "w": 94, "h": 122 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 15, "y": 1, "w": 94, "h": 122 }, "sourceSize": { "w": 124, "h": 124 } }, "map-egg-02.img": { "frame": { "x": 1930, "y": 128, "w": 94, "h": 122 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 15, "y": 1, "w": 94, "h": 122 }, "sourceSize": { "w": 124, "h": 124 } }, "map-egg-03.img": { "frame": { "x": 1930, "y": 254, "w": 94, "h": 122 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 15, "y": 1, "w": 94, "h": 122 }, "sourceSize": { "w": 124, "h": 124 } }, "map-egg-04.img": { "frame": { "x": 1930, "y": 380, "w": 94, "h": 122 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 15, "y": 1, "w": 94, "h": 122 }, "sourceSize": { "w": 124, "h": 124 } }, "map-egg-res-01.img": { "frame": { "x": 1930, "y": 506, "w": 92, "h": 88 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 4, "y": 6, "w": 92, "h": 88 }, "sourceSize": { "w": 100, "h": 100 } }, "map-potato-01.img": { "frame": { "x": 1930, "y": 685, "w": 72, "h": 70 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 72, "h": 70 }, "sourceSize": { "w": 72, "h": 72 } }, "map-potato-02.img": { "frame": { "x": 1930, "y": 759, "w": 72, "h": 70 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 72, "h": 70 }, "sourceSize": { "w": 72, "h": 72 } }, "map-potato-03.img": { "frame": { "x": 2, "y": 833, "w": 72, "h": 70 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 72, "h": 70 }, "sourceSize": { "w": 72, "h": 72 } }, "map-potato-res-01.img": { "frame": { "x": 1930, "y": 598, "w": 85, "h": 83 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 29, "y": 36, "w": 85, "h": 83 }, "sourceSize": { "w": 144, "h": 144 } } } }];
const savannah$1 = [{ "meta": { "image": "savannah-0-100.png", "size": { "w": 2048, "h": 2048 }, "scale": 1 }, "frames": { "map-brush-01sv.img": { "frame": { "x": 326, "y": 1373, "w": 186, "h": 184 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 4, "w": 186, "h": 184 }, "sourceSize": { "w": 192, "h": 192 } }, "map-brush-02sv.img": { "frame": { "x": 369, "y": 1024, "w": 182, "h": 184 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 5, "y": 4, "w": 182, "h": 184 }, "sourceSize": { "w": 192, "h": 192 } }, "map-brush-res-02sv.img": { "frame": { "x": 433, "y": 1967, "w": 62, "h": 62 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 17, "y": 17, "w": 62, "h": 62 }, "sourceSize": { "w": 96, "h": 96 } }, "map-building-perch-ceiling.img": { "frame": { "x": 2, "y": 1024, "w": 363, "h": 345 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 14, "y": 23, "w": 363, "h": 345 }, "sourceSize": { "w": 400, "h": 384 } }, "map-building-perch-floor.img": { "frame": { "x": 578, "y": 418, "w": 400, "h": 320 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 400, "h": 320 }, "sourceSize": { "w": 400, "h": 320 } }, "map-bunker-generic-ceiling-02.img": { "frame": { "x": 26, "y": 1633, "w": 160, "h": 230 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 230 }, "sourceSize": { "w": 160, "h": 230 } }, "map-bunker-generic-floor-03.img": { "frame": { "x": 190, "y": 1633, "w": 160, "h": 230 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 230 }, "sourceSize": { "w": 160, "h": 230 } }, "map-bush-01sv.img": { "frame": { "x": 206, "y": 1867, "w": 140, "h": 140 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 140, "h": 140 }, "sourceSize": { "w": 144, "h": 144 } }, "map-bush-res-01sv.img": { "frame": { "x": 206, "y": 2011, "w": 44, "h": 34 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 50, "y": 55, "w": 44, "h": 34 }, "sourceSize": { "w": 144, "h": 144 } }, "map-complex-warehouse-floor-01.img": { "frame": { "x": 2, "y": 794, "w": 60, "h": 224 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 60, "h": 224 }, "sourceSize": { "w": 60, "h": 224 } }, "map-complex-warehouse-floor-02.img": { "frame": { "x": 2, "y": 2, "w": 60, "h": 528 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 60, "h": 528 }, "sourceSize": { "w": 60, "h": 528 } }, "map-complex-warehouse-floor-03.img": { "frame": { "x": 262, "y": 1373, "w": 60, "h": 224 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 60, "h": 224 }, "sourceSize": { "w": 60, "h": 224 } }, "map-crate-21.img": { "frame": { "x": 369, "y": 1212, "w": 144, "h": 144 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 144 }, "sourceSize": { "w": 144, "h": 144 } }, "map-perch-res-01.img": { "frame": { "x": 26, "y": 1867, "w": 176, "h": 158 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 40, "y": 49, "w": 176, "h": 158 }, "sourceSize": { "w": 256, "h": 256 } }, "map-propane-01.img": { "frame": { "x": 350, "y": 1867, "w": 96, "h": 96 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 96, "h": 96 }, "sourceSize": { "w": 96, "h": 96 } }, "map-stone-07.img": { "frame": { "x": 66, "y": 514, "w": 504, "h": 506 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 4, "y": 3, "w": 504, "h": 506 }, "sourceSize": { "w": 512, "h": 512 } }, "map-stone-res-07.img": { "frame": { "x": 578, "y": 2, "w": 410, "h": 412 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 5, "y": 4, "w": 410, "h": 412 }, "sourceSize": { "w": 420, "h": 420 } }, "map-tree-03sv.img": { "frame": { "x": 2, "y": 1373, "w": 256, "h": 256 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 256, "h": 256 }, "sourceSize": { "w": 256, "h": 256 } }, "map-tree-12.img": { "frame": { "x": 66, "y": 2, "w": 508, "h": 508 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 508, "h": 508 }, "sourceSize": { "w": 512, "h": 512 } }, "map-tree-res-12.img": { "frame": { "x": 350, "y": 1967, "w": 79, "h": 71 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 8, "y": 13, "w": 79, "h": 71 }, "sourceSize": { "w": 96, "h": 96 } }, "map-wall-03-grassy-res.img": { "frame": { "x": 2, "y": 1889, "w": 20, "h": 92 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 22, "y": 2, "w": 20, "h": 92 }, "sourceSize": { "w": 64, "h": 96 } }, "map-wall-03-grassy.img": { "frame": { "x": 354, "y": 1561, "w": 34, "h": 96 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 15, "y": 0, "w": 34, "h": 96 }, "sourceSize": { "w": 64, "h": 96 } }, "map-wall-08-grassy-res.img": { "frame": { "x": 2, "y": 1633, "w": 20, "h": 252 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 22, "y": 2, "w": 20, "h": 252 }, "sourceSize": { "w": 64, "h": 256 } }, "map-wall-08-grassy.img": { "frame": { "x": 2, "y": 534, "w": 45, "h": 256 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 0, "w": 45, "h": 256 }, "sourceSize": { "w": 64, "h": 256 } } } }];
const shared$1 = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"shared-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-barrel-03.img":{"frame":{"x":2182,"y":4056,"w":89,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-barrel-04.img":{"frame":{"x":2275,"y":4056,"w":89,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":89,"h":35},"sourceSize":{"w":89,"h":35}},"map-barrel-res-03.img":{"frame":{"x":2368,"y":4040,"w":76,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":86,"w":76,"h":52},"sourceSize":{"w":144,"h":144}},"map-bathhouse-pool-01.img":{"frame":{"x":1076,"y":3536,"w":38,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":63},"sourceSize":{"w":38,"h":63}},"map-bookshelf-01.img":{"frame":{"x":506,"y":4014,"w":224,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-bookshelf-02.img":{"frame":{"x":734,"y":4014,"w":224,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":64},"sourceSize":{"w":224,"h":64}},"map-bottle-01.img":{"frame":{"x":1269,"y":3590,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-02.img":{"frame":{"x":1357,"y":3588,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-03.img":{"frame":{"x":1393,"y":3588,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-04.img":{"frame":{"x":2638,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-bottle-05.img":{"frame":{"x":2674,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-building-bank-floor-01.img":{"frame":{"x":2118,"y":1224,"w":1696,"h":802},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1696,"h":802},"sourceSize":{"w":1696,"h":802}},"map-building-bank-window-res-01.img":{"frame":{"x":3758,"y":3067,"w":44,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":55,"w":44,"h":43},"sourceSize":{"w":144,"h":144}},"map-building-barn-basement-stairs.img":{"frame":{"x":3758,"y":2579,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-barn-floor-01.img":{"frame":{"x":2,"y":1574,"w":1600,"h":1088},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1600,"h":1088},"sourceSize":{"w":1600,"h":1088}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":1606,"y":2030,"w":1432,"h":1592},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1432,"h":1592},"sourceSize":{"w":1432,"h":1592}},"map-building-boarded-window-01.img":{"frame":{"x":3947,"y":1097,"w":44,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":7,"w":44,"h":113},"sourceSize":{"w":48,"h":128}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":1770,"y":1942,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":74},"sourceSize":{"w":148,"h":76}},"map-building-club-floor-01c.img":{"frame":{"x":2,"y":2666,"w":1442,"h":866},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1442,"h":866},"sourceSize":{"w":1442,"h":866}},"map-building-container-ceiling-01.img":{"frame":{"x":3574,"y":2030,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-floor-01.img":{"frame":{"x":3574,"y":2579,"w":180,"h":531},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":531},"sourceSize":{"w":180,"h":536}},"map-building-container-open-floor.img":{"frame":{"x":3818,"y":1224,"w":180,"h":684},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":180,"h":684},"sourceSize":{"w":180,"h":692}},"map-building-dock-floor-01b.img":{"frame":{"x":3818,"y":1912,"w":162,"h":663},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":162,"h":663},"sourceSize":{"w":162,"h":664}},"map-building-hut-floor-02.img":{"frame":{"x":3947,"y":2,"w":130,"h":767},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":130,"h":767},"sourceSize":{"w":136,"h":768}},"map-building-mansion-floor-01b.img":{"frame":{"x":2118,"y":2,"w":1825,"h":1218},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":1825,"h":1218},"sourceSize":{"w":1826,"h":1218}},"map-building-mansion-floor-01d.img":{"frame":{"x":2640,"y":3626,"w":1089,"h":186},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":1089,"h":186},"sourceSize":{"w":1090,"h":194}},"map-building-police-ceiling-01.img":{"frame":{"x":3042,"y":3114,"w":1008,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1008,"h":480},"sourceSize":{"w":1008,"h":480}},"map-building-police-ceiling-02.img":{"frame":{"x":3042,"y":2030,"w":528,"h":1080},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":528,"h":1080},"sourceSize":{"w":528,"h":1080}},"map-building-police-floor-01.img":{"frame":{"x":2,"y":2,"w":2112,"h":1568},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":2112,"h":1568},"sourceSize":{"w":2112,"h":1568}},"map-building-porch-01.img":{"frame":{"x":3574,"y":2507,"w":128,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":64},"sourceSize":{"w":128,"h":64}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":1606,"y":1574,"w":496,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":496,"h":192},"sourceSize":{"w":496,"h":192}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":2,"y":3626,"w":1394,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":42,"w":1394,"h":384},"sourceSize":{"w":1520,"h":432}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":1400,"y":3626,"w":1236,"h":410},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":27,"w":1236,"h":410},"sourceSize":{"w":1304,"h":464}},"map-bunker-conch-floor-01.img":{"frame":{"x":3328,"y":3816,"w":580,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":580,"h":252},"sourceSize":{"w":600,"h":256}},"map-bunker-vent-01.img":{"frame":{"x":401,"y":3536,"w":82,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":82,"h":84},"sourceSize":{"w":84,"h":84}},"map-bunker-vent-02.img":{"frame":{"x":3912,"y":3960,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-bush-res-01.img":{"frame":{"x":2582,"y":4040,"w":52,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":46,"y":48,"w":52,"h":48},"sourceSize":{"w":144,"h":144}},"map-bush-res-02.img":{"frame":{"x":1118,"y":3536,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":45,"w":59,"h":60},"sourceSize":{"w":144,"h":144}},"map-bush-res-04.img":{"frame":{"x":1323,"y":3536,"w":48,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":48,"h":46},"sourceSize":{"w":54,"h":54}},"map-candle-01.img":{"frame":{"x":1269,"y":3536,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":50,"h":50},"sourceSize":{"w":52,"h":52}},"map-club-bar-01.img":{"frame":{"x":3758,"y":2030,"w":54,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":480},"sourceSize":{"w":54,"h":480}},"map-column-01.img":{"frame":{"x":972,"y":3536,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-couch-01.img":{"frame":{"x":3758,"y":2967,"w":288,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":96},"sourceSize":{"w":288,"h":96}},"map-couch-res-01.img":{"frame":{"x":317,"y":3536,"w":80,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":5,"w":80,"h":86},"sourceSize":{"w":96,"h":96}},"map-crate-mil-01.img":{"frame":{"x":3574,"y":2414,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-decal-club-02.img":{"frame":{"x":3912,"y":3598,"w":100,"h":358},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":100,"h":358},"sourceSize":{"w":104,"h":360}},"map-decal-oil-04.img":{"frame":{"x":2524,"y":4040,"w":54,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":54,"h":48},"sourceSize":{"w":64,"h":64}},"map-decal-oil-05.img":{"frame":{"x":1181,"y":3536,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":4,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"map-decal-oil-06.img":{"frame":{"x":122,"y":3536,"w":94,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":21,"w":94,"h":86},"sourceSize":{"w":128,"h":128}},"map-deposit-box-01.img":{"frame":{"x":1158,"y":4014,"w":160,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-deposit-box-02.img":{"frame":{"x":1606,"y":1942,"w":160,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":74},"sourceSize":{"w":160,"h":74}},"map-door-01.img":{"frame":{"x":1578,"y":3466,"w":24,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-drawers-res.img":{"frame":{"x":3706,"y":2514,"w":93,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":93,"h":57},"sourceSize":{"w":96,"h":64}},"map-fire-ext-01.img":{"frame":{"x":575,"y":3536,"w":83,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":83,"h":65},"sourceSize":{"w":84,"h":70}},"map-fire-ext-res.img":{"frame":{"x":1219,"y":3536,"w":46,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":36,"y":8,"w":46,"h":56},"sourceSize":{"w":84,"h":70}},"map-gun-mount-01.img":{"frame":{"x":1322,"y":4040,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-gun-mount-02.img":{"frame":{"x":1618,"y":4040,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-03.img":{"frame":{"x":1750,"y":4040,"w":128,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":44},"sourceSize":{"w":128,"h":56}},"map-gun-mount-04.img":{"frame":{"x":1922,"y":1942,"w":128,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":56},"sourceSize":{"w":128,"h":56}},"map-gun-mount-05.img":{"frame":{"x":1470,"y":4040,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":56}},"map-locker-01.img":{"frame":{"x":1882,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-02.img":{"frame":{"x":1982,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-locker-03.img":{"frame":{"x":2082,"y":4040,"w":96,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":49},"sourceSize":{"w":96,"h":50}},"map-piano-01.img":{"frame":{"x":262,"y":4014,"w":240,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":75},"sourceSize":{"w":240,"h":75}},"map-pipes-01.img":{"frame":{"x":1448,"y":3318,"w":90,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":288},"sourceSize":{"w":90,"h":288}},"map-pipes-03.img":{"frame":{"x":2640,"y":3816,"w":684,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":684,"h":236},"sourceSize":{"w":684,"h":236}},"map-pipes-04.img":{"frame":{"x":1448,"y":2666,"w":88,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":352},"sourceSize":{"w":88,"h":352}},"map-pot-res-01.img":{"frame":{"x":662,"y":3536,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":80,"h":80},"sourceSize":{"w":144,"h":144}},"map-potato-res.img":{"frame":{"x":910,"y":3536,"w":58,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":14,"w":58,"h":68},"sourceSize":{"w":96,"h":96}},"map-power-box-01.img":{"frame":{"x":834,"y":3536,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-recorder-03.img":{"frame":{"x":2054,"y":1942,"w":48,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-recorder-04.img":{"frame":{"x":746,"y":3536,"w":48,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":80},"sourceSize":{"w":48,"h":80}},"map-saloon-bar-01.img":{"frame":{"x":1540,"y":2666,"w":54,"h":324},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":324},"sourceSize":{"w":54,"h":324}},"map-screen-01.img":{"frame":{"x":2,"y":4040,"w":256,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":48},"sourceSize":{"w":256,"h":48}},"map-screen-res-01.img":{"frame":{"x":2,"y":3536,"w":116,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":116,"h":58},"sourceSize":{"w":124,"h":58}},"map-snow-07.img":{"frame":{"x":1606,"y":1770,"w":496,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":12,"w":496,"h":168},"sourceSize":{"w":512,"h":192}},"map-squash-res-01.img":{"frame":{"x":487,"y":3536,"w":84,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":11,"w":84,"h":82},"sourceSize":{"w":96,"h":96}},"map-switch-01.img":{"frame":{"x":4020,"y":2502,"w":30,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-switch-02.img":{"frame":{"x":4020,"y":2540,"w":30,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":32},"sourceSize":{"w":30,"h":34}},"map-switch-03.img":{"frame":{"x":1323,"y":3588,"w":30,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":34},"sourceSize":{"w":30,"h":34}},"map-towelrack-01.img":{"frame":{"x":962,"y":4014,"w":192,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":192,"h":76},"sourceSize":{"w":192,"h":96}},"map-tree-res-01.img":{"frame":{"x":1375,"y":3536,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-vending-res.img":{"frame":{"x":220,"y":3536,"w":93,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":93,"h":82},"sourceSize":{"w":108,"h":94}},"map-wall-01-rounded.img":{"frame":{"x":2710,"y":4056,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-wall-02-5-rounded.img":{"frame":{"x":798,"y":3536,"w":32,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":80},"sourceSize":{"w":32,"h":80}},"map-wall-02-rounded.img":{"frame":{"x":4002,"y":1841,"w":32,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-wall-02.img":{"frame":{"x":1040,"y":3536,"w":32,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":64},"sourceSize":{"w":32,"h":64}},"map-wall-04-cobalt.img":{"frame":{"x":3733,"y":3626,"w":40,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-04-stone.img":{"frame":{"x":3777,"y":3626,"w":40,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":160},"sourceSize":{"w":40,"h":160}},"map-wall-05-rounded.img":{"frame":{"x":3821,"y":3626,"w":32,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-wall-06-rounded.img":{"frame":{"x":4052,"y":3873,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-06.img":{"frame":{"x":3860,"y":3598,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-08-rounded.img":{"frame":{"x":3984,"y":2300,"w":32,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":256},"sourceSize":{"w":32,"h":256}},"map-wall-09-rounded.img":{"frame":{"x":1448,"y":3022,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-09.img":{"frame":{"x":1484,"y":3022,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-10-rounded.img":{"frame":{"x":4002,"y":1517,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-10.img":{"frame":{"x":3947,"y":773,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-11-rounded.img":{"frame":{"x":4016,"y":3598,"w":32,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-wall-11.img":{"frame":{"x":4002,"y":1161,"w":32,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":352},"sourceSize":{"w":32,"h":352}},"map-wall-12-rounded.img":{"frame":{"x":4054,"y":3097,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-12.img":{"frame":{"x":4054,"y":3485,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-13-rounded.img":{"frame":{"x":4054,"y":2257,"w":32,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-wall-13.img":{"frame":{"x":4054,"y":2677,"w":32,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":416},"sourceSize":{"w":32,"h":416}},"map-wall-14-rounded.img":{"frame":{"x":4054,"y":1353,"w":32,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-14.img":{"frame":{"x":4054,"y":1805,"w":32,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":448},"sourceSize":{"w":32,"h":448}},"map-wall-18.img":{"frame":{"x":4054,"y":773,"w":32,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":576},"sourceSize":{"w":32,"h":576}},"map-wall-glass-10.img":{"frame":{"x":1540,"y":2994,"w":32,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":320},"sourceSize":{"w":32,"h":320}},"map-wall-glass-12-2.img":{"frame":{"x":3984,"y":1912,"w":64,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":384},"sourceSize":{"w":64,"h":384}},"map-wall-glass-12.img":{"frame":{"x":4002,"y":773,"w":32,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":384},"sourceSize":{"w":32,"h":384}},"map-wall-glass-9.img":{"frame":{"x":1542,"y":3318,"w":32,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":288},"sourceSize":{"w":32,"h":288}},"map-wall-outhouse-bot.img":{"frame":{"x":2,"y":3598,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":24}},"map-wall-outhouse-side.img":{"frame":{"x":4020,"y":2300,"w":24,"h":198},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":198},"sourceSize":{"w":24,"h":198}},"map-wall-outhouse-top.img":{"frame":{"x":3652,"y":3598,"w":204,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":204,"h":24},"sourceSize":{"w":204,"h":24}},"map-wall-shack-bot.img":{"frame":{"x":3406,"y":3598,"w":242,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":242,"h":24},"sourceSize":{"w":242,"h":24}},"map-wall-shack-left.img":{"frame":{"x":1578,"y":3240,"w":24,"h":222},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":222},"sourceSize":{"w":24,"h":222}},"map-wall-shack-right.img":{"frame":{"x":1578,"y":2994,"w":24,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":242},"sourceSize":{"w":24,"h":242}},"map-wall-shack-top.img":{"frame":{"x":3042,"y":3598,"w":360,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":24},"sourceSize":{"w":360,"h":24}},"map-woodpile-res-01.img":{"frame":{"x":2448,"y":4040,"w":72,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":22,"w":72,"h":52},"sourceSize":{"w":96,"h":96}}}},{"meta":{"image":"shared-1-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-bed-01.img":{"frame":{"x":1118,"y":2622,"w":96,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":216},"sourceSize":{"w":96,"h":216}},"map-bed-res-01.img":{"frame":{"x":4000,"y":3922,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-bed-res-02.img":{"frame":{"x":1118,"y":2842,"w":89,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":16,"w":89,"h":158},"sourceSize":{"w":96,"h":192}},"map-building-bank-ceiling-02.img":{"frame":{"x":3132,"y":1998,"w":556,"h":888},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":50,"w":556,"h":888},"sourceSize":{"w":556,"h":940}},"map-building-bank-floor-02.img":{"frame":{"x":2226,"y":1822,"w":864,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":448},"sourceSize":{"w":1088,"h":448}},"map-building-bank-window-01.img":{"frame":{"x":4016,"y":2881,"w":56,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":104},"sourceSize":{"w":56,"h":104}},"map-building-barn-ceiling-01.img":{"frame":{"x":1310,"y":870,"w":800,"h":416},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":416},"sourceSize":{"w":800,"h":416}},"map-building-barn-ceiling-02.img":{"frame":{"x":2584,"y":2274,"w":312,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":108},"sourceSize":{"w":312,"h":108}},"map-building-bathhouse-basement-01b.img":{"frame":{"x":2,"y":2,"w":1304,"h":919},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1304,"h":919},"sourceSize":{"w":1304,"h":920}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":2913,"y":3694,"w":567,"h":343},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":567,"h":343},"sourceSize":{"w":568,"h":344}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":2,"y":2622,"w":1112,"h":728},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":1112,"h":728},"sourceSize":{"w":1112,"h":729}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":3484,"y":3694,"w":512,"h":336},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":336},"sourceSize":{"w":512,"h":336}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":2,"y":3354,"w":1088,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":1088,"h":544},"sourceSize":{"w":1088,"h":576}},"map-building-bridge-lg-floor.img":{"frame":{"x":1094,"y":3354,"w":1011,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":1011,"h":704},"sourceSize":{"w":1012,"h":708}},"map-building-bridge-md-floor.img":{"frame":{"x":2226,"y":870,"w":896,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":368},"sourceSize":{"w":896,"h":368}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":3132,"y":614,"w":912,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":576},"sourceSize":{"w":912,"h":576}},"map-building-cabin-floor.img":{"frame":{"x":2,"y":1626,"w":1216,"h":992},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1216,"h":992},"sourceSize":{"w":1216,"h":992}},"map-building-club-ceiling-01b.img":{"frame":{"x":2913,"y":3314,"w":177,"h":242},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":242},"sourceSize":{"w":178,"h":242}},"map-building-club-floor-01d.img":{"frame":{"x":2109,"y":3896,"w":322,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":322,"h":193},"sourceSize":{"w":322,"h":194}},"map-building-club-floor-01e.img":{"frame":{"x":3692,"y":1998,"w":353,"h":482},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":482},"sourceSize":{"w":354,"h":482}},"map-building-club-floor-01f.img":{"frame":{"x":2913,"y":3560,"w":194,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":130},"sourceSize":{"w":194,"h":130}},"map-building-club-floor-01g.img":{"frame":{"x":2109,"y":3314,"w":800,"h":578},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":800,"h":578},"sourceSize":{"w":802,"h":578}},"map-building-club-floor-01h.img":{"frame":{"x":1872,"y":1290,"w":321,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":321,"h":289},"sourceSize":{"w":322,"h":290}},"map-building-house-floor-01.img":{"frame":{"x":1222,"y":2430,"w":960,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-house-floor-02.img":{"frame":{"x":1310,"y":2,"w":960,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":960,"h":864},"sourceSize":{"w":960,"h":864}},"map-building-house-window-01.img":{"frame":{"x":4049,"y":1140,"w":32,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-building-house-window-res-01.img":{"frame":{"x":4049,"y":1248,"w":32,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":104},"sourceSize":{"w":32,"h":104}},"map-building-hut-ceiling-01.img":{"frame":{"x":3692,"y":2484,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-mansion-ceiling.img":{"frame":{"x":3132,"y":1194,"w":912,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":912,"h":800},"sourceSize":{"w":1024,"h":864}},"map-building-mansion-cellar-01c.img":{"frame":{"x":2226,"y":2274,"w":354,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":354,"h":129},"sourceSize":{"w":354,"h":130}},"map-building-mansion-floor-01a.img":{"frame":{"x":2274,"y":438,"w":802,"h":317},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":802,"h":317},"sourceSize":{"w":802,"h":322}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":3132,"y":2,"w":934,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":934,"h":608},"sourceSize":{"w":960,"h":640}},"map-building-teahouse-floor-01.img":{"frame":{"x":2226,"y":1242,"w":896,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":896,"h":576},"sourceSize":{"w":896,"h":576}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":2274,"y":2,"w":832,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":832,"h":432},"sourceSize":{"w":832,"h":432}},"map-building-warehouse-floor-01.img":{"frame":{"x":1222,"y":1626,"w":1000,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1000,"h":800},"sourceSize":{"w":1000,"h":800}},"map-building-warehouse-floor-02.img":{"frame":{"x":3132,"y":2890,"w":880,"h":800},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":880,"h":800},"sourceSize":{"w":880,"h":800}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":494,"y":3902,"w":380,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":380,"h":180},"sourceSize":{"w":380,"h":180}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":2,"y":3902,"w":488,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":176},"sourceSize":{"w":488,"h":176}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":2186,"y":2430,"w":942,"h":880},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":0,"w":942,"h":880},"sourceSize":{"w":992,"h":880}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":1276,"y":1290,"w":592,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":112,"w":592,"h":304},"sourceSize":{"w":592,"h":416}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":2,"y":925,"w":1270,"h":697},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":1270,"h":697},"sourceSize":{"w":1280,"h":704}},"map-control-panel-06.img":{"frame":{"x":2274,"y":759,"w":192,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":94},"sourceSize":{"w":192,"h":94}},"map-couch-02.img":{"frame":{"x":2470,"y":759,"w":192,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-crate-20.img":{"frame":{"x":2114,"y":1121,"w":108,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":108},"sourceSize":{"w":108,"h":108}},"map-crate-mil-02.img":{"frame":{"x":2666,"y":759,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-03.img":{"frame":{"x":2842,"y":759,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-mil-04.img":{"frame":{"x":2900,"y":2274,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-decal-oil-01.img":{"frame":{"x":2114,"y":870,"w":86,"h":122},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":3,"w":86,"h":122},"sourceSize":{"w":128,"h":128}},"map-door-02.img":{"frame":{"x":4000,"y":3694,"w":80,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":224},"sourceSize":{"w":80,"h":224}},"map-door-03.img":{"frame":{"x":4049,"y":1024,"w":32,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":112},"sourceSize":{"w":32,"h":112}},"map-door-04.img":{"frame":{"x":2845,"y":3896,"w":54,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":128},"sourceSize":{"w":54,"h":128}},"map-door-05.img":{"frame":{"x":4070,"y":2,"w":24,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":128},"sourceSize":{"w":24,"h":128}},"map-door-slot-01.img":{"frame":{"x":4049,"y":754,"w":38,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":134},"sourceSize":{"w":38,"h":134}},"map-door-slot-02.img":{"frame":{"x":4049,"y":614,"w":38,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":136},"sourceSize":{"w":38,"h":136}},"map-oven-01.img":{"frame":{"x":3018,"y":759,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-pipes-05.img":{"frame":{"x":2751,"y":3896,"w":90,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":192},"sourceSize":{"w":90,"h":192}},"map-recorder-01.img":{"frame":{"x":4016,"y":3193,"w":64,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-recorder-02.img":{"frame":{"x":4016,"y":3293,"w":64,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":96},"sourceSize":{"w":64,"h":96}},"map-saloon-bar-02.img":{"frame":{"x":4016,"y":3393,"w":54,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":92},"sourceSize":{"w":54,"h":92}},"map-stand-01.img":{"frame":{"x":1118,"y":3260,"w":80,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":90},"sourceSize":{"w":80,"h":90}},"map-stove-01.img":{"frame":{"x":878,"y":3902,"w":208,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":208,"h":162},"sourceSize":{"w":224,"h":176}},"map-toilet-01.img":{"frame":{"x":1118,"y":3004,"w":96,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":96,"h":124},"sourceSize":{"w":128,"h":128}},"map-toilet-02.img":{"frame":{"x":1118,"y":3132,"w":96,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":2,"w":96,"h":124},"sourceSize":{"w":128,"h":128}},"map-toilet-03.img":{"frame":{"x":4016,"y":2989,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-toilet-04.img":{"frame":{"x":4016,"y":3091,"w":66,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":66,"h":98},"sourceSize":{"w":100,"h":100}},"map-vat-res.img":{"frame":{"x":2114,"y":996,"w":108,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":11,"w":108,"h":121},"sourceSize":{"w":144,"h":144}},"map-wall-03-rounded.img":{"frame":{"x":4049,"y":1356,"w":32,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-wall-03.img":{"frame":{"x":4049,"y":1456,"w":32,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":96},"sourceSize":{"w":32,"h":96}},"map-wall-04-rounded.img":{"frame":{"x":3094,"y":2214,"w":32,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-04.img":{"frame":{"x":4049,"y":892,"w":32,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":128},"sourceSize":{"w":32,"h":128}},"map-wall-05.img":{"frame":{"x":3094,"y":2050,"w":32,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":160},"sourceSize":{"w":32,"h":160}},"map-wall-07-rounded.img":{"frame":{"x":3094,"y":1822,"w":32,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-wall-07.img":{"frame":{"x":3094,"y":3314,"w":32,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":224},"sourceSize":{"w":32,"h":224}},"map-wheel-01.img":{"frame":{"x":2435,"y":3896,"w":312,"h":156},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":156},"sourceSize":{"w":312,"h":156}}}},{"meta":{"image":"shared-2-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-airdrop-01.img":{"frame":{"x":3427,"y":2,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02.img":{"frame":{"x":3241,"y":2,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-barrel-01.img":{"frame":{"x":2592,"y":314,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-barrel-02.img":{"frame":{"x":2331,"y":382,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-barrel-res-02.img":{"frame":{"x":3883,"y":256,"w":130,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":130,"h":127},"sourceSize":{"w":144,"h":144}},"map-bathhouse-column-01.img":{"frame":{"x":3427,"y":447,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-bathrocks-01.img":{"frame":{"x":694,"y":3420,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-bed-02.img":{"frame":{"x":2823,"y":3124,"w":176,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":216},"sourceSize":{"w":176,"h":216}},"map-bollard-01.img":{"frame":{"x":2712,"y":584,"w":112,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":18,"w":112,"h":108},"sourceSize":{"w":144,"h":144}},"map-building-bank-ceiling-01.img":{"frame":{"x":1612,"y":2,"w":505,"h":552},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":48,"w":505,"h":552},"sourceSize":{"w":506,"h":600}},"map-building-bank-ceiling-03.img":{"frame":{"x":1756,"y":2334,"w":216,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":192,"w":216,"h":360},"sourceSize":{"w":216,"h":552}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":2002,"y":3022,"w":304,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":304,"h":192},"sourceSize":{"w":304,"h":208}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":3043,"y":3369,"w":164,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":164,"h":192},"sourceSize":{"w":164,"h":208}},"map-building-barn-basement-floor-01.img":{"frame":{"x":726,"y":1302,"w":663,"h":470},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":663,"h":470},"sourceSize":{"w":664,"h":472}},"map-building-barn-basement-floor-02.img":{"frame":{"x":518,"y":2494,"w":375,"h":470},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":375,"h":470},"sourceSize":{"w":376,"h":472}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":2069,"y":3656,"w":225,"h":290},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":290},"sourceSize":{"w":226,"h":290}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":1494,"y":3508,"w":257,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":257,"h":193},"sourceSize":{"w":257,"h":194}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":2,"y":1954,"w":536,"h":536},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":536,"h":536},"sourceSize":{"w":536,"h":536}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":2574,"y":3868,"w":256,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":224},"sourceSize":{"w":256,"h":224}},"map-building-club-ceiling-01a.img":{"frame":{"x":871,"y":2,"w":737,"h":593},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":737,"h":593},"sourceSize":{"w":738,"h":594}},"map-building-club-ceiling-01c.img":{"frame":{"x":897,"y":2188,"w":400,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":400,"h":433},"sourceSize":{"w":402,"h":434}},"map-building-club-floor-01a.img":{"frame":{"x":2773,"y":2534,"w":225,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":225,"h":226},"sourceSize":{"w":226,"h":226}},"map-building-club-floor-01b.img":{"frame":{"x":3043,"y":3172,"w":194,"h":193},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":194,"h":193},"sourceSize":{"w":194,"h":194}},"map-building-club-vault-ceiling.img":{"frame":{"x":3259,"y":3732,"w":160,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":176},"sourceSize":{"w":160,"h":176}},"map-building-container-ceiling-02.img":{"frame":{"x":542,"y":1954,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-03.img":{"frame":{"x":1310,"y":3351,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-ceiling-05.img":{"frame":{"x":1382,"y":2740,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":380},"sourceSize":{"w":180,"h":536}},"map-building-container-open-ceiling-01.img":{"frame":{"x":1494,"y":3124,"w":180,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":156,"w":180,"h":380},"sourceSize":{"w":180,"h":692}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":2295,"y":2482,"w":288,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":192},"sourceSize":{"w":288,"h":192}},"map-building-dock-floor-01a.img":{"frame":{"x":3002,"y":2,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":160,"h":160},"sourceSize":{"w":160,"h":162}},"map-building-house-ceiling.img":{"frame":{"x":2,"y":1302,"w":720,"h":648},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":648},"sourceSize":{"w":720,"h":648}},"map-building-hut-ceiling-02.img":{"frame":{"x":1301,"y":1946,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-ceiling-03.img":{"frame":{"x":1374,"y":2343,"w":378,"h":393},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":378,"h":393},"sourceSize":{"w":408,"h":408}},"map-building-hut-floor-01.img":{"frame":{"x":518,"y":2968,"w":448,"h":448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":32,"w":448,"h":448},"sourceSize":{"w":512,"h":512}},"map-building-mansion-cellar-01a.img":{"frame":{"x":2,"y":2,"w":865,"h":801},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":865,"h":801},"sourceSize":{"w":866,"h":802}},"map-building-mansion-cellar-01b.img":{"frame":{"x":2820,"y":3614,"w":225,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":230},"sourceSize":{"w":226,"h":230}},"map-building-mansion-floor-01c.img":{"frame":{"x":2834,"y":3848,"w":225,"h":228},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":225,"h":228},"sourceSize":{"w":226,"h":228}},"map-building-outhouse-ceiling.img":{"frame":{"x":2298,"y":3868,"w":272,"h":225},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":272,"h":225},"sourceSize":{"w":400,"h":316}},"map-building-outhouse-floor.img":{"frame":{"x":1760,"y":3465,"w":241,"h":308},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":80,"y":4,"w":241,"h":308},"sourceSize":{"w":400,"h":316}},"map-building-panicroom-ceiling.img":{"frame":{"x":1683,"y":1946,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-panicroom-floor.img":{"frame":{"x":1018,"y":3351,"w":288,"h":384},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":384},"sourceSize":{"w":288,"h":384}},"map-building-police-ceiling-03.img":{"frame":{"x":2,"y":3522,"w":504,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":480},"sourceSize":{"w":504,"h":480}},"map-building-police-floor-02.img":{"frame":{"x":1393,"y":1302,"w":609,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":65,"w":609,"h":640},"sourceSize":{"w":610,"h":1570}},"map-building-saferoom-ceiling.img":{"frame":{"x":1404,"y":3735,"w":352,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-saferoom-floor.img":{"frame":{"x":1975,"y":1946,"w":352,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":224},"sourceSize":{"w":352,"h":224}},"map-building-shack-ceiling-01.img":{"frame":{"x":1976,"y":2482,"w":315,"h":207},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":315,"h":207},"sourceSize":{"w":315,"h":255}},"map-building-shack-ceiling-02.img":{"frame":{"x":2587,"y":2338,"w":240,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":240,"h":192},"sourceSize":{"w":240,"h":240}},"map-building-shack-ceiling-03.img":{"frame":{"x":970,"y":3059,"w":408,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":0,"w":408,"h":288},"sourceSize":{"w":432,"h":336}},"map-building-shack-floor-01.img":{"frame":{"x":1018,"y":3739,"w":382,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":20,"w":382,"h":320},"sourceSize":{"w":420,"h":340}},"map-building-shack-floor-02.img":{"frame":{"x":1890,"y":2698,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-building-shack-floor-03.img":{"frame":{"x":726,"y":1776,"w":568,"h":408},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":568,"h":408},"sourceSize":{"w":576,"h":448}},"map-building-teahouse-floor-02.img":{"frame":{"x":2,"y":4006,"w":128,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":88},"sourceSize":{"w":128,"h":88}},"map-building-teahouse-res-01.img":{"frame":{"x":2298,"y":3656,"w":282,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":115,"y":152,"w":282,"h":208},"sourceSize":{"w":512,"h":512}},"map-building-vault-ceiling.img":{"frame":{"x":1678,"y":3124,"w":320,"h":337},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":337},"sourceSize":{"w":432,"h":337}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":2,"y":807,"w":720,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":720,"h":432},"sourceSize":{"w":720,"h":432}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":1602,"y":599,"w":488,"h":560},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":488,"h":560},"sourceSize":{"w":488,"h":560}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":970,"y":2625,"w":400,"h":430},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":430},"sourceSize":{"w":400,"h":448}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":1976,"y":2174,"w":320,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":144,"w":320,"h":304},"sourceSize":{"w":320,"h":448}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":871,"y":599,"w":727,"h":699},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":727,"h":699},"sourceSize":{"w":738,"h":706}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":3049,"y":3565,"w":192,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":179},"sourceSize":{"w":194,"h":180}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":2310,"y":2978,"w":193,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":64,"y":0,"w":193,"h":230},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-01.img":{"frame":{"x":2214,"y":2693,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-bunker-generic-floor-02.img":{"frame":{"x":2005,"y":3371,"w":295,"h":281},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":295,"h":281},"sourceSize":{"w":320,"h":288}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":3211,"y":3369,"w":192,"h":177},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":192,"h":177},"sourceSize":{"w":194,"h":178}},"map-bunker-storm-floor-02.img":{"frame":{"x":1566,"y":2740,"w":320,"h":380},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":380},"sourceSize":{"w":320,"h":384}},"map-bunker-vent-03.img":{"frame":{"x":2448,"y":2338,"w":132,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":132,"h":134},"sourceSize":{"w":136,"h":136}},"map-bush-01f.img":{"frame":{"x":3719,"y":362,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-bush-07.img":{"frame":{"x":726,"y":957,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-bush-07x.img":{"frame":{"x":3569,"y":404,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-case-basement-01.img":{"frame":{"x":1916,"y":1163,"w":148,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":112},"sourceSize":{"w":148,"h":112}},"map-case-chrys-01.img":{"frame":{"x":2024,"y":3962,"w":156,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-case-deagle-01.img":{"frame":{"x":2823,"y":3502,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-case-deagle-02.img":{"frame":{"x":2300,"y":2338,"w":144,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":108},"sourceSize":{"w":144,"h":108}},"map-case-flare-01.img":{"frame":{"x":726,"y":1104,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-case-flare-res-01.img":{"frame":{"x":3241,"y":450,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-case-hatchet-01.img":{"frame":{"x":3739,"y":150,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-case-hatchet-res-01.img":{"frame":{"x":3241,"y":569,"w":128,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":10,"w":128,"h":115},"sourceSize":{"w":144,"h":144}},"map-case-ring-01.img":{"frame":{"x":1602,"y":1163,"w":156,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":120},"sourceSize":{"w":156,"h":120}},"map-chest-01.img":{"frame":{"x":3883,"y":150,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-02.img":{"frame":{"x":3739,"y":256,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chest-03.img":{"frame":{"x":3575,"y":298,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chimney-01.img":{"frame":{"x":2831,"y":466,"w":120,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":120,"h":118},"sourceSize":{"w":120,"h":120}},"map-chute-01.img":{"frame":{"x":2584,"y":3614,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-control-panel-01.img":{"frame":{"x":2587,"y":2534,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-02.img":{"frame":{"x":2331,"y":154,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-03.img":{"frame":{"x":794,"y":3420,"w":96,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":94},"sourceSize":{"w":96,"h":94}},"map-control-panel-04.img":{"frame":{"x":2121,"y":154,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-control-panel-05.img":{"frame":{"x":2331,"y":268,"w":144,"h":110},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":110},"sourceSize":{"w":144,"h":110}},"map-couch-03.img":{"frame":{"x":894,"y":3420,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-crate-01.img":{"frame":{"x":2121,"y":268,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02.img":{"frame":{"x":3591,"y":2,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-02sv.img":{"frame":{"x":3739,"y":2,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03.img":{"frame":{"x":3887,"y":2,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-04.img":{"frame":{"x":3259,"y":3912,"w":164,"h":164},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":164},"sourceSize":{"w":164,"h":164}},"map-crate-05.img":{"frame":{"x":2831,"y":338,"w":124,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":124,"h":124},"sourceSize":{"w":124,"h":124}},"map-crate-06.img":{"frame":{"x":726,"y":2188,"w":164,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":164,"h":100},"sourceSize":{"w":164,"h":100}},"map-crate-07.img":{"frame":{"x":3591,"y":150,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-08.img":{"frame":{"x":3427,"y":166,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-09.img":{"frame":{"x":3241,"y":166,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-10.img":{"frame":{"x":2331,"y":2,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-11.img":{"frame":{"x":2121,"y":2,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-14.img":{"frame":{"x":3063,"y":3944,"w":156,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-14a.img":{"frame":{"x":2592,"y":166,"w":156,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":144},"sourceSize":{"w":156,"h":144}},"map-crate-mil-05.img":{"frame":{"x":518,"y":3420,"w":172,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":172,"h":89},"sourceSize":{"w":172,"h":89}},"map-crate-res-01.img":{"frame":{"x":3427,"y":314,"w":138,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":138,"h":129},"sourceSize":{"w":144,"h":144}},"map-crate-res-03.img":{"frame":{"x":2823,"y":3344,"w":216,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":216,"h":154},"sourceSize":{"w":216,"h":156}},"map-decal-club-01.img":{"frame":{"x":3134,"y":426,"w":100,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":115,"w":100,"h":106},"sourceSize":{"w":104,"h":360}},"map-decal-initiative.img":{"frame":{"x":2592,"y":460,"w":120,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":120,"h":120},"sourceSize":{"w":128,"h":128}},"map-decal-oil-02.img":{"frame":{"x":1298,"y":1776,"w":90,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":14,"w":90,"h":100},"sourceSize":{"w":128,"h":128}},"map-decal-oil-03.img":{"frame":{"x":2738,"y":314,"w":88,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":18,"w":88,"h":92},"sourceSize":{"w":128,"h":128}},"map-drawers-01.img":{"frame":{"x":2831,"y":2,"w":160,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-drawers-02.img":{"frame":{"x":2831,"y":96,"w":160,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":90},"sourceSize":{"w":160,"h":90}},"map-grill-01.img":{"frame":{"x":3002,"y":566,"w":120,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":13,"w":120,"h":102},"sourceSize":{"w":128,"h":128}},"map-hedgehog-01.img":{"frame":{"x":3063,"y":3748,"w":192,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":192},"sourceSize":{"w":192,"h":192}},"map-hut-res-01.img":{"frame":{"x":2583,"y":3198,"w":236,"h":236},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":130,"y":136,"w":236,"h":236},"sourceSize":{"w":512,"h":512}},"map-outhouse-res.img":{"frame":{"x":1762,"y":1163,"w":150,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":125,"y":42,"w":150,"h":132},"sourceSize":{"w":400,"h":312}},"map-pipes-02.img":{"frame":{"x":2583,"y":3438,"w":236,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":236,"h":172},"sourceSize":{"w":238,"h":172}},"map-pot-01.img":{"frame":{"x":1382,"y":3222,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-02.img":{"frame":{"x":2479,"y":211,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-03.img":{"frame":{"x":2479,"y":309,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-04.img":{"frame":{"x":2184,"y":3950,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-pot-05.img":{"frame":{"x":2716,"y":460,"w":94,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":94,"h":94},"sourceSize":{"w":96,"h":96}},"map-refrigerator-01.img":{"frame":{"x":1382,"y":3124,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-sandbags-01.img":{"frame":{"x":2304,"y":3495,"w":256,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":256,"h":146},"sourceSize":{"w":256,"h":148}},"map-sandbags-02.img":{"frame":{"x":726,"y":807,"w":114,"h":146},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":1,"w":114,"h":146},"sourceSize":{"w":148,"h":148}},"map-shack-res-01.img":{"frame":{"x":1760,"y":3777,"w":305,"h":181},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":60,"y":49,"w":305,"h":181},"sourceSize":{"w":420,"h":340}},"map-shack-res-02.img":{"frame":{"x":2773,"y":2764,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-shack-res-03.img":{"frame":{"x":2773,"y":2944,"w":220,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":100,"y":69,"w":220,"h":176},"sourceSize":{"w":420,"h":340}},"map-silo-01.img":{"frame":{"x":510,"y":3522,"w":504,"h":504},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":504,"h":504},"sourceSize":{"w":512,"h":512}},"map-smoke-res.img":{"frame":{"x":3245,"y":3550,"w":171,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":39,"w":171,"h":178},"sourceSize":{"w":256,"h":256}},"map-squash-01.img":{"frame":{"x":3002,"y":446,"w":124,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":11,"w":124,"h":116},"sourceSize":{"w":144,"h":144}},"map-stairs-broken-01.img":{"frame":{"x":1696,"y":3963,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-stone-01.img":{"frame":{"x":2121,"y":416,"w":142,"h":142},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":142},"sourceSize":{"w":144,"h":144}},"map-stone-03.img":{"frame":{"x":2304,"y":3218,"w":275,"h":273},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":275,"h":273},"sourceSize":{"w":289,"h":289}},"map-stone-04.img":{"frame":{"x":3002,"y":166,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-05.img":{"frame":{"x":2831,"y":190,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-stone-res-01.img":{"frame":{"x":2831,"y":588,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02.img":{"frame":{"x":2997,"y":2764,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-stone-res-04.img":{"frame":{"x":2592,"y":584,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":116,"h":116},"sourceSize":{"w":120,"h":120}},"map-stone-res-06.img":{"frame":{"x":1404,"y":3963,"w":288,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":128},"sourceSize":{"w":288,"h":128}},"map-stove-02.img":{"frame":{"x":2483,"y":2,"w":98,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":98,"h":105},"sourceSize":{"w":112,"h":112}},"map-table-01.img":{"frame":{"x":1860,"y":3962,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02.img":{"frame":{"x":2300,"y":2174,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03.img":{"frame":{"x":2592,"y":2,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-table-res.img":{"frame":{"x":3241,"y":314,"w":131,"h":132},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":131,"h":132},"sourceSize":{"w":144,"h":144}},"map-toilet-res-01.img":{"frame":{"x":3134,"y":314,"w":98,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":7,"w":98,"h":108},"sourceSize":{"w":128,"h":128}},"map-toilet-res-02.img":{"frame":{"x":3150,"y":166,"w":80,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":17,"w":80,"h":94},"sourceSize":{"w":128,"h":128}},"map-tree-03.img":{"frame":{"x":2513,"y":2678,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-04.img":{"frame":{"x":2712,"y":696,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-07su.img":{"frame":{"x":2513,"y":2938,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08f.img":{"frame":{"x":2,"y":2494,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-08su.img":{"frame":{"x":2,"y":3008,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-09.img":{"frame":{"x":2592,"y":704,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-res-02.img":{"frame":{"x":2483,"y":111,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-vat-01.img":{"frame":{"x":3002,"y":314,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":128,"h":128},"sourceSize":{"w":144,"h":144}},"map-vat-02.img":{"frame":{"x":3003,"y":2968,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-vending-soda-01.img":{"frame":{"x":1890,"y":3022,"w":108,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":94},"sourceSize":{"w":108,"h":94}},"map-wheel-02.img":{"frame":{"x":2002,"y":3218,"w":297,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":297,"h":149},"sourceSize":{"w":312,"h":156}},"map-wheel-03.img":{"frame":{"x":542,"y":2338,"w":312,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":312,"h":149},"sourceSize":{"w":312,"h":156}},"map-woodpile-01.img":{"frame":{"x":3130,"y":536,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}}}}]');
const snow$1 = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"snow-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-airdrop-01x.img":{"frame":{"x":3889,"y":3182,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-airdrop-02x.img":{"frame":{"x":774,"y":2656,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":3405,"y":870,"w":400,"h":624},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":624},"sourceSize":{"w":400,"h":624}},"map-building-greenhouse-floor-02.img":{"frame":{"x":2569,"y":870,"w":832,"h":642},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":832,"h":642},"sourceSize":{"w":834,"h":642}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":774,"y":2380,"w":448,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":272},"sourceSize":{"w":448,"h":272}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":2195,"y":2023,"w":161,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":32,"w":161,"h":148},"sourceSize":{"w":228,"h":180}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1701,"y":2,"w":931,"h":627},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":931,"h":627},"sourceSize":{"w":932,"h":628}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":3953,"y":2830,"w":112,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":192},"sourceSize":{"w":112,"h":192}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":3035,"y":2318,"w":354,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":354,"h":368},"sourceSize":{"w":356,"h":372}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":3408,"y":746,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":2195,"y":2484,"w":352,"h":258},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":352,"h":258},"sourceSize":{"w":356,"h":260}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":3035,"y":2176,"w":224,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":96},"sourceSize":{"w":224,"h":96}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":3393,"y":2318,"w":352,"h":306},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":352,"h":306},"sourceSize":{"w":356,"h":308}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":3809,"y":2,"w":228,"h":611},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":228,"h":611},"sourceSize":{"w":228,"h":644}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":1701,"y":1245,"w":801,"h":774},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":801,"h":774},"sourceSize":{"w":804,"h":804}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":1454,"w":771,"h":628},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":771,"h":628},"sourceSize":{"w":772,"h":628}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":774,"y":2196,"w":516,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":0,"w":516,"h":180},"sourceSize":{"w":548,"h":180}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":2636,"y":2,"w":768,"h":864},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":768,"h":864},"sourceSize":{"w":768,"h":864}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":2955,"y":2690,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-generic-floor-03.img":{"frame":{"x":3119,"y":2690,"w":160,"h":230},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":230},"sourceSize":{"w":160,"h":230}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":2195,"y":2176,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":3749,"y":2318,"w":320,"h":344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":344},"sourceSize":{"w":432,"h":352}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1487,"y":1454,"w":192,"h":350},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":350},"sourceSize":{"w":192,"h":350}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":2631,"y":2176,"w":400,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":272},"sourceSize":{"w":400,"h":272}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":3691,"y":3066,"w":194,"h":194},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":194,"h":194},"sourceSize":{"w":194,"h":194}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":777,"y":1454,"w":706,"h":738},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":706,"h":738},"sourceSize":{"w":706,"h":738}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":3408,"y":2,"w":344,"h":740},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":0,"w":344,"h":740},"sourceSize":{"w":392,"h":744}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":3310,"y":1516,"w":704,"h":798},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":798},"sourceSize":{"w":704,"h":832}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":2631,"y":2452,"w":320,"h":360},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":360},"sourceSize":{"w":320,"h":360}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":2506,"y":1516,"w":800,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":656},"sourceSize":{"w":816,"h":720}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":3393,"y":2628,"w":320,"h":270},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":270},"sourceSize":{"w":320,"h":270}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2,"y":2086,"w":704,"h":640},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":640},"sourceSize":{"w":704,"h":640}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":1695,"h":1448},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":1695,"h":1448},"sourceSize":{"w":1704,"h":1448}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1487,"y":2023,"w":704,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":508},"sourceSize":{"w":704,"h":512}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1701,"y":633,"w":864,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":864,"h":608},"sourceSize":{"w":864,"h":608}},"map-bunker-hydra-floor-04.img":{"frame":{"x":3283,"y":2902,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-bush-01x.img":{"frame":{"x":1632,"y":2535,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-chest-03x.img":{"frame":{"x":2360,"y":2023,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-chute-01x.img":{"frame":{"x":3717,"y":2830,"w":232,"h":232},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":232,"h":232},"sourceSize":{"w":256,"h":256}},"map-complex-warehouse-floor-01.img":{"frame":{"x":710,"y":2618,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-complex-warehouse-floor-02.img":{"frame":{"x":710,"y":2086,"w":60,"h":528},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":528},"sourceSize":{"w":60,"h":528}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2569,"y":633,"w":60,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":224},"sourceSize":{"w":60,"h":224}},"map-crate-01x.img":{"frame":{"x":166,"y":2730,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-crate-02x.img":{"frame":{"x":1484,"y":2535,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03x.img":{"frame":{"x":477,"y":2730,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-planter-06.img":{"frame":{"x":1294,"y":2196,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-07.img":{"frame":{"x":3283,"y":2690,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-02.img":{"frame":{"x":2551,"y":2484,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-res-03.img":{"frame":{"x":4009,"y":2666,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-snow-01.img":{"frame":{"x":3809,"y":1329,"w":212,"h":174},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":41,"w":212,"h":174},"sourceSize":{"w":256,"h":256}},"map-snow-02.img":{"frame":{"x":1487,"y":1808,"w":208,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":24,"w":208,"h":208},"sourceSize":{"w":256,"h":256}},"map-snow-03.img":{"frame":{"x":3756,"y":617,"w":312,"h":178},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":24,"y":7,"w":312,"h":178},"sourceSize":{"w":360,"h":192}},"map-snow-04.img":{"frame":{"x":3283,"y":2794,"w":100,"h":98},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":15,"w":100,"h":98},"sourceSize":{"w":128,"h":128}},"map-snow-05.img":{"frame":{"x":3636,"y":746,"w":90,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":19,"y":12,"w":90,"h":104},"sourceSize":{"w":128,"h":128}},"map-snow-06.img":{"frame":{"x":3889,"y":3066,"w":178,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":178,"h":112},"sourceSize":{"w":192,"h":128}},"map-snowball-res.img":{"frame":{"x":2955,"y":2452,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":70,"h":70},"sourceSize":{"w":96,"h":96}},"map-stone-01x.img":{"frame":{"x":322,"y":2730,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-stone-03x.img":{"frame":{"x":3809,"y":799,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-stone-res-01x.img":{"frame":{"x":1102,"y":2656,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02x.img":{"frame":{"x":3487,"y":2902,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-table-01x.img":{"frame":{"x":938,"y":2656,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02x.img":{"frame":{"x":3717,"y":2666,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03x.img":{"frame":{"x":2,"y":2730,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-tree-10.img":{"frame":{"x":1226,"y":2472,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":3809,"y":1075,"w":250,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":250,"h":250},"sourceSize":{"w":256,"h":256}}}}]');
const woods$1 = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"woods-0-100.png","size":{"w":4096,"h":4096},"scale":1},"frames":{"map-building-pavilion-ceiling-01.img":{"frame":{"x":710,"y":2646,"w":623,"h":608},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":16,"w":623,"h":608},"sourceSize":{"w":640,"h":640}},"map-building-pavilion-floor-01.img":{"frame":{"x":735,"y":1945,"w":576,"h":576},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":576,"h":576},"sourceSize":{"w":576,"h":576}},"map-building-pavilion-res-01.img":{"frame":{"x":2107,"y":2510,"w":178,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":167,"y":162,"w":178,"h":188},"sourceSize":{"w":512,"h":512}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":937,"y":3258,"w":320,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":544},"sourceSize":{"w":320,"h":544}},"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":704,"h":1344},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":704,"h":1344},"sourceSize":{"w":704,"h":1376}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":1777,"y":3509,"w":192,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":256},"sourceSize":{"w":192,"h":256}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":1831,"y":1928,"w":320,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":320,"h":320},"sourceSize":{"w":320,"h":320}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":2,"y":2646,"w":704,"h":704},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":704,"h":704},"sourceSize":{"w":704,"h":704}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":1261,"y":3772,"w":416,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":304},"sourceSize":{"w":416,"h":304}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":1945,"w":729,"h":697},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":729,"h":697},"sourceSize":{"w":738,"h":706}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":1624,"y":1640,"w":193,"h":177},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":193,"h":177},"sourceSize":{"w":194,"h":178}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":1716,"y":2861,"w":226,"h":368},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":226,"h":368},"sourceSize":{"w":226,"h":385}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":904,"y":1443,"w":512,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":400},"sourceSize":{"w":512,"h":400}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":1315,"y":1847,"w":512,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":512,"h":496},"sourceSize":{"w":512,"h":496}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":2,"y":3680,"w":608,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":304},"sourceSize":{"w":608,"h":304}},"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":710,"y":2,"w":1184,"h":925},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1184,"h":925},"sourceSize":{"w":1184,"h":928}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":2,"y":1350,"w":898,"h":591},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":898,"h":591},"sourceSize":{"w":898,"h":594}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":3354,"w":672,"h":322},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":672,"h":322},"sourceSize":{"w":690,"h":322}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":678,"y":3354,"w":255,"h":656},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":255,"h":656},"sourceSize":{"w":258,"h":674}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":1681,"y":3772,"w":382,"h":210},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":0,"w":382,"h":210},"sourceSize":{"w":401,"h":210}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":1337,"y":2861,"w":375,"h":226},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":375,"h":226},"sourceSize":{"w":386,"h":226}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":904,"y":931,"w":732,"h":508},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":732,"h":508},"sourceSize":{"w":738,"h":514}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":937,"y":3806,"w":194,"h":280},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":21,"w":194,"h":280},"sourceSize":{"w":194,"h":306}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":1640,"y":931,"w":380,"h":509},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":21,"w":380,"h":509},"sourceSize":{"w":386,"h":530}},"map-bush-01x.img":{"frame":{"x":2057,"y":3112,"w":126,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":7,"w":126,"h":130},"sourceSize":{"w":144,"h":144}},"map-bush-06.img":{"frame":{"x":1946,"y":2764,"w":190,"h":188},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":190,"h":188},"sourceSize":{"w":192,"h":192}},"map-bush-07sp.img":{"frame":{"x":2310,"y":1928,"w":135,"h":143},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":135,"h":143},"sourceSize":{"w":144,"h":144}},"map-chest-03x.img":{"frame":{"x":2,"y":3988,"w":140,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":140,"h":102},"sourceSize":{"w":140,"h":102}},"map-crate-01x.img":{"frame":{"x":1946,"y":2956,"w":152,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":152,"h":152},"sourceSize":{"w":160,"h":160}},"map-crate-02x.img":{"frame":{"x":2275,"y":2233,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-crate-03x.img":{"frame":{"x":2155,"y":2081,"w":148,"h":148},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":148,"h":148},"sourceSize":{"w":148,"h":148}},"map-crate-19.img":{"frame":{"x":2307,"y":2081,"w":144,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":144},"sourceSize":{"w":144,"h":144}},"map-planter-06.img":{"frame":{"x":710,"y":931,"w":144,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":272},"sourceSize":{"w":144,"h":272}},"map-planter-07.img":{"frame":{"x":146,"y":3988,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-planter-res-02.img":{"frame":{"x":1629,"y":3091,"w":76,"h":134},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":76,"h":134},"sourceSize":{"w":86,"h":136}},"map-planter-res-03.img":{"frame":{"x":250,"y":4014,"w":82,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":82,"h":74},"sourceSize":{"w":86,"h":86}},"map-snowball-res.img":{"frame":{"x":336,"y":4014,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":70,"h":70},"sourceSize":{"w":96,"h":96}},"map-stone-01x.img":{"frame":{"x":2155,"y":1928,"w":151,"h":149},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":151,"h":149},"sourceSize":{"w":160,"h":160}},"map-stone-03x.img":{"frame":{"x":1777,"y":3233,"w":276,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":8,"w":276,"h":272},"sourceSize":{"w":288,"h":288}},"map-stone-res-01x.img":{"frame":{"x":1135,"y":3866,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":118,"h":118},"sourceSize":{"w":120,"h":120}},"map-stone-res-02x.img":{"frame":{"x":1420,"y":1640,"w":200,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":200},"sourceSize":{"w":200,"h":200}},"map-table-01x.img":{"frame":{"x":710,"y":1207,"w":160,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":128},"sourceSize":{"w":160,"h":128}},"map-table-02x.img":{"frame":{"x":1337,"y":3091,"w":288,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":160},"sourceSize":{"w":288,"h":160}},"map-table-03x.img":{"frame":{"x":2111,"y":2252,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-tree-05.img":{"frame":{"x":1831,"y":1444,"w":490,"h":480},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":17,"w":490,"h":480},"sourceSize":{"w":512,"h":512}},"map-tree-07.img":{"frame":{"x":1973,"y":3509,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-07sp.img":{"frame":{"x":2067,"y":3769,"w":256,"h":256},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":256},"sourceSize":{"w":256,"h":256}},"map-tree-08.img":{"frame":{"x":1261,"y":3258,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-08sp.img":{"frame":{"x":1337,"y":2347,"w":512,"h":510},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":512,"h":510},"sourceSize":{"w":512,"h":512}},"map-tree-10.img":{"frame":{"x":1853,"y":2252,"w":254,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":254,"h":254},"sourceSize":{"w":256,"h":256}},"map-tree-11.img":{"frame":{"x":1853,"y":2510,"w":250,"h":250},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":250,"h":250},"sourceSize":{"w":256,"h":256}},"map-tree-switch-01.img":{"frame":{"x":735,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-02.img":{"frame":{"x":851,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-03.img":{"frame":{"x":967,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-tree-switch-04.img":{"frame":{"x":1083,"y":2525,"w":112,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":112},"sourceSize":{"w":112,"h":112}},"map-woodpile-02.img":{"frame":{"x":1420,"y":1444,"w":384,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":192},"sourceSize":{"w":384,"h":192}},"map-woodpile-res-02.img":{"frame":{"x":1135,"y":3806,"w":121,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":121,"h":56},"sourceSize":{"w":128,"h":64}}}}]');
const fullResAtlasDefs = {
  cobalt: cobalt$1,
  desert: desert$1,
  faction: faction$1,
  gradient: gradient$1,
  halloween: halloween$1,
  loadout: loadout$1,
  main: main$1,
  potato: potato$1,
  savannah: savannah$1,
  shared: shared$1,
  snow: snow$1,
  woods: woods$1
};
const cobalt = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"cobalt-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-bunker-crossing-ceiling-01.img":{"frame":{"x":750,"y":910,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":2,"y":910,"w":568,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":914,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":914,"h":176},"sourceSize":{"w":915,"h":177}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":366,"y":1542,"w":305,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":305,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":722,"y":1440,"w":109,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":109,"h":96},"sourceSize":{"w":115,"h":97}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":2,"y":1659,"w":352,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":160,"w":352,"h":127},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":2,"y":1790,"w":352,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":161,"w":352,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":877,"y":1616,"w":64,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":1407,"w":360,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":920,"y":2,"w":752,"h":464},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":714,"y":1542,"w":159,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":159,"h":304},"sourceSize":{"w":160,"h":304}},"map-bunker-crossing-floor-01.img":{"frame":{"x":942,"y":1230,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":133,"y":1920,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":217,"y":1920,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":722,"y":1284,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":877,"y":1440,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":914,"y":1051,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":359,"y":1034,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1041,"y":1513,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":2,"y":1034,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":574,"y":910,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1676,"y":2,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":750,"y":1051,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1593,"y":778,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1014,"y":1051,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":358,"y":1659,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":182,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":366,"y":1284,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1593,"y":470,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":359,"y":1174,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bunker-twins-ceiling-01.img":{"frame":{"x":1041,"y":1394,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-twins-chamber-ceiling-01.img":{"frame":{"x":714,"y":1850,"w":256,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":176},"sourceSize":{"w":256,"h":176}},"map-bunker-twins-chamber-floor-01.img":{"frame":{"x":853,"y":470,"w":736,"h":577},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":48,"y":63,"w":736,"h":577},"sourceSize":{"w":832,"h":704}},"map-class-crate-03.img":{"frame":{"x":1088,"y":1614,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":67,"h":67},"sourceSize":{"w":74,"h":74}},"map-class-crate-assault.img":{"frame":{"x":1183,"y":1187,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-demo.img":{"frame":{"x":1255,"y":1110,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-healer.img":{"frame":{"x":1183,"y":1262,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-res-01.img":{"frame":{"x":853,"y":182,"w":62,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":62,"h":64},"sourceSize":{"w":74,"h":74}},"map-class-crate-scout.img":{"frame":{"x":974,"y":1836,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-sniper.img":{"frame":{"x":1031,"y":1759,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-crate-tank.img":{"frame":{"x":974,"y":1911,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":71,"h":71},"sourceSize":{"w":74,"h":74}},"map-class-shell-01a.img":{"frame":{"x":877,"y":1772,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-01b.img":{"frame":{"x":954,"y":1759,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-02a.img":{"frame":{"x":1106,"y":1190,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-02b.img":{"frame":{"x":1178,"y":1110,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-03a.img":{"frame":{"x":1106,"y":1267,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-class-shell-03b.img":{"frame":{"x":1141,"y":1344,"w":73,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":73,"h":73},"sourceSize":{"w":80,"h":80}},"map-complex-warehouse-floor-01.img":{"frame":{"x":675,"y":1542,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":1997,"y":778,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":301,"y":1920,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-stone-01cb.img":{"frame":{"x":1141,"y":1421,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-03cb.img":{"frame":{"x":945,"y":1616,"w":139,"h":139},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":139,"h":139},"sourceSize":{"w":144,"h":144}},"map-stone-res-01cb.img":{"frame":{"x":974,"y":1986,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02cb.img":{"frame":{"x":463,"y":1174,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-tree-03cb.img":{"frame":{"x":2,"y":1920,"w":127,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":127,"h":126},"sourceSize":{"w":128,"h":128}},"part-class-shell-01a.img":{"frame":{"x":750,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-01b.img":{"frame":{"x":1014,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-02a.img":{"frame":{"x":798,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-02b.img":{"frame":{"x":1044,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}},"part-class-shell-03a.img":{"frame":{"x":846,"y":1235,"w":44,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":44,"h":44},"sourceSize":{"w":48,"h":48}},"part-class-shell-03b.img":{"frame":{"x":1074,"y":1190,"w":26,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":26,"h":32},"sourceSize":{"w":26,"h":32}}}}]');
const desert = [{ "meta": { "image": "desert-0-50.png", "size": { "w": 2048, "h": 2048 }, "scale": 0.5 }, "frames": { "map-archway-res-01.img": { "frame": { "x": 1003, "y": 646, "w": 179, "h": 45 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 179, "h": 45 }, "sourceSize": { "w": 180, "h": 48 } }, "map-building-archway-ceiling-01.img": { "frame": { "x": 927, "y": 438, "w": 336, "h": 64 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 336, "h": 64 }, "sourceSize": { "w": 336, "h": 64 } }, "map-building-greenhouse-ceiling-02.img": { "frame": { "x": 1735, "y": 2, "w": 200, "h": 312 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 200, "h": 312 }, "sourceSize": { "w": 200, "h": 312 } }, "map-building-greenhouse-floor-02.img": { "frame": { "x": 1315, "y": 2, "w": 416, "h": 321 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 416, "h": 321 }, "sourceSize": { "w": 417, "h": 321 } }, "map-building-saloon-ceiling-01.img": { "frame": { "x": 1719, "y": 327, "w": 312, "h": 312 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 312, "h": 312 }, "sourceSize": { "w": 328, "h": 328 } }, "map-building-saloon-ceiling-02.img": { "frame": { "x": 1939, "y": 121, "w": 96, "h": 80 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 96, "h": 80 }, "sourceSize": { "w": 96, "h": 80 } }, "map-building-saloon-cellar-01.img": { "frame": { "x": 2, "y": 662, "w": 528, "h": 336 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 528, "h": 336 }, "sourceSize": { "w": 528, "h": 336 } }, "map-building-saloon-floor-01.img": { "frame": { "x": 2, "y": 2, "w": 656, "h": 656 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 656, "h": 656 }, "sourceSize": { "w": 656, "h": 656 } }, "map-bunker-chrys-chamber-ceiling-01.img": { "frame": { "x": 924, "y": 506, "w": 224, "h": 136 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 224, "h": 136 }, "sourceSize": { "w": 224, "h": 136 } }, "map-bunker-chrys-chamber-floor-01a.img": { "frame": { "x": 1939, "y": 205, "w": 80, "h": 74 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 17, "y": 16, "w": 80, "h": 74 }, "sourceSize": { "w": 114, "h": 90 } }, "map-bunker-chrys-chamber-floor-01b.img": { "frame": { "x": 534, "y": 662, "w": 465, "h": 313 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 465, "h": 313 }, "sourceSize": { "w": 466, "h": 314 } }, "map-bunker-chrys-compartment-ceiling-01a.img": { "frame": { "x": 1631, "y": 837, "w": 56, "h": 96 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 56, "h": 96 }, "sourceSize": { "w": 56, "h": 96 } }, "map-bunker-chrys-compartment-ceiling-01b.img": { "frame": { "x": 1837, "y": 918, "w": 177, "h": 184 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 177, "h": 184 }, "sourceSize": { "w": 178, "h": 186 } }, "map-bunker-chrys-compartment-ceiling-02a.img": { "frame": { "x": 662, "y": 566, "w": 112, "h": 48 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 112, "h": 48 }, "sourceSize": { "w": 112, "h": 48 } }, "map-bunker-chrys-compartment-ceiling-02b.img": { "frame": { "x": 1631, "y": 952, "w": 176, "h": 129 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 176, "h": 129 }, "sourceSize": { "w": 178, "h": 130 } }, "map-bunker-chrys-compartment-ceiling-03a.img": { "frame": { "x": 778, "y": 566, "w": 112, "h": 48 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 112, "h": 48 }, "sourceSize": { "w": 112, "h": 48 } }, "map-bunker-chrys-compartment-ceiling-03b.img": { "frame": { "x": 1392, "y": 968, "w": 176, "h": 153 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 176, "h": 153 }, "sourceSize": { "w": 178, "h": 154 } }, "map-bunker-chrys-compartment-floor-01a.img": { "frame": { "x": 1719, "y": 643, "w": 114, "h": 305 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 16, "w": 114, "h": 305 }, "sourceSize": { "w": 114, "h": 322 } }, "map-bunker-chrys-compartment-floor-01c.img": { "frame": { "x": 1315, "y": 327, "w": 400, "h": 387 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 400, "h": 387 }, "sourceSize": { "w": 402, "h": 402 } }, "map-bunker-chrys-compartment-floor-02a.img": { "frame": { "x": 1003, "y": 718, "w": 385, "h": 314 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 385, "h": 314 }, "sourceSize": { "w": 386, "h": 314 } }, "map-bunker-chrys-compartment-floor-02c.img": { "frame": { "x": 662, "y": 472, "w": 258, "h": 90 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 8, "y": 0, "w": 258, "h": 90 }, "sourceSize": { "w": 274, "h": 90 } }, "map-bunker-chrys-compartment-floor-03a.img": { "frame": { "x": 927, "y": 2, "w": 384, "h": 432 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 384, "h": 432 }, "sourceSize": { "w": 384, "h": 432 } }, "map-bunker-generic-ceiling-02.img": { "frame": { "x": 1631, "y": 718, "w": 80, "h": 115 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 115 }, "sourceSize": { "w": 80, "h": 115 } }, "map-bunker-generic-floor-03.img": { "frame": { "x": 1939, "y": 2, "w": 80, "h": 115 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 115 }, "sourceSize": { "w": 80, "h": 115 } }, "map-bunker-statue-chamber-floor-01.img": { "frame": { "x": 1837, "y": 643, "w": 126, "h": 271 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 16, "w": 126, "h": 271 }, "sourceSize": { "w": 128, "h": 288 } }, "map-bush-05.img": { "frame": { "x": 534, "y": 979, "w": 70, "h": 70 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 70, "h": 70 }, "sourceSize": { "w": 72, "h": 72 } }, "map-bush-res-05.img": { "frame": { "x": 2018, "y": 871, "w": 28, "h": 25 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 22, "y": 23, "w": 28, "h": 25 }, "sourceSize": { "w": 72, "h": 72 } }, "map-case-meteor-01.img": { "frame": { "x": 608, "y": 979, "w": 70, "h": 51 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 70, "h": 51 }, "sourceSize": { "w": 70, "h": 51 } }, "map-case-meteor-res-01.img": { "frame": { "x": 756, "y": 979, "w": 64, "h": 57 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 6, "y": 5, "w": 64, "h": 57 }, "sourceSize": { "w": 72, "h": 72 } }, "map-chest-03d.img": { "frame": { "x": 682, "y": 979, "w": 70, "h": 51 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 70, "h": 51 }, "sourceSize": { "w": 70, "h": 51 } }, "map-complex-warehouse-floor-05.img": { "frame": { "x": 662, "y": 2, "w": 261, "h": 466 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 504, "w": 261, "h": 466 }, "sourceSize": { "w": 648, "h": 1024 } }, "map-crate-02f.img": { "frame": { "x": 1967, "y": 643, "w": 72, "h": 72 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 72 }, "sourceSize": { "w": 72, "h": 72 } }, "map-crate-18.img": { "frame": { "x": 1967, "y": 719, "w": 72, "h": 72 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 72 }, "sourceSize": { "w": 72, "h": 72 } }, "map-crate-22.img": { "frame": { "x": 1967, "y": 795, "w": 72, "h": 72 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 72 }, "sourceSize": { "w": 72, "h": 72 } }, "map-planter-06.img": { "frame": { "x": 1186, "y": 574, "w": 72, "h": 136 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 136 }, "sourceSize": { "w": 72, "h": 136 } }, "map-planter-07.img": { "frame": { "x": 1572, "y": 968, "w": 50, "h": 50 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 50, "h": 50 }, "sourceSize": { "w": 50, "h": 50 } }, "map-planter-res-02.img": { "frame": { "x": 2e3, "y": 1246, "w": 38, "h": 67 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 0, "w": 38, "h": 67 }, "sourceSize": { "w": 43, "h": 68 } }, "map-planter-res-03.img": { "frame": { "x": 1267, "y": 438, "w": 41, "h": 37 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 3, "w": 41, "h": 37 }, "sourceSize": { "w": 43, "h": 43 } }, "map-statue-03.img": { "frame": { "x": 1572, "y": 1085, "w": 144, "h": 141 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 33, "y": 33, "w": 144, "h": 141 }, "sourceSize": { "w": 208, "h": 208 } }, "map-statue-04.img": { "frame": { "x": 1720, "y": 1106, "w": 144, "h": 141 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 33, "y": 33, "w": 144, "h": 141 }, "sourceSize": { "w": 208, "h": 208 } }, "map-stone-03b.img": { "frame": { "x": 1868, "y": 1106, "w": 138, "h": 136 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 4, "w": 138, "h": 136 }, "sourceSize": { "w": 144, "h": 144 } }, "map-stone-06.img": { "frame": { "x": 1152, "y": 506, "w": 144, "h": 64 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 144, "h": 64 }, "sourceSize": { "w": 144, "h": 64 } }, "map-stone-res-01b.img": { "frame": { "x": 608, "y": 1034, "w": 59, "h": 59 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 59, "h": 59 }, "sourceSize": { "w": 60, "h": 60 } }, "map-tree-05c.img": { "frame": { "x": 1392, "y": 718, "w": 235, "h": 246 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 10, "y": 5, "w": 235, "h": 246 }, "sourceSize": { "w": 256, "h": 256 } }, "map-tree-06.img": { "frame": { "x": 1868, "y": 1246, "w": 128, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 }, "sourceSize": { "w": 128, "h": 128 } } } }];
const faction = [{ "meta": { "image": "faction-0-50.png", "size": { "w": 2048, "h": 2048 }, "scale": 0.5 }, "frames": { "map-airdrop-03.img": { "frame": { "x": 1890, "y": 741, "w": 128, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 }, "sourceSize": { "w": 128, "h": 128 } }, "map-airdrop-04.img": { "frame": { "x": 1890, "y": 873, "w": 128, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 }, "sourceSize": { "w": 128, "h": 128 } }, "map-building-bridge-xlg-floor.img": { "frame": { "x": 2, "y": 2, "w": 1232, "h": 480 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 1232, "h": 480 }, "sourceSize": { "w": 1232, "h": 480 } }, "map-building-greenhouse-ceiling-01.img": { "frame": { "x": 860, "y": 1017, "w": 200, "h": 157 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 200, "h": 157 }, "sourceSize": { "w": 202, "h": 158 } }, "map-building-greenhouse-floor-01.img": { "frame": { "x": 390, "y": 486, "w": 416, "h": 320 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 416, "h": 320 }, "sourceSize": { "w": 417, "h": 321 } }, "map-bunker-chrys-chamber-ceiling-01.img": { "frame": { "x": 860, "y": 877, "w": 224, "h": 136 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 224, "h": 136 }, "sourceSize": { "w": 224, "h": 136 } }, "map-bunker-chrys-chamber-floor-01a.img": { "frame": { "x": 380, "y": 950, "w": 80, "h": 74 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 17, "y": 16, "w": 80, "h": 74 }, "sourceSize": { "w": 114, "h": 90 } }, "map-bunker-chrys-chamber-floor-01b.img": { "frame": { "x": 2, "y": 1030, "w": 465, "h": 313 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 465, "h": 313 }, "sourceSize": { "w": 466, "h": 314 } }, "map-bunker-chrys-compartment-ceiling-01a.img": { "frame": { "x": 106, "y": 1944, "w": 56, "h": 96 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 56, "h": 96 }, "sourceSize": { "w": 56, "h": 96 } }, "map-bunker-chrys-compartment-ceiling-01b.img": { "frame": { "x": 2, "y": 1347, "w": 177, "h": 184 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 177, "h": 184 }, "sourceSize": { "w": 178, "h": 186 } }, "map-bunker-chrys-compartment-ceiling-02a.img": { "frame": { "x": 264, "y": 922, "w": 112, "h": 48 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 112, "h": 48 }, "sourceSize": { "w": 112, "h": 48 } }, "map-bunker-chrys-compartment-ceiling-02b.img": { "frame": { "x": 2, "y": 1535, "w": 176, "h": 129 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 176, "h": 129 }, "sourceSize": { "w": 178, "h": 130 } }, "map-bunker-chrys-compartment-ceiling-03a.img": { "frame": { "x": 264, "y": 974, "w": 112, "h": 48 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 112, "h": 48 }, "sourceSize": { "w": 112, "h": 48 } }, "map-bunker-chrys-compartment-ceiling-03b.img": { "frame": { "x": 2, "y": 1668, "w": 176, "h": 153 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 176, "h": 153 }, "sourceSize": { "w": 178, "h": 154 } }, "map-bunker-chrys-compartment-floor-01a.img": { "frame": { "x": 1890, "y": 2, "w": 114, "h": 305 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 16, "w": 114, "h": 305 }, "sourceSize": { "w": 114, "h": 322 } }, "map-bunker-chrys-compartment-floor-01b.img": { "frame": { "x": 810, "y": 486, "w": 400, "h": 387 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 400, "h": 387 }, "sourceSize": { "w": 402, "h": 402 } }, "map-bunker-chrys-compartment-floor-02a.img": { "frame": { "x": 471, "y": 877, "w": 385, "h": 314 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 385, "h": 314 }, "sourceSize": { "w": 386, "h": 314 } }, "map-bunker-chrys-compartment-floor-02b.img": { "frame": { "x": 2, "y": 922, "w": 258, "h": 90 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 8, "y": 0, "w": 258, "h": 90 }, "sourceSize": { "w": 274, "h": 90 } }, "map-bunker-chrys-compartment-floor-03a.img": { "frame": { "x": 2, "y": 486, "w": 384, "h": 432 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 384, "h": 432 }, "sourceSize": { "w": 384, "h": 432 } }, "map-bunker-generic-ceiling-02.img": { "frame": { "x": 2, "y": 1825, "w": 80, "h": 115 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 115 }, "sourceSize": { "w": 80, "h": 115 } }, "map-bunker-generic-floor-03.img": { "frame": { "x": 86, "y": 1825, "w": 80, "h": 115 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 115 }, "sourceSize": { "w": 80, "h": 115 } }, "map-chest-03f.img": { "frame": { "x": 466, "y": 810, "w": 70, "h": 51 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 70, "h": 51 }, "sourceSize": { "w": 70, "h": 51 } }, "map-complex-warehouse-floor-01.img": { "frame": { "x": 2014, "y": 1005, "w": 30, "h": 112 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 30, "h": 112 }, "sourceSize": { "w": 30, "h": 112 } }, "map-complex-warehouse-floor-02.img": { "frame": { "x": 2008, "y": 2, "w": 30, "h": 264 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 30, "h": 264 }, "sourceSize": { "w": 30, "h": 264 } }, "map-complex-warehouse-floor-03.img": { "frame": { "x": 2014, "y": 1121, "w": 30, "h": 112 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 30, "h": 112 }, "sourceSize": { "w": 30, "h": 112 } }, "map-complex-warehouse-floor-04.img": { "frame": { "x": 1238, "y": 2, "w": 648, "h": 1024 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 648, "h": 1024 }, "sourceSize": { "w": 648, "h": 1024 } }, "map-crate-02f.img": { "frame": { "x": 166, "y": 1944, "w": 72, "h": 72 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 72 }, "sourceSize": { "w": 72, "h": 72 } }, "map-crate-12.img": { "frame": { "x": 1890, "y": 1005, "w": 120, "h": 120 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 120, "h": 120 }, "sourceSize": { "w": 120, "h": 120 } }, "map-crate-13.img": { "frame": { "x": 1064, "y": 1022, "w": 120, "h": 120 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 120, "h": 120 }, "sourceSize": { "w": 120, "h": 120 } }, "map-crate-22.img": { "frame": { "x": 170, "y": 1825, "w": 72, "h": 72 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 72 }, "sourceSize": { "w": 72, "h": 72 } }, "map-planter-01.img": { "frame": { "x": 390, "y": 810, "w": 72, "h": 136 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 136 }, "sourceSize": { "w": 72, "h": 136 } }, "map-planter-02.img": { "frame": { "x": 1890, "y": 601, "w": 72, "h": 136 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 136 }, "sourceSize": { "w": 72, "h": 136 } }, "map-planter-03.img": { "frame": { "x": 1966, "y": 601, "w": 72, "h": 136 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 136 }, "sourceSize": { "w": 72, "h": 136 } }, "map-planter-04.img": { "frame": { "x": 540, "y": 810, "w": 50, "h": 50 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 50, "h": 50 }, "sourceSize": { "w": 50, "h": 50 } }, "map-planter-05.img": { "frame": { "x": 594, "y": 810, "w": 50, "h": 50 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 50, "h": 50 }, "sourceSize": { "w": 50, "h": 50 } }, "map-planter-res-01.img": { "frame": { "x": 1188, "y": 1022, "w": 38, "h": 67 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 0, "w": 38, "h": 67 }, "sourceSize": { "w": 43, "h": 68 } }, "map-statue-01.img": { "frame": { "x": 1088, "y": 877, "w": 141, "h": 141 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 33, "y": 33, "w": 141, "h": 141 }, "sourceSize": { "w": 208, "h": 208 } }, "map-statue-top-01.img": { "frame": { "x": 1890, "y": 311, "w": 139, "h": 71 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 65, "y": 66, "w": 139, "h": 71 }, "sourceSize": { "w": 208, "h": 208 } }, "map-statue-top-02.img": { "frame": { "x": 1890, "y": 386, "w": 139, "h": 71 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 65, "y": 66, "w": 139, "h": 71 }, "sourceSize": { "w": 208, "h": 208 } }, "map-stone-03f.img": { "frame": { "x": 1890, "y": 461, "w": 138, "h": 136 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 4, "w": 138, "h": 136 }, "sourceSize": { "w": 144, "h": 144 } }, "map-stone-res-02f.img": { "frame": { "x": 2, "y": 1944, "w": 100, "h": 100 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 100, "h": 100 }, "sourceSize": { "w": 100, "h": 100 } } } }];
const gradient = [{ "meta": { "image": "gradient-0-50.png", "size": { "w": 512, "h": 512 }, "scale": 0.5 }, "frames": { "map-barrel-res-01.img": { "frame": { "x": 2, "y": 135, "w": 113, "h": 109 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 10, "w": 113, "h": 109 }, "sourceSize": { "w": 128, "h": 128 } }, "map-building-club-gradient-01.img": { "frame": { "x": 2, "y": 2, "w": 117, "h": 129 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 16, "y": 4, "w": 117, "h": 129 }, "sourceSize": { "w": 146, "h": 140 } }, "map-building-mansion-gradient-01.img": { "frame": { "x": 123, "y": 2, "w": 117, "h": 102 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 4, "w": 117, "h": 102 }, "sourceSize": { "w": 124, "h": 110 } }, "map-bush-01.img": { "frame": { "x": 123, "y": 239, "w": 63, "h": 65 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 4, "y": 3, "w": 63, "h": 65 }, "sourceSize": { "w": 72, "h": 72 } }, "map-bush-01cb.img": { "frame": { "x": 48, "y": 248, "w": 71, "h": 71 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 71, "h": 71 }, "sourceSize": { "w": 72, "h": 72 } }, "map-bush-03.img": { "frame": { "x": 2, "y": 337, "w": 74, "h": 76 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 74, "h": 76 }, "sourceSize": { "w": 76, "h": 76 } }, "map-bush-04.img": { "frame": { "x": 76, "y": 417, "w": 68, "h": 65 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 4, "w": 68, "h": 65 }, "sourceSize": { "w": 75, "h": 75 } }, "map-bush-04cb.img": { "frame": { "x": 80, "y": 323, "w": 68, "h": 65 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 5, "w": 68, "h": 65 }, "sourceSize": { "w": 75, "h": 75 } }, "map-decal-flyer-01.img": { "frame": { "x": 123, "y": 108, "w": 18, "h": 22 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 1, "w": 18, "h": 22 }, "sourceSize": { "w": 24, "h": 24 } }, "map-light-01.img": { "frame": { "x": 2, "y": 417, "w": 70, "h": 70 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 70, "h": 70 }, "sourceSize": { "w": 72, "h": 72 } }, "map-plane-01.img": { "frame": { "x": 119, "y": 135, "w": 90, "h": 100 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 19, "y": 5, "w": 90, "h": 100 }, "sourceSize": { "w": 128, "h": 128 } }, "map-plane-02.img": { "frame": { "x": 2, "y": 248, "w": 42, "h": 85 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 43, "y": 1, "w": 42, "h": 85 }, "sourceSize": { "w": 128, "h": 128 } } } }];
const halloween = [{ "meta": { "image": "halloween-0-50.png", "size": { "w": 1024, "h": 1024 }, "scale": 0.5 }, "frames": { "map-airdrop-01h.img": { "frame": { "x": 358, "y": 505, "w": 80, "h": 80 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 80 }, "sourceSize": { "w": 80, "h": 80 } }, "map-airdrop-02h.img": { "frame": { "x": 358, "y": 589, "w": 80, "h": 80 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 80 }, "sourceSize": { "w": 80, "h": 80 } }, "map-bunker-eye-chamber-ceiling-01.img": { "frame": { "x": 2, "y": 678, "w": 160, "h": 272 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 272 }, "sourceSize": { "w": 160, "h": 272 } }, "map-bunker-eye-chamber-floor-01a.img": { "frame": { "x": 2, "y": 2, "w": 352, "h": 672 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 16, "w": 352, "h": 672 }, "sourceSize": { "w": 352, "h": 688 } }, "map-bunker-eye-chamber-floor-01b.img": { "frame": { "x": 166, "y": 842, "w": 96, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 96, "h": 128 }, "sourceSize": { "w": 96, "h": 128 } }, "map-bunker-eye-compartment-ceiling-01.img": { "frame": { "x": 166, "y": 678, "w": 160, "h": 160 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 160, "h": 160 }, "sourceSize": { "w": 160, "h": 160 } }, "map-bunker-eye-compartment-floor-01.img": { "frame": { "x": 358, "y": 2, "w": 352, "h": 352 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 352, "h": 352 }, "sourceSize": { "w": 352, "h": 352 } }, "map-bush-06.img": { "frame": { "x": 330, "y": 678, "w": 95, "h": 94 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 1, "w": 95, "h": 94 }, "sourceSize": { "w": 96, "h": 96 } }, "map-bush-07sp.img": { "frame": { "x": 515, "y": 358, "w": 67, "h": 71 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 3, "y": 0, "w": 67, "h": 71 }, "sourceSize": { "w": 72, "h": 72 } }, "map-bush-res-06.img": { "frame": { "x": 974, "y": 95, "w": 25, "h": 24 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 23, "y": 24, "w": 25, "h": 24 }, "sourceSize": { "w": 72, "h": 72 } }, "map-crate-11h.img": { "frame": { "x": 438, "y": 358, "w": 73, "h": 73 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 73, "h": 73 }, "sourceSize": { "w": 74, "h": 74 } }, "map-pumpkin-01.img": { "frame": { "x": 586, "y": 358, "w": 70, "h": 70 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 70, "h": 70 }, "sourceSize": { "w": 72, "h": 72 } }, "map-pumpkin-02.img": { "frame": { "x": 586, "y": 432, "w": 70, "h": 70 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 70, "h": 70 }, "sourceSize": { "w": 72, "h": 72 } }, "map-pumpkin-03.img": { "frame": { "x": 2, "y": 974, "w": 47, "h": 48 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 11, "y": 12, "w": 47, "h": 48 }, "sourceSize": { "w": 72, "h": 72 } }, "map-pumpkin-res-01.img": { "frame": { "x": 438, "y": 435, "w": 67, "h": 66 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 4, "w": 67, "h": 66 }, "sourceSize": { "w": 72, "h": 72 } }, "map-pumpkin-res-03.img": { "frame": { "x": 974, "y": 50, "w": 43, "h": 41 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 4, "w": 43, "h": 41 }, "sourceSize": { "w": 48, "h": 48 } }, "map-tree-04h.img": { "frame": { "x": 963, "y": 261, "w": 56, "h": 56 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 56, "h": 56 }, "sourceSize": { "w": 56, "h": 56 } }, "map-tree-05.img": { "frame": { "x": 714, "y": 261, "w": 245, "h": 240 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 5, "y": 8, "w": 245, "h": 240 }, "sourceSize": { "w": 256, "h": 256 } }, "map-tree-07.img": { "frame": { "x": 266, "y": 842, "w": 128, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 }, "sourceSize": { "w": 128, "h": 128 } }, "map-tree-08.img": { "frame": { "x": 714, "y": 2, "w": 256, "h": 255 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 256, "h": 255 }, "sourceSize": { "w": 256, "h": 256 } }, "map-web-01.img": { "frame": { "x": 358, "y": 358, "w": 76, "h": 79 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 76, "h": 79 }, "sourceSize": { "w": 76, "h": 80 } }, "part-airdrop-01h.img": { "frame": { "x": 974, "y": 2, "w": 44, "h": 44 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 44, "h": 44 }, "sourceSize": { "w": 48, "h": 48 } }, "part-airdrop-02h.img": { "frame": { "x": 53, "y": 974, "w": 40, "h": 40 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 40, "h": 40 }, "sourceSize": { "w": 40, "h": 40 } } } }];
const loadout = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"loadout-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"acorn.img":{"frame":{"x":669,"y":1529,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"ammo-12gauge.img":{"frame":{"x":991,"y":1331,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-308sub.img":{"frame":{"x":994,"y":1264,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-45acp.img":{"frame":{"x":1041,"y":1184,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-50AE.img":{"frame":{"x":976,"y":1567,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-556mm.img":{"frame":{"x":996,"y":1479,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-762mm.img":{"frame":{"x":1023,"y":1391,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-9mm.img":{"frame":{"x":1051,"y":1324,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-box.img":{"frame":{"x":1054,"y":1244,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"ammo-flare.img":{"frame":{"x":914,"y":1928,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"audio-off.img":{"frame":{"x":1423,"y":1800,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":12,"w":46,"h":40},"sourceSize":{"w":64,"h":64}},"audio-on.img":{"frame":{"x":1423,"y":1844,"w":46,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":12,"w":46,"h":40},"sourceSize":{"w":64,"h":64}},"baguette.img":{"frame":{"x":1376,"y":1695,"w":49,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":49,"h":49},"sourceSize":{"w":64,"h":64}},"bugle-final-blue.img":{"frame":{"x":800,"y":1907,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"bugle-final-red.img":{"frame":{"x":848,"y":1839,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-blue.img":{"frame":{"x":718,"y":1591,"w":44,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":44,"h":58},"sourceSize":{"w":64,"h":64}},"bugle-inspiration-red.img":{"frame":{"x":746,"y":1653,"w":44,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":3,"w":44,"h":58},"sourceSize":{"w":64,"h":64}},"bullets.img":{"frame":{"x":1189,"y":69,"w":43,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":43,"h":62},"sourceSize":{"w":64,"h":64}},"campfire.img":{"frame":{"x":104,"y":1590,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"candy-corn.img":{"frame":{"x":245,"y":1719,"w":52,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":61},"sourceSize":{"w":64,"h":64}},"cattle.img":{"frame":{"x":498,"y":1481,"w":59,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":56},"sourceSize":{"w":64,"h":64}},"checked.img":{"frame":{"x":1012,"y":976,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"chick.img":{"frame":{"x":960,"y":1867,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"chicken-dinner.img":{"frame":{"x":535,"y":860,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"chicken.img":{"frame":{"x":521,"y":2005,"w":53,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":11,"w":53,"h":41},"sourceSize":{"w":64,"h":64}},"close.img":{"frame":{"x":1079,"y":748,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"cobalt.img":{"frame":{"x":725,"y":1566,"w":21,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":21,"h":21},"sourceSize":{"w":24,"h":24}},"coconut.img":{"frame":{"x":746,"y":1390,"w":55,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":9,"w":55,"h":45},"sourceSize":{"w":64,"h":64}},"cog.img":{"frame":{"x":1101,"y":1182,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":42,"h":42},"sourceSize":{"w":64,"h":64}},"copy.img":{"frame":{"x":1323,"y":1861,"w":44,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":8,"w":44,"h":48},"sourceSize":{"w":64,"h":64}},"crab.img":{"frame":{"x":1317,"y":1807,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":50},"sourceSize":{"w":64,"h":64}},"crosshair.img":{"frame":{"x":1356,"y":1913,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"crown.img":{"frame":{"x":794,"y":1688,"w":27,"h":23},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":27,"h":23},"sourceSize":{"w":32,"h":32}},"cupcake.img":{"frame":{"x":247,"y":1648,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":61},"sourceSize":{"w":64,"h":64}},"danger.img":{"frame":{"x":502,"y":1410,"w":59,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":59,"h":54},"sourceSize":{"w":64,"h":64}},"dc.img":{"frame":{"x":433,"y":791,"w":26,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":26,"h":26},"sourceSize":{"w":32,"h":32}},"donut.img":{"frame":{"x":396,"y":1892,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"dot.img":{"frame":{"x":257,"y":672,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":16,"h":16},"sourceSize":{"w":18,"h":18}},"down.img":{"frame":{"x":535,"y":925,"w":26,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":26,"h":26},"sourceSize":{"w":32,"h":32}},"egg.img":{"frame":{"x":404,"y":1956,"w":49,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":49,"h":60},"sourceSize":{"w":64,"h":64}},"eggplant.img":{"frame":{"x":1115,"y":1570,"w":53,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":53,"h":51},"sourceSize":{"w":64,"h":64}},"emote-circle-outer.img":{"frame":{"x":2,"y":257,"w":126,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":126,"h":127},"sourceSize":{"w":128,"h":128}},"emote-medical-healthkit.img":{"frame":{"x":498,"y":1541,"w":59,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":59,"h":52},"sourceSize":{"w":64,"h":64}},"emote.img":{"frame":{"x":273,"y":1919,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"eye.img":{"frame":{"x":138,"y":1022,"w":64,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":64,"h":41},"sourceSize":{"w":64,"h":64}},"face-alien.img":{"frame":{"x":112,"y":1455,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-angel-treat.img":{"frame":{"x":504,"y":678,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"face-angry.img":{"frame":{"x":113,"y":1388,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-bandaged.img":{"frame":{"x":135,"y":1322,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-dab.img":{"frame":{"x":201,"y":706,"w":72,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":11,"w":72,"h":49},"sourceSize":{"w":72,"h":72}},"face-disappoint.img":{"frame":{"x":112,"y":1521,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-happy.img":{"frame":{"x":53,"y":1723,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-headshot.img":{"frame":{"x":2,"y":1207,"w":63,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":12,"w":63,"h":44},"sourceSize":{"w":64,"h":64}},"face-heart.img":{"frame":{"x":53,"y":1789,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-imp-trick.img":{"frame":{"x":2,"y":1255,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"face-imp.img":{"frame":{"x":68,"y":1255,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":62},"sourceSize":{"w":64,"h":64}},"face-joy.img":{"frame":{"x":53,"y":1855,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-monocle.img":{"frame":{"x":53,"y":1921,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-picasso.img":{"frame":{"x":119,"y":1723,"w":61,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":62},"sourceSize":{"w":64,"h":64}},"face-poo.img":{"frame":{"x":990,"y":70,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"face-sad.img":{"frame":{"x":120,"y":1656,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-sob.img":{"frame":{"x":166,"y":1587,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-sunglass.img":{"frame":{"x":178,"y":1454,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"face-thinking.img":{"frame":{"x":1002,"y":2,"w":62,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":63},"sourceSize":{"w":64,"h":64}},"face-upsidedown.img":{"frame":{"x":179,"y":1388,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"fish.img":{"frame":{"x":302,"y":975,"w":64,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":64,"h":46},"sourceSize":{"w":64,"h":64}},"flag-albania.img":{"frame":{"x":569,"y":746,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-algeria.img":{"frame":{"x":572,"y":678,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-argentina.img":{"frame":{"x":574,"y":582,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-australia.img":{"frame":{"x":630,"y":477,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-austria.img":{"frame":{"x":665,"y":393,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-azerbaijan.img":{"frame":{"x":712,"y":317,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belarus.img":{"frame":{"x":718,"y":227,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-belgium.img":{"frame":{"x":752,"y":145,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bolivia.img":{"frame":{"x":798,"y":65,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-bosnia-and-herzegovina.img":{"frame":{"x":603,"y":814,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-brazil.img":{"frame":{"x":637,"y":746,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-canada.img":{"frame":{"x":603,"y":882,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-chile.img":{"frame":{"x":604,"y":950,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-china.img":{"frame":{"x":640,"y":650,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-colombia.img":{"frame":{"x":642,"y":545,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-croatia.img":{"frame":{"x":698,"y":461,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-czech-republic.img":{"frame":{"x":733,"y":385,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-denmark.img":{"frame":{"x":780,"y":295,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-dominican-republic.img":{"frame":{"x":786,"y":213,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ecuador.img":{"frame":{"x":820,"y":133,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-egypt.img":{"frame":{"x":866,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-estonia.img":{"frame":{"x":934,"y":2,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-finland.img":{"frame":{"x":671,"y":814,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-france.img":{"frame":{"x":671,"y":882,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-georgia.img":{"frame":{"x":672,"y":950,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-germany.img":{"frame":{"x":705,"y":718,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-greece.img":{"frame":{"x":708,"y":613,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-guatemala.img":{"frame":{"x":710,"y":529,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-honduras.img":{"frame":{"x":766,"y":453,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hong-kong.img":{"frame":{"x":801,"y":363,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-hungary.img":{"frame":{"x":848,"y":281,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-india.img":{"frame":{"x":854,"y":201,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-indonesia.img":{"frame":{"x":922,"y":70,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-israel.img":{"frame":{"x":922,"y":138,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-italy.img":{"frame":{"x":922,"y":206,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-japan.img":{"frame":{"x":916,"y":274,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-kazakhstan.img":{"frame":{"x":916,"y":342,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-latvia.img":{"frame":{"x":869,"y":410,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-lithuania.img":{"frame":{"x":937,"y":410,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-malaysia.img":{"frame":{"x":739,"y":786,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-mexico.img":{"frame":{"x":739,"y":854,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-moldova.img":{"frame":{"x":740,"y":922,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-morocco.img":{"frame":{"x":773,"y":681,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-netherlands.img":{"frame":{"x":776,"y":597,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-new-zealand.img":{"frame":{"x":778,"y":521,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-norway.img":{"frame":{"x":807,"y":749,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-palestine.img":{"frame":{"x":984,"y":342,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-peru.img":{"frame":{"x":841,"y":665,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-philippines.img":{"frame":{"x":844,"y":589,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-portugal.img":{"frame":{"x":807,"y":817,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-republic-of-poland.img":{"frame":{"x":846,"y":478,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-romania.img":{"frame":{"x":914,"y":478,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-russia.img":{"frame":{"x":912,"y":546,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-serbia.img":{"frame":{"x":912,"y":614,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-singapore.img":{"frame":{"x":909,"y":682,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-slovakia.img":{"frame":{"x":808,"y":885,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-south-korea.img":{"frame":{"x":808,"y":953,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-spain.img":{"frame":{"x":875,"y":750,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-sweden.img":{"frame":{"x":943,"y":750,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-switzerland.img":{"frame":{"x":876,"y":818,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-taiwan.img":{"frame":{"x":944,"y":818,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-thailand.img":{"frame":{"x":876,"y":886,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-trinidad-and-tobago.img":{"frame":{"x":876,"y":954,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-turkey.img":{"frame":{"x":944,"y":886,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-ukraine.img":{"frame":{"x":944,"y":954,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-arab-emirates.img":{"frame":{"x":740,"y":990,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-kingdom.img":{"frame":{"x":977,"y":682,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-united-states-of-america.img":{"frame":{"x":808,"y":1021,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-uruguay.img":{"frame":{"x":1011,"y":750,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-venezuela.img":{"frame":{"x":370,"y":975,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flag-vietnam.img":{"frame":{"x":984,"y":274,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"flex.img":{"frame":{"x":776,"y":1715,"w":54,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":54,"h":58},"sourceSize":{"w":64,"h":64}},"forest.img":{"frame":{"x":245,"y":1400,"w":60,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":7,"w":60,"h":49},"sourceSize":{"w":64,"h":64}},"gas.img":{"frame":{"x":669,"y":1278,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"gg.img":{"frame":{"x":1002,"y":1144,"w":57,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":14,"w":57,"h":36},"sourceSize":{"w":64,"h":64}},"ghost-base.img":{"frame":{"x":628,"y":1394,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"globe.img":{"frame":{"x":834,"y":431,"w":31,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":31},"sourceSize":{"w":32,"h":32}},"gun-an94-01.img":{"frame":{"x":336,"y":366,"w":20,"h":102},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":14,"w":20,"h":102},"sourceSize":{"w":28,"h":116}},"gun-awc-01.img":{"frame":{"x":424,"y":136,"w":22,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":113},"sourceSize":{"w":30,"h":118}},"gun-awc-02.img":{"frame":{"x":263,"y":170,"w":22,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":22,"h":113},"sourceSize":{"w":30,"h":118}},"gun-bar-01.img":{"frame":{"x":289,"y":216,"w":29,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":16,"w":29,"h":108},"sourceSize":{"w":88,"h":124}},"gun-bugle-01.img":{"frame":{"x":302,"y":900,"w":32,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":44,"w":32,"h":71},"sourceSize":{"w":48,"h":116}},"gun-deagle-01.img":{"frame":{"x":297,"y":1175,"w":20,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":54,"w":20,"h":62},"sourceSize":{"w":28,"h":116}},"gun-dp28-01.img":{"frame":{"x":403,"y":25,"w":17,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":17,"h":114},"sourceSize":{"w":28,"h":116}},"gun-dp28-top-01.img":{"frame":{"x":1052,"y":818,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":35,"h":35},"sourceSize":{"w":35,"h":35}},"gun-famas-01.img":{"frame":{"x":314,"y":507,"w":18,"h":83},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":21,"w":18,"h":83},"sourceSize":{"w":24,"h":104}},"gun-flare-01.img":{"frame":{"x":805,"y":1450,"w":12,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":68,"w":12,"h":48},"sourceSize":{"w":28,"h":116}},"gun-garand-01.img":{"frame":{"x":263,"y":398,"w":16,"h":106},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":16,"h":106},"sourceSize":{"w":24,"h":116}},"gun-groza-01.img":{"frame":{"x":102,"y":752,"w":18,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":31,"w":18,"h":73},"sourceSize":{"w":24,"h":104}},"gun-grozas-01.img":{"frame":{"x":421,"y":361,"w":18,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":9,"w":18,"h":94},"sourceSize":{"w":24,"h":104}},"gun-long-01.img":{"frame":{"x":406,"y":143,"w":14,"h":92},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":92},"sourceSize":{"w":14,"h":92}},"gun-m1014-01.img":{"frame":{"x":360,"y":366,"w":22,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":20,"w":22,"h":96},"sourceSize":{"w":28,"h":116}},"gun-m249-bot-01.img":{"frame":{"x":452,"y":1155,"w":36,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":20},"sourceSize":{"w":36,"h":20}},"gun-m249-top-01.img":{"frame":{"x":263,"y":287,"w":18,"h":107},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":9,"w":18,"h":107},"sourceSize":{"w":28,"h":116}},"gun-m4a1-01.img":{"frame":{"x":443,"y":361,"w":21,"h":93},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":21,"h":93},"sourceSize":{"w":24,"h":98}},"gun-med-01.img":{"frame":{"x":450,"y":136,"w":14,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":62},"sourceSize":{"w":14,"h":62}},"gun-mp220-01.img":{"frame":{"x":888,"y":70,"w":19,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":64},"sourceSize":{"w":20,"h":64}},"gun-ots38-01.img":{"frame":{"x":201,"y":1334,"w":17,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":66,"w":17,"h":50},"sourceSize":{"w":28,"h":116}},"gun-p30l-01.img":{"frame":{"x":317,"y":328,"w":15,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":56,"w":15,"h":60},"sourceSize":{"w":28,"h":116}},"gun-pkp-bot-01.img":{"frame":{"x":1028,"y":1747,"w":38,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":38,"h":22},"sourceSize":{"w":38,"h":22}},"gun-pkp-top-01.img":{"frame":{"x":491,"y":361,"w":17,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":20,"w":17,"h":96},"sourceSize":{"w":28,"h":116}},"gun-potato-cannon-01.img":{"frame":{"x":468,"y":2,"w":28,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":124},"sourceSize":{"w":28,"h":124}},"gun-potato-smg-01.img":{"frame":{"x":283,"y":398,"w":49,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":19,"w":49,"h":105},"sourceSize":{"w":88,"h":124}},"gun-potato-smg-top-01.img":{"frame":{"x":1113,"y":655,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":32,"h":32},"sourceSize":{"w":40,"h":40}},"gun-qbb97-bot-01.img":{"frame":{"x":164,"y":896,"w":30,"h":15},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":30,"h":15},"sourceSize":{"w":32,"h":16}},"gun-qbb97-top-01.img":{"frame":{"x":263,"y":508,"w":16,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":20,"w":16,"h":84},"sourceSize":{"w":24,"h":104}},"gun-saiga-01.img":{"frame":{"x":336,"y":472,"w":20,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":20,"h":87},"sourceSize":{"w":24,"h":98}},"gun-scarssr-01.img":{"frame":{"x":468,"y":130,"w":30,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":124},"sourceSize":{"w":30,"h":124}},"gun-scorpion-01.img":{"frame":{"x":491,"y":258,"w":19,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":19,"h":99},"sourceSize":{"w":24,"h":104}},"gun-short-01.img":{"frame":{"x":642,"y":1719,"w":14,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":48},"sourceSize":{"w":14,"h":48}},"gun-usas-01.img":{"frame":{"x":444,"y":253,"w":20,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":12,"w":20,"h":104},"sourceSize":{"w":28,"h":116}},"gun-vss-01.img":{"frame":{"x":468,"y":258,"w":19,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":19,"h":104},"sourceSize":{"w":24,"h":104}},"hamburger.img":{"frame":{"x":206,"y":1022,"w":64,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":64,"h":52},"sourceSize":{"w":64,"h":64}},"hatchet.img":{"frame":{"x":377,"y":1621,"w":22,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":22,"h":19},"sourceSize":{"w":24,"h":24}},"heart.img":{"frame":{"x":1124,"y":203,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"hide.img":{"frame":{"x":138,"y":1067,"w":64,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":64,"h":53},"sourceSize":{"w":64,"h":64}},"ice-cream.img":{"frame":{"x":294,"y":1580,"w":33,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":1,"w":33,"h":61},"sourceSize":{"w":64,"h":64}},"indicator.img":{"frame":{"x":274,"y":1025,"w":45,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":45,"h":64},"sourceSize":{"w":64,"h":64}},"keyboard.img":{"frame":{"x":691,"y":1845,"w":52,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":16,"w":52,"h":31},"sourceSize":{"w":64,"h":64}},"leek.img":{"frame":{"x":1129,"y":1502,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"link.img":{"frame":{"x":206,"y":1078,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"loadout-boost.img":{"frame":{"x":552,"y":1648,"w":58,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":58,"h":59},"sourceSize":{"w":64,"h":64}},"loadout-crosshair.img":{"frame":{"x":2,"y":1071,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loadout-emote.img":{"frame":{"x":1194,"y":2,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loadout-heal.img":{"frame":{"x":692,"y":1208,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"loadout-kill-icon.img":{"frame":{"x":386,"y":1179,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"loadout-melee.img":{"frame":{"x":321,"y":1179,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loadout-outfit.img":{"frame":{"x":694,"y":1145,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loadout-player-icon.img":{"frame":{"x":952,"y":1988,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"lock.img":{"frame":{"x":614,"y":1656,"w":24,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":24,"h":32},"sourceSize":{"w":32,"h":32}},"logo-caduceus.img":{"frame":{"x":604,"y":1018,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-chrysanthemum.img":{"frame":{"x":672,"y":1018,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-cloud.img":{"frame":{"x":740,"y":1058,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-conch.img":{"frame":{"x":980,"y":546,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-crossing.img":{"frame":{"x":982,"y":478,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-egg.img":{"frame":{"x":1005,"y":410,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-hatchet.img":{"frame":{"x":980,"y":605,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-hydra.img":{"frame":{"x":1045,"y":664,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-meteor.img":{"frame":{"x":1048,"y":537,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-storm.img":{"frame":{"x":1048,"y":596,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-surviv.img":{"frame":{"x":1050,"y":469,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-swine.img":{"frame":{"x":2,"y":1012,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"logo-twins.img":{"frame":{"x":70,"y":1012,"w":64,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":64,"h":55},"sourceSize":{"w":64,"h":64}},"loot-ammo-box.img":{"frame":{"x":2,"y":1139,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-chest-01.img":{"frame":{"x":310,"y":1437,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-chest-02.img":{"frame":{"x":373,"y":1361,"w":38,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":2,"w":38,"h":60},"sourceSize":{"w":64,"h":64}},"loot-chest-03.img":{"frame":{"x":609,"y":1774,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-circle-outer-01.img":{"frame":{"x":206,"y":759,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-02.img":{"frame":{"x":206,"y":835,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-03.img":{"frame":{"x":124,"y":752,"w":73,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":73,"h":63},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-04.img":{"frame":{"x":485,"y":537,"w":70,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":66},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-05.img":{"frame":{"x":277,"y":672,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-circle-outer-06.img":{"frame":{"x":333,"y":594,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":73,"h":73}},"loot-helmet-01.img":{"frame":{"x":1012,"y":1986,"w":56,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":56,"h":51},"sourceSize":{"w":64,"h":64}},"loot-helmet-02.img":{"frame":{"x":846,"y":546,"w":59,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":13,"w":59,"h":38},"sourceSize":{"w":64,"h":64}},"loot-helmet-03.img":{"frame":{"x":69,"y":1207,"w":56,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":10,"w":56,"h":43},"sourceSize":{"w":64,"h":64}},"loot-medical-bandage.img":{"frame":{"x":687,"y":1442,"w":53,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":53,"h":58},"sourceSize":{"w":64,"h":64}},"loot-medical-healthkit.img":{"frame":{"x":543,"y":1354,"w":59,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":59,"h":52},"sourceSize":{"w":64,"h":64}},"loot-medical-heart.img":{"frame":{"x":387,"y":1242,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-medical-pill.img":{"frame":{"x":559,"y":1283,"w":59,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":9,"w":59,"h":45},"sourceSize":{"w":64,"h":64}},"loot-medical-soda.img":{"frame":{"x":1095,"y":1511,"w":30,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":4,"w":30,"h":55},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-rugged.img":{"frame":{"x":866,"y":70,"w":18,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":2,"w":18,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bayonet-woodland.img":{"frame":{"x":888,"y":138,"w":18,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":2,"w":18,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bonesaw-healer.img":{"frame":{"x":71,"y":599,"w":30,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":5,"w":30,"h":77},"sourceSize":{"w":84,"h":84}},"loot-melee-bonesaw-rusted.img":{"frame":{"x":71,"y":680,"w":27,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":11,"w":27,"h":77},"sourceSize":{"w":96,"h":96}},"loot-melee-bowie-frontier.img":{"frame":{"x":579,"y":1219,"w":21,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":21,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-bowie-vintage.img":{"frame":{"x":604,"y":1219,"w":21,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":2,"w":21,"h":59},"sourceSize":{"w":64,"h":64}},"loot-melee-crowbar-recon.img":{"frame":{"x":569,"y":256,"w":18,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":18,"h":69},"sourceSize":{"w":80,"h":80}},"loot-melee-crowbar-scout.img":{"frame":{"x":586,"y":176,"w":18,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":18,"h":69},"sourceSize":{"w":80,"h":80}},"loot-melee-fireaxe.img":{"frame":{"x":571,"y":134,"w":75,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":75,"h":38},"sourceSize":{"w":76,"h":38}},"loot-melee-hook-silver.img":{"frame":{"x":976,"y":1627,"w":21,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":12,"w":21,"h":39},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-burnished.img":{"frame":{"x":245,"y":1200,"w":12,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":3,"w":12,"h":58},"sourceSize":{"w":64,"h":64}},"loot-melee-huntsman-rugged.img":{"frame":{"x":200,"y":1986,"w":12,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":3,"w":12,"h":58},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-drowned.img":{"frame":{"x":932,"y":1331,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-prismatic.img":{"frame":{"x":1229,"y":1584,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-karambit-rugged.img":{"frame":{"x":1045,"y":723,"w":50,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":21,"w":50,"h":21},"sourceSize":{"w":64,"h":64}},"loot-melee-katana-demo.img":{"frame":{"x":2,"y":457,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-orchid.img":{"frame":{"x":2,"y":480,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana-rusted.img":{"frame":{"x":289,"y":170,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-katana.img":{"frame":{"x":289,"y":193,"w":113,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":113,"h":19},"sourceSize":{"w":115,"h":20}},"loot-melee-knuckles-heroic.img":{"frame":{"x":1135,"y":1682,"w":46,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":17,"w":46,"h":29},"sourceSize":{"w":64,"h":64}},"loot-melee-knuckles-rusted.img":{"frame":{"x":1357,"y":2017,"w":46,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":17,"w":46,"h":29},"sourceSize":{"w":64,"h":64}},"loot-melee-kukri-sniper.img":{"frame":{"x":625,"y":2,"w":20,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":1,"w":20,"h":78},"sourceSize":{"w":80,"h":80}},"loot-melee-kukri-trad.img":{"frame":{"x":649,"y":2,"w":20,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":1,"w":20,"h":78},"sourceSize":{"w":80,"h":80}},"loot-melee-machete-taiga.img":{"frame":{"x":531,"y":2,"w":22,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":1,"w":22,"h":82},"sourceSize":{"w":84,"h":84}},"loot-melee-naginata.img":{"frame":{"x":257,"y":2,"w":172,"h":19},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":7,"w":172,"h":19},"sourceSize":{"w":175,"h":27}},"loot-melee-pan-black-side.img":{"frame":{"x":322,"y":247,"w":9,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":27,"y":3,"w":9,"h":56},"sourceSize":{"w":64,"h":64}},"loot-melee-pan-black.img":{"frame":{"x":580,"y":1921,"w":59,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":59,"h":43},"sourceSize":{"w":64,"h":64}},"loot-melee-sledgehammer.img":{"frame":{"x":502,"y":223,"w":74,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":29},"sourceSize":{"w":74,"h":29}},"loot-melee-spade-assault.img":{"frame":{"x":71,"y":761,"w":27,"h":75},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":26,"y":2,"w":27,"h":75},"sourceSize":{"w":80,"h":80}},"loot-melee-stonehammer.img":{"frame":{"x":162,"y":990,"w":74,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":74,"h":28},"sourceSize":{"w":74,"h":30}},"loot-melee-warhammer-tank.img":{"frame":{"x":2,"y":388,"w":127,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":127,"h":65},"sourceSize":{"w":132,"h":76}},"loot-melee-woodaxe-bloody.img":{"frame":{"x":322,"y":216,"w":74,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":27},"sourceSize":{"w":74,"h":27}},"loot-melee-woodaxe.img":{"frame":{"x":102,"y":680,"w":74,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":27},"sourceSize":{"w":74,"h":27}},"loot-pack-00.img":{"frame":{"x":580,"y":1968,"w":45,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":2,"w":45,"h":59},"sourceSize":{"w":64,"h":64}},"loot-pack-01.img":{"frame":{"x":725,"y":1504,"w":47,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":47,"h":58},"sourceSize":{"w":64,"h":64}},"loot-pack-02.img":{"frame":{"x":629,"y":1968,"w":44,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":2,"w":44,"h":59},"sourceSize":{"w":64,"h":64}},"loot-pack-03.img":{"frame":{"x":858,"y":1961,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-aoe-heal.img":{"frame":{"x":1057,"y":136,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"loot-perk-ap-rounds.img":{"frame":{"x":1034,"y":1925,"w":56,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":56,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-assume-leadership.img":{"frame":{"x":1457,"y":1958,"w":46,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":8,"w":46,"h":47},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-45.img":{"frame":{"x":450,"y":1179,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-9mm.img":{"frame":{"x":359,"y":1501,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-bonus-assault.img":{"frame":{"x":374,"y":1425,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-broken-arrow.img":{"frame":{"x":1072,"y":1977,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":56,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-chambered.img":{"frame":{"x":415,"y":1361,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-endless-ammo.img":{"frame":{"x":1302,"y":1996,"w":51,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":51,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-explosive.img":{"frame":{"x":1111,"y":1444,"w":55,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":55,"h":54},"sourceSize":{"w":64,"h":64}},"loot-perk-fabricate.img":{"frame":{"x":628,"y":1837,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-perk-field-medic.img":{"frame":{"x":975,"y":1733,"w":49,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":5,"w":49,"h":56},"sourceSize":{"w":64,"h":64}},"loot-perk-final-bugle.img":{"frame":{"x":867,"y":1749,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-perk-firepower.img":{"frame":{"x":1057,"y":203,"w":63,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-flak-jacket.img":{"frame":{"x":1246,"y":1940,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-gotw.img":{"frame":{"x":462,"y":1022,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-halloween-mystery.img":{"frame":{"x":377,"y":1557,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-perk-hotw.img":{"frame":{"x":286,"y":1984,"w":53,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":53,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-hunted.img":{"frame":{"x":301,"y":1713,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-inspiration.img":{"frame":{"x":744,"y":1442,"w":57,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":57,"h":58},"sourceSize":{"w":64,"h":64}},"loot-perk-leadership.img":{"frame":{"x":530,"y":1022,"w":64,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":64,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-martyrdom.img":{"frame":{"x":1186,"y":1472,"w":53,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":53,"h":51},"sourceSize":{"w":64,"h":64}},"loot-perk-rare-potato.img":{"frame":{"x":305,"y":1645,"w":45,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":45,"h":61},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger.img":{"frame":{"x":1094,"y":1921,"w":54,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":54,"h":50},"sourceSize":{"w":64,"h":64}},"loot-perk-scavenger_adv.img":{"frame":{"x":183,"y":599,"w":59,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":13,"w":59,"h":37},"sourceSize":{"w":64,"h":64}},"loot-perk-self-revive.img":{"frame":{"x":105,"y":640,"w":63,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":15,"w":63,"h":33},"sourceSize":{"w":64,"h":64}},"loot-perk-small-arms.img":{"frame":{"x":1122,"y":1364,"w":53,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":4,"w":53,"h":55},"sourceSize":{"w":64,"h":64}},"loot-perk-splinter.img":{"frame":{"x":201,"y":1268,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"loot-perk-steelskin.img":{"frame":{"x":766,"y":1566,"w":41,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":41,"h":58},"sourceSize":{"w":64,"h":64}},"loot-perk-takedown.img":{"frame":{"x":1174,"y":1769,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-targeting.img":{"frame":{"x":119,"y":1789,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-12g.img":{"frame":{"x":431,"y":1298,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-556.img":{"frame":{"x":451,"y":1235,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-762.img":{"frame":{"x":423,"y":1481,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-9mm.img":{"frame":{"x":438,"y":1425,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-treat-super.img":{"frame":{"x":1073,"y":405,"w":63,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":63,"h":45},"sourceSize":{"w":64,"h":64}},"loot-perk-tree-climbing.img":{"frame":{"x":1357,"y":1965,"w":47,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":47,"h":48},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-chatty.img":{"frame":{"x":1070,"y":1747,"w":55,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":55,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-drain.img":{"frame":{"x":504,"y":746,"w":59,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":11,"w":59,"h":41},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-m9.img":{"frame":{"x":479,"y":1354,"w":60,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":52},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-nothing.img":{"frame":{"x":1188,"y":1826,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-trick-size.img":{"frame":{"x":1210,"y":1883,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"loot-perk-turkey_shoot.img":{"frame":{"x":1119,"y":1803,"w":51,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":51,"h":54},"sourceSize":{"w":64,"h":64}},"loot-perk-windwalk.img":{"frame":{"x":643,"y":1900,"w":43,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":3,"w":43,"h":59},"sourceSize":{"w":64,"h":64}},"loot-scope-00.img":{"frame":{"x":323,"y":1043,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-01.img":{"frame":{"x":391,"y":1043,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-02.img":{"frame":{"x":598,"y":1077,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-03.img":{"frame":{"x":666,"y":1077,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-scope-04.img":{"frame":{"x":459,"y":1087,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-shirt-01.img":{"frame":{"x":776,"y":1504,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitBase.img":{"frame":{"x":794,"y":1628,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCamo.img":{"frame":{"x":811,"y":1564,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCarbonFiber.img":{"frame":{"x":731,"y":1270,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitCobaltShell.img":{"frame":{"x":754,"y":1205,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkGloves.img":{"frame":{"x":756,"y":1117,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDarkShirt.img":{"frame":{"x":746,"y":1330,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDesertCamo.img":{"frame":{"x":793,"y":1265,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitDev.img":{"frame":{"x":816,"y":1177,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitHeaven.img":{"frame":{"x":818,"y":1089,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitKeyLime.img":{"frame":{"x":876,"y":1022,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitLumber.img":{"frame":{"x":805,"y":1390,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitMod.img":{"frame":{"x":808,"y":1325,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParma.img":{"frame":{"x":855,"y":1237,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitParmaPrestige.img":{"frame":{"x":878,"y":1149,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRed.img":{"frame":{"x":880,"y":1082,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitRoyalFortune.img":{"frame":{"x":938,"y":1022,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitSpetsnaz.img":{"frame":{"x":838,"y":1450,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitTurkey.img":{"frame":{"x":867,"y":1385,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWheat.img":{"frame":{"x":870,"y":1297,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWhite.img":{"frame":{"x":917,"y":1209,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-shirt-outfitWoodland.img":{"frame":{"x":940,"y":1142,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-throwable-frag-egg.img":{"frame":{"x":1176,"y":1616,"w":47,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":5,"w":47,"h":53},"sourceSize":{"w":64,"h":64}},"loot-throwable-frag.img":{"frame":{"x":1339,"y":1640,"w":50,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":50,"h":51},"sourceSize":{"w":64,"h":64}},"loot-throwable-mirv.img":{"frame":{"x":1025,"y":1793,"w":41,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":4,"w":41,"h":56},"sourceSize":{"w":64,"h":64}},"loot-throwable-potato.img":{"frame":{"x":1267,"y":1836,"w":46,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":46,"h":52},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke-egg.img":{"frame":{"x":869,"y":349,"w":41,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":41,"h":57},"sourceSize":{"w":64,"h":64}},"loot-throwable-smoke.img":{"frame":{"x":331,"y":1579,"w":42,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":1,"w":42,"h":61},"sourceSize":{"w":64,"h":64}},"loot-throwable-snowball.img":{"frame":{"x":1507,"y":1984,"w":42,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":11,"w":42,"h":42},"sourceSize":{"w":64,"h":64}},"loot-throwable-strobe.img":{"frame":{"x":1267,"y":1892,"w":52,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":11,"w":52,"h":44},"sourceSize":{"w":64,"h":64}},"loot-weapon-ak.img":{"frame":{"x":514,"y":1155,"w":51,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":51,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-an94.img":{"frame":{"x":184,"y":1722,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-awc.img":{"frame":{"x":135,"y":1986,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":61,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-bar.img":{"frame":{"x":1119,"y":268,"w":63,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":63,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-blr.img":{"frame":{"x":942,"y":1082,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-bugle.img":{"frame":{"x":354,"y":1644,"w":61,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":61,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45-dual.img":{"frame":{"x":2,"y":1322,"w":60,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":60,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-colt45.img":{"frame":{"x":419,"y":1621,"w":48,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle-dual.img":{"frame":{"x":527,"y":1087,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-deagle.img":{"frame":{"x":896,"y":1686,"w":52,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-dp28.img":{"frame":{"x":1119,"y":333,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-famas.img":{"frame":{"x":677,"y":1963,"w":56,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":56,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-fists.img":{"frame":{"x":935,"y":1567,"w":37,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":12,"w":37,"h":39},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun-dual.img":{"frame":{"x":70,"y":1139,"w":55,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-flare-gun.img":{"frame":{"x":747,"y":1845,"w":41,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":41,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-garand.img":{"frame":{"x":916,"y":1611,"w":56,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":56,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock-dual.img":{"frame":{"x":301,"y":1778,"w":61,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":61,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-glock.img":{"frame":{"x":1070,"y":1803,"w":45,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":4,"w":45,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-groza.img":{"frame":{"x":1246,"y":1996,"w":52,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":7,"w":52,"h":50},"sourceSize":{"w":64,"h":64}},"loot-weapon-grozas.img":{"frame":{"x":1124,"y":69,"w":61,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":61,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-hk416.img":{"frame":{"x":690,"y":1900,"w":53,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":53,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-l86.img":{"frame":{"x":435,"y":1537,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1014.img":{"frame":{"x":1135,"y":2,"w":55,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1100.img":{"frame":{"x":737,"y":1963,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911-dual.img":{"frame":{"x":274,"y":1111,"w":64,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1911.img":{"frame":{"x":431,"y":1685,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":2,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m1a1.img":{"frame":{"x":186,"y":1653,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-m249.img":{"frame":{"x":311,"y":1837,"w":58,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":58,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-m39.img":{"frame":{"x":338,"y":1902,"w":54,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-m4a1.img":{"frame":{"x":1124,"y":136,"w":58,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-m870.img":{"frame":{"x":561,"y":1468,"w":59,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-cursed.img":{"frame":{"x":471,"y":1601,"w":49,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":49,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9-dual.img":{"frame":{"x":198,"y":1137,"w":64,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m9.img":{"frame":{"x":561,"y":1530,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r-dual.img":{"frame":{"x":129,"y":1187,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-m93r.img":{"frame":{"x":342,"y":1111,"w":50,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":0,"w":50,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-mac10.img":{"frame":{"x":1301,"y":1940,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":51,"h":52},"sourceSize":{"w":64,"h":64}},"loot-weapon-mk12.img":{"frame":{"x":343,"y":1967,"w":57,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-mkg45.img":{"frame":{"x":232,"y":1582,"w":58,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":58,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-model94.img":{"frame":{"x":565,"y":1410,"w":59,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":54},"sourceSize":{"w":64,"h":64}},"loot-weapon-mosin.img":{"frame":{"x":606,"y":1332,"w":59,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp220.img":{"frame":{"x":904,"y":1810,"w":57,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":57,"h":53},"sourceSize":{"w":64,"h":64}},"loot-weapon-mp5.img":{"frame":{"x":923,"y":1747,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38-dual.img":{"frame":{"x":2,"y":1389,"w":61,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":61,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-ot38.img":{"frame":{"x":952,"y":1672,"w":45,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38-dual.img":{"frame":{"x":396,"y":1111,"w":52,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":52,"h":64},"sourceSize":{"w":64,"h":64}},"loot-weapon-ots38.img":{"frame":{"x":486,"y":1749,"w":40,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":40,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l-dual.img":{"frame":{"x":244,"y":1454,"w":62,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":62,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-p30l.img":{"frame":{"x":1001,"y":1627,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":4,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-pkp.img":{"frame":{"x":244,"y":1514,"w":57,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":57,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-cannon.img":{"frame":{"x":366,"y":1705,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-potato-smg.img":{"frame":{"x":245,"y":1334,"w":55,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":55,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-qbb97.img":{"frame":{"x":489,"y":1665,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-saiga.img":{"frame":{"x":263,"y":1243,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-scar.img":{"frame":{"x":792,"y":1845,"w":52,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":52,"h":58},"sourceSize":{"w":64,"h":64}},"loot-weapon-scarssr.img":{"frame":{"x":119,"y":1855,"w":62,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":62,"h":61},"sourceSize":{"w":64,"h":64}},"loot-weapon-scorpion.img":{"frame":{"x":119,"y":1920,"w":56,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":1,"w":56,"h":62},"sourceSize":{"w":64,"h":64}},"loot-weapon-scout.img":{"frame":{"x":629,"y":1219,"w":59,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":59,"h":55},"sourceSize":{"w":64,"h":64}},"loot-weapon-spas12.img":{"frame":{"x":908,"y":1867,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"loot-weapon-sv98.img":{"frame":{"x":495,"y":1291,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-svd.img":{"frame":{"x":2,"y":1456,"w":55,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":55,"h":63},"sourceSize":{"w":64,"h":64}},"loot-weapon-ump9.img":{"frame":{"x":633,"y":1145,"w":57,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":57,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-usas.img":{"frame":{"x":515,"y":1219,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector.img":{"frame":{"x":1036,"y":1539,"w":55,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":56},"sourceSize":{"w":64,"h":64}},"loot-weapon-vector45.img":{"frame":{"x":613,"y":1530,"w":52,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":2,"w":52,"h":59},"sourceSize":{"w":64,"h":64}},"loot-weapon-vss.img":{"frame":{"x":2,"y":1523,"w":54,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":54,"h":63},"sourceSize":{"w":64,"h":64}},"loot-xp-bone-01.img":{"frame":{"x":1056,"y":1451,"w":51,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":51,"h":56},"sourceSize":{"w":64,"h":64}},"loot-xp-book-01.img":{"frame":{"x":614,"y":1593,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-02.img":{"frame":{"x":642,"y":1656,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-03.img":{"frame":{"x":666,"y":1593,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-04.img":{"frame":{"x":661,"y":1719,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-05.img":{"frame":{"x":694,"y":1656,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-book-06.img":{"frame":{"x":691,"y":1782,"w":48,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":48,"h":59},"sourceSize":{"w":64,"h":64}},"loot-xp-compass-01.img":{"frame":{"x":1371,"y":1803,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":48,"h":48},"sourceSize":{"w":64,"h":64}},"loot-xp-donut-01.img":{"frame":{"x":1075,"y":1862,"w":55,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":55,"h":55},"sourceSize":{"w":64,"h":64}},"loot-xp-glasses-01.img":{"frame":{"x":1284,"y":1584,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"loot-xp-stump-01.img":{"frame":{"x":713,"y":1719,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"mag-glass.img":{"frame":{"x":579,"y":1711,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":59},"sourceSize":{"w":64,"h":64}},"minimize.img":{"frame":{"x":1408,"y":1907,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":8,"w":47,"h":47},"sourceSize":{"w":64,"h":64}},"mobile-gas.img":{"frame":{"x":591,"y":322,"w":7,"h":6},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":7,"h":6},"sourceSize":{"w":7,"h":6}},"movement.img":{"frame":{"x":1231,"y":1724,"w":52,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":52,"h":52},"sourceSize":{"w":64,"h":64}},"news.img":{"frame":{"x":1056,"y":1599,"w":55,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":55,"h":54},"sourceSize":{"w":64,"h":64}},"ok.img":{"frame":{"x":816,"y":2,"w":42,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":2,"w":42,"h":59},"sourceSize":{"w":64,"h":64}},"pad.img":{"frame":{"x":336,"y":253,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":104,"h":104},"sourceSize":{"w":104,"h":104}},"part-airdrop-01.img":{"frame":{"x":1390,"y":1748,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-01x.img":{"frame":{"x":1371,"y":1855,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"part-airdrop-02.img":{"frame":{"x":468,"y":366,"w":19,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-02x.img":{"frame":{"x":228,"y":514,"w":19,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":80},"sourceSize":{"w":19,"h":80}},"part-airdrop-03.img":{"frame":{"x":2,"y":846,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"part-airdrop-04.img":{"frame":{"x":266,"y":1175,"w":27,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"part-aura-circle-01.img":{"frame":{"x":257,"y":25,"w":142,"h":141},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":142,"h":141},"sourceSize":{"w":144,"h":144}},"part-blossom-01.img":{"frame":{"x":1132,"y":1975,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":52,"h":54},"sourceSize":{"w":64,"h":64}},"part-blossom-02.img":{"frame":{"x":1079,"y":1657,"w":52,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":52,"h":54},"sourceSize":{"w":64,"h":64}},"part-blossom-03.img":{"frame":{"x":935,"y":1507,"w":57,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":57,"h":56},"sourceSize":{"w":64,"h":64}},"part-blossom-04.img":{"frame":{"x":962,"y":1419,"w":57,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":57,"h":56},"sourceSize":{"w":64,"h":64}},"part-book-01.img":{"frame":{"x":591,"y":249,"w":52,"h":69},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":52,"h":69},"sourceSize":{"w":72,"h":72}},"part-boost-basic.img":{"frame":{"x":743,"y":1782,"w":58,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":58,"h":59},"sourceSize":{"w":64,"h":64}},"part-boost-naturalize.img":{"frame":{"x":185,"y":1788,"w":46,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":1,"w":46,"h":62},"sourceSize":{"w":64,"h":64}},"part-boost-shuriken.img":{"frame":{"x":1000,"y":1022,"w":58,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":58,"h":56},"sourceSize":{"w":64,"h":64}},"part-boost-star.img":{"frame":{"x":624,"y":1468,"w":59,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":59,"h":57},"sourceSize":{"w":64,"h":64}},"part-cloth-01.img":{"frame":{"x":1012,"y":858,"w":35,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":35,"h":36},"sourceSize":{"w":36,"h":36}},"part-feather-01.img":{"frame":{"x":569,"y":1155,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-feather-02.img":{"frame":{"x":457,"y":1956,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"part-flare-01.img":{"frame":{"x":1507,"y":1934,"w":46,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":46,"h":46},"sourceSize":{"w":50,"h":50}},"part-frag-burst-01.img":{"frame":{"x":1052,"y":898,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-frag-burst-02.img":{"frame":{"x":1062,"y":1013,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-frag-burst-03.img":{"frame":{"x":718,"y":295,"w":18,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":18,"h":18},"sourceSize":{"w":18,"h":18}},"part-frag-lever-01.img":{"frame":{"x":766,"y":1628,"w":24,"h":20},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":22,"w":24,"h":20},"sourceSize":{"w":64,"h":64}},"part-frag-pin-01.img":{"frame":{"x":1129,"y":1769,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":17,"w":29,"h":29},"sourceSize":{"w":64,"h":64}},"part-heal-basic.img":{"frame":{"x":805,"y":1777,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-heal-heart.img":{"frame":{"x":834,"y":1688,"w":58,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":6,"w":58,"h":57},"sourceSize":{"w":64,"h":64}},"part-heal-moon.img":{"frame":{"x":856,"y":1624,"w":56,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":56,"h":58},"sourceSize":{"w":64,"h":64}},"part-heal-tomoe.img":{"frame":{"x":366,"y":1770,"w":51,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":51,"h":61},"sourceSize":{"w":64,"h":64}},"part-leaf-01.img":{"frame":{"x":373,"y":1835,"w":61,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":5,"w":61,"h":53},"sourceSize":{"w":64,"h":64}},"part-leaf-01sv.img":{"frame":{"x":1152,"y":1919,"w":54,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":6,"w":54,"h":52},"sourceSize":{"w":64,"h":64}},"part-leaf-02.img":{"frame":{"x":1188,"y":1975,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":54,"h":54},"sourceSize":{"w":64,"h":64}},"part-leaf-03.img":{"frame":{"x":873,"y":1510,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-04.img":{"frame":{"x":900,"y":1445,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-05.img":{"frame":{"x":929,"y":1357,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-leaf-06.img":{"frame":{"x":932,"y":1269,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"part-log-01.img":{"frame":{"x":185,"y":1854,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"part-note-01.img":{"frame":{"x":67,"y":1388,"w":42,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":42,"h":63},"sourceSize":{"w":64,"h":64}},"part-note-02.img":{"frame":{"x":197,"y":1200,"w":44,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":64},"sourceSize":{"w":64,"h":64}},"part-panel-01.img":{"frame":{"x":338,"y":900,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"part-plank-01.img":{"frame":{"x":358,"y":746,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"part-plate-01.img":{"frame":{"x":608,"y":176,"w":69,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":69,"h":66},"sourceSize":{"w":72,"h":72}},"part-pot-01.img":{"frame":{"x":413,"y":892,"w":47,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":2,"w":47,"h":68},"sourceSize":{"w":72,"h":72}},"part-potato-01.img":{"frame":{"x":1085,"y":975,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-potato-02.img":{"frame":{"x":460,"y":1882,"w":47,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":2,"w":47,"h":60},"sourceSize":{"w":64,"h":64}},"part-pulse-01.img":{"frame":{"x":1087,"y":935,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-pumpkin-01.img":{"frame":{"x":1186,"y":1673,"w":53,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":53,"h":47},"sourceSize":{"w":64,"h":64}},"part-shell-01.img":{"frame":{"x":285,"y":328,"w":28,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":66},"sourceSize":{"w":28,"h":66}},"part-shell-02.img":{"frame":{"x":386,"y":361,"w":31,"h":95},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":95},"sourceSize":{"w":31,"h":95}},"part-shell-03.img":{"frame":{"x":443,"y":458,"w":31,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":90},"sourceSize":{"w":31,"h":90}},"part-shell-04.img":{"frame":{"x":557,"y":2,"w":27,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":82},"sourceSize":{"w":27,"h":82}},"part-shell-05.img":{"frame":{"x":433,"y":2,"w":31,"h":130},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":31,"h":130},"sourceSize":{"w":31,"h":130}},"part-smoke-01.img":{"frame":{"x":708,"y":681,"w":34,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":33},"sourceSize":{"w":36,"h":36}},"part-smoke-02.img":{"frame":{"x":132,"y":257,"w":127,"h":124},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":127,"h":124},"sourceSize":{"w":128,"h":128}},"part-smoke-03.img":{"frame":{"x":133,"y":385,"w":126,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":126,"h":125},"sourceSize":{"w":128,"h":128}},"part-snow-01.img":{"frame":{"x":1012,"y":938,"w":34,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":34,"h":34},"sourceSize":{"w":36,"h":36}},"part-spark-01.img":{"frame":{"x":979,"y":1202,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"part-spark-02.img":{"frame":{"x":1004,"y":1082,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"part-splat-01.img":{"frame":{"x":53,"y":1657,"w":63,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":63,"h":62},"sourceSize":{"w":72,"h":72}},"part-splat-02.img":{"frame":{"x":503,"y":791,"w":62,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":4,"w":62,"h":65},"sourceSize":{"w":72,"h":72}},"part-splat-03.img":{"frame":{"x":421,"y":1770,"w":61,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":3,"w":61,"h":60},"sourceSize":{"w":72,"h":72}},"part-strobe-01.img":{"frame":{"x":1089,"y":898,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"part-takedown-01.img":{"frame":{"x":2,"y":1992,"w":63,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":6,"w":63,"h":51},"sourceSize":{"w":64,"h":64}},"part-wedge-01.img":{"frame":{"x":283,"y":507,"w":27,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":27,"h":85},"sourceSize":{"w":31,"h":90}},"part-woodchip-01.img":{"frame":{"x":520,"y":437,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"pass.img":{"frame":{"x":68,"y":1321,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"pilgrim-hat.img":{"frame":{"x":438,"y":1834,"w":60,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":10,"w":60,"h":44},"sourceSize":{"w":64,"h":64}},"pineapple.img":{"frame":{"x":914,"y":1988,"w":34,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":0,"w":34,"h":56},"sourceSize":{"w":64,"h":64}},"ping-border.img":{"frame":{"x":257,"y":596,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"ping-indicator.img":{"frame":{"x":1063,"y":1144,"w":44,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":30,"w":44,"h":34},"sourceSize":{"w":64,"h":64}},"ping-map-airdrop.img":{"frame":{"x":1135,"y":1625,"w":37,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":5,"w":37,"h":53},"sourceSize":{"w":64,"h":64}},"ping-map-airstrike.img":{"frame":{"x":587,"y":1593,"w":22,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":6,"w":22,"h":51},"sourceSize":{"w":64,"h":64}},"ping-map-coming.img":{"frame":{"x":70,"y":1071,"w":56,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":64},"sourceSize":{"w":64,"h":128}},"ping-map-danger.img":{"frame":{"x":438,"y":964,"w":20,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":22,"y":0,"w":20,"h":64},"sourceSize":{"w":64,"h":64}},"ping-map-help.img":{"frame":{"x":1322,"y":1696,"w":50,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":50,"h":51},"sourceSize":{"w":64,"h":64}},"ping-map-pulse.img":{"frame":{"x":2,"y":2,"w":251,"h":251},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":251,"h":251},"sourceSize":{"w":256,"h":256}},"ping-map-unlock.img":{"frame":{"x":569,"y":814,"w":30,"h":39},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":12,"w":30,"h":39},"sourceSize":{"w":64,"h":64}},"ping-map-woods-king.img":{"frame":{"x":1459,"y":1888,"w":46,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":11,"w":46,"h":42},"sourceSize":{"w":64,"h":64}},"ping-part-circle-auto-highlight.img":{"frame":{"x":485,"y":607,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"ping-part-circle-auto-outer.img":{"frame":{"x":875,"y":733,"w":14,"h":13},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":13},"sourceSize":{"w":14,"h":14}},"ping-part-circle-auto.img":{"frame":{"x":980,"y":664,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":14,"h":14},"sourceSize":{"w":14,"h":14}},"ping-part-circle-highlight.img":{"frame":{"x":323,"y":1025,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":25,"w":14,"h":14},"sourceSize":{"w":64,"h":64}},"ping-part-circle.img":{"frame":{"x":274,"y":1093,"w":14,"h":14},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":25,"w":14,"h":14},"sourceSize":{"w":64,"h":64}},"ping-part-eighth-highlight.img":{"frame":{"x":263,"y":1309,"w":25,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":25,"h":21},"sourceSize":{"w":64,"h":64}},"ping-part-eighth.img":{"frame":{"x":687,"y":1504,"w":25,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":25,"h":21},"sourceSize":{"w":64,"h":64}},"ping-part-quarter-highlight.img":{"frame":{"x":514,"y":332,"w":44,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":25},"sourceSize":{"w":64,"h":64}},"ping-part-quarter.img":{"frame":{"x":360,"y":558,"w":44,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":0,"w":44,"h":25},"sourceSize":{"w":64,"h":64}},"ping-team-airdrop.img":{"frame":{"x":990,"y":137,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-airstrike.img":{"frame":{"x":990,"y":204,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-coming.img":{"frame":{"x":1052,"y":271,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-danger.img":{"frame":{"x":1052,"y":338,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-help.img":{"frame":{"x":1057,"y":69,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"ping-team-unlock.img":{"frame":{"x":1068,"y":2,"w":63,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":63,"h":63},"sourceSize":{"w":64,"h":64}},"player-armor-base-01.img":{"frame":{"x":282,"y":748,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-base-01.img":{"frame":{"x":432,"y":821,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-02.img":{"frame":{"x":433,"y":720,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitDC.img":{"frame":{"x":503,"y":607,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitHeaven.img":{"frame":{"x":559,"y":511,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitLumber.img":{"frame":{"x":594,"y":406,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitParmaPrestige.img":{"frame":{"x":641,"y":322,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitSpetsnaz.img":{"frame":{"x":647,"y":246,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitTurkey.img":{"frame":{"x":681,"y":156,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-base-outfitWheat.img":{"frame":{"x":727,"y":74,"w":67,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":67,"h":67},"sourceSize":{"w":70,"h":70}},"player-bullet-trail-02.img":{"frame":{"x":780,"y":363,"w":17,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":17,"h":18},"sourceSize":{"w":18,"h":18}},"player-bullet-trail-03.img":{"frame":{"x":180,"y":706,"w":17,"h":27},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":17,"h":27},"sourceSize":{"w":18,"h":28}},"player-captain.img":{"frame":{"x":1172,"y":1559,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":10,"w":53,"h":53},"sourceSize":{"w":74,"h":74}},"player-circle-base-01.img":{"frame":{"x":353,"y":670,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-circle-base-02.img":{"frame":{"x":282,"y":824,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":72,"h":72},"sourceSize":{"w":74,"h":74}},"player-emote.img":{"frame":{"x":974,"y":1927,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"player-feet-01.img":{"frame":{"x":359,"y":1557,"w":12,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":12,"h":18},"sourceSize":{"w":19,"h":19}},"player-feet-02.img":{"frame":{"x":559,"y":1332,"w":12,"h":18},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":12,"h":18},"sourceSize":{"w":19,"h":19}},"player-gui.img":{"frame":{"x":1015,"y":1866,"w":56,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":5,"w":56,"h":55},"sourceSize":{"w":64,"h":64}},"player-hands-01.img":{"frame":{"x":1012,"y":898,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":36,"h":36},"sourceSize":{"w":38,"h":38}},"player-hands-02.img":{"frame":{"x":1051,"y":858,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":36,"h":36},"sourceSize":{"w":38,"h":38}},"player-helmet-bugler.img":{"frame":{"x":2,"y":1657,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-captain.img":{"frame":{"x":2,"y":1590,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-forest.img":{"frame":{"x":360,"y":466,"w":74,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":88},"sourceSize":{"w":88,"h":88}},"player-helmet-grenadier.img":{"frame":{"x":2,"y":1724,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-last-man-01.img":{"frame":{"x":655,"y":84,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":10,"w":68,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-last-man-02.img":{"frame":{"x":673,"y":2,"w":68,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":10,"w":68,"h":68},"sourceSize":{"w":88,"h":88}},"player-helmet-leader.img":{"frame":{"x":2,"y":1791,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-lieutenant.img":{"frame":{"x":2,"y":1858,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-marksman.img":{"frame":{"x":2,"y":1925,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-medic.img":{"frame":{"x":53,"y":1590,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-moon.img":{"frame":{"x":240,"y":911,"w":58,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":58,"h":72},"sourceSize":{"w":88,"h":88}},"player-helmet-potato.img":{"frame":{"x":60,"y":1523,"w":48,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":48,"h":63},"sourceSize":{"w":88,"h":88}},"player-helmet-recon.img":{"frame":{"x":61,"y":1456,"w":47,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":14,"y":12,"w":47,"h":63},"sourceSize":{"w":88,"h":88}},"player-king-woods.img":{"frame":{"x":358,"y":821,"w":70,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":70,"h":67},"sourceSize":{"w":74,"h":74}},"player-map-downed.img":{"frame":{"x":1243,"y":1673,"w":36,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":36,"h":31},"sourceSize":{"w":36,"h":36}},"player-map-inner.img":{"frame":{"x":1408,"y":2009,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-map-outer.img":{"frame":{"x":1448,"y":2009,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"player-mash-01.img":{"frame":{"x":502,"y":177,"w":80,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":42},"sourceSize":{"w":80,"h":80}},"player-mash-02.img":{"frame":{"x":409,"y":558,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":72,"h":40},"sourceSize":{"w":80,"h":80}},"player-mash-03.img":{"frame":{"x":105,"y":599,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":74,"h":37},"sourceSize":{"w":80,"h":80}},"player-medic.img":{"frame":{"x":309,"y":1373,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":60,"h":60},"sourceSize":{"w":74,"h":74}},"player-patch-01.img":{"frame":{"x":873,"y":1572,"w":58,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":58,"h":35},"sourceSize":{"w":80,"h":80}},"player-patch-02.img":{"frame":{"x":642,"y":613,"w":58,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":0,"w":58,"h":30},"sourceSize":{"w":80,"h":80}},"player-patch-blue.img":{"frame":{"x":240,"y":987,"w":58,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":25,"w":58,"h":30},"sourceSize":{"w":80,"h":80}},"player-patch-red.img":{"frame":{"x":669,"y":1340,"w":58,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":22,"w":58,"h":36},"sourceSize":{"w":80,"h":80}},"player-ripple-01.img":{"frame":{"x":567,"y":332,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":70},"sourceSize":{"w":71,"h":71}},"player-snow-01.img":{"frame":{"x":571,"y":88,"w":80,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":42},"sourceSize":{"w":80,"h":80}},"player-snow-02.img":{"frame":{"x":409,"y":602,"w":72,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":72,"h":40},"sourceSize":{"w":80,"h":80}},"player-snow-03.img":{"frame":{"x":102,"y":711,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":74,"h":37},"sourceSize":{"w":80,"h":80}},"player-star.img":{"frame":{"x":86,"y":840,"w":74,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":74,"h":71},"sourceSize":{"w":74,"h":74}},"player-the-hunted.img":{"frame":{"x":429,"y":646,"w":70,"h":70},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":70,"h":70},"sourceSize":{"w":72,"h":72}},"player-visor-assault.img":{"frame":{"x":1284,"y":1640,"w":51,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":34,"y":18,"w":51,"h":52},"sourceSize":{"w":88,"h":88}},"player-visor-demo.img":{"frame":{"x":629,"y":1278,"w":32,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":19,"w":32,"h":49},"sourceSize":{"w":88,"h":88}},"player-visor-healer.img":{"frame":{"x":1287,"y":1696,"w":31,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":47,"y":18,"w":31,"h":52},"sourceSize":{"w":88,"h":88}},"player-visor-scout.img":{"frame":{"x":179,"y":1920,"w":38,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":38,"y":13,"w":38,"h":62},"sourceSize":{"w":88,"h":88}},"player-visor-sniper.img":{"frame":{"x":1134,"y":1861,"w":50,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":17,"w":50,"h":54},"sourceSize":{"w":88,"h":88}},"player-visor-tank.img":{"frame":{"x":1083,"y":1384,"w":35,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":42,"y":16,"w":35,"h":56},"sourceSize":{"w":88,"h":88}},"player-wading-01.img":{"frame":{"x":2,"y":503,"w":84,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":84,"h":84},"sourceSize":{"w":86,"h":86}},"police.img":{"frame":{"x":305,"y":1514,"w":50,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":1,"w":50,"h":61},"sourceSize":{"w":64,"h":64}},"potato.img":{"frame":{"x":1336,"y":1751,"w":50,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":8,"w":50,"h":48},"sourceSize":{"w":64,"h":64}},"proj-bomb-iron-01.img":{"frame":{"x":588,"y":2,"w":33,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":0,"w":33,"h":79},"sourceSize":{"w":80,"h":80}},"proj-frag-nopin-01.img":{"frame":{"x":502,"y":1813,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-02.img":{"frame":{"x":511,"y":1877,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":54,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-01.img":{"frame":{"x":530,"y":1729,"w":45,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-nopin-nolever-02.img":{"frame":{"x":560,"y":1793,"w":45,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":3,"w":45,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-01.img":{"frame":{"x":521,"y":1941,"w":55,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":55,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-02.img":{"frame":{"x":569,"y":1857,"w":55,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":3,"w":55,"h":60},"sourceSize":{"w":64,"h":64}},"proj-frag-pin-part.img":{"frame":{"x":1114,"y":1270,"w":29,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":17,"w":29,"h":29},"sourceSize":{"w":64,"h":64}},"proj-martyrdom-01.img":{"frame":{"x":235,"y":1788,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":62,"h":62},"sourceSize":{"w":64,"h":64}},"proj-mirv-mini-01.img":{"frame":{"x":1553,"y":1984,"w":42,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":42,"h":38},"sourceSize":{"w":48,"h":48}},"proj-mirv-mini-02.img":{"frame":{"x":1114,"y":1228,"w":42,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":5,"w":42,"h":38},"sourceSize":{"w":48,"h":48}},"proj-mirv-nopin-nolever.img":{"frame":{"x":478,"y":461,"w":38,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":1,"w":38,"h":72},"sourceSize":{"w":64,"h":74}},"proj-mirv-nopin.img":{"frame":{"x":512,"y":361,"w":51,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":13,"y":1,"w":51,"h":72},"sourceSize":{"w":64,"h":74}},"proj-mirv-pin.img":{"frame":{"x":514,"y":256,"w":51,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":51,"h":72},"sourceSize":{"w":64,"h":74}},"proj-potato-01.img":{"frame":{"x":1111,"y":1304,"w":47,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":47,"h":56},"sourceSize":{"w":64,"h":64}},"proj-potato-02.img":{"frame":{"x":1028,"y":1687,"w":47,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":4,"w":47,"h":56},"sourceSize":{"w":64,"h":64}},"proj-smoke-nopin-nolever.img":{"frame":{"x":164,"y":819,"w":38,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":3,"w":38,"h":73},"sourceSize":{"w":80,"h":80}},"proj-smoke-nopin.img":{"frame":{"x":2,"y":930,"w":76,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":76,"h":78},"sourceSize":{"w":80,"h":80}},"proj-smoke-pin.img":{"frame":{"x":82,"y":930,"w":76,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":1,"w":76,"h":78},"sourceSize":{"w":80,"h":80}},"proj-snowball-01.img":{"frame":{"x":1227,"y":1616,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"proj-snowball-02.img":{"frame":{"x":1229,"y":1527,"w":53,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":5,"w":53,"h":53},"sourceSize":{"w":64,"h":64}},"proj-strobe-armed.img":{"frame":{"x":745,"y":2,"w":67,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":13,"w":67,"h":59},"sourceSize":{"w":80,"h":80}},"proj-strobe-arming.img":{"frame":{"x":464,"y":892,"w":67,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":13,"w":67,"h":59},"sourceSize":{"w":80,"h":80}},"proj-strobe-unarmed.img":{"frame":{"x":180,"y":640,"w":73,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":12,"w":73,"h":62},"sourceSize":{"w":80,"h":80}},"proj-wedge-01.img":{"frame":{"x":500,"y":2,"w":27,"h":85},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":27,"h":85},"sourceSize":{"w":31,"h":90}},"pumpkin-play.img":{"frame":{"x":336,"y":563,"w":20,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":20,"h":21},"sourceSize":{"w":24,"h":24}},"pumpkin.img":{"frame":{"x":800,"y":1968,"w":54,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":3,"w":54,"h":57},"sourceSize":{"w":64,"h":64}},"question.img":{"frame":{"x":1298,"y":1752,"w":34,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":6,"w":34,"h":51},"sourceSize":{"w":64,"h":64}},"quit.img":{"frame":{"x":1186,"y":1724,"w":34,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":15,"y":14,"w":34,"h":36},"sourceSize":{"w":64,"h":64}},"rainbow.img":{"frame":{"x":304,"y":1309,"w":59,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":59,"h":60},"sourceSize":{"w":64,"h":64}},"reload.img":{"frame":{"x":1236,"y":68,"w":54,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":62},"sourceSize":{"w":64,"h":64}},"resume.img":{"frame":{"x":1049,"y":976,"w":32,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":15,"w":32,"h":33},"sourceSize":{"w":64,"h":64}},"ribbon-blue.img":{"frame":{"x":747,"y":1907,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":11,"w":49,"h":52},"sourceSize":{"w":74,"h":74}},"ribbon-red.img":{"frame":{"x":1245,"y":1780,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":11,"w":49,"h":52},"sourceSize":{"w":74,"h":74}},"role-assault.img":{"frame":{"x":502,"y":91,"w":65,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":82},"sourceSize":{"w":88,"h":88}},"role-demo.img":{"frame":{"x":90,"y":514,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-healer.img":{"frame":{"x":2,"y":591,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-scout.img":{"frame":{"x":159,"y":514,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-sniper.img":{"frame":{"x":2,"y":676,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"role-tank.img":{"frame":{"x":2,"y":761,"w":65,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":3,"w":65,"h":81},"sourceSize":{"w":88,"h":88}},"salt.img":{"frame":{"x":69,"y":1987,"w":62,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":62,"h":59},"sourceSize":{"w":64,"h":64}},"santa-hat.img":{"frame":{"x":965,"y":1808,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":56,"h":54},"sourceSize":{"w":64,"h":64}},"skull-leader.img":{"frame":{"x":1408,"y":1958,"w":45,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":45,"h":47},"sourceSize":{"w":48,"h":48}},"skull-outlined.img":{"frame":{"x":594,"y":477,"w":26,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":1,"w":26,"h":30},"sourceSize":{"w":32,"h":32}},"skull-team.img":{"frame":{"x":503,"y":860,"w":24,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":24,"h":28},"sourceSize":{"w":32,"h":32}},"skull.img":{"frame":{"x":367,"y":1298,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":59},"sourceSize":{"w":64,"h":64}},"sleepy.img":{"frame":{"x":178,"y":1520,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":62,"h":58},"sourceSize":{"w":64,"h":64}},"snowflake.img":{"frame":{"x":135,"y":1255,"w":57,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":57,"h":63},"sourceSize":{"w":64,"h":64}},"snowman.img":{"frame":{"x":221,"y":1920,"w":48,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":61},"sourceSize":{"w":64,"h":64}},"star-blue.img":{"frame":{"x":464,"y":955,"w":66,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":66,"h":63},"sourceSize":{"w":74,"h":74}},"star-red.img":{"frame":{"x":534,"y":955,"w":66,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":66,"h":63},"sourceSize":{"w":74,"h":74}},"star.img":{"frame":{"x":162,"y":915,"w":74,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":74,"h":71},"sourceSize":{"w":74,"h":74}},"submit.img":{"frame":{"x":1050,"y":938,"w":33,"h":33},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":33,"h":33},"sourceSize":{"w":36,"h":36}},"surviv.img":{"frame":{"x":221,"y":1985,"w":61,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":61,"h":61},"sourceSize":{"w":64,"h":64}},"tap.img":{"frame":{"x":856,"y":1900,"w":48,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":3,"w":48,"h":57},"sourceSize":{"w":64,"h":64}},"target.img":{"frame":{"x":684,"y":1380,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":58,"h":58},"sourceSize":{"w":64,"h":64}},"teabag.img":{"frame":{"x":1170,"y":1423,"w":53,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":9,"w":53,"h":45},"sourceSize":{"w":64,"h":64}},"thumbs-up.img":{"frame":{"x":1186,"y":136,"w":52,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":1,"w":52,"h":62},"sourceSize":{"w":64,"h":64}},"timer-background.img":{"frame":{"x":1012,"y":818,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"timer.img":{"frame":{"x":130,"y":1124,"w":64,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":64,"h":59},"sourceSize":{"w":64,"h":64}},"tombstone.img":{"frame":{"x":251,"y":1854,"w":56,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":56,"h":61},"sourceSize":{"w":64,"h":64}},"trash.img":{"frame":{"x":1260,"y":2,"w":54,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":54,"h":62},"sourceSize":{"w":64,"h":64}},"trunk.img":{"frame":{"x":1129,"y":1715,"w":53,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":7,"w":53,"h":50},"sourceSize":{"w":64,"h":64}},"turkey-animal.img":{"frame":{"x":323,"y":1243,"w":60,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":51},"sourceSize":{"w":64,"h":64}},"unlock.img":{"frame":{"x":773,"y":749,"w":24,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":24,"h":32},"sourceSize":{"w":32,"h":32}},"whale.img":{"frame":{"x":524,"y":1597,"w":59,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":59,"h":47},"sourceSize":{"w":64,"h":64}}}}]');
const main = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"main-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-greenhouse-ceiling-01.img":{"frame":{"x":968,"y":1362,"w":200,"h":157},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":157},"sourceSize":{"w":202,"h":158}},"map-building-greenhouse-floor-01.img":{"frame":{"x":2,"y":910,"w":416,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":320},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":2,"y":1905,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":1586,"y":1095,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":80,"h":74},"sourceSize":{"w":114,"h":90}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":1425,"y":470,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":853,"y":182,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1241,"y":594,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":306,"y":1997,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":789,"y":1707,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":422,"y":1997,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":789,"y":1840,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1894,"y":2,"w":114,"h":305},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":305},"sourceSize":{"w":114,"h":322}},"map-bunker-chrys-compartment-floor-01b.img":{"frame":{"x":422,"y":910,"w":400,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":1234,"w":385,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":385,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-02b.img":{"frame":{"x":1676,"y":376,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":853,"y":594,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-crossing-ceiling-01.img":{"frame":{"x":1894,"y":602,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-crossing-chamber-ceiling-01.img":{"frame":{"x":853,"y":470,"w":568,"h":120},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":568,"h":120},"sourceSize":{"w":568,"h":120}},"map-bunker-crossing-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":914,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":914,"h":176},"sourceSize":{"w":915,"h":177}},"map-bunker-crossing-chamber-floor-01b.img":{"frame":{"x":2,"y":1804,"w":305,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":305,"h":97},"sourceSize":{"w":305,"h":97}},"map-bunker-crossing-chamber-floor-01c.img":{"frame":{"x":606,"y":1933,"w":109,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":109,"h":96},"sourceSize":{"w":115,"h":97}},"map-bunker-crossing-chamber-floor-02.img":{"frame":{"x":1230,"y":1095,"w":352,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":160,"w":352,"h":127},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-chamber-floor-03.img":{"frame":{"x":1586,"y":1190,"w":352,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":161,"w":352,"h":126},"sourceSize":{"w":368,"h":288}},"map-bunker-crossing-compartment-ceiling-01a.img":{"frame":{"x":1942,"y":1369,"w":64,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":152},"sourceSize":{"w":64,"h":152}},"map-bunker-crossing-compartment-ceiling-01b.img":{"frame":{"x":2,"y":1552,"w":360,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":248},"sourceSize":{"w":360,"h":248}},"map-bunker-crossing-compartment-floor-01.img":{"frame":{"x":920,"y":2,"w":752,"h":464},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":752,"h":464},"sourceSize":{"w":752,"h":464}},"map-bunker-crossing-compartment-floor-02.img":{"frame":{"x":366,"y":1674,"w":159,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":159,"h":304},"sourceSize":{"w":160,"h":304}},"map-bunker-crossing-floor-01.img":{"frame":{"x":969,"y":1883,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1280,"y":1550,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":1364,"y":1550,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":748,"y":1362,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":969,"y":1707,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":1942,"y":1190,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":748,"y":1523,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":1133,"y":1689,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":391,"y":1301,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1676,"y":2,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1677,"y":787,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":952,"y":1523,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":826,"y":1030,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1116,"y":1550,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":1230,"y":1226,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":182,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":1586,"y":1320,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":1241,"y":787,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1448,"y":1550,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-complex-warehouse-floor-01.img":{"frame":{"x":538,"y":1933,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":2012,"y":2,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":572,"y":1933,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-planter-01.img":{"frame":{"x":230,"y":1905,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-02.img":{"frame":{"x":1942,"y":1525,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-03.img":{"frame":{"x":1938,"y":311,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-04.img":{"frame":{"x":311,"y":1804,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-05.img":{"frame":{"x":311,"y":1858,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-01.img":{"frame":{"x":1852,"y":2,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-tree-07sp.img":{"frame":{"x":1894,"y":470,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08sp.img":{"frame":{"x":529,"y":1674,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}}}}]');
const potato = [{ "meta": { "image": "potato-0-50.png", "size": { "w": 1024, "h": 1024 }, "scale": 0.5 }, "frames": { "map-building-shilo-ceiling-01.img": { "frame": { "x": 2, "y": 2, "w": 480, "h": 384 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 480, "h": 384 }, "sourceSize": { "w": 480, "h": 384 } }, "map-building-shilo-floor-01.img": { "frame": { "x": 486, "y": 2, "w": 480, "h": 384 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 480, "h": 384 }, "sourceSize": { "w": 480, "h": 384 } }, "map-egg-01.img": { "frame": { "x": 970, "y": 2, "w": 47, "h": 61 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 0, "w": 47, "h": 61 }, "sourceSize": { "w": 62, "h": 62 } }, "map-egg-02.img": { "frame": { "x": 970, "y": 67, "w": 47, "h": 61 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 0, "w": 47, "h": 61 }, "sourceSize": { "w": 62, "h": 62 } }, "map-egg-03.img": { "frame": { "x": 970, "y": 132, "w": 47, "h": 61 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 0, "w": 47, "h": 61 }, "sourceSize": { "w": 62, "h": 62 } }, "map-egg-04.img": { "frame": { "x": 970, "y": 197, "w": 47, "h": 61 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 0, "w": 47, "h": 61 }, "sourceSize": { "w": 62, "h": 62 } }, "map-egg-res-01.img": { "frame": { "x": 970, "y": 262, "w": 46, "h": 44 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 3, "w": 46, "h": 44 }, "sourceSize": { "w": 50, "h": 50 } }, "map-potato-01.img": { "frame": { "x": 970, "y": 355, "w": 36, "h": 35 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 36, "h": 35 }, "sourceSize": { "w": 36, "h": 36 } }, "map-potato-02.img": { "frame": { "x": 2, "y": 394, "w": 36, "h": 35 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 36, "h": 35 }, "sourceSize": { "w": 36, "h": 36 } }, "map-potato-03.img": { "frame": { "x": 2, "y": 433, "w": 36, "h": 35 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 36, "h": 35 }, "sourceSize": { "w": 36, "h": 36 } }, "map-potato-res-01.img": { "frame": { "x": 970, "y": 310, "w": 42, "h": 41 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 14, "y": 18, "w": 42, "h": 41 }, "sourceSize": { "w": 72, "h": 72 } } } }];
const savannah = [{ "meta": { "image": "savannah-0-50.png", "size": { "w": 1024, "h": 1024 }, "scale": 0.5 }, "frames": { "map-brush-01sv.img": { "frame": { "x": 36, "y": 260, "w": 93, "h": 92 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 2, "w": 93, "h": 92 }, "sourceSize": { "w": 96, "h": 96 } }, "map-brush-02sv.img": { "frame": { "x": 133, "y": 260, "w": 91, "h": 92 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 91, "h": 92 }, "sourceSize": { "w": 96, "h": 96 } }, "map-brush-res-02sv.img": { "frame": { "x": 228, "y": 312, "w": 31, "h": 31 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 8, "y": 8, "w": 31, "h": 31 }, "sourceSize": { "w": 48, "h": 48 } }, "map-building-perch-ceiling.img": { "frame": { "x": 759, "y": 166, "w": 181, "h": 172 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 11, "w": 181, "h": 172 }, "sourceSize": { "w": 200, "h": 192 } }, "map-building-perch-floor.img": { "frame": { "x": 759, "y": 2, "w": 200, "h": 160 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 200, "h": 160 }, "sourceSize": { "w": 200, "h": 160 } }, "map-bunker-generic-ceiling-02.img": { "frame": { "x": 294, "y": 259, "w": 80, "h": 115 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 115 }, "sourceSize": { "w": 80, "h": 115 } }, "map-bunker-generic-floor-03.img": { "frame": { "x": 378, "y": 259, "w": 80, "h": 115 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 80, "h": 115 }, "sourceSize": { "w": 80, "h": 115 } }, "map-bush-01sv.img": { "frame": { "x": 682, "y": 288, "w": 70, "h": 70 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 70, "h": 70 }, "sourceSize": { "w": 72, "h": 72 } }, "map-bush-res-01sv.img": { "frame": { "x": 963, "y": 134, "w": 22, "h": 17 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 25, "y": 27, "w": 22, "h": 17 }, "sourceSize": { "w": 72, "h": 72 } }, "map-complex-warehouse-floor-01.img": { "frame": { "x": 989, "y": 132, "w": 30, "h": 112 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 30, "h": 112 }, "sourceSize": { "w": 30, "h": 112 } }, "map-complex-warehouse-floor-02.img": { "frame": { "x": 2, "y": 2, "w": 30, "h": 264 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 30, "h": 264 }, "sourceSize": { "w": 30, "h": 264 } }, "map-complex-warehouse-floor-03.img": { "frame": { "x": 944, "y": 166, "w": 30, "h": 112 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 30, "h": 112 }, "sourceSize": { "w": 30, "h": 112 } }, "map-crate-21.img": { "frame": { "x": 682, "y": 212, "w": 72, "h": 72 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 72, "h": 72 }, "sourceSize": { "w": 72, "h": 72 } }, "map-perch-res-01.img": { "frame": { "x": 2, "y": 356, "w": 88, "h": 79 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 20, "y": 24, "w": 88, "h": 79 }, "sourceSize": { "w": 128, "h": 128 } }, "map-propane-01.img": { "frame": { "x": 228, "y": 260, "w": 48, "h": 48 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 48, "h": 48 }, "sourceSize": { "w": 48, "h": 48 } }, "map-stone-07.img": { "frame": { "x": 294, "y": 2, "w": 252, "h": 253 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 1, "w": 252, "h": 253 }, "sourceSize": { "w": 256, "h": 256 } }, "map-stone-res-07.img": { "frame": { "x": 550, "y": 2, "w": 205, "h": 206 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 2, "y": 2, "w": 205, "h": 206 }, "sourceSize": { "w": 210, "h": 210 } }, "map-tree-03sv.img": { "frame": { "x": 550, "y": 212, "w": 128, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 0, "y": 0, "w": 128, "h": 128 }, "sourceSize": { "w": 128, "h": 128 } }, "map-tree-12.img": { "frame": { "x": 36, "y": 2, "w": 254, "h": 254 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 1, "w": 254, "h": 254 }, "sourceSize": { "w": 256, "h": 256 } }, "map-tree-res-12.img": { "frame": { "x": 978, "y": 248, "w": 39, "h": 35 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 4, "y": 6, "w": 39, "h": 35 }, "sourceSize": { "w": 48, "h": 48 } }, "map-wall-03-grassy-res.img": { "frame": { "x": 280, "y": 260, "w": 10, "h": 46 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 11, "y": 1, "w": 10, "h": 46 }, "sourceSize": { "w": 32, "h": 48 } }, "map-wall-03-grassy.img": { "frame": { "x": 1003, "y": 2, "w": 17, "h": 48 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 7, "y": 0, "w": 17, "h": 48 }, "sourceSize": { "w": 32, "h": 48 } }, "map-wall-08-grassy-res.img": { "frame": { "x": 989, "y": 2, "w": 10, "h": 126 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 11, "y": 1, "w": 10, "h": 126 }, "sourceSize": { "w": 32, "h": 128 } }, "map-wall-08-grassy.img": { "frame": { "x": 963, "y": 2, "w": 22, "h": 128 }, "rotated": false, "trimmed": true, "spriteSourceSize": { "x": 1, "y": 0, "w": 22, "h": 128 }, "sourceSize": { "w": 32, "h": 128 } } } }];
const shared = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"shared-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-barrel-03.img":{"frame":{"x":701,"y":2029,"w":44,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":17},"sourceSize":{"w":44,"h":17}},"map-barrel-04.img":{"frame":{"x":749,"y":2029,"w":44,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":17},"sourceSize":{"w":44,"h":17}},"map-bookshelf-01.img":{"frame":{"x":930,"y":978,"w":112,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-bookshelf-02.img":{"frame":{"x":2,"y":1775,"w":112,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":32},"sourceSize":{"w":112,"h":32}},"map-bottle-01.img":{"frame":{"x":835,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-02.img":{"frame":{"x":855,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-03.img":{"frame":{"x":875,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-04.img":{"frame":{"x":895,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-bottle-05.img":{"frame":{"x":915,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-building-bank-floor-01.img":{"frame":{"x":1062,"y":615,"w":848,"h":401},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":848,"h":401},"sourceSize":{"w":848,"h":401}},"map-building-barn-floor-01.img":{"frame":{"x":2,"y":790,"w":800,"h":544},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":800,"h":544},"sourceSize":{"w":800,"h":544}},"map-building-bathhouse-basement-01e.img":{"frame":{"x":806,"y":1020,"w":716,"h":796},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":716,"h":796},"sourceSize":{"w":716,"h":796}},"map-building-cabin-ceiling-01b.img":{"frame":{"x":302,"y":1775,"w":74,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":37},"sourceSize":{"w":74,"h":38}},"map-building-club-floor-01c.img":{"frame":{"x":2,"y":1338,"w":721,"h":433},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":721,"h":433},"sourceSize":{"w":721,"h":433}},"map-building-container-floor-01.img":{"frame":{"x":1794,"y":1020,"w":90,"h":265},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":265},"sourceSize":{"w":90,"h":268}},"map-building-container-open-floor.img":{"frame":{"x":1914,"y":615,"w":90,"h":342},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":90,"h":342},"sourceSize":{"w":90,"h":346}},"map-building-dock-floor-01b.img":{"frame":{"x":1914,"y":961,"w":81,"h":331},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":81,"h":331},"sourceSize":{"w":81,"h":332}},"map-building-hut-floor-02.img":{"frame":{"x":1978,"y":2,"w":65,"h":383},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":65,"h":383},"sourceSize":{"w":68,"h":384}},"map-building-mansion-floor-01b.img":{"frame":{"x":1062,"y":2,"w":912,"h":609},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":912,"h":609},"sourceSize":{"w":913,"h":609}},"map-building-mansion-floor-01d.img":{"frame":{"x":1325,"y":1820,"w":544,"h":93},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":544,"h":93},"sourceSize":{"w":545,"h":97}},"map-building-police-ceiling-01.img":{"frame":{"x":1526,"y":1564,"w":504,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":504,"h":240},"sourceSize":{"w":504,"h":240}},"map-building-police-ceiling-02.img":{"frame":{"x":1526,"y":1020,"w":264,"h":540},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":264,"h":540},"sourceSize":{"w":264,"h":540}},"map-building-police-ceiling-03.img":{"frame":{"x":1794,"y":1296,"w":252,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":252,"h":240},"sourceSize":{"w":252,"h":240}},"map-building-police-floor-01.img":{"frame":{"x":2,"y":2,"w":1056,"h":784},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":1056,"h":784},"sourceSize":{"w":1056,"h":784}},"map-building-porch-01.img":{"frame":{"x":380,"y":1775,"w":64,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":32},"sourceSize":{"w":64,"h":32}},"map-bunker-conch-chamber-ceiling-01.img":{"frame":{"x":806,"y":790,"w":248,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":248,"h":96},"sourceSize":{"w":248,"h":96}},"map-bunker-conch-chamber-floor-01.img":{"frame":{"x":2,"y":1820,"w":697,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":21,"w":697,"h":192},"sourceSize":{"w":760,"h":216}},"map-bunker-conch-chamber-floor-02.img":{"frame":{"x":703,"y":1820,"w":618,"h":205},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":13,"w":618,"h":205},"sourceSize":{"w":652,"h":232}},"map-bunker-conch-floor-01.img":{"frame":{"x":1671,"y":1917,"w":290,"h":126},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":1,"w":290,"h":126},"sourceSize":{"w":300,"h":128}},"map-club-bar-01.img":{"frame":{"x":2008,"y":681,"w":27,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":240},"sourceSize":{"w":27,"h":240}},"map-decal-club-02.img":{"frame":{"x":727,"y":1338,"w":50,"h":179},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":50,"h":179},"sourceSize":{"w":52,"h":180}},"map-deposit-box-01.img":{"frame":{"x":1965,"y":2004,"w":80,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-deposit-box-02.img":{"frame":{"x":218,"y":1775,"w":80,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":37},"sourceSize":{"w":80,"h":37}},"map-door-02.img":{"frame":{"x":727,"y":1701,"w":40,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":112},"sourceSize":{"w":40,"h":112}},"map-door-03.img":{"frame":{"x":2028,"y":617,"w":16,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":56},"sourceSize":{"w":16,"h":56}},"map-gun-mount-01.img":{"frame":{"x":549,"y":2016,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":28}},"map-gun-mount-02.img":{"frame":{"x":448,"y":1775,"w":64,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":22},"sourceSize":{"w":64,"h":28}},"map-gun-mount-03.img":{"frame":{"x":516,"y":1775,"w":64,"h":22},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":22},"sourceSize":{"w":64,"h":28}},"map-gun-mount-04.img":{"frame":{"x":584,"y":1775,"w":64,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":28},"sourceSize":{"w":64,"h":28}},"map-gun-mount-05.img":{"frame":{"x":625,"y":2016,"w":72,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":24},"sourceSize":{"w":72,"h":28}},"map-piano-01.img":{"frame":{"x":806,"y":978,"w":120,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":37},"sourceSize":{"w":120,"h":37}},"map-pipes-03.img":{"frame":{"x":1325,"y":1917,"w":342,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":342,"h":118},"sourceSize":{"w":342,"h":118}},"map-pipes-04.img":{"frame":{"x":727,"y":1521,"w":44,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":44,"h":176},"sourceSize":{"w":44,"h":176}},"map-pipes-05.img":{"frame":{"x":1889,"y":1808,"w":45,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":96},"sourceSize":{"w":45,"h":96}},"map-screen-01.img":{"frame":{"x":186,"y":2016,"w":128,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":24},"sourceSize":{"w":128,"h":24}},"map-screen-res-01.img":{"frame":{"x":652,"y":1775,"w":58,"h":29},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":58,"h":29},"sourceSize":{"w":62,"h":29}},"map-snow-07.img":{"frame":{"x":806,"y":890,"w":248,"h":84},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":6,"w":248,"h":84},"sourceSize":{"w":256,"h":96}},"map-switch-01.img":{"frame":{"x":797,"y":2029,"w":15,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-switch-02.img":{"frame":{"x":935,"y":2029,"w":15,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":16},"sourceSize":{"w":15,"h":17}},"map-switch-03.img":{"frame":{"x":816,"y":2029,"w":15,"h":17},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":15,"h":17},"sourceSize":{"w":15,"h":17}},"map-towelrack-01.img":{"frame":{"x":118,"y":1775,"w":96,"h":38},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":5,"w":96,"h":38},"sourceSize":{"w":96,"h":48}},"map-wall-01-rounded.img":{"frame":{"x":954,"y":2029,"w":16,"h":16},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":16},"sourceSize":{"w":16,"h":16}},"map-wall-02-5-rounded.img":{"frame":{"x":1888,"y":1248,"w":16,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":40},"sourceSize":{"w":16,"h":40}},"map-wall-06-rounded.img":{"frame":{"x":1938,"y":1808,"w":16,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-wall-07-rounded.img":{"frame":{"x":771,"y":1701,"w":16,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-09-rounded.img":{"frame":{"x":1999,"y":1137,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-10-rounded.img":{"frame":{"x":2028,"y":1121,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-11-rounded.img":{"frame":{"x":781,"y":1338,"w":16,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-wall-11.img":{"frame":{"x":781,"y":1518,"w":16,"h":176},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":176},"sourceSize":{"w":16,"h":176}},"map-wall-12-rounded.img":{"frame":{"x":2028,"y":925,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-12.img":{"frame":{"x":1965,"y":1808,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-13-rounded.img":{"frame":{"x":1978,"y":389,"w":16,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-wall-13.img":{"frame":{"x":2008,"y":925,"w":16,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":208},"sourceSize":{"w":16,"h":208}},"map-wall-14-rounded.img":{"frame":{"x":2028,"y":389,"w":16,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-14.img":{"frame":{"x":1888,"y":1020,"w":16,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":224},"sourceSize":{"w":16,"h":224}},"map-wall-18.img":{"frame":{"x":2008,"y":389,"w":16,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":288},"sourceSize":{"w":16,"h":288}},"map-wall-glass-12-2.img":{"frame":{"x":1985,"y":1808,"w":32,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":192},"sourceSize":{"w":32,"h":192}},"map-wall-glass-12.img":{"frame":{"x":2021,"y":1808,"w":16,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":192},"sourceSize":{"w":16,"h":192}},"map-wall-outhouse-bot.img":{"frame":{"x":448,"y":1801,"w":36,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":12},"sourceSize":{"w":36,"h":12}},"map-wall-outhouse-side.img":{"frame":{"x":1873,"y":1808,"w":12,"h":99},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":99},"sourceSize":{"w":12,"h":99}},"map-wall-outhouse-top.img":{"frame":{"x":443,"y":2029,"w":102,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":102,"h":12},"sourceSize":{"w":102,"h":12}},"map-wall-shack-bot.img":{"frame":{"x":318,"y":2029,"w":121,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":121,"h":12},"sourceSize":{"w":121,"h":12}},"map-wall-shack-left.img":{"frame":{"x":2034,"y":1665,"w":12,"h":111},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":111},"sourceSize":{"w":12,"h":111}},"map-wall-shack-right.img":{"frame":{"x":2034,"y":1540,"w":12,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":121},"sourceSize":{"w":12,"h":121}},"map-wall-shack-top.img":{"frame":{"x":2,"y":2029,"w":180,"h":12},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":180,"h":12},"sourceSize":{"w":180,"h":12}}}},{"meta":{"image":"shared-1-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-barrel-res-03.img":{"frame":{"x":1057,"y":775,"w":38,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":43,"w":38,"h":26},"sourceSize":{"w":72,"h":72}},"map-bed-01.img":{"frame":{"x":562,"y":1465,"w":48,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":108},"sourceSize":{"w":48,"h":108}},"map-bed-res-01.img":{"frame":{"x":1062,"y":438,"w":44,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":44,"h":79},"sourceSize":{"w":48,"h":96}},"map-bed-res-02.img":{"frame":{"x":1062,"y":521,"w":44,"h":79},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":8,"w":44,"h":79},"sourceSize":{"w":48,"h":96}},"map-building-bank-ceiling-02.img":{"frame":{"x":1573,"y":1006,"w":278,"h":444},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":25,"w":278,"h":444},"sourceSize":{"w":278,"h":470}},"map-building-bank-floor-02.img":{"frame":{"x":1118,"y":918,"w":432,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":224},"sourceSize":{"w":544,"h":224}},"map-building-bank-window-res-01.img":{"frame":{"x":1487,"y":1194,"w":22,"h":21},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":27,"w":22,"h":21},"sourceSize":{"w":72,"h":72}},"map-building-barn-ceiling-01.img":{"frame":{"x":658,"y":438,"w":400,"h":208},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":208},"sourceSize":{"w":400,"h":208}},"map-building-barn-ceiling-02.img":{"frame":{"x":1299,"y":1146,"w":156,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":54},"sourceSize":{"w":156,"h":54}},"map-building-bathhouse-basement-01b.img":{"frame":{"x":2,"y":2,"w":652,"h":459},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":652,"h":459},"sourceSize":{"w":652,"h":460}},"map-building-bathhouse-basement-01c.img":{"frame":{"x":1463,"y":1858,"w":283,"h":171},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":283,"h":171},"sourceSize":{"w":284,"h":172}},"map-building-bathhouse-sideroom-02.img":{"frame":{"x":2,"y":1317,"w":556,"h":364},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":556,"h":364},"sourceSize":{"w":556,"h":364}},"map-building-bathhouse-sideroom-ceiling-02.img":{"frame":{"x":1750,"y":1858,"w":256,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":168},"sourceSize":{"w":256,"h":168}},"map-building-boarded-window-01.img":{"frame":{"x":2010,"y":1986,"w":22,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":3,"w":22,"h":56},"sourceSize":{"w":24,"h":64}},"map-building-bridge-lg-ceiling.img":{"frame":{"x":2,"y":1685,"w":544,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":544,"h":272},"sourceSize":{"w":544,"h":288}},"map-building-bridge-lg-floor.img":{"frame":{"x":550,"y":1685,"w":505,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":505,"h":352},"sourceSize":{"w":506,"h":354}},"map-building-bridge-md-floor.img":{"frame":{"x":1118,"y":438,"w":448,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":184},"sourceSize":{"w":448,"h":184}},"map-building-cabin-ceiling-01a.img":{"frame":{"x":1573,"y":310,"w":456,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":456,"h":288},"sourceSize":{"w":456,"h":288}},"map-building-cabin-floor.img":{"frame":{"x":2,"y":817,"w":608,"h":496},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":608,"h":496},"sourceSize":{"w":608,"h":496}},"map-building-club-ceiling-01b.img":{"frame":{"x":1012,"y":650,"w":88,"h":121},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":121},"sourceSize":{"w":89,"h":121}},"map-building-club-floor-01e.img":{"frame":{"x":1855,"y":1006,"w":176,"h":241},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":241},"sourceSize":{"w":177,"h":241}},"map-building-club-floor-01f.img":{"frame":{"x":1463,"y":1784,"w":97,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":65},"sourceSize":{"w":97,"h":65}},"map-building-club-floor-01g.img":{"frame":{"x":1059,"y":1665,"w":400,"h":289},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":289},"sourceSize":{"w":401,"h":289}},"map-building-house-floor-01.img":{"frame":{"x":614,"y":1221,"w":480,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-house-floor-02.img":{"frame":{"x":658,"y":2,"w":480,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":480,"h":432},"sourceSize":{"w":480,"h":432}},"map-building-hut-ceiling-01.img":{"frame":{"x":1855,"y":1251,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-mansion-ceiling.img":{"frame":{"x":1573,"y":602,"w":456,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":456,"h":400},"sourceSize":{"w":512,"h":432}},"map-building-mansion-cellar-01c.img":{"frame":{"x":1118,"y":1146,"w":177,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":177,"h":64},"sourceSize":{"w":177,"h":65}},"map-building-mansion-floor-01a.img":{"frame":{"x":1142,"y":222,"w":401,"h":158},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":2,"w":401,"h":158},"sourceSize":{"w":401,"h":161}},"map-building-teahouse-ceiling-01.img":{"frame":{"x":1573,"y":2,"w":467,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":467,"h":304},"sourceSize":{"w":480,"h":320}},"map-building-teahouse-floor-01.img":{"frame":{"x":1118,"y":626,"w":448,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":448,"h":288},"sourceSize":{"w":448,"h":288}},"map-building-teahouse-floor-02.img":{"frame":{"x":1490,"y":384,"w":64,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":44},"sourceSize":{"w":64,"h":44}},"map-building-warehouse-ceiling-01.img":{"frame":{"x":1142,"y":2,"w":416,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":216},"sourceSize":{"w":416,"h":216}},"map-building-warehouse-floor-01.img":{"frame":{"x":614,"y":817,"w":500,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":500,"h":400},"sourceSize":{"w":500,"h":400}},"map-building-warehouse-floor-02.img":{"frame":{"x":1573,"y":1454,"w":440,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":440,"h":400},"sourceSize":{"w":440,"h":400}},"map-bunker-conch-chamber-ceiling-02.img":{"frame":{"x":1059,"y":1958,"w":244,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":88},"sourceSize":{"w":244,"h":88}},"map-bunker-conch-compartment-floor-01a.img":{"frame":{"x":1098,"y":1221,"w":471,"h":440},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":25,"y":0,"w":471,"h":440},"sourceSize":{"w":496,"h":440}},"map-bunker-generic-ceiling-01.img":{"frame":{"x":1463,"y":1665,"w":96,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":96,"h":115},"sourceSize":{"w":160,"h":144}},"map-bunker-storm-chamber-ceiling-01.img":{"frame":{"x":641,"y":650,"w":296,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":56,"w":296,"h":152},"sourceSize":{"w":296,"h":208}},"map-bunker-storm-chamber-floor-01a.img":{"frame":{"x":2,"y":465,"w":635,"h":348},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":635,"h":348},"sourceSize":{"w":640,"h":352}},"map-bush-res-01.img":{"frame":{"x":789,"y":1657,"w":26,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":24,"w":26,"h":24},"sourceSize":{"w":72,"h":72}},"map-bush-res-04.img":{"frame":{"x":1459,"y":1194,"w":24,"h":23},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":24,"h":23},"sourceSize":{"w":27,"h":27}},"map-control-panel-06.img":{"frame":{"x":1290,"y":384,"w":96,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":47},"sourceSize":{"w":96,"h":47}},"map-couch-01.img":{"frame":{"x":1142,"y":384,"w":144,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":48},"sourceSize":{"w":144,"h":48}},"map-couch-02.img":{"frame":{"x":1390,"y":384,"w":96,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":48},"sourceSize":{"w":96,"h":48}},"map-crate-mil-01.img":{"frame":{"x":1459,"y":1146,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-decal-oil-04.img":{"frame":{"x":758,"y":1657,"w":27,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":4,"w":27,"h":24},"sourceSize":{"w":32,"h":32}},"map-door-01.img":{"frame":{"x":641,"y":465,"w":12,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-door-04.img":{"frame":{"x":2010,"y":1918,"w":27,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":64},"sourceSize":{"w":27,"h":64}},"map-door-05.img":{"frame":{"x":2033,"y":310,"w":12,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":12,"h":64},"sourceSize":{"w":12,"h":64}},"map-door-slot-01.img":{"frame":{"x":2017,"y":1847,"w":19,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":67},"sourceSize":{"w":19,"h":67}},"map-door-slot-02.img":{"frame":{"x":1549,"y":1146,"w":19,"h":68},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":68},"sourceSize":{"w":19,"h":68}},"map-drawers-res.img":{"frame":{"x":1062,"y":604,"w":46,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":2,"w":46,"h":28},"sourceSize":{"w":48,"h":32}},"map-fire-ext-01.img":{"frame":{"x":1012,"y":775,"w":41,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":41,"h":32},"sourceSize":{"w":42,"h":35}},"map-locker-01.img":{"frame":{"x":602,"y":1657,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-locker-02.img":{"frame":{"x":654,"y":1657,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-locker-03.img":{"frame":{"x":706,"y":1657,"w":48,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":24},"sourceSize":{"w":48,"h":25}},"map-pipes-01.img":{"frame":{"x":562,"y":1317,"w":45,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":45,"h":144},"sourceSize":{"w":45,"h":144}},"map-saloon-bar-01.img":{"frame":{"x":941,"y":650,"w":27,"h":162},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":162},"sourceSize":{"w":27,"h":162}},"map-stone-res-06.img":{"frame":{"x":322,"y":1961,"w":144,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":64},"sourceSize":{"w":144,"h":64}},"map-tree-res-01.img":{"frame":{"x":819,"y":1657,"w":24,"h":24},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":24},"sourceSize":{"w":24,"h":24}},"map-wall-04-cobalt.img":{"frame":{"x":470,"y":1961,"w":20,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-04-stone.img":{"frame":{"x":494,"y":1961,"w":20,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":20,"h":80},"sourceSize":{"w":20,"h":80}},"map-wall-05-rounded.img":{"frame":{"x":518,"y":1961,"w":16,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wall-05.img":{"frame":{"x":582,"y":1577,"w":16,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":80},"sourceSize":{"w":16,"h":80}},"map-wall-06.img":{"frame":{"x":562,"y":1577,"w":16,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":96},"sourceSize":{"w":16,"h":96}},"map-wall-07.img":{"frame":{"x":2017,"y":1731,"w":16,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":112},"sourceSize":{"w":16,"h":112}},"map-wall-08-rounded.img":{"frame":{"x":2017,"y":1599,"w":16,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":128},"sourceSize":{"w":16,"h":128}},"map-wall-09.img":{"frame":{"x":1547,"y":222,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wall-10.img":{"frame":{"x":972,"y":650,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-glass-10.img":{"frame":{"x":992,"y":650,"w":16,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":160},"sourceSize":{"w":16,"h":160}},"map-wall-glass-9.img":{"frame":{"x":2017,"y":1451,"w":16,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":144},"sourceSize":{"w":16,"h":144}},"map-wheel-01.img":{"frame":{"x":2,"y":1961,"w":156,"h":78},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":78},"sourceSize":{"w":156,"h":78}},"map-wheel-02.img":{"frame":{"x":1307,"y":1958,"w":148,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":148,"h":74},"sourceSize":{"w":156,"h":78}},"map-wheel-03.img":{"frame":{"x":162,"y":1961,"w":156,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":156,"h":74},"sourceSize":{"w":156,"h":78}}}},{"meta":{"image":"shared-2-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-airdrop-01.img":{"frame":{"x":1053,"y":282,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02.img":{"frame":{"x":1053,"y":366,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-barrel-01.img":{"frame":{"x":1295,"y":138,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-barrel-02.img":{"frame":{"x":1306,"y":62,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-barrel-res-02.img":{"frame":{"x":1066,"y":214,"w":65,"h":63},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":65,"h":63},"sourceSize":{"w":72,"h":72}},"map-bathhouse-column-01.img":{"frame":{"x":1321,"y":944,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":64,"h":64},"sourceSize":{"w":64,"h":64}},"map-bathhouse-pool-01.img":{"frame":{"x":1215,"y":408,"w":19,"h":31},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":19,"h":31},"sourceSize":{"w":19,"h":31}},"map-bathrocks-01.img":{"frame":{"x":1362,"y":823,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-bed-02.img":{"frame":{"x":274,"y":983,"w":88,"h":108},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":88,"h":108},"sourceSize":{"w":88,"h":108}},"map-bollard-01.img":{"frame":{"x":1291,"y":656,"w":56,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":9,"w":56,"h":54},"sourceSize":{"w":72,"h":72}},"map-building-bank-ceiling-01.img":{"frame":{"x":810,"y":2,"w":252,"h":276},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":24,"w":252,"h":276},"sourceSize":{"w":253,"h":300}},"map-building-bank-ceiling-03.img":{"frame":{"x":490,"y":1298,"w":108,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":96,"w":108,"h":180},"sourceSize":{"w":108,"h":276}},"map-building-bank-window-01.img":{"frame":{"x":1104,"y":1514,"w":28,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":28,"h":52},"sourceSize":{"w":28,"h":52}},"map-building-barn-basement-ceiling-01.img":{"frame":{"x":1104,"y":1414,"w":152,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":152,"h":96},"sourceSize":{"w":152,"h":104}},"map-building-barn-basement-ceiling-02.img":{"frame":{"x":1397,"y":1505,"w":82,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":8,"w":82,"h":96},"sourceSize":{"w":82,"h":104}},"map-building-barn-basement-floor-01.img":{"frame":{"x":366,"y":655,"w":331,"h":235},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":331,"h":235},"sourceSize":{"w":332,"h":236}},"map-building-barn-basement-floor-02.img":{"frame":{"x":258,"y":1773,"w":187,"h":235},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":187,"h":235},"sourceSize":{"w":188,"h":236}},"map-building-barn-basement-stairs.img":{"frame":{"x":490,"y":1102,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-bathhouse-basement-01a.img":{"frame":{"x":1136,"y":1514,"w":112,"h":145},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":145},"sourceSize":{"w":113,"h":145}},"map-building-bathhouse-basement-01d.img":{"frame":{"x":654,"y":979,"w":128,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":96},"sourceSize":{"w":128,"h":97}},"map-building-bathhouse-sideroom-01.img":{"frame":{"x":2,"y":983,"w":268,"h":268},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":268,"h":268},"sourceSize":{"w":268,"h":268}},"map-building-bathhouse-sideroom-ceiling-01.img":{"frame":{"x":1311,"y":1622,"w":128,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":112},"sourceSize":{"w":128,"h":112}},"map-building-club-ceiling-01a.img":{"frame":{"x":438,"y":2,"w":368,"h":296},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":368,"h":296},"sourceSize":{"w":369,"h":297}},"map-building-club-ceiling-01c.img":{"frame":{"x":262,"y":1483,"w":200,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":216},"sourceSize":{"w":201,"h":217}},"map-building-club-floor-01a.img":{"frame":{"x":1445,"y":1828,"w":112,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":113},"sourceSize":{"w":113,"h":113}},"map-building-club-floor-01b.img":{"frame":{"x":1382,"y":1299,"w":97,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":96},"sourceSize":{"w":97,"h":97}},"map-building-club-floor-01d.img":{"frame":{"x":848,"y":1949,"w":161,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":161,"h":96},"sourceSize":{"w":161,"h":97}},"map-building-club-floor-01h.img":{"frame":{"x":901,"y":1289,"w":160,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":144},"sourceSize":{"w":161,"h":145}},"map-building-club-vault-ceiling.img":{"frame":{"x":1557,"y":1685,"w":80,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":88},"sourceSize":{"w":80,"h":88}},"map-building-container-ceiling-01.img":{"frame":{"x":786,"y":979,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-02.img":{"frame":{"x":807,"y":1173,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-03.img":{"frame":{"x":880,"y":979,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-ceiling-05.img":{"frame":{"x":807,"y":1367,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":90,"h":190},"sourceSize":{"w":90,"h":268}},"map-building-container-open-ceiling-01.img":{"frame":{"x":846,"y":1561,"w":90,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":78,"w":90,"h":190},"sourceSize":{"w":90,"h":346}},"map-building-crossing-bathroom-ceiling.img":{"frame":{"x":1163,"y":1663,"w":144,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":96},"sourceSize":{"w":144,"h":96}},"map-building-dock-floor-01a.img":{"frame":{"x":1053,"y":450,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":80,"h":80},"sourceSize":{"w":80,"h":81}},"map-building-house-ceiling.img":{"frame":{"x":2,"y":655,"w":360,"h":324},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":324},"sourceSize":{"w":360,"h":324}},"map-building-house-window-01.img":{"frame":{"x":786,"y":1241,"w":16,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-building-house-window-res-01.img":{"frame":{"x":602,"y":1422,"w":16,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":52},"sourceSize":{"w":16,"h":52}},"map-building-hut-ceiling-02.img":{"frame":{"x":466,"y":1483,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-hut-ceiling-03.img":{"frame":{"x":653,"y":1683,"w":189,"h":196},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":189,"h":196},"sourceSize":{"w":204,"h":204}},"map-building-hut-floor-01.img":{"frame":{"x":262,"y":1255,"w":224,"h":224},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":224,"h":224},"sourceSize":{"w":256,"h":256}},"map-building-mansion-cellar-01a.img":{"frame":{"x":2,"y":2,"w":432,"h":400},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":400},"sourceSize":{"w":433,"h":401}},"map-building-mansion-cellar-01b.img":{"frame":{"x":1138,"y":970,"w":112,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":115},"sourceSize":{"w":113,"h":115}},"map-building-mansion-floor-01c.img":{"frame":{"x":1245,"y":1089,"w":112,"h":114},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":114},"sourceSize":{"w":113,"h":114}},"map-building-outhouse-ceiling.img":{"frame":{"x":1305,"y":1847,"w":136,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":32,"y":0,"w":136,"h":112},"sourceSize":{"w":200,"h":158}},"map-building-outhouse-floor.img":{"frame":{"x":1012,"y":1601,"w":120,"h":154},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":40,"y":2,"w":120,"h":154},"sourceSize":{"w":200,"h":158}},"map-building-panicroom-ceiling.img":{"frame":{"x":638,"y":1102,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-panicroom-floor.img":{"frame":{"x":659,"y":1298,"w":144,"h":192},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":192},"sourceSize":{"w":144,"h":192}},"map-building-police-floor-02.img":{"frame":{"x":701,"y":655,"w":304,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":32,"w":304,"h":320},"sourceSize":{"w":305,"h":785}},"map-building-saferoom-ceiling.img":{"frame":{"x":659,"y":1561,"w":176,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-saferoom-floor.img":{"frame":{"x":901,"y":1173,"w":176,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":176,"h":112},"sourceSize":{"w":176,"h":112}},"map-building-shack-ceiling-01.img":{"frame":{"x":1065,"y":1307,"w":157,"h":103},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":157,"h":103},"sourceSize":{"w":157,"h":127}},"map-building-shack-ceiling-02.img":{"frame":{"x":1311,"y":1738,"w":120,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":120,"h":96},"sourceSize":{"w":120,"h":120}},"map-building-shack-ceiling-03.img":{"frame":{"x":274,"y":1102,"w":204,"h":144},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":0,"w":204,"h":144},"sourceSize":{"w":216,"h":168}},"map-building-shack-floor-01.img":{"frame":{"x":653,"y":1883,"w":191,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":10,"w":191,"h":160},"sourceSize":{"w":210,"h":170}},"map-building-shack-floor-02.img":{"frame":{"x":940,"y":1437,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-building-shack-floor-03.img":{"frame":{"x":366,"y":894,"w":284,"h":204},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":284,"h":204},"sourceSize":{"w":288,"h":224}},"map-building-teahouse-res-01.img":{"frame":{"x":1252,"y":1514,"w":141,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":57,"y":76,"w":141,"h":104},"sourceSize":{"w":256,"h":256}},"map-building-vault-ceiling.img":{"frame":{"x":974,"y":979,"w":160,"h":168},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":168},"sourceSize":{"w":216,"h":168}},"map-building-warehouse-ceiling-02.img":{"frame":{"x":2,"y":406,"w":360,"h":216},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":360,"h":216},"sourceSize":{"w":360,"h":216}},"map-bunker-conch-ceiling-01.img":{"frame":{"x":449,"y":1922,"w":190,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":190,"h":90},"sourceSize":{"w":190,"h":90}},"map-bunker-conch-compartment-ceiling-01.img":{"frame":{"x":805,"y":302,"w":244,"h":280},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":244,"h":280},"sourceSize":{"w":244,"h":280}},"map-bunker-conch-compartment-floor-01b.img":{"frame":{"x":449,"y":1703,"w":200,"h":215},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":215},"sourceSize":{"w":200,"h":224}},"map-bunker-egg-chamber-ceiling-01.img":{"frame":{"x":1081,"y":1151,"w":160,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":72,"w":160,"h":152},"sourceSize":{"w":160,"h":224}},"map-bunker-egg-chamber-floor-01a.img":{"frame":{"x":438,"y":302,"w":363,"h":349},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":0,"w":363,"h":349},"sourceSize":{"w":369,"h":353}},"map-bunker-egg-chamber-floor-01b.img":{"frame":{"x":1468,"y":1399,"w":96,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":89},"sourceSize":{"w":97,"h":90}},"map-bunker-generic-floor-01.img":{"frame":{"x":1012,"y":1759,"w":147,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":147,"h":140},"sourceSize":{"w":160,"h":144}},"map-bunker-generic-floor-02.img":{"frame":{"x":1013,"y":1903,"w":147,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":0,"w":147,"h":140},"sourceSize":{"w":160,"h":144}},"map-bunker-storm-chamber-floor-01b.img":{"frame":{"x":1443,"y":1605,"w":96,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":88},"sourceSize":{"w":97,"h":89}},"map-bunker-storm-floor-02.img":{"frame":{"x":848,"y":1755,"w":160,"h":190},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":190},"sourceSize":{"w":160,"h":192}},"map-bunker-vent-01.img":{"frame":{"x":1404,"y":630,"w":41,"h":42},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":41,"h":42},"sourceSize":{"w":42,"h":42}},"map-bunker-vent-02.img":{"frame":{"x":366,"y":483,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":66,"h":67},"sourceSize":{"w":68,"h":68}},"map-bunker-vent-03.img":{"frame":{"x":940,"y":1676,"w":66,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":66,"h":67},"sourceSize":{"w":68,"h":68}},"map-bush-01f.img":{"frame":{"x":1254,"y":944,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-bush-07.img":{"frame":{"x":940,"y":1601,"w":67,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":67,"h":71},"sourceSize":{"w":72,"h":72}},"map-bush-07x.img":{"frame":{"x":1254,"y":1013,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-bush-res-02.img":{"frame":{"x":1561,"y":1911,"w":29,"h":30},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":21,"y":22,"w":29,"h":30},"sourceSize":{"w":72,"h":72}},"map-candle-01.img":{"frame":{"x":1217,"y":821,"w":25,"h":25},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":25,"h":25},"sourceSize":{"w":26,"h":26}},"map-case-basement-01.img":{"frame":{"x":1229,"y":2,"w":74,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":56},"sourceSize":{"w":74,"h":56}},"map-case-chrys-01.img":{"frame":{"x":1066,"y":86,"w":78,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-case-deagle-01.img":{"frame":{"x":1137,"y":446,"w":72,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-case-deagle-02.img":{"frame":{"x":1137,"y":504,"w":72,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":54},"sourceSize":{"w":72,"h":54}},"map-case-flare-01.img":{"frame":{"x":1307,"y":2,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-flare-res-01.img":{"frame":{"x":1324,"y":876,"w":64,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":64,"h":57},"sourceSize":{"w":72,"h":72}},"map-case-hatchet-01.img":{"frame":{"x":1217,"y":656,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-case-hatchet-res-01.img":{"frame":{"x":1321,"y":1012,"w":64,"h":57},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":64,"h":57},"sourceSize":{"w":72,"h":72}},"map-case-ring-01.img":{"frame":{"x":1066,"y":150,"w":78,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":60},"sourceSize":{"w":78,"h":60}},"map-chest-01.img":{"frame":{"x":1217,"y":711,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-02.img":{"frame":{"x":1217,"y":766,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chest-03.img":{"frame":{"x":1251,"y":821,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chimney-01.img":{"frame":{"x":1473,"y":1203,"w":60,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":60,"h":59},"sourceSize":{"w":60,"h":60}},"map-chute-01.img":{"frame":{"x":1131,"y":850,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"map-column-01.img":{"frame":{"x":1452,"y":1028,"w":32,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":32},"sourceSize":{"w":32,"h":32}},"map-control-panel-01.img":{"frame":{"x":1141,"y":562,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-02.img":{"frame":{"x":1213,"y":446,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-03.img":{"frame":{"x":1383,"y":771,"w":48,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":47},"sourceSize":{"w":48,"h":47}},"map-control-panel-04.img":{"frame":{"x":1215,"y":290,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-control-panel-05.img":{"frame":{"x":1215,"y":349,"w":72,"h":55},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":55},"sourceSize":{"w":72,"h":55}},"map-couch-03.img":{"frame":{"x":1392,"y":875,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-couch-res-01.img":{"frame":{"x":1402,"y":583,"w":40,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":2,"w":40,"h":43},"sourceSize":{"w":48,"h":48}},"map-crate-01.img":{"frame":{"x":1219,"y":162,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02.img":{"frame":{"x":1230,"y":62,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-02sv.img":{"frame":{"x":1141,"y":621,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03.img":{"frame":{"x":1141,"y":697,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-04.img":{"frame":{"x":1561,"y":1825,"w":82,"h":82},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":82},"sourceSize":{"w":82,"h":82}},"map-crate-05.img":{"frame":{"x":1361,"y":1141,"w":62,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":62,"h":62},"sourceSize":{"w":62,"h":62}},"map-crate-06.img":{"frame":{"x":805,"y":586,"w":82,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":82,"h":50},"sourceSize":{"w":82,"h":50}},"map-crate-07.img":{"frame":{"x":1141,"y":773,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-08.img":{"frame":{"x":1217,"y":505,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-09.img":{"frame":{"x":1289,"y":408,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-10.img":{"frame":{"x":1137,"y":290,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-11.img":{"frame":{"x":1137,"y":368,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-14.img":{"frame":{"x":1137,"y":214,"w":78,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-crate-14a.img":{"frame":{"x":1148,"y":86,"w":78,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":78,"h":72},"sourceSize":{"w":78,"h":72}},"map-crate-20.img":{"frame":{"x":1291,"y":714,"w":54,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":54},"sourceSize":{"w":54,"h":54}},"map-crate-mil-02.img":{"frame":{"x":1557,"y":1777,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-03.img":{"frame":{"x":1138,"y":1089,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-04.img":{"frame":{"x":1164,"y":1987,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-mil-05.img":{"frame":{"x":659,"y":1494,"w":86,"h":44},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":86,"h":44},"sourceSize":{"w":86,"h":44}},"map-crate-res-01.img":{"frame":{"x":1251,"y":876,"w":69,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":4,"w":69,"h":64},"sourceSize":{"w":72,"h":72}},"map-crate-res-03.img":{"frame":{"x":1437,"y":1963,"w":108,"h":77},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":108,"h":77},"sourceSize":{"w":108,"h":78}},"map-decal-club-01.img":{"frame":{"x":1349,"y":714,"w":50,"h":53},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":57,"w":50,"h":53},"sourceSize":{"w":52,"h":180}},"map-decal-initiative.img":{"frame":{"x":1483,"y":1266,"w":60,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":60},"sourceSize":{"w":64,"h":64}},"map-decal-oil-01.img":{"frame":{"x":654,"y":894,"w":43,"h":61},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":1,"w":43,"h":61},"sourceSize":{"w":64,"h":64}},"map-decal-oil-02.img":{"frame":{"x":1254,"y":1987,"w":45,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":7,"w":45,"h":50},"sourceSize":{"w":64,"h":64}},"map-decal-oil-03.img":{"frame":{"x":1353,"y":484,"w":44,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":9,"w":44,"h":46},"sourceSize":{"w":64,"h":64}},"map-decal-oil-05.img":{"frame":{"x":291,"y":2016,"w":17,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":2,"w":17,"h":28},"sourceSize":{"w":32,"h":32}},"map-decal-oil-06.img":{"frame":{"x":1435,"y":749,"w":47,"h":43},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":10,"w":47,"h":43},"sourceSize":{"w":64,"h":64}},"map-drawers-01.img":{"frame":{"x":1053,"y":534,"w":80,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-drawers-02.img":{"frame":{"x":891,"y":586,"w":80,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":45},"sourceSize":{"w":80,"h":45}},"map-fire-ext-res.img":{"frame":{"x":1136,"y":1715,"w":23,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":18,"y":4,"w":23,"h":28},"sourceSize":{"w":42,"h":35}},"map-grill-01.img":{"frame":{"x":1483,"y":1330,"w":60,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":6,"w":60,"h":51},"sourceSize":{"w":64,"h":64}},"map-hedgehog-01.img":{"frame":{"x":1483,"y":1492,"w":96,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":96},"sourceSize":{"w":96,"h":96}},"map-hut-res-01.img":{"frame":{"x":1009,"y":850,"w":118,"h":118},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":65,"y":68,"w":118,"h":118},"sourceSize":{"w":256,"h":256}},"map-outhouse-res.img":{"frame":{"x":1150,"y":2,"w":75,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":62,"y":21,"w":75,"h":66},"sourceSize":{"w":200,"h":156}},"map-oven-01.img":{"frame":{"x":1148,"y":162,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-pipes-02.img":{"frame":{"x":1435,"y":1738,"w":118,"h":86},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":118,"h":86},"sourceSize":{"w":119,"h":86}},"map-pot-01.img":{"frame":{"x":1447,"y":926,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-02.img":{"frame":{"x":1450,"y":796,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-03.img":{"frame":{"x":1496,"y":847,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-04.img":{"frame":{"x":1452,"y":977,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-05.img":{"frame":{"x":1498,"y":898,"w":47,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":47,"h":47},"sourceSize":{"w":48,"h":48}},"map-pot-res-01.img":{"frame":{"x":1365,"y":440,"w":40,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":16,"y":16,"w":40,"h":40},"sourceSize":{"w":72,"h":72}},"map-potato-res.img":{"frame":{"x":258,"y":2012,"w":29,"h":34},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":7,"w":29,"h":34},"sourceSize":{"w":48,"h":48}},"map-power-box-01.img":{"frame":{"x":1252,"y":1622,"w":36,"h":36},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":36,"h":36},"sourceSize":{"w":36,"h":36}},"map-recorder-01.img":{"frame":{"x":1414,"y":822,"w":32,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-recorder-02.img":{"frame":{"x":901,"y":1437,"w":32,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":32,"h":48},"sourceSize":{"w":32,"h":48}},"map-recorder-03.img":{"frame":{"x":1291,"y":772,"w":24,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-recorder-04.img":{"frame":{"x":1401,"y":484,"w":24,"h":40},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":24,"h":40},"sourceSize":{"w":24,"h":40}},"map-refrigerator-01.img":{"frame":{"x":1219,"y":238,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-saloon-bar-02.img":{"frame":{"x":1365,"y":390,"w":27,"h":46},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":27,"h":46},"sourceSize":{"w":27,"h":46}},"map-sandbags-01.img":{"frame":{"x":1305,"y":1963,"w":128,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":73},"sourceSize":{"w":128,"h":74}},"map-sandbags-02.img":{"frame":{"x":366,"y":406,"w":57,"h":73},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":57,"h":73},"sourceSize":{"w":74,"h":74}},"map-shack-res-01.img":{"frame":{"x":1226,"y":1307,"w":152,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":30,"y":24,"w":152,"h":90},"sourceSize":{"w":210,"h":170}},"map-shack-res-02.img":{"frame":{"x":1245,"y":1207,"w":110,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":34,"w":110,"h":88},"sourceSize":{"w":210,"h":170}},"map-shack-res-03.img":{"frame":{"x":1359,"y":1207,"w":110,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":50,"y":34,"w":110,"h":88},"sourceSize":{"w":210,"h":170}},"map-silo-01.img":{"frame":{"x":2,"y":1773,"w":252,"h":252},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":252,"h":252},"sourceSize":{"w":256,"h":256}},"map-smoke-res.img":{"frame":{"x":1543,"y":1592,"w":85,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":23,"y":19,"w":85,"h":89},"sourceSize":{"w":128,"h":128}},"map-squash-01.img":{"frame":{"x":1427,"y":1141,"w":62,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":5,"w":62,"h":58},"sourceSize":{"w":72,"h":72}},"map-squash-res-01.img":{"frame":{"x":1491,"y":1028,"w":42,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":5,"w":42,"h":41},"sourceSize":{"w":48,"h":48}},"map-stairs-broken-01.img":{"frame":{"x":262,"y":1703,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-stand-01.img":{"frame":{"x":1396,"y":534,"w":40,"h":45},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":40,"h":45},"sourceSize":{"w":40,"h":45}},"map-stone-01.img":{"frame":{"x":1217,"y":581,"w":71,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":71,"h":71},"sourceSize":{"w":72,"h":72}},"map-stone-03.img":{"frame":{"x":1164,"y":1847,"w":137,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":137,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-04.img":{"frame":{"x":1291,"y":238,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-05.img":{"frame":{"x":1291,"y":314,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-stone-res-01.img":{"frame":{"x":1389,"y":1001,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02.img":{"frame":{"x":1260,"y":1401,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-stone-res-04.img":{"frame":{"x":1429,"y":1064,"w":58,"h":58},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":58,"h":58},"sourceSize":{"w":60,"h":60}},"map-stove-01.img":{"frame":{"x":1549,"y":1945,"w":104,"h":81},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":104,"h":81},"sourceSize":{"w":112,"h":88}},"map-stove-02.img":{"frame":{"x":1351,"y":641,"w":49,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":49,"h":52},"sourceSize":{"w":56,"h":56}},"map-table-01.img":{"frame":{"x":346,"y":1703,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02.img":{"frame":{"x":1163,"y":1763,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03.img":{"frame":{"x":1066,"y":2,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-table-res.img":{"frame":{"x":366,"y":554,"w":65,"h":66},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":65,"h":66},"sourceSize":{"w":72,"h":72}},"map-toilet-01.img":{"frame":{"x":749,"y":1494,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"map-toilet-02.img":{"frame":{"x":602,"y":1298,"w":48,"h":62},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":1,"w":48,"h":62},"sourceSize":{"w":64,"h":64}},"map-toilet-03.img":{"frame":{"x":1325,"y":823,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":33,"h":49},"sourceSize":{"w":50,"h":50}},"map-toilet-04.img":{"frame":{"x":622,"y":1422,"w":33,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":33,"h":49},"sourceSize":{"w":50,"h":50}},"map-toilet-res-01.img":{"frame":{"x":602,"y":1364,"w":49,"h":54},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":3,"w":49,"h":54},"sourceSize":{"w":64,"h":64}},"map-toilet-res-02.img":{"frame":{"x":1352,"y":544,"w":40,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":8,"w":40,"h":47},"sourceSize":{"w":64,"h":64}},"map-tree-03.img":{"frame":{"x":1009,"y":586,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-04.img":{"frame":{"x":1292,"y":581,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-07su.img":{"frame":{"x":1009,"y":718,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08f.img":{"frame":{"x":2,"y":1255,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-08su.img":{"frame":{"x":2,"y":1514,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-09.img":{"frame":{"x":1293,"y":484,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-res-02.img":{"frame":{"x":1444,"y":874,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-vat-01.img":{"frame":{"x":1361,"y":1073,"w":64,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":4,"w":64,"h":64},"sourceSize":{"w":72,"h":72}},"map-vat-02.img":{"frame":{"x":1364,"y":1401,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-vat-res.img":{"frame":{"x":1389,"y":937,"w":54,"h":60},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":10,"y":5,"w":54,"h":60},"sourceSize":{"w":72,"h":72}},"map-vending-res.img":{"frame":{"x":1352,"y":595,"w":46,"h":41},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":2,"w":46,"h":41},"sourceSize":{"w":54,"h":47}},"map-vending-soda-01.img":{"frame":{"x":1325,"y":772,"w":54,"h":47},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":54,"h":47},"sourceSize":{"w":54,"h":47}},"map-wall-02-rounded.img":{"frame":{"x":1293,"y":544,"w":16,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-wall-02.img":{"frame":{"x":1313,"y":544,"w":16,"h":32},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":32},"sourceSize":{"w":16,"h":32}},"map-wall-03-rounded.img":{"frame":{"x":1136,"y":1663,"w":16,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-wall-03.img":{"frame":{"x":901,"y":1489,"w":16,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":48},"sourceSize":{"w":16,"h":48}},"map-wall-04-rounded.img":{"frame":{"x":786,"y":1173,"w":16,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-wall-04.img":{"frame":{"x":975,"y":586,"w":16,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":16,"h":64},"sourceSize":{"w":16,"h":64}},"map-woodpile-01.img":{"frame":{"x":1403,"y":697,"w":48,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":48,"h":48},"sourceSize":{"w":48,"h":48}},"map-woodpile-res-01.img":{"frame":{"x":366,"y":624,"w":36,"h":26},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":11,"w":36,"h":26},"sourceSize":{"w":48,"h":48}}}}]');
const snow = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"snow-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-airdrop-01x.img":{"frame":{"x":1805,"y":1602,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-airdrop-02x.img":{"frame":{"x":1889,"y":1602,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-building-greenhouse-ceiling-02.img":{"frame":{"x":1709,"y":438,"w":200,"h":312},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":312},"sourceSize":{"w":200,"h":312}},"map-building-greenhouse-floor-02.img":{"frame":{"x":1289,"y":438,"w":416,"h":321},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":416,"h":321},"sourceSize":{"w":417,"h":321}},"map-bunker-chrys-chamber-ceiling-01.img":{"frame":{"x":358,"y":1197,"w":224,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":224,"h":136},"sourceSize":{"w":224,"h":136}},"map-bunker-chrys-chamber-floor-01a.img":{"frame":{"x":840,"y":1276,"w":80,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":17,"y":16,"w":80,"h":74},"sourceSize":{"w":114,"h":90}},"map-bunker-chrys-chamber-floor-01b.img":{"frame":{"x":853,"y":2,"w":465,"h":313},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":465,"h":313},"sourceSize":{"w":466,"h":314}},"map-bunker-chrys-compartment-ceiling-01a.img":{"frame":{"x":1989,"y":395,"w":56,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":96},"sourceSize":{"w":56,"h":96}},"map-bunker-chrys-compartment-ceiling-01b.img":{"frame":{"x":1528,"y":1166,"w":177,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":177,"h":184},"sourceSize":{"w":178,"h":186}},"map-bunker-chrys-compartment-ceiling-02a.img":{"frame":{"x":1710,"y":376,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-02b.img":{"frame":{"x":1104,"y":1251,"w":176,"h":129},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":176,"h":129},"sourceSize":{"w":178,"h":130}},"map-bunker-chrys-compartment-ceiling-03a.img":{"frame":{"x":1889,"y":1259,"w":112,"h":48},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":112,"h":48},"sourceSize":{"w":112,"h":48}},"map-bunker-chrys-compartment-ceiling-03b.img":{"frame":{"x":1709,"y":1166,"w":176,"h":153},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":176,"h":153},"sourceSize":{"w":178,"h":154}},"map-bunker-chrys-compartment-floor-01a.img":{"frame":{"x":1913,"y":2,"w":114,"h":305},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":114,"h":305},"sourceSize":{"w":114,"h":322}},"map-bunker-chrys-compartment-floor-01c.img":{"frame":{"x":853,"y":627,"w":400,"h":387},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":387},"sourceSize":{"w":402,"h":402}},"map-bunker-chrys-compartment-floor-02a.img":{"frame":{"x":2,"y":730,"w":385,"h":314},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":385,"h":314},"sourceSize":{"w":386,"h":314}},"map-bunker-chrys-compartment-floor-02c.img":{"frame":{"x":358,"y":1103,"w":258,"h":90},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":8,"y":0,"w":258,"h":90},"sourceSize":{"w":274,"h":90}},"map-bunker-chrys-compartment-floor-03a.img":{"frame":{"x":1322,"y":2,"w":384,"h":432},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":384,"h":432},"sourceSize":{"w":384,"h":432}},"map-bunker-generic-ceiling-02.img":{"frame":{"x":1617,"y":1354,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-generic-floor-03.img":{"frame":{"x":1617,"y":1473,"w":80,"h":115},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":115},"sourceSize":{"w":80,"h":115}},"map-bunker-hydra-ceiling-01.img":{"frame":{"x":1104,"y":1095,"w":216,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":216,"h":152},"sourceSize":{"w":216,"h":152}},"map-bunker-hydra-chamber-ceiling-01.img":{"frame":{"x":1709,"y":1323,"w":160,"h":172},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":172},"sourceSize":{"w":216,"h":176}},"map-bunker-hydra-chamber-ceiling-02.img":{"frame":{"x":620,"y":1103,"w":96,"h":175},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":175},"sourceSize":{"w":96,"h":175}},"map-bunker-hydra-chamber-ceiling-03.img":{"frame":{"x":1324,"y":1095,"w":200,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":200,"h":136},"sourceSize":{"w":200,"h":136}},"map-bunker-hydra-chamber-floor-01a.img":{"frame":{"x":462,"y":1337,"w":97,"h":97},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":97,"h":97},"sourceSize":{"w":97,"h":97}},"map-bunker-hydra-chamber-floor-01b.img":{"frame":{"x":391,"y":730,"w":353,"h":369},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":353,"h":369},"sourceSize":{"w":353,"h":369}},"map-bunker-hydra-chamber-floor-02.img":{"frame":{"x":1710,"y":2,"w":172,"h":370},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":20,"y":0,"w":172,"h":370},"sourceSize":{"w":196,"h":372}},"map-bunker-hydra-chamber-floor-03.img":{"frame":{"x":1661,"y":763,"w":352,"h":399},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":399},"sourceSize":{"w":352,"h":416}},"map-bunker-hydra-compartment-ceiling-01.img":{"frame":{"x":1324,"y":1235,"w":160,"h":180},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":180},"sourceSize":{"w":160,"h":180}},"map-bunker-hydra-compartment-ceiling-02.img":{"frame":{"x":1257,"y":763,"w":400,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":400,"h":328},"sourceSize":{"w":408,"h":360}},"map-bunker-hydra-compartment-ceiling-03.img":{"frame":{"x":1873,"y":1323,"w":160,"h":135},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":135},"sourceSize":{"w":160,"h":135}},"map-bunker-hydra-compartment-floor-01.img":{"frame":{"x":2,"y":1048,"w":352,"h":320},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":320},"sourceSize":{"w":352,"h":320}},"map-bunker-hydra-compartment-floor-02.img":{"frame":{"x":2,"y":2,"w":847,"h":724},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":0,"w":847,"h":724},"sourceSize":{"w":852,"h":724}},"map-bunker-hydra-compartment-floor-03.img":{"frame":{"x":748,"y":1018,"w":352,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":254},"sourceSize":{"w":352,"h":256}},"map-bunker-hydra-floor-01.img":{"frame":{"x":853,"y":319,"w":432,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":432,"h":304},"sourceSize":{"w":432,"h":304}},"map-bunker-hydra-floor-04.img":{"frame":{"x":1701,"y":1499,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-bush-01x.img":{"frame":{"x":1805,"y":1499,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-chest-03x.img":{"frame":{"x":1973,"y":1678,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-chute-01x.img":{"frame":{"x":720,"y":1276,"w":116,"h":116},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":6,"y":6,"w":116,"h":116},"sourceSize":{"w":128,"h":128}},"map-complex-warehouse-floor-01.img":{"frame":{"x":586,"y":1197,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-complex-warehouse-floor-02.img":{"frame":{"x":748,"y":730,"w":30,"h":264},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":264},"sourceSize":{"w":30,"h":264}},"map-complex-warehouse-floor-03.img":{"frame":{"x":2015,"y":1462,"w":30,"h":112},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":30,"h":112},"sourceSize":{"w":30,"h":112}},"map-crate-01x.img":{"frame":{"x":840,"y":1354,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-crate-02x.img":{"frame":{"x":1973,"y":1602,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03x.img":{"frame":{"x":1008,"y":1354,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-planter-06.img":{"frame":{"x":1913,"y":395,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-07.img":{"frame":{"x":782,"y":793,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-02.img":{"frame":{"x":1188,"y":1018,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-planter-res-03.img":{"frame":{"x":2005,"y":1259,"w":41,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":41,"h":37},"sourceSize":{"w":43,"h":43}},"map-snow-01.img":{"frame":{"x":1913,"y":666,"w":106,"h":87},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":11,"y":20,"w":106,"h":87},"sourceSize":{"w":128,"h":128}},"map-snow-02.img":{"frame":{"x":586,"y":1313,"w":104,"h":104},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":12,"w":104,"h":104},"sourceSize":{"w":128,"h":128}},"map-snow-03.img":{"frame":{"x":1889,"y":1166,"w":156,"h":89},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":12,"y":3,"w":156,"h":89},"sourceSize":{"w":180,"h":96}},"map-snow-04.img":{"frame":{"x":782,"y":847,"w":50,"h":49},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":7,"w":50,"h":49},"sourceSize":{"w":64,"h":64}},"map-snow-05.img":{"frame":{"x":1826,"y":376,"w":45,"h":52},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":6,"w":45,"h":52},"sourceSize":{"w":64,"h":64}},"map-snow-06.img":{"frame":{"x":1528,"y":1095,"w":89,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":89,"h":56},"sourceSize":{"w":96,"h":64}},"map-snowball-res.img":{"frame":{"x":1284,"y":1251,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":35,"h":35},"sourceSize":{"w":48,"h":48}},"map-stone-01x.img":{"frame":{"x":1008,"y":1276,"w":75,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":75,"h":74},"sourceSize":{"w":80,"h":80}},"map-stone-03x.img":{"frame":{"x":1873,"y":1462,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-res-01x.img":{"frame":{"x":782,"y":730,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02x.img":{"frame":{"x":358,"y":1337,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-table-01x.img":{"frame":{"x":1104,"y":1018,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02x.img":{"frame":{"x":1886,"y":311,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03x.img":{"frame":{"x":924,"y":1276,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-tree-10.img":{"frame":{"x":1913,"y":535,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":1488,"y":1354,"w":125,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":125,"h":125},"sourceSize":{"w":128,"h":128}}}}]');
const woods = /* @__PURE__ */ JSON.parse('[{"meta":{"image":"woods-0-50.png","size":{"w":2048,"h":2048},"scale":0.5},"frames":{"map-building-pavilion-ceiling-01.img":{"frame":{"x":358,"y":1329,"w":311,"h":304},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":8,"w":311,"h":304},"sourceSize":{"w":320,"h":320}},"map-building-pavilion-floor-01.img":{"frame":{"x":370,"y":977,"w":288,"h":288},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":288,"h":288},"sourceSize":{"w":288,"h":288}},"map-building-pavilion-res-01.img":{"frame":{"x":1039,"y":1618,"w":89,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":83,"y":81,"w":89,"h":94},"sourceSize":{"w":256,"h":256}},"map-bunker-eye-chamber-ceiling-01.img":{"frame":{"x":473,"y":1637,"w":160,"h":272},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":272},"sourceSize":{"w":160,"h":272}},"map-bunker-eye-chamber-floor-01a.img":{"frame":{"x":2,"y":2,"w":352,"h":672},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":16,"w":352,"h":672},"sourceSize":{"w":352,"h":688}},"map-bunker-eye-chamber-floor-01b.img":{"frame":{"x":960,"y":1769,"w":96,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":128},"sourceSize":{"w":96,"h":128}},"map-bunker-eye-compartment-ceiling-01.img":{"frame":{"x":922,"y":970,"w":160,"h":160},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":160,"h":160},"sourceSize":{"w":160,"h":160}},"map-bunker-eye-compartment-floor-01.img":{"frame":{"x":2,"y":1329,"w":352,"h":352},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":352,"h":352},"sourceSize":{"w":352,"h":352}},"map-bunker-hatchet-chamber-ceiling-01.img":{"frame":{"x":673,"y":1441,"w":208,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":208,"h":152},"sourceSize":{"w":208,"h":152}},"map-bunker-hatchet-chamber-floor-01a.img":{"frame":{"x":2,"y":977,"w":364,"h":348},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":364,"h":348},"sourceSize":{"w":369,"h":353}},"map-bunker-hatchet-chamber-floor-01b.img":{"frame":{"x":1002,"y":1526,"w":96,"h":88},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":96,"h":88},"sourceSize":{"w":97,"h":89}},"map-bunker-hatchet-chamber-floor-01c.img":{"frame":{"x":885,"y":1441,"w":113,"h":184},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":4,"w":113,"h":184},"sourceSize":{"w":113,"h":192}},"map-bunker-hatchet-compartment-ceiling-01.img":{"frame":{"x":455,"y":726,"w":256,"h":200},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":200},"sourceSize":{"w":256,"h":200}},"map-bunker-hatchet-compartment-ceiling-02.img":{"frame":{"x":662,"y":930,"w":256,"h":248},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":248},"sourceSize":{"w":256,"h":248}},"map-bunker-hatchet-compartment-ceiling-03.img":{"frame":{"x":2,"y":1850,"w":304,"h":152},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":304,"h":152},"sourceSize":{"w":304,"h":152}},"map-bunker-hatchet-compartment-floor-01.img":{"frame":{"x":358,"y":2,"w":592,"h":462},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":592,"h":462},"sourceSize":{"w":592,"h":464}},"map-bunker-hatchet-compartment-floor-02a.img":{"frame":{"x":2,"y":678,"w":449,"h":295},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":449,"h":295},"sourceSize":{"w":449,"h":297}},"map-bunker-hatchet-compartment-floor-02b.img":{"frame":{"x":2,"y":1685,"w":336,"h":161},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":336,"h":161},"sourceSize":{"w":345,"h":161}},"map-bunker-hatchet-compartment-floor-02c.img":{"frame":{"x":342,"y":1685,"w":127,"h":328},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":0,"w":127,"h":328},"sourceSize":{"w":129,"h":337}},"map-bunker-hatchet-compartment-floor-02d.img":{"frame":{"x":473,"y":1913,"w":191,"h":105},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":9,"y":0,"w":191,"h":105},"sourceSize":{"w":200,"h":105}},"map-bunker-hatchet-compartment-floor-03a.img":{"frame":{"x":668,"y":1896,"w":187,"h":113},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":187,"h":113},"sourceSize":{"w":193,"h":113}},"map-bunker-hatchet-compartment-floor-03b.img":{"frame":{"x":455,"y":468,"w":366,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":3,"w":366,"h":254},"sourceSize":{"w":369,"h":257}},"map-bunker-hatchet-compartment-floor-03c.img":{"frame":{"x":859,"y":1896,"w":97,"h":140},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":97,"h":140},"sourceSize":{"w":97,"h":153}},"map-bunker-hatchet-compartment-floor-03d.img":{"frame":{"x":825,"y":468,"w":190,"h":254},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":10,"w":190,"h":254},"sourceSize":{"w":193,"h":265}},"map-bush-01x.img":{"frame":{"x":1207,"y":1450,"w":63,"h":65},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":4,"y":3,"w":63,"h":65},"sourceSize":{"w":72,"h":72}},"map-bush-06.img":{"frame":{"x":1065,"y":1134,"w":95,"h":94},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":95,"h":94},"sourceSize":{"w":96,"h":96}},"map-bush-07sp.img":{"frame":{"x":1132,"y":1610,"w":67,"h":71},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":0,"w":67,"h":71},"sourceSize":{"w":72,"h":72}},"map-chest-03x.img":{"frame":{"x":370,"y":1269,"w":70,"h":51},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":70,"h":51},"sourceSize":{"w":70,"h":51}},"map-crate-01x.img":{"frame":{"x":1131,"y":1370,"w":76,"h":76},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":76,"h":76},"sourceSize":{"w":80,"h":80}},"map-crate-02x.img":{"frame":{"x":1131,"y":1450,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-crate-03x.img":{"frame":{"x":1086,"y":1048,"w":74,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":74,"h":74},"sourceSize":{"w":74,"h":74}},"map-crate-19.img":{"frame":{"x":1060,"y":1716,"w":72,"h":72},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":72},"sourceSize":{"w":72,"h":72}},"map-planter-06.img":{"frame":{"x":358,"y":468,"w":72,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":72,"h":136},"sourceSize":{"w":72,"h":136}},"map-planter-07.img":{"frame":{"x":863,"y":826,"w":50,"h":50},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":50,"h":50},"sourceSize":{"w":50,"h":50}},"map-planter-res-02.img":{"frame":{"x":1186,"y":1526,"w":38,"h":67},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":0,"w":38,"h":67},"sourceSize":{"w":43,"h":68}},"map-planter-res-03.img":{"frame":{"x":933,"y":1397,"w":41,"h":37},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":3,"w":41,"h":37},"sourceSize":{"w":43,"h":43}},"map-snowball-res.img":{"frame":{"x":673,"y":1597,"w":35,"h":35},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":7,"y":6,"w":35,"h":35},"sourceSize":{"w":48,"h":48}},"map-stone-01x.img":{"frame":{"x":1086,"y":970,"w":75,"h":74},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":1,"w":75,"h":74},"sourceSize":{"w":80,"h":80}},"map-stone-03x.img":{"frame":{"x":897,"y":1629,"w":138,"h":136},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":3,"y":4,"w":138,"h":136},"sourceSize":{"w":144,"h":144}},"map-stone-res-01x.img":{"frame":{"x":897,"y":1769,"w":59,"h":59},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":59,"h":59},"sourceSize":{"w":60,"h":60}},"map-stone-res-02x.img":{"frame":{"x":1064,"y":1266,"w":100,"h":100},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"map-table-01x.img":{"frame":{"x":358,"y":608,"w":80,"h":64},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":64},"sourceSize":{"w":80,"h":64}},"map-table-02x.img":{"frame":{"x":715,"y":826,"w":144,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":144,"h":80},"sourceSize":{"w":144,"h":80}},"map-table-03x.img":{"frame":{"x":1102,"y":1526,"w":80,"h":80},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":80,"h":80},"sourceSize":{"w":80,"h":80}},"map-tree-05.img":{"frame":{"x":922,"y":726,"w":245,"h":240},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":5,"y":8,"w":245,"h":240},"sourceSize":{"w":256,"h":256}},"map-tree-07.img":{"frame":{"x":960,"y":1901,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-07sp.img":{"frame":{"x":933,"y":1134,"w":128,"h":128},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128}},"map-tree-08.img":{"frame":{"x":637,"y":1637,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-08sp.img":{"frame":{"x":673,"y":1182,"w":256,"h":255},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":256,"h":255},"sourceSize":{"w":256,"h":256}},"map-tree-10.img":{"frame":{"x":933,"y":1266,"w":127,"h":127},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":127,"h":127},"sourceSize":{"w":128,"h":128}},"map-tree-11.img":{"frame":{"x":1002,"y":1397,"w":125,"h":125},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":1,"y":1,"w":125,"h":125},"sourceSize":{"w":128,"h":128}},"map-tree-switch-01.img":{"frame":{"x":444,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-02.img":{"frame":{"x":504,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-03.img":{"frame":{"x":564,"y":1269,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-tree-switch-04.img":{"frame":{"x":897,"y":1832,"w":56,"h":56},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":56,"h":56},"sourceSize":{"w":56,"h":56}},"map-woodpile-02.img":{"frame":{"x":715,"y":726,"w":192,"h":96},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":0,"y":0,"w":192,"h":96},"sourceSize":{"w":192,"h":96}},"map-woodpile-res-02.img":{"frame":{"x":2,"y":2017,"w":60,"h":28},"rotated":false,"trimmed":true,"spriteSourceSize":{"x":2,"y":2,"w":60,"h":28},"sourceSize":{"w":64,"h":32}}}}]');
const lowResAtlasDefs = {
  cobalt,
  desert,
  faction,
  gradient,
  halloween,
  loadout,
  main,
  potato,
  savannah,
  shared,
  snow,
  woods
};
const spritesheetDefs = {
  low: lowResAtlasDefs,
  high: fullResAtlasDefs
};
function loadTexture(renderer, url) {
  const tex = Texture.from(url);
  const baseTex = tex.baseTexture;
  let loadAttempts = 0;
  if (!baseTex.valid) {
    baseTex.on("loaded", (baseTex2) => {
      console.log("Loaded texture", url);
      renderer.prepare.upload(baseTex2);
    });
    baseTex.on("error", (baseTex2) => {
      console.log("BaseTex load error, retrying", url);
      if (loadAttempts++ <= 3) {
        setTimeout(
          () => {
            if (baseTex2.source) {
              baseTex2.updateSourceImage("");
              baseTex2.updateSourceImage(url.substring(5, url.length));
            }
          },
          (loadAttempts - 1) * 1e3
        );
      }
    });
  }
  return baseTex;
}
const actualPaths = /* @__PURE__ */ Object.assign({
  "../atlas-builder/out/cobalt-0-100.png": __vite_glob_0_0,
  "../atlas-builder/out/cobalt-0-50.png": __vite_glob_0_1,
  "../atlas-builder/out/desert-0-100.png": __vite_glob_0_2,
  "../atlas-builder/out/desert-0-50.png": __vite_glob_0_3,
  "../atlas-builder/out/faction-0-100.png": __vite_glob_0_4,
  "../atlas-builder/out/faction-0-50.png": __vite_glob_0_5,
  "../atlas-builder/out/gradient-0-100.png": __vite_glob_0_6,
  "../atlas-builder/out/gradient-0-50.png": __vite_glob_0_7,
  "../atlas-builder/out/halloween-0-100.png": __vite_glob_0_8,
  "../atlas-builder/out/halloween-0-50.png": __vite_glob_0_9,
  "../atlas-builder/out/loadout-0-100.png": __vite_glob_0_10,
  "../atlas-builder/out/loadout-0-50.png": __vite_glob_0_11,
  "../atlas-builder/out/main-0-100.png": __vite_glob_0_12,
  "../atlas-builder/out/main-0-50.png": __vite_glob_0_13,
  "../atlas-builder/out/potato-0-100.png": __vite_glob_0_14,
  "../atlas-builder/out/potato-0-50.png": __vite_glob_0_15,
  "../atlas-builder/out/savannah-0-100.png": __vite_glob_0_16,
  "../atlas-builder/out/savannah-0-50.png": __vite_glob_0_17,
  "../atlas-builder/out/shared-0-100.png": __vite_glob_0_18,
  "../atlas-builder/out/shared-0-50.png": __vite_glob_0_19,
  "../atlas-builder/out/shared-1-100.png": __vite_glob_0_20,
  "../atlas-builder/out/shared-1-50.png": __vite_glob_0_21,
  "../atlas-builder/out/shared-2-100.png": __vite_glob_0_22,
  "../atlas-builder/out/shared-2-50.png": __vite_glob_0_23,
  "../atlas-builder/out/snow-0-100.png": __vite_glob_0_24,
  "../atlas-builder/out/snow-0-50.png": __vite_glob_0_25,
  "../atlas-builder/out/woods-0-100.png": __vite_glob_0_26,
  "../atlas-builder/out/woods-0-50.png": __vite_glob_0_27
});
const fileNameToURL = {};
for (const [key, value] of Object.entries(actualPaths)) {
  const fileName = key.split("/").at(-1);
  fileNameToURL[fileName] = value;
}
function loadSpritesheet(renderer, data) {
  const baseTex = loadTexture(renderer, fileNameToURL[data.meta.image]);
  const sheet = new Spritesheet(baseTex, data);
  sheet.resolution = baseTex.resolution;
  sheet.parse();
  return sheet;
}
function selectTextureRes(renderer, config) {
  let minDim = Math.min(window.screen.width, window.screen.height);
  let maxDim = Math.max(window.screen.width, window.screen.height);
  minDim *= window.devicePixelRatio;
  maxDim *= window.devicePixelRatio;
  const smallScreen = maxDim < 1366 && minDim < 768;
  let textureRes = config.get("highResTex") ? "high" : "low";
  if (smallScreen || device.mobile && !device.tablet || renderer.type == RENDERER_TYPE.CANVAS) {
    textureRes = "low";
  }
  if (renderer.type == RENDERER_TYPE.WEBGL) {
    const s = renderer.gl;
    if (s.getParameter(s.MAX_TEXTURE_SIZE) < 4096) {
      textureRes = "low";
    }
  }
  console.log(
    "TextureRes",
    textureRes,
    "screenDims",
    window.screen.width,
    window.screen.height
  );
  return textureRes;
}
class ResourceManager {
  constructor(renderer, audioManager, config) {
    this.renderer = renderer;
    this.audioManager = audioManager;
    this.config = config;
    this.textureRes = selectTextureRes(this.renderer, this.config);
    BasePrepare.uploadsPerFrame = 1;
  }
  atlases = {};
  loadTicker = 0;
  loaded = false;
  textureRes;
  mapName;
  preloadMap;
  isAtlasLoaded(name) {
    return this.atlases[name]?.loaded;
  }
  atlasTexturesLoaded(name) {
    if (!this.isAtlasLoaded(name)) {
      return false;
    }
    const atlas = this.atlases[name];
    for (let i2 = 0; i2 < atlas.spritesheets.length; i2++) {
      const spritesheet = atlas.spritesheets[i2];
      if (!spritesheet.baseTexture.valid) {
        return false;
      }
    }
    return true;
  }
  loadAtlas(name) {
    if (this.isAtlasLoaded(name)) {
      return;
    }
    console.log("Load atlas", name);
    this.atlases[name] = this.atlases[name] || {
      loaded: false,
      spritesheets: []
    };
    let atlasDefs = spritesheetDefs[this.textureRes] || spritesheetDefs.low;
    const atlasDef = atlasDefs[name];
    for (let i2 = 0; i2 < atlasDef.length; i2++) {
      const atlas = loadSpritesheet(this.renderer, atlasDef[i2]);
      this.atlases[name].spritesheets.push(atlas);
    }
    this.atlases[name].loaded = true;
  }
  unloadAtlas(name) {
    if (!this.isAtlasLoaded(name)) {
      return;
    }
    console.log("Unload atlas", name);
    const atlas = this.atlases[name];
    for (let i2 = 0; i2 < atlas.spritesheets.length; i2++) {
      atlas.spritesheets[i2].destroy(true);
    }
    atlas.loaded = false;
    atlas.spritesheets = [];
  }
  loadMapAssets(mapName) {
    console.log("Load map", mapName);
    const mapDef = MapDefs[mapName];
    if (!mapDef) {
      throw new Error(`Failed loading mapDef ${this.mapName}`);
    }
    const atlasList = mapDef.assets.atlases;
    const keys = Object.keys(this.atlases);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const key = keys[i2];
      if (!atlasList.includes(key)) {
        this.unloadAtlas(key);
      }
    }
    for (let i2 = 0; i2 < atlasList.length; i2++) {
      const atlas = atlasList[i2];
      if (!this.isAtlasLoaded(atlas)) {
        this.loadAtlas(atlas);
      }
    }
    setTimeout(() => {
      this.audioManager.preloadSounds();
      const soundList = mapDef.assets.audio;
      for (let i2 = 0; i2 < soundList.length; i2++) {
        const sound = soundList[i2];
        let soundsList = SoundDefs.Sounds[sound.channel];
        if (!soundsList) {
          const channelDef = SoundDefs.Channels[sound.channel];
          soundsList = SoundDefs.Sounds[channelDef.list];
        }
        const soundDef = soundsList[sound.name];
        const options = {
          canCoalesce: soundDef.canCoalesce,
          channels: soundDef.maxInstances,
          volume: soundDef.volume
        };
        this.audioManager.loadSound({
          name: sound.name,
          channel: sound.channel,
          path: soundDef.path,
          options
        });
      }
    }, 0);
  }
  update(dt) {
    if (!this.loaded) {
      this.loadTicker += dt;
      let loaded = !this.preloadMap;
      const keys = Object.keys(this.atlases);
      for (let i2 = 0; i2 < keys.length; i2++) {
        const key = keys[i2];
        if (!this.atlasTexturesLoaded(key)) {
          loaded = false;
        }
      }
      if (!this.audioManager.allLoaded()) {
        loaded = false;
      }
      if (loaded) {
        console.log("Resource load complete", this.loadTicker.toFixed(2));
        this.loaded = true;
      }
    }
  }
}
var define_GAME_REGIONS_default = {};
class SiteInfo {
  constructor(config, localization) {
    this.config = config;
    this.localization = localization;
    this.config = config;
    this.localization = localization;
  }
  info = {};
  loaded = false;
  load() {
    const locale = this.localization.getLocale();
    const siteInfoUrl = api.resolveUrl(`/api/site_info?language=${locale}`);
    const mainSelector = $("#server-opts");
    const teamSelector = $("#team-server-opts");
    for (const region in define_GAME_REGIONS_default) {
      const data = define_GAME_REGIONS_default[region];
      const name = this.localization.translate(data.l10n);
      const elm = `<option value='${region}' data-l10n='${data.l10n}' data-label='${name}'>${name}</option>`;
      mainSelector.append(elm);
      teamSelector.append(elm);
    }
    $.ajax(siteInfoUrl).done((data) => {
      this.info = data || {};
      this.loaded = true;
      this.updatePageFromInfo();
    });
  }
  getGameModeStyles() {
    const availableModes = [];
    const modes = this.info.modes || [];
    for (let i2 = 0; i2 < modes.length; i2++) {
      const mode = modes[i2];
      const mapDef = (MapDefs[mode.mapName] || MapDefs.main).desc;
      const buttonText = mapDef.buttonText ? mapDef.buttonText : TeamModeToString[mode.teamMode];
      availableModes.push({
        icon: mapDef.icon,
        buttonCss: mapDef.buttonCss,
        buttonText,
        enabled: mode.enabled
      });
    }
    return availableModes;
  }
  updatePageFromInfo() {
    if (this.loaded) {
      const getGameModeStyles = this.getGameModeStyles();
      for (let i2 = 0; i2 < getGameModeStyles.length; i2++) {
        const style = getGameModeStyles[i2];
        const selector = `index-play-${style.buttonText}`;
        const btn = $(`#btn-start-mode-${i2}`);
        btn.data("l10n", selector);
        btn.html(this.localization.translate(selector));
        if (style.icon || style.buttonCss) {
          if (i2 == 0) {
            btn.addClass("btn-custom-mode-no-indent");
          } else {
            btn.addClass("btn-custom-mode-main");
          }
          btn.addClass(style.buttonCss);
          btn.css({
            "background-image": `url(${style.icon})`
          });
        }
        const l = $(`#btn-team-queue-mode-${i2}`);
        if (l.length) {
          const c = `index-${style.buttonText}`;
          l.data("l10n", c);
          l.html(this.localization.translate(c));
          if (style.icon) {
            l.addClass("btn-custom-mode-select");
            l.css({
              "background-image": `url(${style.icon})`
            });
          }
        }
        btn.toggle(style.enabled);
      }
      const supportsTeam = this.info.modes.some((s) => s.enabled && s.teamMode > 1);
      $("#btn-join-team, #btn-create-team").toggle(supportsTeam);
      const pops = this.info.pops;
      if (pops) {
        const regions = Object.keys(pops);
        for (let i2 = 0; i2 < regions.length; i2++) {
          const region = regions[i2];
          const data = pops[region];
          const sel = $("#server-opts").children(`option[value="${region}"]`);
          const players = this.localization.translate("index-players");
          sel.text(`${sel.data("label")} [${data.playerCount} ${players}]`);
        }
      }
      let hasTwitchStreamers = false;
      const featuredStreamersElem = $("#featured-streamers");
      const streamerList = $(".streamer-list");
      if (!device.mobile && this.info.twitch) {
        streamerList.empty();
        for (let i2 = 0; i2 < this.info.twitch.length; i2++) {
          const streamer = this.info.twitch[i2];
          const template = $("#featured-streamer-template").clone();
          template.attr("class", "featured-streamer streamer-tooltip").attr("id", "");
          const link = template.find("a");
          const text = this.localization.translate(
            streamer.viewers == 1 ? "index-viewer" : "index-viewers"
          );
          link.html(
            `${streamer.name} <span>${streamer.viewers} ${text}</span>`
          );
          link.css("background-image", `url(${streamer.img})`);
          link.attr("href", streamer.url);
          streamerList.append(template);
          hasTwitchStreamers = true;
        }
      }
      featuredStreamersElem.css(
        "visibility",
        hasTwitchStreamers ? "visible" : "hidden"
      );
      const featuredYoutuberElem = $("#featured-youtuber");
      const displayYoutuber = this.info.youtube;
      if (displayYoutuber) {
        $(".btn-youtuber").attr("href", this.info.youtube.link).html(this.info.youtube.name);
      }
      featuredYoutuberElem.css("display", displayYoutuber ? "block" : "none");
    }
  }
}
var colorPicker = {};
/*!
 * ==========================================================
 *  COLOR PICKER PLUGIN 1.4.2
 * ==========================================================
 * Author: Taufik Nurrohman <https://github.com/tovic>
 * License: MIT
 * ----------------------------------------------------------
 */
var hasRequiredColorPicker;
function requireColorPicker() {
  if (hasRequiredColorPicker) return colorPicker;
  hasRequiredColorPicker = 1;
  (function(win, doc, NS) {
    var instance = "__instance__", first = "firstChild", delay = setTimeout;
    function is_set(x) {
      return typeof x !== "undefined";
    }
    function is_string(x) {
      return typeof x === "string";
    }
    function is_object(x) {
      return typeof x === "object";
    }
    function object_length(x) {
      return Object.keys(x).length;
    }
    function edge(a, b, c) {
      if (a < b) return b;
      if (a > c) return c;
      return a;
    }
    function num(i2, j) {
      return parseInt(i2, j);
    }
    function round(i2) {
      return Math.round(i2);
    }
    function HSV2RGB(a) {
      var h = +a[0], s = +a[1], v = +a[2], r, g, b, i2, f, p, q, t;
      i2 = Math.floor(h * 6);
      f = h * 6 - i2;
      p = v * (1 - s);
      q = v * (1 - f * s);
      t = v * (1 - (1 - f) * s);
      i2 = i2 || 0;
      q = q || 0;
      t = t || 0;
      switch (i2 % 6) {
        case 0:
          r = v, g = t, b = p;
          break;
        case 1:
          r = q, g = v, b = p;
          break;
        case 2:
          r = p, g = v, b = t;
          break;
        case 3:
          r = p, g = q, b = v;
          break;
        case 4:
          r = t, g = p, b = v;
          break;
        case 5:
          r = v, g = p, b = q;
          break;
      }
      return [round(r * 255), round(g * 255), round(b * 255)];
    }
    function HSV2HEX(a) {
      return RGB2HEX(HSV2RGB(a));
    }
    function RGB2HSV(a) {
      var r = +a[0], g = +a[1], b = +a[2], max = Math.max(r, g, b), min = Math.min(r, g, b), d = max - min, h, s = max === 0 ? 0 : d / max, v = max / 255;
      switch (max) {
        case min:
          h = 0;
          break;
        case r:
          h = g - b + d * (g < b ? 6 : 0);
          h /= 6 * d;
          break;
        case g:
          h = b - r + d * 2;
          h /= 6 * d;
          break;
        case b:
          h = r - g + d * 4;
          h /= 6 * d;
          break;
      }
      return [h, s, v];
    }
    function RGB2HEX(a) {
      var s = +a[2] | +a[1] << 8 | +a[0] << 16;
      s = "000000" + s.toString(16);
      return s.slice(-6);
    }
    function HEX2HSV(s) {
      return RGB2HSV(HEX2RGB(s));
    }
    function HEX2RGB(s) {
      if (s.length === 3) {
        s = s.replace(/./g, "$&$&");
      }
      return [num(s[0] + s[1], 16), num(s[2] + s[3], 16), num(s[4] + s[5], 16)];
    }
    function _2HSV_pri(a) {
      return [+a[0] / 360, +a[1] / 100, +a[2] / 100];
    }
    function _2HSV_pub(a) {
      return [round(+a[0] * 360), round(+a[1] * 100), round(+a[2] * 100)];
    }
    function _2RGB_pri(a) {
      return [+a[0] / 255, +a[1] / 255, +a[2] / 255];
    }
    function parse(x) {
      if (is_object(x)) return x;
      var rgb = /\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/i.exec(x), hsv = /\s*hsv\s*\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)\s*$/i.exec(x), hex = x[0] === "#" && x.match(/^#([\da-f]{3}|[\da-f]{6})$/i);
      if (hex) {
        return HEX2HSV(x.slice(1));
      } else if (hsv) {
        return _2HSV_pri([+hsv[1], +hsv[2], +hsv[3]]);
      } else if (rgb) {
        return RGB2HSV([+rgb[1], +rgb[2], +rgb[3]]);
      }
      return [0, 1, 1];
    }
    (function($2) {
      $2.version = "1.4.2";
      $2[instance] = {};
      $2.each = function(fn, t) {
        return delay(function() {
          var ins = $2[instance], i2;
          for (i2 in ins) {
            fn.call(ins[i2], i2, ins);
          }
        }, t === 0 ? 0 : t || 1), $2;
      };
      $2.parse = parse;
      $2._HSV2RGB = HSV2RGB;
      $2._HSV2HEX = HSV2HEX;
      $2._RGB2HSV = RGB2HSV;
      $2._HEX2HSV = HEX2HSV;
      $2._HEX2RGB = function(a) {
        return _2RGB_pri(HEX2RGB(a));
      };
      $2.HSV2RGB = function(a) {
        return HSV2RGB(_2HSV_pri(a));
      };
      $2.HSV2HEX = function(a) {
        return HSV2HEX(_2HSV_pri(a));
      };
      $2.RGB2HSV = function(a) {
        return _2HSV_pub(RGB2HSV(a));
      };
      $2.RGB2HEX = RGB2HEX;
      $2.HEX2HSV = function(s) {
        return _2HSV_pub(HEX2HSV(s));
      };
      $2.HEX2RGB = HEX2RGB;
    })(win[NS] = function(source, events, parent) {
      var b = doc.body, h = doc.documentElement, $2 = this, $$ = win[NS], _ = false, hooks = {}, self2 = doc.createElement("div"), on_down = "touchstart mousedown", on_move = "touchmove mousemove", on_up = "touchend mouseup", on_resize = "orientationchange resize";
      if (!($2 instanceof $$)) {
        return new $$(source, events);
      }
      $$[instance][source.id || source.name || object_length($$[instance])] = $2;
      if (!is_set(events) || events === true) {
        events = on_down;
      }
      function on(ev, el, fn) {
        ev = ev.split(/\s+/);
        for (var i2 = 0, ien = ev.length; i2 < ien; ++i2) {
          el.addEventListener(ev[i2], fn, false);
        }
      }
      function off(ev, el, fn) {
        ev = ev.split(/\s+/);
        for (var i2 = 0, ien = ev.length; i2 < ien; ++i2) {
          el.removeEventListener(ev[i2], fn);
        }
      }
      function point(el, e) {
        var T = "touches", X = "clientX", Y = "clientY", x = !!e[T] ? e[T][0][X] : e[X], y = !!e[T] ? e[T][0][Y] : e[Y], o = offset(el);
        return {
          x: x - o.l,
          y: y - o.t
        };
      }
      function offset(el) {
        var left2, top2, rect;
        if (el === win) {
          left2 = win.pageXOffset || h.scrollLeft;
          top2 = win.pageYOffset || h.scrollTop;
        } else {
          rect = el.getBoundingClientRect();
          left2 = rect.left;
          top2 = rect.top;
        }
        return {
          l: left2,
          t: top2
        };
      }
      function closest(a, b2) {
        while ((a = a.parentElement) && a !== b2) ;
        return a;
      }
      function prevent(e) {
        if (e) e.preventDefault();
      }
      function size(el) {
        return el === win ? {
          w: win.innerWidth,
          h: win.innerHeight
        } : {
          w: el.offsetWidth,
          h: el.offsetHeight
        };
      }
      function get_data(a) {
        return _ || (is_set(a) ? a : false);
      }
      function set_data(a) {
        _ = a;
      }
      function add(ev, fn, id) {
        if (!is_set(ev)) return hooks;
        if (!is_set(fn)) return hooks[ev];
        if (!is_set(hooks[ev])) hooks[ev] = {};
        if (!is_set(id)) id = object_length(hooks[ev]);
        return hooks[ev][id] = fn, $2;
      }
      function remove(ev, id) {
        if (!is_set(ev)) return hooks = {}, $2;
        if (!is_set(id)) return hooks[ev] = {}, $2;
        return delete hooks[ev][id], $2;
      }
      function trigger(ev, a, id) {
        if (!is_set(hooks[ev])) return $2;
        if (!is_set(id)) {
          for (var i2 in hooks[ev]) {
            hooks[ev][i2].apply($2, a);
          }
        } else {
          if (is_set(hooks[ev][id])) {
            hooks[ev][id].apply($2, a);
          }
        }
        return $2;
      }
      set_data($$.parse(source.getAttribute("data-color") || source.value || [0, 1, 1]));
      self2.className = "color-picker";
      self2.innerHTML = '<div class="color-picker-container"><span class="color-picker-h"><i></i></span><span class="color-picker-sv"><i></i></span></div>';
      var c = self2[first].children, HSV = get_data([0, 1, 1]), H = c[0], SV = c[1], H_point = H[first], SV_point = SV[first], start_H = 0, start_SV = 0, drag_H = 0, drag_SV = 0, left = 0, top = 0, P_W = 0, P_H = 0, v = [HSV2HEX(HSV)], set;
      function trigger_(k, x) {
        if (!k || k === "h") {
          trigger("change:h", x);
        }
        if (!k || k === "sv") {
          trigger("change:sv", x);
        }
        trigger("change", x);
      }
      function visible() {
        return self2.parentNode;
      }
      function create(first2, bucket) {
        if (!first2) {
          (parent || bucket || b).appendChild(self2), $2.visible = true;
        }
        P_W = size(self2).w;
        P_H = size(self2).h;
        var SV_size = size(SV), SV_point_size = size(SV_point), H_H = size(H).h, SV_W = SV_size.w, SV_H = SV_size.h, H_point_H = size(H_point).h, SV_point_W = SV_point_size.w, SV_point_H = SV_point_size.h;
        if (first2) {
          let click = function(e) {
            var t = e.target, is_source = t === source || closest(t, source) === source;
            if (is_source) {
              !visible() && (create(), trigger("enter"));
            } else {
              $2.exit();
            }
          };
          self2.style.left = self2.style.top = "-9999px";
          if (events !== false) {
            on(events, source, click);
          }
          $2.create = function() {
            return create(1), trigger("create"), $2;
          };
          $2.destroy = function() {
            if (events !== false) {
              off(events, source, click);
            }
            $2.exit(), set_data(false);
            return trigger("destroy"), $2;
          };
        } else {
          fit();
        }
        set = function() {
          HSV = get_data(HSV), color();
          H_point.style.top = H_H - H_point_H / 2 - H_H * +HSV[0] + "px";
          SV_point.style.right = SV_W - SV_point_W / 2 - SV_W * +HSV[1] + "px";
          SV_point.style.top = SV_H - SV_point_H / 2 - SV_H * +HSV[2] + "px";
        };
        $2.exit = function(e) {
          var exist = visible();
          if (exist) {
            exist.removeChild(self2);
            $2.visible = false;
          }
          off(on_down, H, down_H);
          off(on_down, SV, down_SV);
          off(on_move, doc, move);
          off(on_up, doc, stop);
          off(on_resize, win, fit);
          return trigger("exit"), $2;
        };
        function color(e) {
          HSV2RGB(HSV);
          var b2 = HSV2RGB([HSV[0], 1, 1]);
          SV.style.backgroundColor = "rgb(" + b2.join(",") + ")";
          set_data(HSV);
          prevent(e);
        }
        set();
        function do_H(e) {
          var y = edge(point(H, e).y, 0, H_H);
          HSV[0] = (H_H - y) / H_H;
          H_point.style.top = y - H_point_H / 2 + "px";
          color(e);
        }
        function do_SV(e) {
          var o = point(SV, e), x = edge(o.x, 0, SV_W), y = edge(o.y, 0, SV_H);
          HSV[1] = 1 - (SV_W - x) / SV_W;
          HSV[2] = (SV_H - y) / SV_H;
          SV_point.style.right = SV_W - x - SV_point_W / 2 + "px";
          SV_point.style.top = y - SV_point_H / 2 + "px";
          color(e);
        }
        function move(e) {
          if (drag_H) {
            do_H(e), v = [HSV2HEX(HSV)];
            if (!start_H) {
              trigger("drag:h", v);
              trigger("drag", v);
              trigger_("h", v);
            }
          }
          if (drag_SV) {
            do_SV(e), v = [HSV2HEX(HSV)];
            if (!start_SV) {
              trigger("drag:sv", v);
              trigger("drag", v);
              trigger_("sv", v);
            }
          }
          start_H = 0, start_SV = 0;
        }
        function stop(e) {
          var t = e.target, k = drag_H ? "h" : "sv", a = [HSV2HEX(HSV), $2], is_source = t === source || closest(t, source) === source, is_self = t === self2 || closest(t, self2) === self2;
          if (!is_source && !is_self) {
            if (visible() && events !== false) $2.exit(), trigger_(0, a);
          } else {
            if (is_self) {
              trigger("stop:" + k, a);
              trigger("stop", a);
              trigger_(k, a);
            }
          }
          drag_H = 0, drag_SV = 0;
        }
        function down_H(e) {
          start_H = 1, drag_H = 1, move(e), prevent(e);
          trigger("start:h", v);
          trigger("start", v);
          trigger_("h", v);
        }
        function down_SV(e) {
          start_SV = 1, drag_SV = 1, move(e), prevent(e);
          trigger("start:sv", v);
          trigger("start", v);
          trigger_("sv", v);
        }
        if (!first2) {
          on(on_down, H, down_H);
          on(on_down, SV, down_SV);
          on(on_move, doc, move);
          on(on_up, doc, stop);
          on(on_resize, win, fit);
        }
      }
      create(1);
      delay(function() {
        var a = [HSV2HEX(HSV)];
        trigger("create", a);
        trigger_(0, a);
      }, 0);
      $2.fit = function(o) {
        var w = size(win), y = size(h), screen_w = w.w - y.w, screen_h = w.h - h.clientHeight, ww = offset(win), to = offset(source);
        left = to.l + ww.l;
        top = to.t + ww.t + size(source).h;
        if (is_object(o)) {
          is_set(o[0]) && (left = o[0]);
          is_set(o[1]) && (top = o[1]);
        } else {
          var min_x = ww.l, min_y = ww.t, max_x = ww.l + w.w - P_W - screen_w, max_y = ww.t + w.h - P_H - screen_h;
          left = edge(left, min_x, max_x) >> 0;
          top = edge(top, min_y, max_y) >> 0;
        }
        self2.style.left = left + "px";
        self2.style.top = top + "px";
        return trigger("fit"), $2;
      };
      function fit() {
        return $2.fit();
      }
      $2.set = function(a) {
        if (!is_set(a)) return get_data();
        if (is_string(a)) {
          a = $$.parse(a);
        }
        return set_data(a), set(), $2;
      };
      $2.get = function(a) {
        return get_data(a);
      };
      $2.source = source;
      $2.self = self2;
      $2.visible = false;
      $2.on = add;
      $2.off = remove;
      $2.fire = trigger;
      $2.hooks = hooks;
      $2.enter = function(bucket) {
        return create(0, bucket), trigger("enter"), $2;
      };
      return $2;
    });
  })(window, document, "CP");
  return colorPicker;
}
requireColorPicker();
function getCrosshairDims(crosshairDef) {
  const crosshairBase = {
    width: 64,
    height: 64
  };
  return {
    width: Math.round(crosshairBase.width * Number(crosshairDef.size) / 4) * 4,
    height: Math.round(crosshairBase.height * Number(crosshairDef.size) / 4) * 4
  };
}
function getBaseURL(crosshairDef) {
  const objDef = CrosshairDefs[crosshairDef.type];
  const dims = getCrosshairDims(crosshairDef);
  const color = util.rgbToHex(util.intToRgb(crosshairDef.color));
  const strokeWidth = crosshairDef.stroke;
  let svgCode = objDef.code.replace(/white/g, color);
  svgCode = svgCode.replace(/stroke-width=".5"/g, `stroke-width="${strokeWidth}"`);
  svgCode = svgCode.replace(/width="64"/g, `width="${dims.width}"`);
  svgCode = svgCode.replace(/height="64"/g, `height="${dims.height}"`);
  return `url('data:image/svg+xml;utf8,${svgCode = svgCode.replace(/#/g, "%23")}')`;
}
function getCursorCSS(crosshairDef) {
  const dims = getCrosshairDims(crosshairDef);
  return `${getBaseURL(crosshairDef)} ${dims.width / 2} ${dims.height / 2}, crosshair`;
}
const crosshair = {
  getCursorURL: function(crosshairDef) {
    return getBaseURL(crosshairDef);
  },
  setElemCrosshair: function(elem, crosshairDef) {
    let cursor = "crosshair";
    const objDef = CrosshairDefs[crosshairDef.type];
    if (objDef) {
      cursor = objDef.cursor ? objDef.cursor : getCursorCSS(crosshairDef);
    }
    elem.css({
      cursor
    });
  },
  setGameCrosshair: function(crosshairDef) {
    crosshair.setElemCrosshair($("#game-area-wrapper"), crosshairDef);
    const objDef = CrosshairDefs[crosshairDef.type];
    const style = !objDef || objDef.cursor ? "pointer" : "inherit";
    $(".ui-zoom, .ui-medical, .ui-settings-button, .ui-weapon-switch").css({
      cursor: style
    });
  }
};
class MenuModal {
  constructor(selector) {
    this.selector = selector;
    selector.find(".close").click((e) => {
      this.hide(e);
    });
    this.modalCloseListener = (e) => {
      if ($(e.target).closest(".modal-close").length == 0 && (!!$(e.target).is(this.selector) || !this.checkSelector)) {
        e.stopPropagation();
        this.hide();
      }
    };
  }
  checkSelector = true;
  skipFade = false;
  visible = false;
  onShowFn = function() {
  };
  onHideFn = function(e) {
  };
  modalCloseListener;
  onShow(fn) {
    this.onShowFn = fn;
  }
  onHide(fn) {
    this.onHideFn = fn;
  }
  isVisible() {
    return this.visible;
  }
  show(isModal) {
    if (!this.visible) {
      this.visible = true;
      this.selector.finish();
      this.selector.css("display", "block");
      this.onShowFn();
      if (!isModal) {
        $(document).on("click touchend", this.modalCloseListener);
      }
    }
  }
  hide(e) {
    if (this.visible) {
      this.visible = false;
      if (this.skipFade) {
        this.selector.css("display", "none");
      } else {
        this.selector.fadeOut(200);
      }
      this.onHideFn(e);
      $(document).off("click touchend", this.modalCloseListener);
    }
  }
}
function emoteSlotToDomElem(e) {
  const emoteSlotToDomId = {
    [EmoteSlot.Top]: "customize-emote-top",
    [EmoteSlot.Right]: "customize-emote-right",
    [EmoteSlot.Bottom]: "customize-emote-bottom",
    [EmoteSlot.Left]: "customize-emote-left",
    [EmoteSlot.Win]: "customize-emote-win",
    [EmoteSlot.Death]: "customize-emote-death"
  };
  const domId = emoteSlotToDomId[e] || emoteSlotToDomId[EmoteSlot.Top];
  return $(`#${domId}`);
}
function itemSort(sortFn) {
  return function(a, b) {
    const rarityA = GameObjectDefs[a.type].rarity || Rarity.Stock;
    const rarityB = GameObjectDefs[b.type].rarity || Rarity.Stock;
    if (rarityA == Rarity.Stock && rarityB == Rarity.Stock) {
      return sortAlphabetical(a, b);
    }
    if (rarityA == Rarity.Stock) {
      return -1;
    }
    if (rarityB == Rarity.Stock) {
      return 1;
    }
    return sortFn(a, b);
  };
}
function sortAcquired(a, b) {
  if (b.timeAcquired == a.timeAcquired) {
    return sortSubcat(a, b);
  }
  return b.timeAcquired - a.timeAcquired;
}
function sortAlphabetical(a, b) {
  const defA = GameObjectDefs[a.type];
  const defB = GameObjectDefs[b.type];
  if (defA.name < defB.name) {
    return -1;
  }
  if (defA.name > defB.name) {
    return 1;
  }
  return 0;
}
function sortRarity(a, b) {
  const rarityA = GameObjectDefs[a.type].rarity || Rarity.Stock;
  const rarityB = GameObjectDefs[b.type].rarity || Rarity.Stock;
  if (rarityA == rarityB) {
    return sortAlphabetical(a, b);
  }
  return rarityB - rarityA;
}
function sortSubcat(a, b) {
  const defA = GameObjectDefs[a.type];
  const defB = GameObjectDefs[b.type];
  if (!defA.category || !defB.category || defA.category == defB.category) {
    return sortAlphabetical(a, b);
  }
  return defA.category - defB.category;
}
const sortTypes = {
  newest: itemSort(sortAcquired),
  alpha: itemSort(sortAlphabetical),
  rarity: itemSort(sortRarity),
  subcat: itemSort(sortSubcat)
};
class LoadoutMenu {
  constructor(account, localization) {
    this.account = account;
    this.localization = localization;
    if (!device.touch) {
      this.categories.push({
        loadoutType: "crosshair",
        gameType: "crosshair",
        categoryImage: "img/gui/loadout-crosshair.svg"
      });
    }
    this.categories.push({
      loadoutType: "player_icon",
      gameType: "emote",
      categoryImage: "img/gui/loadout-emote.svg"
    });
    this.modalCustomize = $("#modal-customize");
    this.modalCustomizeList = $("#modal-customize-list");
    this.modalCustomizeItemRarity = $("#modal-customize-item-rarity");
    this.modalCustomizeItemName = $("#modal-customize-item-name");
    this.modalCustomizeItemLore = $("#modal-customize-item-lore");
    this.modalCustomizeItemSource = $("#modal-customize-item-source");
    this.modal = new MenuModal(this.modalCustomize);
    this.modal.onShow(() => {
      this.onShow();
    });
    this.modal.onHide(() => {
      this.onHide();
    });
    const displayBlockingElem = function() {
      $("#modal-screen-block").fadeIn(200);
    };
    this.confirmItemModal = new MenuModal($("#modal-item-confirm"));
    this.confirmItemModal.onShow(displayBlockingElem);
    this.confirmItemModal.onHide((e) => {
      const confirmAll = e?.target?.dataset?.confirmAll;
      if (confirmAll) {
        this.confirmAllItems();
        return;
      }
      this.confirmNextItem();
    });
    account.addEventListener("request", this.onRequest.bind(this));
    account.addEventListener("loadout", this.onLoadout.bind(this));
    account.addEventListener("items", this.onItems.bind(this));
    account.addEventListener("pass", this.onPass.bind(this));
  }
  initialized = false;
  active = false;
  items = [];
  loadoutDisplay = null;
  loadout = loadout$2.defaultLoadout();
  localPendingConfirm = [];
  localConfirmed = [];
  confirmingItems = false;
  localAckItems = [];
  categories = [
    {
      loadoutType: "outfit",
      gameType: "outfit",
      categoryImage: "img/gui/loadout-outfit.svg"
    },
    {
      loadoutType: "melee",
      gameType: "melee",
      categoryImage: "img/gui/loadout-melee.svg"
    },
    {
      loadoutType: "emote",
      gameType: "emote",
      categoryImage: "img/gui/loadout-emote.svg"
    },
    {
      loadoutType: "heal",
      gameType: "heal_effect",
      categoryImage: "img/gui/loadout-heal.svg"
    },
    {
      loadoutType: "boost",
      gameType: "boost_effect",
      categoryImage: "img/gui/loadout-boost.svg"
    }
  ];
  selectedItem = {
    prevSlot: null,
    img: "",
    type: ""
  };
  emotesLoaded = false;
  selectedCatIdx = 0;
  selectedCatItems = [];
  equippedItems = [];
  modalCustomize;
  modalCustomizeList;
  modalCustomizeItemRarity;
  modalCustomizeItemName;
  modalCustomizeItemLore;
  modalCustomizeItemSource;
  picker;
  modal;
  confirmItemModal;
  itemSort;
  selectableCats;
  selectableCatConnects;
  selectableCatImages;
  selectableSlots;
  droppableSlots;
  highlightedSlots;
  itemSelected;
  highlightOpacityMin;
  init() {
    if (!this.initialized) {
      for (let i2 = 0; i2 < this.categories.length; i2++) {
        const r = $("<div/>", {
          class: "modal-customize-cat",
          "data-idx": i2
        });
        if (i2 == this.categories.length - 1) {
          r.attr("id", "modal-customize-cat-standalone");
        }
        r.append(
          $("<div/>", {
            class: "modal-customize-cat-image",
            css: {
              "background-image": `url(${this.categories[i2].categoryImage})`
            }
          })
        );
        r.append(
          $("<div/>", {
            class: "modal-customize-cat-connect"
          })
        );
        r.append(
          $("<div/>", {
            class: "account-alert account-alert-cat"
          })
        );
        $("#modal-customize-header").append(r);
      }
      this.selectableCats = $(".modal-customize-cat");
      this.selectableCatConnects = $(".modal-customize-cat-connect");
      this.selectableCatImages = $(".modal-customize-cat-image");
      this.selectableCats.on("mouseup", (e) => {
        const selector = $(e.currentTarget);
        const newCategoryIdx = selector.data("idx");
        if (this.selectedCatIdx != newCategoryIdx) {
          this.selectCat(newCategoryIdx);
        }
      });
      this.itemSort = $("#modal-customize-sort");
      this.itemSort.on("change", (e) => {
        this.sortItems(e.target.value);
      });
      this.modalCustomizeItemName.on("click", () => {
        const elements = document.getElementsByClassName(
          "customize-list-item-selected"
        );
        if (elements.length > 0 && window.self === window.top) {
          elements[0].scrollIntoView({
            behavior: "smooth",
            block: "start",
            inline: "nearest"
          });
        }
      });
      $("#crosshair-size").on("input", () => {
        this.updateLoadoutFromDOM();
      });
      $("#crosshair-stroke").on("input", () => {
        this.updateLoadoutFromDOM();
      });
      const container = document.getElementById("color-picker");
      this.picker = new window.CP(container, false, container);
      this.picker.self.classList.add("static");
      this.picker.on("change", (color) => {
        $("#color-picker-hex").val(color);
        if (this.loadout?.crosshair) {
          this.updateLoadoutFromDOM();
        }
      });
      const colorCode = document.querySelector("#color-picker-hex");
      const updateColor = () => {
        const value = colorCode.value;
        if (value.length) {
          if (value.length == 6) {
            this.picker.set(`#${value}`);
            this.picker.fire("change", [value]);
          } else if (value.length == 7 && value[0] == "#") {
            this.picker.set(value);
            this.picker.fire("change", [value.slice(1)]);
          } else {
            return void 0;
          }
        }
      };
      colorCode.oncut = updateColor;
      colorCode.onpaste = updateColor;
      colorCode.onkeyup = updateColor;
      colorCode.oninput = updateColor;
      this.initialized = true;
    }
  }
  show() {
    this.init();
    this.modal.show();
  }
  hide() {
    this.modal.hide();
  }
  onShow() {
    this.active = true;
    this.localAckItems = [];
    for (let i2 = 0; i2 < this.items.length; i2++) {
      const item = this.items[i2];
      if (item.status < loadout$2.ItemStatus.Ackd) {
        this.localAckItems.push(item);
      }
    }
    this.selectCat(0);
    this.tryBeginConfirmingItems();
    $("#start-bottom-right, #start-main").fadeOut(200);
    $("#background").hide();
  }
  onHide() {
    this.active = false;
    if (loadout$2.modified(this.loadout, this.account.loadout)) {
      this.account.setLoadout(this.loadout);
    }
    this.clearConfirmItemModal();
    this.modalCustomize.css({
      cursor: "initial"
    });
    $("#start-bottom-right, #start-main").fadeIn(200);
    $("#background").show();
  }
  onResize() {
    if (device.mobile) {
      if (this.categories[this.selectedCatIdx].loadoutType == "emote") {
        $("#modal-customize-list").attr("style", "");
      } else {
        $("#modal-customize-list").attr(
          "style",
          device.isLandscape ? "" : "height: 380px"
        );
      }
    }
  }
  onRequest() {
    $("#modal-customize-loading").css(
      "opacity",
      this.account.requestsInFlight > 0 ? 1 : 0
    );
  }
  onLoadout(_loadout) {
    this.loadout = loadout$2.validate(_loadout);
    crosshair.setGameCrosshair(_loadout.crosshair);
    if (this.active) {
      this.selectCat(this.selectedCatIdx);
    }
  }
  onItems(items) {
    this.items = loadout$2.getUserAvailableItems(items);
    for (let i2 = 0; i2 < this.items.length; i2++) {
      const item = this.items[i2];
      if (item.status < loadout$2.ItemStatus.Confirmed && !this.localPendingConfirm.find((x) => {
        return x.type == item.type;
      }) && !this.localConfirmed.find((x) => {
        return x.type == item.type;
      })) {
        this.localPendingConfirm.push(item);
      }
      if (item.status < loadout$2.ItemStatus.Ackd && !this.localAckItems.find((x) => {
        return x.type == item.type;
      })) {
        this.localAckItems.push(item);
      }
    }
    if (this.active) {
      this.tryBeginConfirmingItems();
      this.selectCat(this.selectedCatIdx);
    }
  }
  onPass(pass) {
    const unlocks = ["facebook", "instagram", "youtube", "twitter"];
    for (let i2 = 0; i2 < unlocks.length; i2++) {
      const unlockType = unlocks[i2];
      const hasUnlock = !!pass.unlocks[unlockType];
      const el = $(`.customize-social-unlock[data-lock-reason='${unlockType}']`);
      el.css({
        display: hasUnlock ? "none" : "inline-block"
      });
      el.off("click").on("click", () => {
        this.account.setPassUnlock(unlockType);
      });
    }
  }
  getCategory(gameType) {
    for (let i2 = 0; i2 < this.categories.length; i2++) {
      const category = this.categories[i2];
      if (category.gameType == gameType) {
        return category;
      }
    }
    return null;
  }
  clearConfirmItemModal() {
    this.localPendingConfirm = [];
    this.localConfirmed = [];
    this.confirmingItems = false;
    this.confirmItemModal.hide();
  }
  setItemsConfirmed() {
    const confirmItemTypes = [];
    for (let i2 = 0; i2 < this.items.length; i2++) {
      const item = this.items[i2];
      if (item.status < loadout$2.ItemStatus.Confirmed) {
        confirmItemTypes.push(item.type);
      }
    }
    if (confirmItemTypes.length > 0) {
      this.account.setItemStatus(loadout$2.ItemStatus.Confirmed, confirmItemTypes);
    }
  }
  setItemsAckd(catIdx) {
    const category = this.categories[catIdx];
    const ackItemTypes = [];
    for (let i2 = 0; i2 < this.items.length; i2++) {
      const item = this.items[i2];
      const objDef = GameObjectDefs[item.type];
      if (objDef && objDef.type == category.gameType && item?.status < loadout$2.ItemStatus.Ackd) {
        ackItemTypes.push(item.type);
      }
    }
    if (ackItemTypes.length > 0) {
      this.account.setItemStatus(loadout$2.ItemStatus.Ackd, ackItemTypes);
    }
  }
  tryBeginConfirmingItems() {
    if (this.active && !this.confirmingItems) {
      this.confirmingItems = true;
      this.confirmNextItem();
    }
  }
  confirmAllItems() {
    this.clearConfirmItemModal();
    $("#modal-screen-block").fadeOut(300);
  }
  confirmNextItem() {
    this.setItemsConfirmed();
    const currentNewItem = this.localPendingConfirm.shift();
    if (currentNewItem) {
      this.localConfirmed.push(currentNewItem);
      const objDef = GameObjectDefs[currentNewItem.type];
      const itemInfo = {
        type: currentNewItem.type,
        rarity: objDef.rarity || Rarity.Stock,
        displayName: objDef.name,
        category: objDef.type
      };
      const svg = helpers.getSvgFromGameType(currentNewItem.type);
      const imageUrl = `url(${svg})`;
      const transform = helpers.getCssTransformFromGameType(currentNewItem.type);
      setTimeout(() => {
        $("#modal-item-confirm-name").html(itemInfo.displayName);
        $("#modal-item-confirm-image-inner").css({
          "background-image": imageUrl,
          transform
        });
        this.confirmItemModal.show();
      }, 200);
    } else {
      this.confirmingItems = false;
      $("#modal-screen-block").fadeOut(300);
    }
  }
  sortItems(sort) {
    this.selectedCatItems.sort(sortTypes[sort]);
    const category = this.categories[this.selectedCatIdx];
    const listChildren = $("<div/>");
    for (let i2 = 0; i2 < this.selectedCatItems.length; i2++) {
      const itemInfo = this.selectedCatItems[i2];
      itemInfo.outerDiv?.data("idx", i2);
      listChildren.append(itemInfo.outerDiv);
    }
    this.modalCustomizeList.html("");
    this.modalCustomizeList.append(listChildren);
    this.selectableSlots.off("mouseup");
    this.setItemListeners(category.loadoutType);
  }
  setItemListeners(loadoutType) {
    this.selectableSlots.on("mouseup", (e) => {
      const elem = e.currentTarget;
      if (!$(elem).hasClass("customize-list-item-locked")) {
        if (this.itemSelected && !$(elem).hasClass("customize-list-item")) {
          this.itemSelected = false;
          return;
        }
        this.selectItem($(elem));
        this.updateLoadoutFromDOM();
      }
    });
    if (loadoutType == "emote") {
      this.setEmoteDraggable(this.selectableSlots, this);
      if (!this.emotesLoaded) {
        this.setEmoteDraggable(this.droppableSlots, this);
        this.droppableSlots.on("mouseup", (e) => {
          const elem = e.currentTarget;
          if (!$(elem).hasClass("customize-list-item-locked")) {
            if (this.itemSelected && !$(elem).hasClass("customize-list-item")) {
              this.deselectItem();
              return;
            }
            this.selectItem($(elem));
            this.updateLoadoutFromDOM();
          }
        });
        this.droppableSlots.on("drop", (e) => {
          e.originalEvent?.preventDefault();
          const elem = e.currentTarget;
          const parent = $(elem).parent();
          this.updateSlot(
            parent,
            this.selectedItem.img,
            this.selectedItem.type
          );
          this.updateLoadoutFromDOM();
          this.deselectItem();
        });
        this.droppableSlots.on("mousedown", (e) => {
          if (this.itemSelected) {
            e.stopPropagation();
            const parent = $(e.currentTarget).parent();
            this.updateSlot(
              parent,
              this.selectedItem.img,
              this.selectedItem.type
            );
            this.updateLoadoutFromDOM();
          }
        });
        this.droppableSlots.on("dragover", function(e) {
          e.originalEvent?.preventDefault();
          $(this).parent().find(".ui-emote-hl").css("opacity", 1);
        });
        this.droppableSlots.on("dragleave", (e) => {
          e.originalEvent?.preventDefault();
          $(e.currentTarget).parent().find(".ui-emote-hl").css("opacity", this.highlightOpacityMin);
        });
        this.droppableSlots.on("dragend", (e) => {
          e.originalEvent?.preventDefault();
          this.deselectItem();
        });
        $(".ui-emote-auto-trash").click((e) => {
          const parent = $(e.currentTarget).parent();
          this.updateSlot(parent, "", "");
          this.updateLoadoutFromDOM();
        });
        this.emotesLoaded = true;
      }
    } else if (loadoutType == "crosshair") {
      const crosshairHex = util.intToHex(this.loadout.crosshair.color);
      const color = [crosshairHex.slice(1)];
      this.picker.set(crosshairHex);
      $("#color-picker-hex").val(color);
      $("#crosshair-size").val(this.loadout.crosshair.size);
      $("#crosshair-stroke").val(this.loadout.crosshair.stroke);
    }
  }
  updateLoadoutFromDOM() {
    const loadoutType = this.categories[this.selectedCatIdx].loadoutType;
    if (loadoutType == "emote") {
      for (let t = 0; t < EmoteSlot.Count; t++) {
        const domElem = emoteSlotToDomElem(t);
        const slotIdx = domElem.data("idx");
        const slotItem = this.equippedItems[slotIdx];
        if (slotItem?.type) {
          this.loadout.emotes[t] = slotItem.type;
        } else {
          this.loadout.emotes[t] = "";
        }
      }
    } else if (loadoutType == "crosshair") {
      const size = parseFloat($("#crosshair-size").val());
      const color = $("#color-picker-hex").val();
      const stroke = parseFloat($("#crosshair-stroke").val());
      this.loadout.crosshair = {
        type: this.selectedItem.type,
        color: util.hexToInt(color),
        size: Number(size.toFixed(2)),
        stroke: Number(stroke.toFixed(2))
      };
    } else {
      this.loadout[loadoutType] = this.selectedItem.type;
    }
    this.loadout = loadout$2.validate(this.loadout);
    if (this.loadoutDisplay?.initialized) {
      this.loadoutDisplay.setLoadout(this.loadout);
    }
    if (this.selectedItem.loadoutType == "crosshair") {
      this.setSelectedCrosshair();
    }
  }
  selectItem(selector, deselect = true) {
    const isListItem = selector.hasClass("customize-list-item");
    const parent = isListItem ? selector : selector.parent();
    const image = parent.find(".customize-item-image");
    const selectorIdx = parent.data("idx");
    const selectedItem = parent.data("slot") ? this.equippedItems[selectorIdx] : this.selectedCatItems[selectorIdx];
    if (!selectedItem) {
      this.itemSelected = false;
      this.selectedItem = {
        prevSlot: null,
        img: "",
        type: ""
      };
      return;
    }
    if (selectedItem.type == this.selectedItem.type && selectedItem.loadoutType == "emote" && this.selectedItem.loadoutType == "emote" && deselect) {
      this.deselectItem();
      return;
    }
    this.itemSelected = true;
    this.selectedItem = {
      prevSlot: isListItem ? null : parent,
      img: image.data("img"),
      type: selectedItem.type,
      rarity: selectedItem.rarity,
      displayName: selectedItem.displayName || "",
      displaySource: selectedItem.displaySource || "Unknown",
      displayLore: selectedItem.displayLore || "",
      loadoutType: selectedItem.loadoutType,
      subcat: selectedItem.subcat
    };
    this.modalCustomizeItemName.html(this.selectedItem.displayName);
    const source = this.localization.translate(`loadout-${selectedItem.displaySource}`) || this.localization.translate(`${selectedItem.displaySource}`) || this.selectedItem.displaySource;
    const sourceTxt = `${this.localization.translate("loadout-acquired")}: ${source}`;
    this.modalCustomizeItemSource.html(sourceTxt);
    const emoteSubcatNames = {
      [EmoteCategory.Locked]: "Locked",
      [EmoteCategory.Faces]: "Faces",
      [EmoteCategory.Food]: "Food",
      [EmoteCategory.Animals]: "Animals",
      [EmoteCategory.Logos]: "Logos",
      [EmoteCategory.Other]: "Other",
      [EmoteCategory.Flags]: "Flags",
      [EmoteCategory.Default]: "Default"
    };
    const localizedLore = selectedItem.loadoutType == "emote" ? `${this.localization.translate("loadout-category")}: ${emoteSubcatNames[selectedItem.subcat]}` : this.selectedItem.displayLore;
    this.modalCustomizeItemLore.html(localizedLore);
    const rarityNames = ["stock", "common", "uncommon", "rare", "epic", "mythic"];
    const Rarities = [
      "#c5c5c5",
      "#c5c5c5",
      "#12ff00",
      "#00deff",
      "#f600ff",
      "#d96100"
    ];
    const localizedRarity = this.localization.translate(
      `loadout-${rarityNames[this.selectedItem.rarity]}`
    );
    this.modalCustomizeItemRarity.html(localizedRarity);
    this.modalCustomizeItemRarity.css({
      color: Rarities[this.selectedItem.rarity]
    });
    if (this.selectedItem.loadoutType == "emote") {
      this.highlightedSlots.css({
        display: "block",
        opacity: this.highlightOpacityMin
      });
    }
    this.selectableSlots.removeClass("customize-list-item-selected");
    if (isListItem) {
      selector.addClass("customize-list-item-selected");
    } else {
      parent.find(".ui-emote-hl").css("opacity", 1);
    }
    if (this.selectedItem.loadoutType == "crosshair") {
      const objDef = GameObjectDefs[this.selectedItem.type];
      if (objDef && objDef.type == "crosshair" && objDef.cursor) {
        $("#modal-content-right-crosshair").css("display", "none");
      } else {
        $("#modal-content-right-crosshair").css("display", "block");
        this.picker.exit();
        this.picker.enter();
      }
    }
    const itemIdx = this.localAckItems.findIndex((x) => {
      return x.type == this.selectedItem.type;
    });
    if (itemIdx !== -1) {
      selector.find(".account-alert").removeClass("account-alert account-alert-cat");
      this.localAckItems.splice(itemIdx, 1);
      this.setCategoryAlerts();
    }
  }
  updateSlot(parent, img, type) {
    const prevParent = this.selectedItem.prevSlot;
    this.selectedItem = {};
    if (prevParent) {
      const image = parent.find(".customize-item-image");
      const slotIdx = parent.data("idx");
      const slotItem = this.equippedItems[slotIdx];
      let slotItemType = "";
      if (slotItem.type) {
        slotItemType = slotItem.type;
      }
      this.updateSlot(prevParent, image.data("img"), slotItemType);
    }
    this.updateSlotData(parent, img, type);
  }
  deselectItem() {
    this.itemSelected = false;
    this.selectedItem = {};
    this.selectableSlots.removeClass("customize-list-item-selected");
    this.highlightedSlots.css({
      display: "none",
      opacity: 0
    });
    this.modalCustomizeItemName.html("");
    this.modalCustomizeItemSource.html("");
    this.modalCustomizeItemLore.html("");
    this.modalCustomizeItemRarity.html("");
  }
  updateSlotData(parent, img, type) {
    const image = parent.find(".customize-emote-slot");
    image.css("background-image", img || "none");
    image.data("img", img || "none");
    const emoteDef = GameObjectDefs[type];
    const slotIdx = parent.data("idx");
    if (emoteDef) {
      const itemInfo = {
        loadoutType: "emote",
        type,
        rarity: emoteDef.rarity || Rarity.Stock,
        displayName: emoteDef.name,
        displayLore: emoteDef.lore,
        subcat: emoteDef.category
      };
      this.equippedItems[slotIdx] = itemInfo;
    } else {
      this.equippedItems[slotIdx] = {};
    }
  }
  selectCat(catIdx) {
    const r = this.selectedCatIdx;
    this.selectedCatIdx = catIdx;
    this.setItemsAckd(this.selectedCatIdx);
    if (r != this.selectedCatIdx) {
      const category2 = this.categories[r];
      for (let i2 = this.localAckItems.length - 1; i2 >= 0; i2--) {
        const s = this.localAckItems[i2];
        const n = GameObjectDefs[s.type];
        if (n.type == category2.gameType) {
          this.localAckItems.splice(i2, 1);
        }
      }
    }
    const category = this.categories[this.selectedCatIdx];
    const loadoutItems = this.items.filter((x) => {
      const gameTypeDef = GameObjectDefs[x.type];
      return gameTypeDef && gameTypeDef.type == category.gameType;
    });
    const displaySubcatSort = category.loadoutType == "emote" || category.loadoutType == "player_icon";
    $("#customize-sort-subcat").css("display", displaySubcatSort ? "block" : "none");
    let sortType = this.itemSort.val();
    if (!displaySubcatSort && sortType == "subcat") {
      sortType = "newest";
      this.itemSort.val(sortType);
    }
    loadoutItems.sort(sortTypes[sortType]);
    const displayEmoteWheel = category.loadoutType == "emote";
    const displayCrosshairAdjust = category.loadoutType == "crosshair";
    const draggable = category.loadoutType == "emote";
    this.loadoutDisplay?.setView(category.loadoutType);
    const _ = $(`.modal-customize-cat[data-idx='${this.selectedCatIdx}']`);
    this.selectableCats.removeClass("modal-customize-cat-selected");
    this.selectableCatConnects.removeClass("modal-customize-cat-connect-selected");
    this.selectableCatImages.removeClass("modal-customize-cat-image-selected");
    _.addClass("modal-customize-cat-selected");
    _.find(".modal-customize-cat-connect").addClass(
      "modal-customize-cat-connect-selected"
    );
    _.find(".modal-customize-cat-image").addClass(
      "modal-customize-cat-image-selected"
    );
    const localizedTitle = this.localization.translate(`loadout-title-${category.loadoutType}`).toUpperCase();
    $("#modal-customize-cat-title").html(localizedTitle);
    $("#modal-content-right-crosshair").css(
      "display",
      category.loadoutType == "crosshair" ? "block" : "none"
    );
    $("#modal-content-right-emote").css(
      "display",
      category.loadoutType == "emote" ? "block" : "none"
    );
    $("#customize-emote-parent").css("display", displayEmoteWheel ? "block" : "none");
    $("#customize-crosshair-parent").css(
      "display",
      displayCrosshairAdjust ? "block" : "none"
    );
    this.modalCustomizeItemName.html("");
    this.modalCustomizeItemSource.html("");
    this.modalCustomizeItemLore.html("");
    this.modalCustomizeItemRarity.html("");
    const getItemSourceName = function(source) {
      const sourceDef = GameObjectDefs[source];
      if (sourceDef?.name) {
        return sourceDef.name;
      }
      return source;
    };
    this.selectedCatItems = [];
    let loadoutItemDiv = "";
    const listItems = $("<div/>");
    for (let i2 = 0; i2 < loadoutItems.length; i2++) {
      const item = loadoutItems[i2];
      const objDef = GameObjectDefs[item.type];
      const itemInfo = {
        loadoutType: category.loadoutType,
        type: item.type,
        rarity: objDef.rarity || Rarity.Stock,
        displayName: objDef.name,
        displaySource: getItemSourceName(item.source),
        displayLore: objDef.lore,
        timeAcquired: item.timeAcquired,
        idx: i2,
        subcat: objDef.category,
        outerDiv: null
      };
      const outerDiv = $("<div/>", {
        class: "customize-list-item customize-list-item-unlocked",
        "data-idx": i2
      });
      const svg = helpers.getSvgFromGameType(item.type);
      const transform = helpers.getCssTransformFromGameType(item.type);
      const innerDiv = $("<div/>", {
        class: "customize-item-image",
        css: {
          "background-image": `url(${svg})`,
          transform
        },
        "data-img": `url(${svg})`,
        draggable
      });
      outerDiv.append(innerDiv);
      if (this.localAckItems.findIndex((x) => {
        return x.type == item.type;
      }) !== -1) {
        const alertDiv = $("<div/>", {
          class: "account-alert account-alert-cat",
          css: {
            display: "block"
          }
        });
        outerDiv.append(alertDiv);
      }
      if (category.gameType == "crosshair") {
        const crosshairDef = {
          type: itemInfo.type,
          color: 16777215,
          size: 1,
          stroke: 0
        };
        crosshair.setElemCrosshair(outerDiv, crosshairDef);
      }
      listItems.append(outerDiv);
      itemInfo.outerDiv = outerDiv;
      this.selectedCatItems.push(itemInfo);
      if (!loadoutItemDiv) {
        if (category.loadoutType == "crosshair" && itemInfo.type == this.loadout.crosshair.type) {
          loadoutItemDiv = itemInfo.outerDiv;
        } else if (category.loadoutType != "emote" && itemInfo.type == this.loadout[category.loadoutType]) {
          loadoutItemDiv = itemInfo.outerDiv;
        }
      }
    }
    this.modalCustomizeList.html("");
    this.modalCustomizeList.append(listItems);
    if (window.self === window.top) {
      this.modalCustomizeList.scrollTop(0);
    }
    if (category.loadoutType == "emote") {
      this.equippedItems = [];
      for (let T = 0; T < this.loadout.emotes.length; T++) {
        this.equippedItems.push({});
        const emote = this.loadout.emotes[T];
        if (GameObjectDefs[emote]) {
          const svg = helpers.getSvgFromGameType(emote);
          const imgCss = `url(${svg})`;
          const domElem = emoteSlotToDomElem(T);
          this.updateSlotData(domElem, imgCss, emote);
        }
      }
    }
    this.selectableSlots = $(".customize-list-item");
    this.droppableSlots = $(".customize-col");
    this.highlightedSlots = this.droppableSlots.siblings(".ui-emote-hl");
    this.highlightOpacityMin = 0.4;
    this.itemSelected = false;
    this.setItemListeners(category.loadoutType);
    this.setCategoryAlerts();
    this.deselectItem();
    if (loadoutItemDiv != "") {
      this.selectItem(loadoutItemDiv);
      if (category.loadoutType == "crosshair") {
        this.setSelectedCrosshair();
      }
      this.modalCustomizeItemName.click();
    }
    if (device.browser == "edge") {
      if (category.loadoutType == "crosshair") {
        const disableElem = function(parentElem, disableElem2) {
          const height = parentElem.height() + parseInt(parentElem.css("padding-top")) + parseInt(parentElem.css("padding-bottom"));
          disableElem2.css("height", height);
        };
        disableElem(
          $("#modal-customize-body"),
          $("#modal-content-left").find(".modal-disabled")
        );
        disableElem(
          $("#modal-content-right-crosshair"),
          $("#modal-content-right-crosshair").find(".modal-disabled")
        );
        $(".modal-disabled").css("display", "block");
      } else {
        $(".modal-disabled").css("display", "none");
      }
    }
    this.onResize();
  }
  setCategoryAlerts() {
    for (let i2 = 0; i2 < this.categories.length; i2++) {
      const category = this.categories[i2];
      const unackdItems = this.localAckItems.filter((x) => {
        const gameTypeDef = GameObjectDefs[x.type];
        return gameTypeDef && gameTypeDef.type == category.gameType;
      });
      $(`.modal-customize-cat[data-idx='${i2}']`).find(".account-alert-cat").css("display", unackdItems.length > 0 ? "block" : "none");
    }
  }
  setEmoteDraggable(selector, that) {
    selector.on("dragstart", function(e) {
      if (!$(this).hasClass("customize-list-item-locked") && (that.selectItem($(this), false), device.browser != "edge")) {
        const imgDiv = document.createElement("img");
        imgDiv.src = that.selectedItem.img ? that.selectedItem.img.replace("url(", "").replace(")", "").replace(/\'/gi, "") : "";
        e.originalEvent?.dataTransfer?.setDragImage(imgDiv, 64, 64);
      }
    });
  }
  setSelectedCrosshair() {
    const crosshairDef = this.loadout.crosshair;
    $("#customize-crosshair-selected").find(".customize-item-image").css({
      "background-image": crosshair.getCursorURL(crosshairDef)
    });
    crosshair.setElemCrosshair($("#customize-crosshair-selected"), crosshairDef);
  }
}
function createToast(text, container, parent, event) {
  const copyToast = $("<div/>", {
    class: "copy-toast",
    html: text
  });
  container.append(copyToast);
  copyToast.css({
    left: event.pageX - parseInt(copyToast.css("width")) / 2,
    top: parent.offset().top
  });
  copyToast.animate(
    {
      top: "-=25",
      opacity: 1
    },
    {
      queue: false,
      duration: 300,
      complete: function() {
        $(this).fadeOut(250, function() {
          $(this).remove();
        });
      }
    }
  );
}
function setupModals(inputBinds, inputBindUi) {
  const startMenuWrapper = $("#start-menu");
  $("#btn-help").click(() => {
    const e = $("#start-help");
    startMenuWrapper.addClass("display-help");
    const height = startMenuWrapper.css("height");
    e.css("display", "block");
    startMenuWrapper.animate(
      {
        scrollTop: height
      },
      1e3
    );
    return false;
  });
  const teamMobileLink = $("#team-mobile-link");
  const teamMobileLinkDesc = $("#team-mobile-link-desc");
  const teamMobileLinkWarning = $("#team-mobile-link-warning");
  const teamMobileLinkInput = $("#team-link-input");
  const socialShareBlock = $("#social-share-block");
  const newsBlock = $("#news-block");
  $("#btn-join-team").click(() => {
    $("#server-warning").css("display", "none");
    teamMobileLinkInput.val("");
    teamMobileLink.css("display", "block");
    teamMobileLinkDesc.css("display", "block");
    teamMobileLinkWarning.css("display", "none");
    startMenuWrapper.css("display", "none");
    newsBlock.css("display", "none");
    socialShareBlock.css("display", "none");
    $("#right-column").css("display", "none");
    return false;
  });
  $("#btn-team-mobile-link-leave").click(() => {
    teamMobileLink.css("display", "none");
    teamMobileLinkInput.val("");
    startMenuWrapper.css("display", "block");
    newsBlock.css("display", "block");
    socialShareBlock.css("display", "block");
    $("#right-column").css("display", "block");
    return false;
  });
  $("#team-link-input").on("keypress", function(e) {
    if ((e.which || e.keyCode) === 13) {
      $("#btn-team-mobile-link-join").trigger("click");
      $(this).blur();
    }
  });
  $("#player-name-input-solo").on("keypress", function(e) {
    if ((e.which || e.keyCode) === 13) {
      $(this).blur();
    }
  });
  if (device.mobile && device.os != "ios") {
    $("#player-name-input-solo").on("focus", function() {
      if (device.isLandscape) {
        const height = device.screenHeight;
        const offset = height <= 282 ? 18 : 36;
        document.body.scrollTop = $(this).offset().top - offset;
      }
    });
    $("#player-name-input-solo").on("blur", () => {
      document.body.scrollTop = 0;
    });
  }
  const startBottomRight = $("#start-bottom-right");
  const startTopLeft = $("#start-top-left");
  const startTopRight = $("#start-top-right");
  const modalKeybind = new MenuModal($("#ui-modal-keybind"));
  modalKeybind.onShow(() => {
    startBottomRight.fadeOut(200);
    startTopRight.fadeOut(200);
    $("#ui-modal-keybind-share").css("display", "none");
    $("#keybind-warning").css("display", "none");
    $("#ui-modal-keybind-list").css("height", "420px");
    $("#keybind-code-input").html("");
    inputBindUi.refresh();
  });
  modalKeybind.onHide(() => {
    startBottomRight.fadeIn(200);
    startTopRight.fadeIn(200);
    inputBindUi.cancelBind();
  });
  $(".btn-keybind").click(() => {
    modalKeybind.show();
    return false;
  });
  $(".js-btn-keybind-share").click(() => {
    if ($("#ui-modal-keybind-share").css("display") == "block") {
      $("#ui-modal-keybind-share").css("display", "none");
      $("#ui-modal-keybind-list").css("height", "420px");
    } else {
      $("#ui-modal-keybind-share").css("display", "block");
      $("#ui-modal-keybind-list").css("height", "275px");
    }
  });
  $("#keybind-link, #keybind-copy").click((e) => {
    createToast("Copied!", modalKeybind.selector, $("#keybind-link"), e);
    const t = $("#keybind-link").html();
    helpers.copyTextToClipboard(t);
  });
  $("#btn-keybind-code-load").on("click", (e) => {
    const code = $("#keybind-code-input").val();
    $("#keybind-code-input").val("");
    const success = inputBinds.fromBase64(String(code));
    $("#keybind-warning").css("display", success ? "none" : "block");
    if (success) {
      createToast("Loaded!", modalKeybind.selector, $("#btn-keybind-code-load"), e);
      inputBinds.saveBinds();
    }
    inputBindUi.refresh();
  });
  const modalSettings = new MenuModal($("#modal-settings"));
  modalSettings.onShow(() => {
    startBottomRight.fadeOut(200);
    startTopRight.fadeOut(200);
  });
  modalSettings.onHide(() => {
    startBottomRight.fadeIn(200);
    startTopRight.fadeIn(200);
  });
  $(".btn-settings").click(() => {
    modalSettings.show();
    return false;
  });
  $(".modal-settings-text").click(function(_e) {
    const checkbox = $(this).siblings("input:checkbox");
    checkbox.prop("checked", !checkbox.is(":checked"));
    checkbox.trigger("change");
  });
  const modalHamburger = new MenuModal($("#modal-hamburger"));
  modalHamburger.onShow(() => {
    startTopLeft.fadeOut(200);
  });
  modalHamburger.onHide(() => {
    startTopLeft.fadeIn(200);
  });
  $("#btn-hamburger").click(() => {
    modalHamburger.show();
    return false;
  });
  $(".modal-body-text").click(function() {
    const checkbox = $(this).siblings("input:checkbox");
    checkbox.prop("checked", !checkbox.is(":checked"));
    checkbox.trigger("change");
  });
  $("#force-refresh").click(() => {
    window.location.href = `/?t=${Date.now()}`;
  });
}
function onResize() {
  if (device.os == "ios") {
    if (device.model == "iphonex") {
      if (device.isLandscape) {
        $(".main-volume-slider").css("width", "90%");
      } else {
        $(".main-volume-slider").css("width", "");
      }
    } else if (!window.navigator.standalone) {
      if (device.isLandscape) {
        $("#start-main-center").attr("style", "");
        $("#modal-customize .modal-content").attr("style", "");
      } else {
        $("#modal-customize .modal-content").css({
          transform: "translate(-50%, -50%) scale(0.45)",
          top: "38%"
        });
      }
    }
  }
  if (device.tablet) {
    $("#featured-youtuber").remove();
    $(".btn-youtube").remove();
  }
  if (device.touch) {
    $(".btn-start-fullscreen").css("display", "none");
  } else {
    $(".btn-start-fullscreen").css("display", "block");
  }
  $(".btn-keybind").css("display", device.mobile ? "none" : "inline-block");
}
function applyMobileBrowserStyling(isTablet) {
  $("#team-hide-url").css("display", "none");
  if (isTablet) {
    $("#start-bottom-middle").addClass("start-bottom-middle-tablet");
  }
}
const Menu = {
  setupModals,
  onResize,
  applyMobileBrowserStyling
};
class LoadoutDisplay {
  constructor(pixi, audioManager, config, inputBinds, account) {
    this.pixi = pixi;
    this.audioManager = audioManager;
    this.config = config;
    this.inputBinds = inputBinds;
    this.account = account;
  }
  active = false;
  initialized = false;
  canvasMode;
  camera;
  renderer;
  particleBarn;
  decalBarn;
  map;
  playerBarn;
  smokeBarn;
  objectCreator;
  debugDisplay;
  loadout;
  view;
  viewOld;
  cameraOffset = v2.create(0, 0);
  q = 1;
  debugZoom = 1;
  useDebugZoom = false;
  outfitOld;
  animIdleTicker;
  animSeq;
  actionSeq;
  activeId = 98;
  activePlayer;
  init() {
    this.canvasMode = this.pixi.renderer.type == RENDERER_TYPE.CANVAS;
    this.camera = new Camera();
    this.renderer = new Renderer(this, this.canvasMode);
    this.particleBarn = new ParticleBarn(this.renderer);
    this.decalBarn = new DecalBarn();
    this.map = new Map(this.decalBarn);
    this.playerBarn = new PlayerBarn();
    this.smokeBarn = new SmokeBarn();
    const TypeToPool = {
      [ObjectType.Player]: this.playerBarn.playerPool,
      [ObjectType.Obstacle]: this.map.m_obstaclePool,
      [ObjectType.Building]: this.map.m_buildingPool,
      [ObjectType.Structure]: this.map.m_structurePool,
      [ObjectType.Decal]: this.decalBarn.decalPool,
      [ObjectType.Smoke]: this.smokeBarn.m_smokePool
    };
    this.objectCreator = new Creator();
    for (const type in TypeToPool) {
      if (TypeToPool.hasOwnProperty(type)) {
        this.objectCreator.m_registerType(
          type,
          TypeToPool[type]
        );
      }
    }
    this.debugDisplay = new Graphics();
    const pixiContainers = [
      this.map.display.ground,
      this.renderer.layers[0],
      this.renderer.ground,
      this.renderer.layers[1],
      this.renderer.layers[2],
      this.renderer.layers[3],
      this.debugDisplay
    ];
    for (let i2 = 0; i2 < pixiContainers.length; i2++) {
      const container = pixiContainers[i2];
      if (container) {
        container.interactiveChildren = false;
        this.pixi.stage.addChild(container);
      }
    }
    this.loadout = loadout$2.defaultLoadout();
    this.setLoadout(this.loadout);
    this.view = "outfit";
    this.viewOld = this.view;
    this.outfitOld = this.loadout.outfit;
    this.map.loadMap(
      {
        grassInset: 18,
        groundPatches: [],
        height: 720,
        mapName: "main",
        objects: [],
        places: [],
        rivers: [],
        seed: 218051654,
        shoreInset: 48,
        width: 720
      },
      this.camera,
      this.canvasMode,
      this.particleBarn
    );
    this.activePlayer = this.playerBarn.getPlayerById(this.activeId);
    this.activePlayer.m_setLocalData(
      {
        boost: 100,
        boostDirty: true,
        hasAction: false,
        health: 100,
        inventoryDirty: false,
        scopedIn: false,
        spectatorCountDirty: false,
        weapsDirty: true,
        curWeapIdx: 2,
        weapons: [
          {
            name: "",
            ammo: 0
          },
          {
            name: "",
            ammo: 0
          },
          {
            name: "bayonet_rugged",
            ammo: 0
          },
          {
            name: "",
            ammo: 0
          }
        ]
      },
      this.playerBarn
    );
    this.activePlayer.layer = this.activePlayer.m_netData.m_layer;
    this.activePlayer.isLoadoutAvatar = true;
    this.renderer.setActiveLayer(this.activePlayer.layer);
    this.audioManager.activeLayer = this.activePlayer.layer;
    this.animIdleTicker = 3;
    this.animSeq = 0;
    this.actionSeq = 0;
    this.hide();
    this.account.addEventListener("loadout", (loadout2) => {
      this.setLoadout(loadout2, true);
    });
    this.setLoadout(this.account.loadout, true);
    this.initialized = true;
    this.resize();
  }
  free() {
    if (this.initialized) {
      this.map.m_free();
      this.particleBarn.m_free();
      this.renderer.m_free();
      while (this.pixi.stage.children.length > 0) {
        const e = this.pixi.stage.children[0];
        this.pixi.stage.removeChild(e);
        e.destroy({
          children: true
        });
      }
    }
    this.initialized = false;
  }
  setLoadout(loadout2, skipEffects) {
    this.loadout = loadout$2.validate(loadout2);
    this.updateCharDisplay();
    if (skipEffects) {
      this.outfitOld = this.loadout.outfit;
    }
    if (this.activePlayer) {
      this.activePlayer.playActionStartSfx = true;
    }
    this.animIdleTicker = 0;
  }
  setView(view) {
    this.viewOld = this.view;
    this.view = view;
  }
  updateCharDisplay(options = {}) {
    const ctx = {
      audioManager: this.audioManager,
      renderer: this.renderer,
      particleBarn: this.particleBarn,
      map: this.map,
      smokeBarn: this.smokeBarn,
      decalBarn: this.decalBarn
    };
    if (this.activePlayer?.useItemEmitter) {
      this.activePlayer.useItemEmitter.stop();
      this.activePlayer.useItemEmitter = null;
      this.animIdleTicker = 0;
    }
    const obj = {
      outfit: this.loadout.outfit,
      backpack: "backpack02",
      helmet: "helmet01",
      chest: "chest03",
      activeWeapon: this.loadout.melee,
      layer: 0,
      dead: false,
      downed: false,
      animType: options.animType || 0,
      animSeq: options.animSeq || 0,
      actionSeq: options.actionSeq || 0,
      actionType: options.actionType || 0,
      actionItem: options.actionItem || "",
      wearingPan: false,
      healEffect: false,
      frozen: false,
      frozenOri: 0,
      hasteType: 0,
      hasteSeq: 0,
      scale: 1,
      role: "",
      perks: [],
      $r: false,
      pos: v2.create(50, 50),
      dir: v2.create(0, -1)
    };
    this.objectCreator.m_updateObjFull(
      ObjectType.Player,
      98,
      obj,
      ctx
    );
    this.playerBarn.setPlayerInfo({
      playerId: 98,
      teamId: 0,
      groupId: 0,
      name: "",
      loadout: {
        heal: this.loadout.heal,
        boost: this.loadout.boost
      }
    });
  }
  getCameraTargetZoom() {
    return document.getElementById("modal-content-left").getBoundingClientRect().height / this.camera.m_screenHeight * 0.2 * this.camera.m_screenHeight * 0.5 / this.camera.m_ppu;
  }
  getCameraLoadoutOffset() {
    const zoomPrev = this.camera.m_zoom;
    const targetZoom = this.getCameraTargetZoom();
    this.camera.m_zoom = targetZoom;
    const modal = document.getElementById("modal-content-left");
    const modalBound = modal.getBoundingClientRect();
    const modalAabb = collider.createAabb(
      this.camera.m_screenToPoint(
        v2.create(modalBound.left, modalBound.top + modalBound.height)
      ),
      this.camera.m_screenToPoint(
        v2.create(modalBound.left + modalBound.width, modalBound.top)
      )
    );
    const modalExt = v2.mul(v2.sub(modalAabb.max, modalAabb.min), 0.5);
    const modalPos = v2.add(modalAabb.min, modalExt);
    const screenAabb = collider.createAabb(
      this.camera.m_screenToPoint(v2.create(0, this.camera.m_screenHeight)),
      this.camera.m_screenToPoint(v2.create(this.camera.m_screenWidth, 0))
    );
    const screenExt = v2.mul(v2.sub(screenAabb.max, screenAabb.min), 0.5);
    const screenPos = v2.add(screenAabb.min, screenExt);
    const modalOffset = v2.sub(modalPos, screenPos);
    const viewWidth = screenExt.x - modalOffset.x - modalExt.x;
    const offsetX = math.clamp(viewWidth * 0.5, 2.5, 6);
    const offsetY = 0.33;
    const offset = v2.create(
      modalOffset.x + modalExt.x + offsetX,
      modalOffset.y + offsetY
    );
    this.camera.m_zoom = zoomPrev;
    return offset;
  }
  show() {
    if (!this.active) {
      this.active = true;
      this.resize();
    }
  }
  hide() {
    if (this.active) {
      this.active = false;
      this.camera.m_zoom = 2;
    }
  }
  update(dt, hasFocus) {
    const debug = {
      render: {}
    };
    this.camera.m_pos = v2.sub(this.activePlayer.m_pos, this.cameraOffset);
    this.camera.m_zoom = math.lerp(
      dt * 5,
      this.camera.m_zoom,
      this.camera.m_targetZoom
    );
    this.audioManager.cameraPos = v2.copy(this.camera.m_pos);
    if (hasFocus && (this.view == this.viewOld || this.view != "heal" && this.view != "boost" || (this.animIdleTicker = 0), this.viewOld = this.view, this.animIdleTicker -= dt, this.animIdleTicker < 0)) {
      if (this.view == "heal") {
        this.actionSeq = (this.actionSeq + 1) % 8;
        const options = {
          actionType: GameConfig.Action.UseItem,
          actionItem: "bandage",
          actionSeq: this.actionSeq
        };
        this.updateCharDisplay(options);
        this.animIdleTicker = 2 + Math.random();
      } else if (this.view == "boost") {
        this.actionSeq = (this.actionSeq + 1) % 8;
        const options = {
          actionType: GameConfig.Action.UseItem,
          actionItem: "soda",
          actionSeq: this.actionSeq
        };
        this.updateCharDisplay(options);
        this.animIdleTicker = 2 + Math.random();
      } else if (this.view != "emote" && this.view != "crosshair") {
        this.animSeq = (this.animSeq + 1) % 8;
        const options = {
          animType: GameConfig.Anim.Melee,
          animSeq: this.animSeq
        };
        this.updateCharDisplay(options);
        this.animIdleTicker = 1.5 + Math.random();
      }
    }
    const outfitDirty = this.loadout.outfit != this.outfitOld;
    this.outfitOld = this.loadout.outfit;
    if (hasFocus && outfitDirty) {
      const itemDef = GameObjectDefs[this.loadout.outfit];
      if (itemDef) {
        this.audioManager.playSound(itemDef.sound.pickup, {
          channel: "ui"
        });
      }
    }
    this.playerBarn.m_update(
      dt,
      this.activeId,
      // @ts-expect-error not defined locally.
      this.teamMode,
      this.renderer,
      this.particleBarn,
      this.camera,
      this.map,
      this.inputBinds,
      this.audioManager,
      // @ts-expect-error big mismatch between params passed and expected, need to debug later;
      false,
      false,
      false
    );
    this.smokeBarn.m_update(
      dt,
      this.camera,
      this.activePlayer,
      this.map,
      this.renderer
    );
    this.particleBarn.m_update(dt, this.camera, debug);
    this.decalBarn.m_update(dt, this.camera, this.renderer, debug);
    this.renderer.m_update(dt, this.camera, this.map, debug);
    this.activePlayer.playActionStartSfx = false;
    this.render(dt, debug);
  }
  render(_dt, debug) {
    const grassColor = this.map.mapLoaded ? this.map.getMapDef().biome.colors.grass : 8433481;
    this.pixi.renderer.background.color = grassColor;
    this.playerBarn.m_render(this.camera, debug);
    this.map.m_render(this.camera);
    debugLines.m_render(this.camera, this.debugDisplay);
    debugLines.flush();
  }
  resize() {
    if (this.initialized) {
      this.camera.m_screenWidth = device.screenWidth;
      this.camera.m_screenHeight = device.screenHeight;
      this.map.resize(this.pixi.renderer, this.canvasMode);
      this.renderer.resize(this.map, this.camera);
      this.camera.m_targetZoom = this.getCameraTargetZoom();
      this.cameraOffset = this.getCameraLoadoutOffset();
    }
  }
}
const passMaxLevel = 99;
const passUtil = {
  getPassMaxLevel: function() {
    return passMaxLevel;
  },
  getPassLevelXp: function(passType, level) {
    const passDef = PassDefs[passType];
    const levelIdx = level - 1;
    if (levelIdx < passDef.xp.length) {
      return passDef.xp[levelIdx];
    }
    return passDef.xp[passDef.xp.length - 1];
  },
  getPassLevelAndXp: function(passType, passXp) {
    let xp = passXp;
    let level = 1;
    while (level < passMaxLevel) {
      const levelXp = passUtil.getPassLevelXp(passType, level);
      if (xp < levelXp) {
        break;
      }
      xp -= levelXp;
      level++;
    }
    return {
      level,
      xp,
      nextLevelXp: passUtil.getPassLevelXp(passType, level)
    };
  },
  timeUntilQuestRefresh: function(timeAcquired) {
    return Math.floor((timeAcquired - 252e5 + 864e5 - 1) / 864e5) * 864e5 + 252e5 - Date.now();
  }
};
function i(e, t) {
  for (let r = PassDefs[e], a = 0; a < r.items.length; a++) {
    if (r.items[a].level == t + 1) {
      return r.items[a].item;
    }
  }
  return "";
}
function humanizeTime(time, minutesFloor = false) {
  const hours = Math.floor(Math.ceil(time / 60) / 60);
  const minutes = minutesFloor ? Math.floor(time / 60) % 60 : Math.ceil(time / 60) % 60;
  let timeText = "";
  if (hours > 0) {
    timeText += `${hours}h `;
  }
  return timeText += `${minutes}m`;
}
class Pass {
  constructor(account, loadoutMenu, localization) {
    this.account = account;
    this.loadoutMenu = loadoutMenu;
    this.localization = localization;
    this.account = account;
    this.loadoutMenu = loadoutMenu;
    this.localization = localization;
    this.account.addEventListener("request", this.onRequest.bind(this));
    this.account.addEventListener("pass", this.onPass.bind(this));
    this.loadPlaceholders();
    $("#pass-progress-unlock-wrapper").hover(
      () => {
        $("#pass-unlock-tooltip").fadeIn(50);
      },
      () => {
        $("#pass-unlock-tooltip").fadeOut(50);
      }
    );
  }
  pass = {
    data: {
      type: "pass_survivr1"
    },
    currentXp: 0,
    currentLevel: 1,
    levelXp: 0,
    ticker: 0,
    animSteps: [],
    elems: {}
  };
  quests = [];
  loaded = false;
  lockDisplayed = false;
  updatePass = false;
  updatePassTicker = 0;
  onPass(pass, quests, resetRefresh) {
    const refreshOffset = 5 * 1e3;
    const newQuests = [];
    let questAnimCount = 0;
    for (let p = 0; p < quests.length; p++) {
      ((e) => {
        const questData = quests[e];
        const quest = {
          data: questData,
          start: 0,
          current: 0,
          ticker: 0,
          delay: questAnimCount * 0.5,
          playCompleteAnim: false,
          progressAnimFinished: false,
          completeAnimFinished: false,
          shouldRequestRefresh: resetRefresh,
          refreshTime: Date.now() + questData.timeToRefresh + refreshOffset,
          refreshSet: false,
          refreshEnabled: false,
          timer: {
            enabled: false,
            str: ""
          }
        };
        const curQuest = this.quests.find((x2) => {
          return x2.data.idx == quest.data.idx && x2.data.type == quest.data.type;
        });
        if (curQuest) {
          quest.start = curQuest.current;
          quest.current = curQuest.current;
          if (!curQuest.data.complete && quest.data.complete) {
            quest.playCompleteAnim = true;
          }
        }
        quest.data.progress = math.min(quest.data.progress, quest.data.target);
        if (quest.data.progress > quest.current) {
          questAnimCount++;
        }
        const fixedQuestElem = $(`#pass-quest-${quest.data.idx}`);
        quest.elems = {
          main: fixedQuestElem,
          xp: fixedQuestElem.find(".pass-quest-xp"),
          info: fixedQuestElem.find(".pass-quest-info"),
          desc: fixedQuestElem.find(".pass-quest-desc"),
          cur: fixedQuestElem.find(".pass-quest-counter-current"),
          target: fixedQuestElem.find(".pass-quest-counter-target"),
          refresh: fixedQuestElem.find(".pass-quest-refresh"),
          refreshPrompt: fixedQuestElem.find(".pass-quest-refresh-prompt"),
          refreshConfirm: fixedQuestElem.find(".pass-quest-refresh-confirm"),
          refreshCancel: fixedQuestElem.find(".pass-quest-refresh-cancel"),
          counter: fixedQuestElem.find(".pass-quest-counter"),
          barFill: fixedQuestElem.find(".pass-quest-bar-fill"),
          timer: fixedQuestElem.find(".pass-quest-timer"),
          loading: fixedQuestElem.find(".pass-quest-spinner")
        };
        quest.elems.barFill.clearQueue();
        quest.elems.main.removeClass("pass-bg-pulse");
        quest.elems.main.stop().css({
          opacity: 1
        });
        quest.elems.xp.removeClass("pass-text-pulse");
        quest.elems.refresh.stop().css({
          opacity: 1
        });
        quest.elems.counter.stop().css({
          opacity: 1
        });
        const questDef = QuestDefs[quest.data.type];
        const title = this.localization.translate(`${quest.data.type}`) || quest.data.type;
        const pct2 = quest.current / quest.data.target * 100;
        quest.elems.main.css("display", "block");
        quest.elems.desc.html(title);
        quest.elems.cur.html(Math.round(quest.current));
        quest.elems.xp.html(`${questDef.xp} XP`);
        quest.elems.barFill.css({
          width: `${pct2}%`
        });
        quest.elems.loading.css("display", "none");
        let targetText = quest.data.target;
        if (questDef.timed) {
          targetText = humanizeTime(targetText);
        }
        quest.elems.target.html(targetText);
        if (questDef.icon) {
          quest.elems.desc.addClass("pass-quest-desc-icon");
          quest.elems.desc.css({
            "background-image": `url(${questDef.icon})`
          });
        } else {
          quest.elems.desc.removeClass("pass-quest-desc-icon");
          quest.elems.desc.attr("style", "");
        }
        this.setQuestRefreshEnabled(quest);
        newQuests.push(quest);
      })(p);
    }
    this.quests = newQuests;
    this.pass.data = pass;
    this.pass.animSteps = [];
    this.pass.currentXp = Math.round(this.pass.currentXp);
    this.pass.levelXp = passUtil.getPassLevelXp(pass.type, this.pass.currentLevel);
    if (!this.loaded) {
      const u = passUtil.getPassLevelXp(pass.type, pass.level);
      this.pass.currentXp = 0;
      this.pass.currentLevel = pass.level;
      this.pass.levelXp = u;
      this.pass.ticker = 0;
    }
    let level = this.pass.currentLevel;
    let xp = this.pass.currentXp;
    if (this.loaded) {
      while (level < pass.level) {
        const levelXp2 = passUtil.getPassLevelXp(pass.type, level);
        this.pass.animSteps.push({
          startXp: xp,
          targetXp: levelXp2,
          levelXp: levelXp2,
          targetLevel: level + 1
        });
        level++;
        xp = 0;
      }
      const delay = questAnimCount > 0 ? 2 : 0;
      this.pass.ticker = -delay;
    }
    const levelXp = passUtil.getPassLevelXp(pass.type, level);
    this.pass.animSteps.push({
      startXp: xp,
      targetXp: pass.xp,
      levelXp,
      targetLevel: level
    });
    $("#pass-block").css("z-index", "1");
    $("#pass-locked").css("display", "none");
    $("#pass-loading").css("display", "none");
    const b = i(this.pass.data.type, this.pass.currentLevel);
    this.setPassUnlockImage(b);
    const x = this.localization.translate(pass.type).toUpperCase();
    $("#pass-name-text").html(x);
    $("#pass-progress-level").html(this.pass.currentLevel);
    $("#pass-progress-xp-current").html(this.pass.currentXp);
    $("#pass-progress-xp-target").html(this.pass.levelXp);
    const pct = this.pass.currentXp / this.pass.levelXp * 100;
    $("#pass-progress-bar-fill").css({
      width: `${pct}%`
    });
    this.loaded = true;
  }
  onRequest(account) {
    $("#pass-loading").css("display", account.loggingIn ? "block" : "none");
  }
  scheduleUpdatePass(delay) {
    this.updatePass = true;
    this.updatePassTicker = delay;
  }
  setQuestRefreshEnabled(e) {
    const r = !e.data.rerolled && !e.data.complete || e.refreshTime - Date.now() < 0;
    if (r != e.refreshEnabled || !e.refreshSet) {
      e.refreshEnabled = r;
      e.refreshSet = true;
      e.elems.refresh.off("click");
      e.elems.refreshConfirm.off("click");
      e.elems.refreshCancel.off("click");
      if (e.refreshEnabled) {
        e.elems.refreshConfirm.on("click", () => {
          e.elems.loading.css("display", "block");
          e.elems.refreshPrompt.css("display", "none");
          this.account.refreshQuest(e.data.idx);
        });
        e.elems.refreshCancel.on("click", () => {
          e.elems.refreshPrompt.css("display", "none");
          e.elems.info.css("display", "block");
        });
        e.elems.refresh.on("click", () => {
          e.elems.refreshPrompt.css("display", "block");
          e.elems.info.css("display", "none");
        });
        e.elems.refresh.removeClass("pass-quest-refresh-disabled");
      } else {
        e.elems.refresh.addClass("pass-quest-refresh-disabled");
      }
    }
  }
  setPassUnlockImage(item) {
    const t = GameObjectDefs[item];
    const r = t ? helpers.getSvgFromGameType(item) : "img/emotes/surviv.svg";
    const a = `url(${r})`;
    const i2 = helpers.getCssTransformFromGameType(item);
    $("#pass-progress-unlock").css({
      opacity: t ? 1 : 0.15,
      transform: `translate(-50%, -50%) ${i2}`
    });
    $("#pass-progress-unlock-image").css({
      "background-image": a
    });
    const o = t ? this.localization.translate(
      `loadout-title-${this.loadoutMenu.getCategory(t.type).loadoutType}`
    ).toUpperCase() : "";
    const s = $("#pass-unlock-tooltip");
    s.css("opacity", t ? 1 : 0);
    s.find(".tooltip-pass-title").html(o);
    s.find(".tooltip-pass-desc").html(t ? t.name : "");
    const c = t ? `url(${this.loadoutMenu.getCategory(t.type).categoryImage})` : "";
    $("#pass-progress-unlock-type-image").css({
      "background-image": c
    });
    $("#pass-progress-unlock-type-wrapper").css({
      display: t ? "block" : "none"
    });
  }
  animatePassLevelUp() {
    const t = $("#pass-progress-bar-fill");
    const r = $("#pass-progress-level");
    const a = $("#pass-progress-unlock-wrapper");
    const o = $("#pass-progress-unlock-image");
    const s = $("#pass-progress-unlock-type-image");
    r.html(this.pass.currentLevel);
    t.queue((e) => {
      a.addClass("pass-unlock-pulse");
      $(e).dequeue();
    }).delay(750).queue((e) => {
      o.animate(
        {
          opacity: 0
        },
        250
      );
      s.animate(
        {
          opacity: 0
        },
        250
      );
      $(e).dequeue();
    }).delay(250).queue((t2) => {
      const r2 = i(this.pass.data.type, this.pass.currentLevel);
      this.setPassUnlockImage(r2);
      a.removeClass("pass-unlock-pulse");
      o.animate(
        {
          opacity: 1
        },
        250
      );
      s.animate(
        {
          opacity: 1
        },
        250
      );
      $(t2).dequeue();
    });
  }
  animateQuestComplete(quest) {
    quest.elems.barFill.queue((el) => {
      quest.elems.main.addClass("pass-bg-pulse");
      quest.elems.xp.addClass("pass-text-pulse");
      quest.elems.refresh.animate(
        {
          opacity: 0.25
        },
        250
      );
      quest.elems.refresh.removeClass("pass-quest-refresh-disabled");
      quest.elems.refresh.animate(
        {
          opacity: 0
        },
        250
      );
      quest.elems.counter.animate(
        {
          opacity: 0
        },
        250
      );
      quest.elems.desc.html("QUEST COMPLETE!");
      $(el).dequeue();
    }).delay(1e3).queue((el) => {
      quest.elems.main.animate(
        {
          opacity: 0
        },
        750
      );
      $(el).dequeue();
    });
  }
  update(dt) {
    this.updatePassTicker -= dt;
    if (this.updatePass && this.updatePassTicker < 0) {
      this.updatePass = false;
      this.account.getPass(false);
    }
    for (let i2 = 0; i2 < this.quests.length; i2++) {
      const fixedQuest = this.quests[i2];
      this.setQuestRefreshEnabled(fixedQuest);
      fixedQuest.ticker += dt;
      if (!fixedQuest.progressAnimFinished) {
        const a = math.clamp((fixedQuest.ticker - fixedQuest.delay) / 1, 0, 1);
        fixedQuest.current = math.lerp(
          math.easeOutExpo(a),
          fixedQuest.start,
          fixedQuest.data.progress
        );
        const pctComplete = fixedQuest.current / fixedQuest.data.target * 100;
        const questDef = QuestDefs[fixedQuest.data.type];
        let currentText = Math.round(fixedQuest.current);
        if (questDef.timed) {
          currentText = humanizeTime(currentText, true);
        }
        fixedQuest.elems.cur.html(currentText);
        fixedQuest.elems.barFill.css({
          width: `${pctComplete}%`
        });
        if (a >= 1) {
          fixedQuest.progressAnimFinished = true;
        }
      }
      if (fixedQuest.playCompleteAnim && !fixedQuest.completeAnimFinished && fixedQuest.ticker - fixedQuest.delay > 1.25) {
        this.animateQuestComplete(fixedQuest);
        fixedQuest.completeAnimFinished = true;
      }
      const m2 = !fixedQuest.playCompleteAnim || fixedQuest.completeAnimFinished && fixedQuest.ticker - fixedQuest.delay > 4.25;
      if (fixedQuest.data.complete && m2 && fixedQuest.refreshEnabled && fixedQuest.shouldRequestRefresh) {
        fixedQuest.shouldRequestRefresh = false;
        this.account.refreshQuest(fixedQuest.data.idx);
      }
      const p = fixedQuest.data.complete && m2;
      if (p != fixedQuest.timer.displayed) {
        fixedQuest.timer.displayed = p;
        fixedQuest.elems.main.removeClass("pass-bg-pulse");
        fixedQuest.elems.main.stop().animate(
          {
            opacity: 1
          },
          250
        );
        const h = fixedQuest.elems.refreshPrompt.css("display") == "block";
        fixedQuest.elems.info.css("display", p || h ? "none" : "block");
        fixedQuest.elems.timer.css("display", p ? "block" : "none");
      }
      if (p) {
        const u = Math.max(fixedQuest.refreshTime - Date.now(), 0);
        const g = humanizeTime(u / 1e3);
        if (g != fixedQuest.timer.str) {
          fixedQuest.timer.str = g;
          fixedQuest.elems.timer.html(g);
        }
      }
    }
    this.pass.ticker += dt;
    if (this.pass.animSteps.length > 0 && this.pass.ticker >= 0) {
      const y = this.pass.animSteps[0];
      const w = math.clamp(this.pass.ticker / 1.5, 0, 1);
      this.pass.currentXp = math.lerp(math.easeOutExpo(w), y.startXp, y.targetXp);
      this.pass.levelXp = y.levelXp;
      const f = this.pass.currentXp / y.levelXp * 100;
      $("#pass-progress-xp-current").html(Math.round(this.pass.currentXp));
      $("#pass-progress-xp-target").html(this.pass.levelXp);
      $("#pass-progress-bar-fill").css({
        width: `${f}%`
      });
      if (w >= 1) {
        if (y.targetLevel > this.pass.currentLevel) {
          this.pass.currentLevel = y.targetLevel;
          this.animatePassLevelUp();
        }
        this.pass.animSteps.shift();
        this.pass.ticker -= 3;
      }
    }
    if (!this.account.loggingIn && !this.account.loggedIn && !this.lockDisplayed) {
      $("#pass-block").css("z-index", "1");
      $("#pass-loading").css("display", "none");
      $("#pass-locked").css("display", "block");
      this.lockDisplayed = true;
    }
  }
  onResize() {
  }
  loadPlaceholders() {
    const def2 = PassDefs.pass_survivr1;
    const passName = this.localization.translate("pass_survivr1").toUpperCase();
    $("#pass-name-text").html(passName);
    $("#pass-progress-level").html(1);
    $("#pass-progress-xp-current").html(0);
    $("#pass-progress-xp-target").html(def2.xp[0]);
    this.setPassUnlockImage(def2.items[0].item);
  }
}
function createLoginOptions(parentElem, linkAccount, account, localization) {
  const contentsElem = parentElem.find(".login-options-content");
  contentsElem.empty();
  if (linkAccount) {
    contentsElem.append(
      $("<div/>", {
        class: "account-login-desc"
      }).append(
        $("<p/>", {
          html: localization.translate("index-link-account-to")
        })
      )
    );
  }
  const buttonParentElem = $("<div/>", {
    class: "account-buttons"
  });
  contentsElem.append(buttonParentElem);
  const addLoginOption = function(method, linked, onClick) {
    const el = $("<div/>", {
      class: `menu-option btn-darken btn-standard btn-login-${method}`
    });
    el.append(
      $("<span/>", {
        class: "login-button-name"
      }).append(
        $("<span/>", {
          html: localization.translate(`index-${method}`)
        })
      ).append(
        $("<div/>", {
          class: "icon"
        })
      )
    );
    if (linkAccount && linked) {
      el.addClass("btn-login-linked");
      el.find("span.login-button-name").html('<div class="icon"></div>');
    } else {
      el.click((_e) => {
        onClick();
      });
    }
    buttonParentElem.append(el);
  };
  if (proxy.loginSupported("google")) {
    addLoginOption("google", account.profile.linkedGoogle, () => {
      window.location.href = api.resolveUrl("/api/auth/google");
    });
  }
  if (proxy.loginSupported("discord")) {
    addLoginOption("discord", account.profile.linkedDiscord, () => {
      window.location.href = api.resolveUrl("/api/auth/discord");
    });
  }
  if (proxy.loginSupported("mock")) {
    addLoginOption("mock", false, () => {
      window.location.href = api.resolveUrl("/api/auth/mock");
    });
  }
}
class ProfileUi {
  constructor(account, localization, loadoutMenu, errorModal) {
    this.account = account;
    this.localization = localization;
    this.loadoutMenu = loadoutMenu;
    this.errorModal = errorModal;
    this.account = account;
    this.localization = localization;
    this.loadoutMenu = loadoutMenu;
    this.errorModal = errorModal;
    account.addEventListener("error", this.onError.bind(this));
    account.addEventListener("login", this.onLogin.bind(this));
    account.addEventListener("loadout", this.onLoadoutUpdated.bind(this));
    account.addEventListener("items", this.onItemsUpdated.bind(this));
    account.addEventListener("request", this.render.bind(this));
    this.initUi();
    this.render();
  }
  setNameModal = null;
  resetStatsModal = null;
  deleteAccountModal = null;
  userSettingsModal = null;
  loginOptionsModal = null;
  createAccountModal = null;
  loginOptionsModalMobile;
  modalMobileAccount;
  initUi() {
    const clearNamePrompt = function() {
      $("#modal-body-warning").css("display", "none");
      $("#modal-account-name-input").val("");
    };
    this.setNameModal = new MenuModal($("#modal-account-name-change"));
    this.setNameModal.onShow(clearNamePrompt);
    this.setNameModal.onHide(clearNamePrompt);
    $("#modal-account-name-finish").click((t) => {
      t.stopPropagation();
      const name = $("#modal-account-name-input").val();
      this.account.setUsername(name, (error) => {
        if (error) {
          const ERROR_CODE_TO_LOCALIZATION = {
            failed: "Failed setting username.",
            invalid: "Invalid username.",
            taken: "Name already taken!",
            change_time_not_expired: "Username has already been set recently."
          };
          const message = ERROR_CODE_TO_LOCALIZATION[error] || ERROR_CODE_TO_LOCALIZATION.failed;
          $("#modal-body-warning").hide();
          $("#modal-body-warning").html(message);
          $("#modal-body-warning").fadeIn();
        } else {
          this.setNameModal.hide();
        }
      });
    });
    $("#modal-account-name-input").on("keypress", (e) => {
      if ((e.which || e.keyCode) === 13) {
        $("#modal-account-name-finish").trigger("click");
      }
    });
    this.resetStatsModal = new MenuModal($("#modal-account-reset-stats"));
    this.resetStatsModal.onShow(() => {
      $("#modal-account-reset-stats-input").val("");
      this.modalMobileAccount.hide();
    });
    $("#modal-account-reset-stats-finish").click((t) => {
      t.stopPropagation();
      if ($("#modal-account-reset-stats-input").val() == "RESET STATS") {
        this.account.resetStats();
        this.resetStatsModal.hide();
      }
    });
    $("#modal-account-reset-stats-input").on("keypress", (e) => {
      if ((e.which || e.keyCode) === 13) {
        $("#modal-account-reset-stats-finish").trigger("click");
      }
    });
    this.deleteAccountModal = new MenuModal($("#modal-account-delete"));
    this.deleteAccountModal.onShow(() => {
      $("#modal-account-delete-input").val("");
      this.modalMobileAccount.hide();
    });
    $("#modal-account-delete-finish").click((t) => {
      t.stopPropagation();
      if ($("#modal-account-delete-input").val() == "DELETE") {
        this.account.deleteAccount();
        this.deleteAccountModal.hide();
      }
    });
    $("#modal-account-delete-input").on("keypress", (e) => {
      if ((e.which || e.keyCode) === 13) {
        $("#modal-account-delete-finish").trigger("click");
      }
    });
    this.userSettingsModal = new MenuModal($(".account-buttons-settings"));
    this.userSettingsModal.checkSelector = false;
    this.userSettingsModal.skipFade = true;
    this.userSettingsModal.onShow(() => {
      $(".account-details-top").css("display", "none");
    });
    this.userSettingsModal.onHide(() => {
      $(".account-details-top").css("display", "block");
    });
    this.loginOptionsModal = new MenuModal($("#account-login-options"));
    this.loginOptionsModal.checkSelector = false;
    this.loginOptionsModal.skipFade = true;
    this.loginOptionsModal.onShow(() => {
      $(".account-details-top").css("display", "none");
    });
    this.loginOptionsModal.onHide(() => {
      $(".account-details-top").css("display", "block");
    });
    this.loginOptionsModalMobile = new MenuModal($("#account-login-options-mobile"));
    this.loginOptionsModalMobile.checkSelector = false;
    this.loginOptionsModalMobile.skipFade = true;
    this.loginOptionsModalMobile.onShow(() => {
      $(".account-details-top").css("display", "none");
    });
    this.loginOptionsModalMobile.onHide(() => {
      $(".account-details-top").css("display", "block");
    });
    this.createAccountModal = new MenuModal($("#modal-create-account"));
    this.createAccountModal.onHide(() => {
      this.loadoutMenu.hide();
    });
    this.modalMobileAccount = new MenuModal($("#modal-mobile-account"));
    this.modalMobileAccount.onShow(() => {
      $("#start-top-right").css("display", "none");
      $(".account-details-top").css("display", "none");
    });
    this.modalMobileAccount.onHide(() => {
      $("#start-top-right").css("display", "block");
      $(".account-details-top").css("display", "block");
      this.userSettingsModal.hide();
    });
    $(".account-leaderboard-link").click((_e) => {
      window.open("/stats", "_blank");
      return false;
    });
    $(".account-stats-link").click(() => {
      this.waitOnLogin(() => {
        if (this.account.loggedIn) {
          if (this.account.profile.usernameSet) {
            const slug = this.account.profile.slug || "";
            window.open(`/stats/?slug=${slug}`, "_blank");
          } else {
            this.setNameModal.show(true);
          }
        } else {
          this.showLoginMenu({
            modal: true
          });
        }
      });
      return false;
    });
    $(".account-loadout-link, #btn-customize").click(() => {
      this.loadoutMenu.show();
      return false;
    });
    $(".account-details-user").click(() => {
      if (this.userSettingsModal.isVisible() || this.loginOptionsModal.isVisible()) {
        this.userSettingsModal.hide();
        this.loginOptionsModal.hide();
      } else {
        this.waitOnLogin(() => {
          if (device.mobile) {
            this.modalMobileAccount.show();
          }
          if (this.account.loggedIn) {
            this.loginOptionsModal.hide();
            this.userSettingsModal.show();
          } else {
            this.showLoginMenu({
              modal: false
            });
          }
        });
      }
      return false;
    });
    $(".btn-account-link").click(() => {
      this.userSettingsModal.hide();
      this.showLoginMenu({
        modal: false,
        link: true
      });
      return false;
    });
    $(".btn-account-change-name").click(() => {
      if (this.account.profile.usernameChangeTime <= 0) {
        this.userSettingsModal.hide();
        this.modalMobileAccount.hide();
        $("#modal-account-name-title").html(
          this.localization.translate("index-change-account-name")
        );
        this.setNameModal.show();
      }
      return false;
    });
    $(".btn-account-reset-stats").click(() => {
      this.userSettingsModal.hide();
      this.resetStatsModal.show();
      return false;
    });
    $(".btn-account-delete").click(() => {
      this.userSettingsModal.hide();
      this.deleteAccountModal.show();
      return false;
    });
    $(".btn-account-logout").click(() => {
      this.account.logout();
      return false;
    });
    $("#btn-pass-locked").click(() => {
      this.showLoginMenu({
        modal: true
      });
      return false;
    });
    const loginSupported = !SDK.isAnySDK && proxy.anyLoginSupported();
    $(".account-block").toggle(loginSupported);
  }
  onError(type, data) {
    const typeText = {
      server_error: "Operation failed, please try again later.",
      facebook_account_in_use: "Failed linking Facebook account.<br/>Account already in use!",
      google_account_in_use: "Failed linking Google account.<br/>Account already in use!",
      twitch_account_in_use: "Failed linking Twitch account.<br/>Account already in use!",
      discord_account_in_use: "Failed linking Discord account.<br/>Account already in use!",
      account_banned: `Account banned: ${data}`,
      login_failed: "Login failed."
    };
    const text = typeText[type];
    if (text) {
      this.errorModal.selector.find(".modal-body-text").html(text);
      this.errorModal.show();
    }
  }
  onLogin() {
    this.createAccountModal.hide();
    this.loginOptionsModalMobile.hide();
    this.loginOptionsModal.hide();
    if (!this.account.profile.usernameSet) {
      this.setNameModal.show(true);
    }
  }
  onLoadoutUpdated(_e) {
    this.updateUserIcon();
  }
  onItemsUpdated(items) {
    let unconfirmedItemCount = 0;
    let unackedItemCount = 0;
    for (let i2 = 0; i2 < items.length; i2++) {
      const item = items[i2];
      if (item.status < loadout$2.ItemStatus.Confirmed) {
        unconfirmedItemCount++;
      }
      if (item.status < loadout$2.ItemStatus.Ackd) {
        unackedItemCount++;
      }
    }
    items.filter((e) => {
      return e.status < loadout$2.ItemStatus.Confirmed;
    });
    items.filter((e) => {
      return e.status < loadout$2.ItemStatus.Ackd;
    });
    const displayAlert = unconfirmedItemCount > 0 || unackedItemCount > 0;
    $("#loadout-alert-main").css({
      display: displayAlert ? "block" : "none"
    });
  }
  waitOnLogin(cb) {
    if (this.account.loggingIn && !this.account.loggedIn) {
      const runOnce = () => {
        cb();
        this.account.removeEventListener("requestsComplete", runOnce);
      };
      this.account.addEventListener("requestsComplete", runOnce);
    } else {
      cb();
    }
  }
  showLoginMenu(opts) {
    opts = {
      ...{
        modal: false,
        link: false
      },
      ...opts
    };
    const modal = opts.modal ? this.createAccountModal : device.mobile ? this.loginOptionsModalMobile : this.loginOptionsModal;
    createLoginOptions(modal.selector, opts.link, this.account, this.localization);
    modal.show();
  }
  updateUserIcon() {
    const icon = helpers.getSvgFromGameType(this.account.loadout.player_icon) || "img/gui/player-gui.svg";
    $(".account-details-user .account-avatar").css(
      "background-image",
      `url(${icon})`
    );
  }
  render() {
    const loading = this.account.requestsInFlight > 0;
    $(".account-loading").css("opacity", loading ? 1 : 0);
    let usernameText = helpers.htmlEscape(this.account.profile.username || "");
    if (!this.account.loggedIn) {
      usernameText = this.account.loggingIn ? `${this.localization.translate("index-logging-in")}...` : this.localization.translate("index-log-in-desc");
    }
    $("#account-player-name").html(usernameText);
    $("#account-player-name").css(
      "display",
      this.account.loggedIn ? "block" : "none"
    );
    $("#account-login").css("display", this.account.loggedIn ? "none" : "block");
    this.updateUserIcon();
    if (this.account.profile.usernameChangeTime <= 0) {
      $(".btn-account-change-name").removeClass("btn-account-disabled");
    } else {
      $(".btn-account-change-name").addClass("btn-account-disabled");
    }
  }
}
function errorTypeToString(type, localization) {
  const typeMap = {
    join_full: localization.translate("index-team-is-full"),
    join_not_found: localization.translate("index-failed-joining-team"),
    create_failed: localization.translate("index-failed-creating-team"),
    join_failed: localization.translate("index-failed-joining-team"),
    join_game_failed: localization.translate("index-failed-joining-game"),
    lost_conn: localization.translate("index-lost-connection"),
    find_game_error: localization.translate("index-failed-finding-game"),
    find_game_full: localization.translate("index-failed-finding-game"),
    find_game_invalid_protocol: localization.translate("index-invalid-protocol"),
    find_game_invalid_captcha: localization.translate("index-invalid-captcha"),
    kicked: localization.translate("index-team-kicked"),
    banned: localization.translate("index-ip-banned"),
    behind_proxy: "behind_proxy"
    // this will get passed to the main app to show a modal
  };
  return typeMap[type] || typeMap.lost_conn;
}
class TeamMenu {
  constructor(config, pingTest, siteInfo, localization, audioManager, joinGameCb, leaveCb) {
    this.config = config;
    this.pingTest = pingTest;
    this.siteInfo = siteInfo;
    this.localization = localization;
    this.audioManager = audioManager;
    this.joinGameCb = joinGameCb;
    this.leaveCb = leaveCb;
    this.serverSelect.change(() => {
      const e = this.serverSelect.find(":selected").val();
      this.pingTest.start([e]);
      this.setRoomProperty("region", e);
    });
    this.queueMode1.click(() => {
      this.setRoomProperty("gameModeIdx", 1);
    });
    this.queueMode2.click(() => {
      this.setRoomProperty("gameModeIdx", 2);
    });
    this.fillAuto.click(() => {
      this.setRoomProperty("autoFill", true);
    });
    this.fillNone.click(() => {
      this.setRoomProperty("autoFill", false);
    });
    this.playBtn.on("click", () => {
      SDK.requestMidGameAd(() => {
        this.tryStartGame();
      });
    });
    $("#team-copy-url, #team-desc-text").click((e) => {
      const t = $("<div/>", {
        class: "copy-toast",
        html: "Copied!"
      });
      $("#start-menu-wrapper").append(t);
      t.css({
        left: e.pageX - parseInt(t.css("width")) / 2,
        top: $("#team-copy-url").offset().top
      });
      t.animate(
        {
          top: "-=20",
          opacity: 1
        },
        {
          queue: false,
          duration: 300,
          complete: function() {
            $(this).fadeOut(250, function() {
              $(this).remove();
            });
          }
        }
      );
      let codeToCopy = $("#team-url").text();
      if (window !== window.top) {
        codeToCopy = this.roomData.roomUrl.substring(1);
      }
      helpers.copyTextToClipboard(codeToCopy);
    });
    if (window !== window.top) {
      $("#team-desc-text").hide();
    }
    if (!device.mobile) {
      this.hideUrl = false;
      $("#team-hide-url").click((e) => {
        const el = e.currentTarget;
        this.hideUrl = !this.hideUrl;
        $("#team-desc-text, #team-code-text").css({
          opacity: this.hideUrl ? 0 : 1
        });
        $(el).css({
          "background-image": this.hideUrl ? "url(../img/gui/hide.svg)" : "url(../img/gui/eye.svg)"
        });
      });
    }
    setTimeout(() => {
      if (this.joined) {
        this.sendMessage("keepAlive", {});
      }
    }, 45 * 1e3);
  }
  // Jquery elems
  playBtn = $("#btn-start-team");
  serverWarning = $("#server-warning");
  teamOptions = $(
    "#btn-team-queue-mode-1, #btn-team-queue-mode-2, #btn-team-fill-auto, #btn-team-fill-none"
  );
  serverSelect = $("#team-server-select");
  queueMode1 = $("#btn-team-queue-mode-1");
  queueMode2 = $("#btn-team-queue-mode-2");
  fillAuto = $("#btn-team-fill-auto");
  fillNone = $("#btn-team-fill-none");
  active = false;
  joined = false;
  create = false;
  joiningGame = false;
  ws = null;
  keepAliveTimeout = 0;
  // Ui state
  playerData = {};
  roomData = {};
  players = [];
  prevPlayerCount = 0;
  localPlayerId = 0;
  isLeader = true;
  editingName = false;
  displayedInvalidProtocolModal = false;
  hideUrl;
  getPlayerById(playerId) {
    return this.players.find((x) => {
      return x.playerId == playerId;
    });
  }
  connect(create, roomUrl) {
    if (!this.active || roomUrl !== this.roomData.roomUrl) {
      const roomHost = api.resolveRoomHost();
      const url = `w${window.location.protocol === "https:" ? "ss" : "s"}://${roomHost}/team_v2`;
      this.active = true;
      this.joined = false;
      this.create = create;
      this.joiningGame = false;
      this.editingName = false;
      this.playerData = {
        name: this.config.get("playerName")
      };
      this.roomData = {
        roomUrl,
        region: this.config.get("region"),
        gameModeIdx: this.config.get("gameModeIdx"),
        autoFill: this.config.get("teamAutoFill"),
        findingGame: false,
        lastError: ""
      };
      this.displayedInvalidProtocolModal = false;
      this.refreshUi();
      if (this.ws) {
        this.ws.onclose = function() {
        };
        this.ws.close();
        this.ws = null;
      }
      try {
        this.ws = new WebSocket(url);
        this.ws.onerror = (_e) => {
          this.ws?.close();
        };
        this.ws.onclose = () => {
          let errMsg = "";
          if (!this.joiningGame) {
            errMsg = this.joined ? "lost_conn" : this.create ? "create_failed" : "join_failed";
          }
          this.leave(errMsg);
        };
        this.ws.onopen = () => {
          if (this.create) {
            this.sendMessage("create", {
              roomData: this.roomData,
              playerData: this.playerData
            });
          } else {
            this.sendMessage("join", {
              roomUrl: this.roomData.roomUrl,
              playerData: this.playerData
            });
          }
        };
        this.ws.onmessage = (e) => {
          if (this.active) {
            const msg = JSON.parse(e.data);
            this.onMessage(msg.type, msg.data);
          }
        };
      } catch (_e) {
        this.leave(this.create ? "create_failed" : "join_failed");
      }
    }
  }
  leave(errType = "") {
    if (this.active) {
      this.ws?.close();
      this.ws = null;
      this.active = false;
      this.joined = false;
      this.joiningGame = false;
      this.refreshUi();
      this.config.set("gameModeIdx", this.roomData.gameModeIdx);
      this.config.set("teamAutoFill", this.roomData.autoFill);
      if (this.isLeader) {
        this.config.set("region", this.roomData.region);
      }
      let errTxt = "";
      if (errType && errType != "") {
        errTxt = errorTypeToString(errType, this.localization);
      }
      this.leaveCb(errTxt);
      SDK.hideInviteButton();
    }
  }
  onGameComplete() {
    if (this.active) {
      this.joiningGame = false;
      this.sendMessage("gameComplete");
    }
  }
  onMessage(type, data) {
    switch (type) {
      case "state": {
        let stateData = data;
        this.joined = true;
        const ourRoomData = this.roomData;
        this.roomData = stateData.room;
        this.players = stateData.players;
        this.localPlayerId = stateData.localPlayerId;
        this.isLeader = this.getPlayerById(this.localPlayerId).isLeader;
        if (this.isLeader) {
          this.roomData.region = ourRoomData.region;
          this.roomData.autoFill = ourRoomData.autoFill;
        }
        this.refreshUi();
        SDK.showInviteButton(stateData.room.roomUrl.replace("#", ""));
        break;
      }
      case "joinGame":
        this.joiningGame = true;
        this.joinGameCb(data);
        break;
      case "keepAlive":
        break;
      case "kicked":
        this.leave("kicked");
        break;
      case "error":
        this.leave(data.type);
    }
  }
  sendMessage(type, data) {
    if (this.ws) {
      if (this.ws.readyState === this.ws.OPEN) {
        const msg = JSON.stringify({
          type,
          data
        });
        this.ws.send(msg);
      } else {
        this.ws.close();
      }
    }
  }
  setRoomProperty(prop, val) {
    if (this.isLeader && this.roomData[prop] != val) {
      this.roomData[prop] = val;
      this.sendMessage("setRoomProps", this.roomData);
    }
  }
  tryStartGame() {
    if (this.isLeader && !this.roomData.findingGame) {
      const version = GameConfig.protocolVersion;
      let region = this.roomData.region;
      const paramRegion = helpers.getParameterByName("region");
      if (paramRegion !== void 0 && paramRegion.length > 0) {
        region = paramRegion;
      }
      let zones = this.pingTest.getZones(region);
      const paramZone = helpers.getParameterByName("zone");
      if (paramZone !== void 0 && paramZone.length > 0) {
        zones = [paramZone];
      }
      const matchArgs = {
        version,
        region,
        zones
      };
      helpers.verifyTurnstile(this.roomData.captchaEnabled, (token) => {
        matchArgs.turnstileToken = token;
        this.sendMessage("playGame", matchArgs);
      });
      this.roomData.findingGame = true;
      this.refreshUi();
    }
  }
  refreshUi() {
    const setButtonState = function(el, selected, enabled) {
      el.removeClass("btn-darken btn-disabled btn-opaque btn-hollow-selected");
      if (enabled) {
        el.addClass("btn-darken");
      } else {
        el.addClass("btn-disabled");
        if (!selected) {
          el.addClass("btn-opaque");
        }
      }
      if (selected) {
        el.addClass("btn-hollow-selected");
      }
      el.prop("disabled", !enabled);
    };
    $("#team-menu").css("display", this.active ? "block" : "none");
    $("#start-menu").css("display", this.active ? "none" : "block");
    $("#right-column").css("display", this.active ? "none" : "block");
    $("#social-share-block").css("display", this.active ? "none" : "block");
    const hasError = this.roomData.lastError != "";
    const errorTxt = errorTypeToString(this.roomData.lastError, this.localization);
    this.serverWarning.css("opacity", hasError ? 1 : 0);
    this.serverWarning.html(errorTxt);
    if (this.roomData.lastError == "find_game_invalid_protocol" && !this.displayedInvalidProtocolModal) {
      $("#modal-refresh").fadeIn(200);
      this.displayedInvalidProtocolModal = true;
    }
    if (this.roomData.lastError === "find_game_invalid_captcha") {
      this.siteInfo.info.captchaEnabled = true;
    }
    if (this.active) {
      $("#team-menu-joining-text").css("display", this.create ? "none" : "block");
      $("#team-menu-creating-text").css("display", this.create ? "block" : "none");
      $("#team-menu-connecting").css("display", this.joined ? "none" : "block");
      $("#team-menu-contents").css("display", this.joined ? "block" : "none");
      $("#btn-team-leave").css("display", this.joined ? "block" : "none");
    }
    if (this.joined) {
      const regionPops = this.siteInfo.info.pops || {};
      const regions = Object.keys(regionPops);
      for (let i2 = 0; i2 < regions.length; i2++) {
        const region = regions[i2];
        const count = regionPops[region].playerCount;
        const players = this.localization.translate("index-players");
        const sel = $("#team-server-opts").children(`option[value="${region}"]`);
        sel.html(`${sel.attr("data-label")} [${count} ${players}]`);
      }
      this.serverSelect.find("option").each((_idx, ele) => {
        ele.selected = ele.value == this.roomData.region;
      });
      setButtonState(
        this.queueMode1,
        this.roomData.gameModeIdx == 1,
        this.isLeader && this.roomData.enabledGameModeIdxs.includes(1)
      );
      setButtonState(
        this.queueMode2,
        this.roomData.gameModeIdx == 2,
        this.isLeader && this.roomData.enabledGameModeIdxs.includes(2)
      );
      setButtonState(this.fillAuto, this.roomData.autoFill, this.isLeader);
      setButtonState(this.fillNone, !this.roomData.autoFill, this.isLeader);
      this.serverSelect.prop("disabled", !this.isLeader);
      if (this.roomData.roomUrl) {
        const roomCode = this.roomData.roomUrl.substring(1);
        $("#team-code").text(roomCode);
        if (SDK.supportsInviteLink()) {
          SDK.getInviteLink(roomCode).then((sdkUrl) => {
            $("#team-url").text(sdkUrl);
          });
        } else {
          const roomUrl = new URL(window.location.href);
          roomUrl.search = "";
          roomUrl.hash = this.roomData.roomUrl;
          const url = new URL(window.location.href);
          url.search = "";
          url.hash = this.roomData.roomUrl;
          $("#team-url").text(url.toString());
          if (window.history) {
            window.history.replaceState("", "", this.roomData.roomUrl);
          }
        }
      }
      this.playBtn.html(
        this.roomData.findingGame || this.joiningGame ? '<div class="ui-spinner"></div>' : this.playBtn.attr("data-label")
      );
      const gameModeStyles = this.siteInfo.getGameModeStyles();
      for (let i2 = 0; i2 < gameModeStyles.length; i2++) {
        this.playBtn.removeClass(gameModeStyles[i2].buttonCss);
      }
      const style = gameModeStyles[this.roomData.gameModeIdx];
      if (style) {
        this.playBtn.addClass("btn-custom-mode-no-indent");
        this.playBtn.addClass(style.buttonCss);
        this.playBtn.css({
          "background-image": `url(${style.icon})`
        });
      } else {
        this.playBtn.css({
          "background-image": ""
        });
      }
      let playersInGame = false;
      for (let i2 = 0; i2 < this.players.length; i2++) {
        playersInGame = playersInGame || this.players[i2].inGame;
      }
      const waitReason = $("#msg-wait-reason");
      if (this.isLeader) {
        waitReason.html(
          `${this.localization.translate(
            "index-game-in-progress"
          )}<span> ...</span>`
        );
        const showWaitMessage = playersInGame && !this.joiningGame;
        waitReason.css("display", showWaitMessage ? "block" : "none");
        this.playBtn.css("display", showWaitMessage ? "none" : "block");
      } else {
        if (this.roomData.findingGame || this.joiningGame) {
          waitReason.html(
            `<div class="ui-spinner" style="margin-right:16px"></div>${this.localization.translate(
              "index-joining-game"
            )}<span> ...</span>`
          );
        } else if (playersInGame) {
          waitReason.html(
            `${this.localization.translate(
              "index-game-in-progress"
            )}<span> ...</span>`
          );
        } else {
          waitReason.html(
            `${this.localization.translate(
              "index-waiting-for-leader"
            )}<span> ...</span>`
          );
        }
        waitReason.css("display", "block");
        this.playBtn.css("display", "none");
      }
      const teamMembers = $("#team-menu-member-list");
      teamMembers.empty();
      for (let t = 0; t < this.roomData.maxPlayers; t++) {
        let playerStatus = {
          name: "",
          playerId: 0,
          isLeader: false,
          inGame: false,
          self: false
        };
        if (t < this.players.length) {
          const player = this.players[t];
          playerStatus = {
            name: player.name,
            playerId: player.playerId,
            isLeader: player.isLeader,
            inGame: player.inGame,
            self: player.playerId == this.localPlayerId
          };
        }
        const member = $("<div/>", {
          class: "team-menu-member"
        });
        let iconClass = "";
        if (playerStatus.isLeader) {
          iconClass = " icon-leader";
        } else if (this.isLeader && playerStatus.playerId != 0) {
          iconClass = " icon-kick";
        }
        member.append(
          $("<div/>", {
            class: `icon${iconClass}`,
            "data-playerid": playerStatus.playerId
          })
        );
        let n = null;
        let c = null;
        if (this.editingName && playerStatus.self) {
          n = $("<input/>", {
            type: "text",
            tabindex: 0,
            class: "name menu-option name-text name-self-input",
            maxLength: Constants.PlayerNameMaxLen
          });
          n.val(playerStatus.name);
          const m2 = () => {
            const name = helpers.sanitizeNameInput(n?.val());
            playerStatus.name = name;
            this.config.set("playerName", name);
            this.sendMessage("changeName", {
              name
            });
            this.editingName = false;
            this.refreshUi();
          };
          const h = () => {
            this.editingName = false;
            this.refreshUi();
          };
          n.keypress((e) => {
            if (e.which === 13) {
              m2();
              return false;
            }
          });
          n.on("blur", h);
          member.append(n);
          c = $("<div/>", {
            class: "icon icon-submit-name-change"
          });
          c.on("click", m2);
          c.on("mousedown", (e) => {
            e.preventDefault();
            e.stopPropagation();
          });
        } else {
          let nameClass = "name-text";
          if (playerStatus.self) {
            nameClass += " name-self";
          }
          if (playerStatus.inGame) {
            nameClass += " name-in-game";
          }
          const nameDiv = $("<div/>", {
            class: `name menu-option ${nameClass}`,
            html: helpers.htmlEscape(playerStatus.name)
          });
          if (playerStatus.self) {
            nameDiv.on("click", () => {
              this.editingName = true;
              this.refreshUi();
            });
          }
          member.append(nameDiv);
        }
        if (c) {
          member.append(c);
        } else {
          member.append(
            $("<div/>", {
              class: `icon ${playerStatus.inGame ? "icon-in-game" : ""}`
            })
          );
        }
        teamMembers.append(member);
        n?.focus();
      }
      $(".icon-kick", teamMembers).click((e) => {
        const playerId = Number($(e.currentTarget).attr("data-playerid"));
        this.sendMessage("kick", {
          playerId
        });
      });
      const localPlayer = this.players.find((player) => {
        return player.playerId == this.localPlayerId;
      });
      const playJoinSound = localPlayer && !localPlayer.inGame;
      if (!document.hasFocus() && this.prevPlayerCount < this.players.length && this.players.length > 1 && playJoinSound) {
        this.audioManager.playSound("notification_join_01", {
          channel: "ui"
        });
      }
      this.prevPlayerCount = this.players.length;
    }
  }
}
class Application {
  nameInput = $("#player-name-input-solo");
  serverSelect = $("#server-select-main");
  playMode0Btn = $("#btn-start-mode-0");
  playMode1Btn = $("#btn-start-mode-1");
  playMode2Btn = $("#btn-start-mode-2");
  muteBtns = $(".btn-sound-toggle");
  aimLineBtn = $("#btn-game-aim-line");
  masterSliders = $(".sl-master-volume");
  soundSliders = $(".sl-sound-volume");
  musicSliders = $(".sl-music-volume");
  serverWarning = $("#server-warning");
  languageSelect = $(".language-select");
  startMenuWrapper = $("#start-menu-wrapper");
  gameAreaWrapper = $("#game-area-wrapper");
  playButtons = $(".play-button-container");
  playLoading = $(".play-loading-outer");
  errorModal = new MenuModal($("#modal-notification"));
  refreshModal = new MenuModal($("#modal-refresh"));
  ipBanModal = new MenuModal($("#modal-ip-banned"));
  config = new ConfigManager();
  localization = new Localization();
  account;
  loadoutMenu;
  pass;
  profileUi;
  pingTest = new PingTest();
  audioManager = new AudioManager();
  ambience = new Ambiance();
  siteInfo;
  teamMenu;
  pixi = null;
  resourceManager = null;
  input = null;
  inputBinds = null;
  inputBindUi = null;
  game = null;
  loadoutDisplay = null;
  domContentLoaded = false;
  configLoaded = false;
  initialized = false;
  active = false;
  sessionId = helpers.random64();
  contextListener = function(e) {
    e.preventDefault();
  };
  errorMessage = "";
  quickPlayPendingModeIdx = -1;
  findGameAttempts = 0;
  findGameTime = 0;
  pauseTime = 0;
  wasPlayingVideo = false;
  checkedPingTest = false;
  hasFocus = true;
  newsDisplayed = true;
  constructor() {
    this.account = new Account(this.config);
    this.loadoutMenu = new LoadoutMenu(this.account, this.localization);
    this.pass = new Pass(this.account, this.loadoutMenu, this.localization);
    this.profileUi = new ProfileUi(
      this.account,
      this.localization,
      this.loadoutMenu,
      this.errorModal
    );
    this.siteInfo = new SiteInfo(this.config, this.localization);
    this.teamMenu = new TeamMenu(
      this.config,
      this.pingTest,
      this.siteInfo,
      this.localization,
      this.audioManager,
      this.onTeamMenuJoinGame.bind(this),
      this.onTeamMenuLeave.bind(this)
    );
    const onLoadComplete = () => {
      this.config.load(() => {
        this.configLoaded = true;
        this.tryLoad();
      });
    };
    this.loadBrowserDeps(onLoadComplete);
  }
  async loadBrowserDeps(onLoadCompleteCb) {
    await SDK.init();
    onLoadCompleteCb();
  }
  tryLoad() {
    if (this.domContentLoaded && this.configLoaded && !this.initialized) {
      this.initialized = true;
      if (device.mobile) {
        Menu.applyMobileBrowserStyling(device.tablet);
      }
      const language = this.config.get("language") || this.localization.detectLocale();
      this.config.set("language", language);
      this.localization.setLocale(language);
      this.localization.populateLanguageSelect();
      this.startPingTest();
      this.siteInfo.load();
      this.localization.localizeIndex();
      this.account.init();
      this.nameInput.maxLength = Constants.PlayerNameMaxLen;
      this.playMode0Btn.on("click", () => {
        SDK.requestMidGameAd(() => {
          this.tryQuickStartGame(0);
        });
      });
      this.playMode1Btn.on("click", () => {
        SDK.requestMidGameAd(() => {
          this.tryQuickStartGame(1);
        });
      });
      this.playMode2Btn.on("click", () => {
        SDK.requestMidGameAd(() => {
          this.tryQuickStartGame(2);
        });
      });
      this.serverSelect.change(() => {
        const t = this.serverSelect.find(":selected").val();
        this.config.set("region", t);
      });
      this.nameInput.on("blur", (_t) => {
        this.setConfigFromDOM();
      });
      this.muteBtns.on("click", (_t) => {
        this.config.set("muteAudio", !this.config.get("muteAudio"));
      });
      this.muteBtns.on("mousedown", (e) => {
        e.stopPropagation();
      });
      $(this.masterSliders).on("mousedown", (e) => {
        e.stopPropagation();
      });
      $(this.soundSliders).on("mousedown", (e) => {
        e.stopPropagation();
      });
      $(this.musicSliders).on("mousedown", (e) => {
        e.stopPropagation();
      });
      this.masterSliders.on("input", (t) => {
        const r2 = Number($(t.target).val()) / 100;
        this.audioManager.setMasterVolume(r2);
        this.config.set("masterVolume", r2);
      });
      this.soundSliders.on("input", (t) => {
        const r2 = Number($(t.target).val()) / 100;
        this.audioManager.setSoundVolume(r2);
        this.config.set("soundVolume", r2);
      });
      this.musicSliders.on("input", (t) => {
        const r2 = Number($(t.target).val()) / 100;
        this.audioManager.setMusicVolume(r2);
        this.config.set("musicVolume", r2);
      });
      $(".modal-settings-item").children("input").each((_t, r2) => {
        const a2 = $(r2);
        a2.prop("checked", this.config.get(a2.prop("id")));
      });
      $(".modal-settings-item > input:checkbox").change((t) => {
        const r2 = $(t.target);
        this.config.set(r2.prop("id"), r2.is(":checked"));
      });
      $(".btn-fullscreen-toggle").on("click", () => {
        helpers.toggleFullScreen();
      });
      this.languageSelect.on("change", (t) => {
        const r2 = t.target.value;
        if (r2) {
          this.config.set("language", r2);
        }
      });
      $("#btn-create-team").on("click", () => {
        this.tryJoinTeam(true);
      });
      $("#btn-team-mobile-link-join").on("click", () => {
        let t = $("#team-link-input").val()?.trim();
        const r2 = t.indexOf("#");
        if (r2 >= 0) {
          t = t.slice(r2 + 1);
        }
        if (t.length > 0) {
          $("#team-mobile-link").css("display", "none");
          this.tryJoinTeam(false, t);
        } else {
          $("#team-mobile-link-desc").css("display", "none");
          $("#team-mobile-link-warning").css("display", "none").fadeIn(100);
        }
      });
      $("#btn-team-leave").on("click", () => {
        if (window.history) {
          window.history.replaceState("", "", "/");
        }
        $("#news-block").css("display", "block");
        this.game?.free();
        this.teamMenu.leave();
      });
      const r = $("#news-current").data("date");
      const a = new Date(r).getTime();
      $(".right-column-toggle").on("click", () => {
        if (this.newsDisplayed) {
          $("#news-wrapper").fadeOut(250);
          $("#pass-wrapper").fadeIn(250);
        } else {
          this.config.set("lastNewsTimestamp", a);
          $(".news-toggle").find(".account-alert").css("display", "none");
          $("#news-wrapper").fadeIn(250);
          $("#pass-wrapper").fadeOut(250);
        }
        this.newsDisplayed = !this.newsDisplayed;
      });
      const i2 = this.config.get("lastNewsTimestamp");
      if (a > i2) {
        $(".news-toggle").find(".account-alert").css("display", "block");
      }
      this.setDOMFromConfig();
      this.setAppActive(true);
      const domCanvas = document.querySelector("#cvs");
      const rendererRes = window.devicePixelRatio > 1 ? 2 : 1;
      if (device.os == "ios") {
        settings.PRECISION_FRAGMENT = PRECISION.HIGH;
      }
      const createPixiApplication = (forceCanvas) => {
        return new Application$1({
          width: window.innerWidth,
          height: window.innerHeight,
          view: domCanvas,
          antialias: false,
          resolution: rendererRes,
          hello: true,
          forceCanvas
        });
      };
      let pixi = null;
      try {
        pixi = createPixiApplication(false);
      } catch (_e) {
        pixi = createPixiApplication(true);
      }
      this.pixi = pixi;
      this.pixi.renderer.events.destroy();
      this.pixi.ticker.add(this.update, this);
      this.pixi.renderer.background.color = 7378501;
      this.resourceManager = new ResourceManager(
        this.pixi.renderer,
        this.audioManager,
        this.config
      );
      this.resourceManager.loadMapAssets("main");
      this.input = new InputHandler(document.getElementById("game-touch-area"));
      this.inputBinds = new InputBinds(this.input, this.config);
      this.inputBindUi = new InputBindUi(this.input, this.inputBinds);
      const onJoin = () => {
        this.loadoutDisplay.free();
        this.game.init();
        this.onResize();
        this.findGameAttempts = 0;
        this.ambience.onGameStart();
      };
      const onQuit = (errMsg) => {
        if (this.game.m_updatePass) {
          this.pass.scheduleUpdatePass(this.game.m_updatePassDelay);
        }
        this.game.free();
        this.errorMessage = this.localization.translate(errMsg || "");
        this.teamMenu.onGameComplete();
        this.ambience.onGameComplete(this.audioManager);
        this.setAppActive(true);
        this.setPlayLockout(false);
        if (errMsg == "index-invalid-protocol") {
          this.showInvalidProtocolModal();
        }
        if (errMsg == "rate_limited") {
          this.onJoinGameError(errMsg);
        }
        if (errMsg) {
          this.showErrorModal(errMsg);
        }
        console.error("Quitting", errMsg);
        SDK.gamePlayStop();
      };
      this.game = new Game(
        this.pixi,
        this.audioManager,
        this.localization,
        this.config,
        this.input,
        this.inputBinds,
        this.inputBindUi,
        this.ambience,
        this.resourceManager,
        onJoin,
        onQuit
      );
      this.loadoutDisplay = new LoadoutDisplay(
        this.pixi,
        this.audioManager,
        this.config,
        this.inputBinds,
        this.account
      );
      this.loadoutMenu.loadoutDisplay = this.loadoutDisplay;
      this.onResize();
      this.tryJoinTeam(false);
      Menu.setupModals(this.inputBinds, this.inputBindUi);
      this.onConfigModified();
      this.config.addModifiedListener(this.onConfigModified.bind(this));
      loadStaticDomImages();
      SDK.gameLoadComplete();
    }
  }
  onUnload() {
    this.teamMenu.leave();
  }
  onResize() {
    device.onResize();
    Menu.onResize();
    this.loadoutMenu.onResize();
    this.pixi?.renderer.resize(device.screenWidth, device.screenHeight);
    if (this.game?.initialized) {
      this.game.resize();
    }
    if (this.loadoutDisplay?.initialized) {
      this.loadoutDisplay.resize();
    }
    this.refreshUi();
  }
  startPingTest() {
    const regions = this.config.get("regionSelected") ? [this.config.get("region")] : this.pingTest.getRegionList();
    this.pingTest.start(regions);
  }
  setAppActive(active) {
    this.active = active;
    this.quickPlayPendingModeIdx = -1;
    this.refreshUi();
    if (active) {
      this.errorModal.hide();
    }
  }
  setPlayLockout(lock) {
    const delay = lock ? 0 : 1e3;
    this.playButtons.stop().delay(delay).animate(
      {
        opacity: lock ? 0.5 : 1
      },
      250
    );
    this.playLoading.stop().delay(delay).animate(
      {
        opacity: lock ? 1 : 0
      },
      {
        duration: 250,
        start: () => {
          this.playLoading.css({
            "pointer-events": lock ? "initial" : "none"
          });
        }
      }
    );
  }
  onTeamMenuJoinGame(data) {
    this.waitOnAccount(() => {
      this.joinGame(data);
    });
  }
  onTeamMenuLeave(errTxt = "") {
    if (errTxt && errTxt != "" && window.history) {
      window.history.replaceState("", "", "/");
    }
    this.showErrorModal(errTxt);
    this.errorMessage = errTxt;
    this.setDOMFromConfig();
    this.refreshUi();
  }
  // Config
  setConfigFromDOM() {
    const playerName = helpers.sanitizeNameInput(this.nameInput.val());
    this.config.set("playerName", playerName);
    const region = this.serverSelect.find(":selected").val();
    this.config.set("region", region);
  }
  setDOMFromConfig() {
    if (SDK.isAnySDK && !this.config.get("playerName")) {
      SDK.getPlayerName().then((username) => {
        if (!username) return;
        this.config.set("playerName", username);
        this.nameInput.val(username);
      });
    }
    this.nameInput.val(this.config.get("playerName"));
    this.serverSelect.find("option").each((_i, ele) => {
      ele.selected = ele.value == this.config.get("region");
    });
    this.languageSelect.val(this.config.get("language"));
  }
  onConfigModified(key) {
    const muteAudio = this.config.get("muteAudio");
    if (muteAudio != this.audioManager.mute) {
      this.muteBtns.removeClass(muteAudio ? "audio-on-icon" : "audio-off-icon");
      this.muteBtns.addClass(muteAudio ? "audio-off-icon" : "audio-on-icon");
      this.audioManager.setMute(muteAudio);
    }
    const masterVolume = this.config.get("masterVolume");
    this.masterSliders.val(masterVolume * 100);
    this.audioManager.setMasterVolume(masterVolume);
    const soundVolume = this.config.get("soundVolume");
    this.soundSliders.val(soundVolume * 100);
    this.audioManager.setSoundVolume(soundVolume);
    const musicVolume = this.config.get("musicVolume");
    this.musicSliders.val(musicVolume * 100);
    this.audioManager.setMusicVolume(musicVolume);
    if (key == "language") {
      const language = this.config.get("language");
      this.localization.setLocale(language);
    }
    if (key == "region") {
      this.config.set("regionSelected", true);
      this.startPingTest();
    }
    if (key == "highResTex") {
      location.reload();
    }
  }
  refreshUi() {
    this.startMenuWrapper.css("display", this.active ? "flex" : "none");
    this.gameAreaWrapper.css({
      display: this.active ? "none" : "block",
      opacity: this.active ? 0 : 1
    });
    if (this.active) {
      $("body").removeClass("user-select-none");
      document.removeEventListener("contextmenu", this.contextListener);
    } else {
      $("body").addClass("user-select-none");
      $("#start-main").stop(true);
      document.addEventListener("contextmenu", this.contextListener);
    }
    $("#ad-block-left").css(
      "display",
      !device.isLandscape && this.teamMenu.active ? "none" : "block"
    );
    const hasError = this.active && this.errorMessage != "";
    this.serverWarning.css({
      display: "block",
      opacity: hasError ? 1 : 0
    });
    this.serverWarning.html(this.errorMessage);
    const updateButton = (ele, gameModeIdx) => {
      ele.html(
        this.quickPlayPendingModeIdx === gameModeIdx ? '<div class="ui-spinner"></div>' : this.localization.translate(ele.data("l10n"))
      );
    };
    updateButton(this.playMode0Btn, 0);
    updateButton(this.playMode1Btn, 1);
    updateButton(this.playMode2Btn, 2);
  }
  waitOnAccount(cb) {
    if (this.account.requestsInFlight == 0) {
      cb();
    } else {
      const timeout = setTimeout(() => {
        runOnce();
        errorLogManager.storeGeneric("account", "wait_timeout");
      }, 2500);
      const runOnce = () => {
        cb();
        clearTimeout(timeout);
        this.account.removeEventListener("requestsComplete", runOnce);
      };
      this.account.addEventListener("requestsComplete", runOnce);
    }
  }
  tryJoinTeam(create, url) {
    if (this.active && this.quickPlayPendingModeIdx === -1) {
      let roomUrl = url || window.location.hash.slice(1);
      const sdkRoom = SDK.getRoomInviteParam();
      if (sdkRoom) {
        roomUrl = sdkRoom;
        create = false;
      }
      if (create || roomUrl != "") {
        this.setConfigFromDOM();
        this.teamMenu.connect(create, roomUrl);
        this.refreshUi();
      }
    }
  }
  tryQuickStartGame(gameModeIdx) {
    if (this.quickPlayPendingModeIdx === -1) {
      this.errorMessage = "";
      this.quickPlayPendingModeIdx = gameModeIdx;
      this.setConfigFromDOM();
      this.refreshUi();
      let delay = 0;
      if (this.findGameAttempts > 0 && Date.now() - this.findGameTime < 3e4) {
        delay = Math.min(this.findGameAttempts * 2.5 * 1e3, 7500);
      } else {
        this.findGameAttempts = 0;
      }
      this.findGameTime = Date.now();
      this.findGameAttempts++;
      const version = GameConfig.protocolVersion;
      let region = this.config.get("region");
      const paramRegion = helpers.getParameterByName("region");
      if (paramRegion !== void 0 && paramRegion.length > 0) {
        region = paramRegion;
      }
      let zones = this.pingTest.getZones(region);
      const paramZone = helpers.getParameterByName("zone");
      if (paramZone !== void 0 && paramZone.length > 0) {
        zones = [paramZone];
      }
      const matchArgs = {
        version,
        region,
        zones,
        playerCount: 1,
        autoFill: true,
        gameModeIdx
      };
      const tryQuickStartGameImpl = () => {
        this.waitOnAccount(() => {
          this.findGame(matchArgs, (err, matchData, ban) => {
            if (err) {
              this.onJoinGameError(err);
              return;
            }
            if (ban) {
              this.showIpBanModal(ban);
              return;
            }
            this.joinGame(matchData);
          });
        });
      };
      if (delay == 0) {
        tryQuickStartGameImpl();
      } else {
        setTimeout(() => {
          tryQuickStartGameImpl();
        }, delay);
      }
    }
  }
  findGame(matchArgs, cb) {
    const findGameImpl = (iter, maxAttempts, token) => {
      if (iter >= maxAttempts) {
        cb("full");
        return;
      }
      const retry = () => {
        setTimeout(() => {
          helpers.verifyTurnstile(
            this.siteInfo.info.captchaEnabled && !this.account.loggedIn,
            (token2) => {
              findGameImpl(iter + 1, maxAttempts, token2);
            }
          );
        }, 500);
      };
      matchArgs.turnstileToken = token;
      $.ajax({
        type: "POST",
        url: api.resolveUrl("/api/find_game"),
        data: JSON.stringify(matchArgs),
        contentType: "application/json; charset=utf-8",
        timeout: 10 * 1e3,
        xhrFields: {
          withCredentials: proxy.anyLoginSupported()
        },
        success: (data) => {
          if (data.error === "invalid_captcha") {
            this.siteInfo.info.captchaEnabled = true;
            retry();
            return;
          }
          if (data.error && data.error != "full") {
            cb(data.error);
            return;
          }
          if (data.banned) {
            cb(null, void 0, data);
            return;
          }
          const matchData = data.res ? data.res[0] : null;
          if (matchData?.hosts && matchData.addrs) {
            cb(null, matchData);
          } else {
            retry();
          }
        },
        error: function(_e) {
          retry();
        }
      });
    };
    helpers.verifyTurnstile(
      this.siteInfo.info.captchaEnabled && !this.account.loggedIn,
      (token) => {
        findGameImpl(0, 2, token);
      }
    );
  }
  joinGame(matchData) {
    if (!this.game) {
      setTimeout(() => {
        this.joinGame(matchData);
      }, 250);
      return;
    }
    const hosts = matchData.hosts || [];
    const urls = [];
    for (let i2 = 0; i2 < hosts.length; i2++) {
      urls.push(
        `ws${matchData.useHttps ? "s" : ""}://${hosts[i2]}/play?gameId=${matchData.gameId}`
      );
    }
    const joinGameImpl = (urls2, matchData2) => {
      const url = urls2.shift();
      if (!url) {
        this.onJoinGameError("join_game_failed");
        return;
      }
      const onFailure = function() {
        joinGameImpl(urls2, matchData2);
      };
      this.game.tryJoinGame(
        url,
        matchData2.data,
        this.account.loadoutPriv,
        this.account.questPriv,
        onFailure
      );
    };
    joinGameImpl(urls, matchData);
  }
  onJoinGameError(err) {
    const errMap = {
      full: this.localization.translate("index-failed-finding-game"),
      invalid_protocol: this.localization.translate("index-invalid-protocol"),
      invalid_captcha: this.localization.translate("index-invalid-captcha"),
      join_game_failed: this.localization.translate("index-failed-joining-game"),
      rate_limited: this.localization.translate("index-rate-limited")
    };
    if (err == "invalid_protocol") {
      this.showInvalidProtocolModal();
    }
    if (err === "invalid_captcha") {
      this.siteInfo.info.captchaEnabled = true;
    }
    this.showErrorModal(err);
    this.errorMessage = errMap[err] || errMap.full;
    this.quickPlayPendingModeIdx = -1;
    this.teamMenu.leave("join_game_failed");
    this.refreshUi();
  }
  showInvalidProtocolModal() {
    this.refreshModal.show(true);
  }
  showIpBanModal(ban) {
    $("#modal-ip-banned-reason").text(`Reason: ${ban.reason}`);
    let expiration = "Duration: indefinite";
    if (!ban.permanent) {
      const expiresIn = new Date(ban.expiresIn);
      const timeLeft = expiresIn.getTime() - Date.now();
      const daysLeft = Math.round(timeLeft / (1e3 * 60 * 60 * 24));
      const hoursLeft = Math.round(timeLeft / (1e3 * 60 * 60));
      if (daysLeft > 1) {
        expiration = `Expires in: ${daysLeft} days`;
      } else if (hoursLeft > 1) {
        expiration = `Expires in: ${hoursLeft} hours`;
      } else {
        expiration = `Expires in: less than an hour`;
      }
    }
    $("#modal-ip-banned-expiration").text(expiration);
    this.ipBanModal.show(true);
    this.quickPlayPendingModeIdx = -1;
    this.teamMenu.leave("banned");
    this.refreshUi();
  }
  showErrorModal(err) {
    const typeText = {
      // TODO: translate those?
      behind_proxy: this.localization.translate("index-behind-proxy"),
      ip_banned: this.localization.translate("index-ip-banned")
    };
    const text = typeText[err];
    if (text) {
      this.errorModal.selector.find(".modal-body-text").html(text);
      this.errorModal.show();
    }
  }
  update() {
    const dt = math.clamp(this.pixi.ticker.elapsedMS / 1e3, 1e-3, 1 / 8);
    this.pingTest.update(dt);
    if (!this.checkedPingTest && this.pingTest.isComplete()) {
      if (!this.config.get("regionSelected")) {
        const region = this.pingTest.getRegion();
        if (region) {
          this.config.set("region", region);
          this.setDOMFromConfig();
        }
      }
      this.checkedPingTest = true;
    }
    this.resourceManager.update(dt);
    this.audioManager.update(dt);
    this.ambience.update(dt, this.audioManager, !this.active);
    if (this.game?.initialized && this.game.m_playing) {
      if (this.active) {
        this.setAppActive(false);
        this.setPlayLockout(true);
      }
      this.game.update(dt);
    }
    if (this.active && this.loadoutDisplay && this.game && !this.game.initialized) {
      if (this.loadoutMenu.active) {
        if (!this.loadoutDisplay.initialized) {
          this.loadoutDisplay.init();
        }
        this.loadoutDisplay.show();
        this.loadoutDisplay.update(dt, this.hasFocus);
      } else {
        this.loadoutDisplay.hide();
      }
    }
    if (!this.active && this.loadoutMenu.active) {
      this.loadoutMenu.hide();
    }
    if (this.active) {
      this.pass?.update(dt);
    }
    this.input.flush();
  }
}
const App = new Application();
function onPageLoad() {
  App.domContentLoaded = true;
  App.tryLoad();
}
document.addEventListener("DOMContentLoaded", onPageLoad);
window.addEventListener("load", onPageLoad);
window.addEventListener("unload", (_e) => {
  App.onUnload();
});
if (window.location.hash == "#_=_") {
  window.location.hash = "";
  history.pushState("", document.title, window.location.pathname);
}
window.addEventListener("resize", () => {
  App.onResize();
});
window.addEventListener("orientationchange", () => {
  App.onResize();
});
window.addEventListener("hashchange", () => {
  App.tryJoinTeam(false);
});
window.addEventListener("beforeunload", (e) => {
  if (App.game?.warnPageReload()) {
    const dialogText = "Do you want to reload the game?";
    e.returnValue = dialogText;
    return dialogText;
  }
});
window.addEventListener("onfocus", () => {
  App.hasFocus = true;
});
window.addEventListener("onblur", () => {
  App.hasFocus = false;
});
const reportedErrors = [];
window.onerror = function(msg, url, lineNo, columnNo, error) {
  msg = msg || "undefined_error_msg";
  const stacktrace = error ? error.stack : "";
  if (!url && !lineNo && !columnNo) return;
  const errObj = {
    msg,
    id: App.sessionId,
    url,
    line: lineNo,
    column: columnNo,
    stacktrace,
    browser: navigator.userAgent,
    protocol: GameConfig.protocolVersion,
    clientGitVersion: "7511a4cbcb6e577f212cb69a8f320e906382ddc6",
    serverGitVersion: App.siteInfo.info.gitRevision
  };
  const errStr = JSON.stringify(errObj);
  if (!reportedErrors.includes(errStr)) {
    reportedErrors.push(errStr);
    errorLogManager.logWindowOnError(errObj);
  }
};
navigator.serviceWorker?.getRegistrations().then((registrations) => {
  for (const registration of registrations) {
    registration.unregister();
  }
});
